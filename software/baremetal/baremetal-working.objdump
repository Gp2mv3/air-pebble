
baremetal-working.elf:     file format elf32-littlenios2
baremetal-working.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000194

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x01000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x
    LOAD off    0x00002194 vaddr 0x01000194 paddr 0x01000194 align 2**12
         filesz 0x000129e4 memsz 0x000129e4 flags r-x
    LOAD off    0x00014b78 vaddr 0x01012b78 paddr 0x01014790 align 2**12
         filesz 0x00001c18 memsz 0x00001c18 flags rw-
    LOAD off    0x000173a8 vaddr 0x010163a8 paddr 0x010163a8 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  01000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000122c0  01000194  01000194  00002194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000724  01012454  01012454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c18  01012b78  01014790  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  010163a8  010163a8  000173a8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000001b4  000001b4  00016790  2**0
                  CONTENTS
  7 .new_sdram_controller_0 00000000  01016504  01016504  00016790  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00016790  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001088  00000000  00000000  000167c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004ec11  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000fcd2  00000000  00000000  00066459  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001a98d  00000000  00000000  0007612b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000291c  00000000  00000000  00090ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047d6  00000000  00000000  000933d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d9ab  00000000  00000000  00097baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000b5558  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001d98  00000000  00000000  000b5598  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000bb062  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000bb065  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000bb071  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000bb072  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000bb073  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000bb077  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000bb07b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000bb07f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000bb08a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000bb095  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000007  00000000  00000000  000bb0a0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002d  00000000  00000000  000bb0a7  2**0
                  CONTENTS, READONLY
 30 .jdi          00006058  00000000  00000000  000bb0d4  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00056bd3  00000000  00000000  000c112c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
01000194 l    d  .text	00000000 .text
01012454 l    d  .rodata	00000000 .rodata
01012b78 l    d  .rwdata	00000000 .rwdata
010163a8 l    d  .bss	00000000 .bss
000001b4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
01016504 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../baremetal_bsp//obj/HAL/src/crt0.o
010001cc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 accelerometer.c
00000000 l    df *ABS*	00000000 cos2.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 sleep.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100313c l     F .text	000000c0 __sbprintf
0101254c l     O .rodata	00000010 blanks.5176
0101253c l     O .rodata	00000010 zeroes.5177
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01003358 l     F .text	00000220 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01004f78 l     F .text	00000008 __fp_lock
01004f8c l     F .text	00000168 __sinit.part.0
010050f4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01012b78 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
01012600 l     O .rodata	0000000c p05.3991
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
010082ec l     F .text	000000f4 __sprint_r.part.0
01009728 l     F .text	000000c0 __sbprintf
01012734 l     O .rodata	00000010 blanks.5153
01012724 l     O .rodata	00000010 zeroes.5154
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 signal.c
0100a30c l     F .text	0000004c _init_signal_r.part.0
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0100da60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100db78 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100dbdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0100dcf4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0100dde0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100df48 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100e034 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100e204 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01014778 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0100e61c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100e75c l     F .text	00000034 alt_dev_reg
010136b8 l     O .rwdata	00000038 i2c_0
010136f0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_i2c.c
0100e840 l     F .text	00000110 optional_irq_callback
0100e9a0 l     F .text	000000a0 alt_avalon_i2c_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01010690 l     F .text	0000020c altera_avalon_jtag_uart_irq
0101089c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010110dc l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01011488 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010118b4 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01011a04 l     F .text	0000003c alt_get_errno
01011a40 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 putc.c
01012170 g     F .text	00000018 putchar
01007ab4 g     F .text	00000070 _mprec_log10
01007b90 g     F .text	00000060 __any_on
01009da0 g     F .text	00000058 _isatty_r
0101260c g     O .rodata	00000028 __mprec_tinytens
0100e150 g     F .text	0000006c alt_main
01000ec0 g     F .text	000000cc _puts_r
01016404 g     O .bss	00000100 alt_irq
01000708 g     F .text	00000060 printRegister
01009e90 g     F .text	00000064 _lseek_r
01014790 g       *ABS*	00000000 __flash_rwdata_start
0100c4b0 g     F .text	00000080 .hidden __eqdf2
01016504 g       *ABS*	00000000 __alt_heap_start
0100a5c0 g     F .text	00000060 _kill_r
01000e88 g     F .text	00000038 printf
0100a1c4 g     F .text	0000006c _wcrtomb_r
0100a36c g     F .text	00000084 _signal_r
01008288 g     F .text	0000005c __sseek
01005284 g     F .text	00000010 __sinit
0100a064 g     F .text	00000148 __swbuf_r
01009df8 g     F .text	00000074 _setlocale_r
010050fc g     F .text	00000078 __sfmoreglue
0100f0a0 g     F .text	000000a8 alt_avalon_i2c_rx_read
0100e1e0 g     F .text	00000024 __malloc_unlock
010102c8 g     F .text	00000044 alt_avalon_i2c_enabled_ints_get
0100ee20 g     F .text	00000094 alt_avalon_i2c_master_config_speed_get
0100689c g     F .text	0000012c memmove
01005270 g     F .text	00000014 _cleanup
0100fb10 g     F .text	0000020c alt_avalon_i2c_master_transmit_using_interrupts
01006ab8 g     F .text	000000a4 _Balloc
0100c530 g     F .text	000000f0 .hidden __gtdf2
01011ed8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
01005cf0 g     F .text	00000008 __localeconv_l
01000000 g       *ABS*	00000000 __flash_exceptions_start
01009d40 g     F .text	00000060 _fstat_r
010163bc g     O .bss	00000004 errno
01008200 g     F .text	00000008 __seofread
010163c8 g     O .bss	00000004 alt_argv
0101c750 g       *ABS*	00000000 _gp
0101030c g     F .text	0000004c alt_avalon_i2c_rx_fifo_threshold_get
0100dcd4 g     F .text	00000020 getpid
0100efb0 g     F .text	00000044 alt_avalon_i2c_is_busy
01013538 g     O .rwdata	00000180 alt_fd_list
01012168 g     F .text	00000008 _putchar_r
0100ed54 g     F .text	000000cc alt_avalon_i2c_master_config_set
0101156c g     F .text	00000090 alt_find_dev
0100679c g     F .text	00000100 memcpy
01004f80 g     F .text	0000000c _cleanup_r
0100d8c0 g     F .text	000000bc .hidden __floatsidf
01011988 g     F .text	0000007c alt_io_redirect
0100c620 g     F .text	000000f0 .hidden __ltdf2
0100f950 g     F .text	000001c0 alt_avalon_i2c_master_transmit
01000b60 g     F .text	00000068 blinkOnLeds
01000f8c g     F .text	00000010 puts
01007a10 g     F .text	000000a4 __ratio
0100970c g     F .text	0000001c __vfiprintf_internal
01010a98 g     F .text	00000220 altera_avalon_jtag_uart_read
01000e58 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01000d70 g     F .text	00000064 .hidden __udivsi3
0100dd30 g     F .text	000000b0 isatty
0100a3f0 g     F .text	000000c4 _raise_r
010098a4 g     F .text	00000064 __assert_func
0101265c g     O .rodata	000000c8 __mprec_tens
0100ebc0 g     F .text	00000098 alt_avalon_i2c_enable
010163b8 g     O .bss	00000004 __malloc_top_pad
0100a620 g     F .text	00000004 _getpid_r
010101f4 g     F .text	0000006c alt_avalon_i2c_int_disable
01005cf8 g     F .text	0000000c _localeconv_r
01006f28 g     F .text	00000054 __i2b
010056e4 g     F .text	000004cc __sfvwrite_r
0100a4b4 g     F .text	000000b8 __sigtramp_r
01008154 g     F .text	00000058 _sbrk_r
01009f44 g     F .text	00000064 _read_r
01014770 g     O .rwdata	00000004 alt_max_fd
010099e0 g     F .text	000000f8 _fclose_r
01004f50 g     F .text	00000028 fflush
010163b4 g     O .bss	00000004 __malloc_max_sbrked_mem
0100fd1c g     F .text	00000210 alt_avalon_i2c_master_receive
0100b204 g     F .text	00000978 .hidden __adddf3
010077a8 g     F .text	00000104 __b2d
0100ac40 g     F .text	000005c4 .hidden __umoddi3
0100e070 g     F .text	000000e0 lseek
0100032c g     F .text	00000048 accel_to_int
01010260 g     F .text	00000068 alt_avalon_i2c_int_enable
01014750 g     O .rwdata	00000004 _global_impure_ptr
01007bf0 g     F .text	00000564 _realloc_r
01016504 g       *ABS*	00000000 __bss_end
010117cc g     F .text	000000e8 alt_iic_isr_register
0100e514 g     F .text	00000108 alt_tick
0100a624 g     F .text	0000061c .hidden __udivdi3
0101011c g     F .text	00000058 alt_avalon_i2c_int_status_get
01009ca4 g     F .text	00000024 _fputwc_r
01012634 g     O .rodata	00000028 __mprec_bigtens
01006cdc g     F .text	00000138 __s2b
0100a2f4 g     F .text	00000018 abort
0100d97c g     F .text	00000090 .hidden __floatunsidf
010074c8 g     F .text	00000058 __mcmp
010052a4 g     F .text	00000014 __fp_lock_all
01011780 g     F .text	0000004c alt_ic_irq_enabled
0100e470 g     F .text	000000a4 alt_alarm_stop
0100ea40 g     F .text	00000054 alt_avalon_i2c_register_callback
010163d8 g     O .bss	00000004 alt_irq_active
0100ea94 g     F .text	000000ec alt_avalon_i2c_init
000000ec g     F .exceptions	000000c8 alt_irq_handler
01013510 g     O .rwdata	00000028 alt_dev_null
01011468 g     F .text	00000020 alt_dcache_flush_all
01006e14 g     F .text	00000064 __hi0bits
0100d840 g     F .text	00000080 .hidden __fixdfsi
01014790 g       *ABS*	00000000 __ram_rwdata_end
01000bc8 g     F .text	00000034 clearLeds
01014768 g     O .rwdata	00000008 alt_dev_list
0100e658 g     F .text	00000104 write
010122a8 g     F .text	000000cc _putc_r
0100f3dc g     F .text	0000004c alt_avalon_i2c_check_arblost
010101b8 g     F .text	0000003c alt_avalon_i2c_int_clear
01012b78 g       *ABS*	00000000 __ram_rodata_end
0100dc18 g     F .text	000000bc fstat
010163ac g     O .bss	00000004 last_sleep_tick
0100de1c g     F .text	0000012c kill
0100c620 g     F .text	000000f0 .hidden __ledf2
010005cc g     F .text	0000013c initCO2
01014784 g     O .rwdata	00000008 alt_avalon_i2c_list
010002b0 g     F .text	0000007c read_from_accel
01007228 g     F .text	00000118 __pow5mult
010083f8 g     F .text	00001314 ___vfiprintf_internal_r
01000dd4 g     F .text	0000005c .hidden __umodsi3
01016504 g       *ABS*	00000000 end
010105d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100eb80 g     F .text	00000040 alt_avalon_i2c_open
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100f564 g     F .text	000000e8 alt_avalon_i2c_master_tx
01011158 g     F .text	00000084 alt_avalon_timer_sc_init
0100da0c g     F .text	00000054 .hidden __clzsi2
01010cb8 g     F .text	00000228 altera_avalon_jtag_uart_write
01005294 g     F .text	00000004 __sfp_lock_acquire
010066c8 g     F .text	000000d4 memchr
01001034 g     F .text	000020ec ___vfprintf_internal_r
010053e8 g     F .text	000002fc _free_r
01011c7c g     F .text	0000022c alt_printf
01012898 g     O .rodata	00000180 _ctype_b
01009e6c g     F .text	0000000c __locale_mb_cur_max
01012188 g     F .text	00000120 __call_exitprocs
0100e950 g     F .text	00000050 alt_avalon_i2c_register_optional_irq_handler
01014758 g     O .rwdata	00000004 __malloc_sbrk_base
01000194 g     F .text	0000003c _start
010163d0 g     O .bss	00000004 _alt_tick_rate
0100ff2c g     F .text	000001f0 alt_avalon_i2c_master_receive_using_interrupts
01010358 g     F .text	00000064 alt_avalon_i2c_rx_fifo_threshold_set
01007340 g     F .text	00000188 __lshift
01010ee0 g     F .text	000001fc alt_avalon_spi_command
010163d4 g     O .bss	00000004 _alt_nticks
0100a57c g     F .text	00000018 signal
0100e240 g     F .text	00000108 read
0100e7cc g     F .text	00000074 alt_sys_init
01000374 g     F .text	000001ac initAccelerometer
0100f788 g     F .text	000001c8 alt_avalon_i2c_master_tx_rx
01006f7c g     F .text	000002ac __multiply
0101093c g     F .text	00000068 altera_avalon_jtag_uart_close
01000e30 g     F .text	00000028 .hidden __mulsi3
01012b78 g       *ABS*	00000000 __ram_rwdata_start
01012454 g       *ABS*	00000000 __ram_rodata_start
010163dc g     O .bss	00000028 __malloc_current_mallinfo
010078ac g     F .text	00000164 __d2b
0101046c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01012004 g     F .text	000000b8 alt_get_fd
01011310 g     F .text	00000158 alt_busy_sleep
0100984c g     F .text	00000058 _close_r
010120f0 g     F .text	00000078 memcmp
0100eff4 g     F .text	000000ac alt_avalon_i2c_rx_read_available
0101052c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
01016504 g       *ABS*	00000000 __alt_stack_base
0101057c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010031fc g     F .text	0000015c __swsetup_r
0100bb7c g     F .text	00000934 .hidden __divdf3
01005174 g     F .text	000000fc __sfp
01007b24 g     F .text	0000006c __copybits
01012f9c g     O .rwdata	00000408 __malloc_av_
010052a0 g     F .text	00000004 __sinit_lock_release
0100c710 g     F .text	000007a8 .hidden __muldf3
010081ac g     F .text	00000054 __sread
01011efc g     F .text	00000108 alt_find_file
010114c4 g     F .text	000000a8 alt_dev_llist_insert
0100e1bc g     F .text	00000024 __malloc_lock
0100e3b8 g     F .text	000000b8 sbrk
0100f428 g     F .text	0000013c alt_avalon_i2c_interrupt_transaction_status
0100f390 g     F .text	0000004c alt_avalon_i2c_check_nack
01004ef0 g     F .text	00000060 _fflush_r
0100991c g     F .text	000000c4 _calloc_r
010163a8 g       *ABS*	00000000 __bss_start
010069c8 g     F .text	000000f0 memset
010008f8 g     F .text	000001fc main
0100f35c g     F .text	00000034 alt_avalon_i2c_master_target_set
010163cc g     O .bss	00000004 alt_envp
010163b0 g     O .bss	00000004 __malloc_max_total_mem
010163a8 g     O .bss	00000004 LEDS
010104cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0100a1ac g     F .text	00000018 __swbuf
01010174 g     F .text	00000044 alt_avalon_i2c_int_raw_status_get
010082e4 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01009ad8 g     F .text	00000010 fclose
01003578 g     F .text	00001750 _dtoa_r
01005ee8 g     F .text	000007e0 _malloc_r
0100a2c4 g     F .text	00000030 __ascii_wctomb
01014774 g     O .rwdata	00000004 alt_errno
01009ae8 g     F .text	00000020 _fiprintf_r
0100a594 g     F .text	0000001c _init_signal
01005bb0 g     F .text	00000098 _fwalk
01009ef4 g     F .text	0000000c _mbtowc_r
01012374 g     F .text	000000e0 putc
01000c7c g     F .text	00000080 .hidden __divsi3
010052cc g     F .text	0000011c _malloc_trim_r
01000520 g     F .text	000000ac accelFetchEvents
01009fa8 g     F .text	000000b8 strcmp
01012454 g       *ABS*	00000000 __flash_rodata_start
0100c4b0 g     F .text	00000080 .hidden __nedf2
0100e790 g     F .text	0000003c alt_irq_init
0100e348 g     F .text	00000070 alt_release_fd
01012a18 g     O .rodata	00000100 .hidden __clz_tab
010163c0 g     O .bss	00000004 _PathLocale
010097e8 g     F .text	00000064 _write_r
01009e78 g     F .text	00000018 setlocale
01014754 g     O .rwdata	00000004 _impure_ptr
010163c4 g     O .bss	00000004 alt_argc
01004cc8 g     F .text	00000228 __sflush_r
010007b0 g     F .text	00000148 fetchCO2
0100f324 g     F .text	00000038 alt_avalon_i2c_master_target_get
0100f234 g     F .text	000000f0 alt_avalon_i2c_send_address
00000020 g       .exceptions	00000000 alt_irq_entry
01009f00 g     F .text	00000044 __ascii_mbtowc
0100774c g     F .text	0000005c __ulp
010052b8 g     F .text	00000014 __fp_unlock_all
01014760 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
01005d04 g     F .text	0000000c localeconv
01005d10 g     F .text	00000098 __swhatbuf_r
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
01010408 g     F .text	00000064 alt_avalon_i2c_tfr_cmd_fifo_threshold_set
0101161c g     F .text	00000050 alt_ic_isr_register
0100ec58 g     F .text	0000004c alt_avalon_i2c_disable
01014790 g       *ABS*	00000000 _edata
01016504 g       *ABS*	00000000 _end
01009b40 g     F .text	00000164 __fputwc
000001b4 g       *ABS*	00000000 __ram_exceptions_end
01000768 g     F .text	00000048 bufferToU16
010109a4 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100eca4 g     F .text	000000b0 alt_avalon_i2c_master_config_get
010116f4 g     F .text	0000008c alt_ic_irq_disable
01000bfc g     F .text	00000080 mysleep
01008208 g     F .text	00000080 __swrite
0101475c g     O .rwdata	00000004 __malloc_trim_threshold
010120bc g     F .text	00000034 exit
01009b08 g     F .text	00000038 fiprintf
0100a060 g     F .text	00000004 _vfiprintf_r
01005c48 g     F .text	000000a8 _fwalk_reent
01007520 g     F .text	0000022c __mdiff
01000cfc g     F .text	00000074 .hidden __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
01005298 g     F .text	00000004 __sfp_lock_release
0100eeb4 g     F .text	000000fc alt_avalon_i2c_master_config_speed_set
01012794 g     O .rodata	00000101 _ctype_
0100f148 g     F .text	000000ec alt_avalon_i2c_cmd_write
0100d7ec g     F .text	00000054 .hidden __unorddf2
0100dba4 g     F .text	00000038 _exit
010111dc g     F .text	00000134 alt_alarm_start
01005da8 g     F .text	00000140 __smakebuf_r
01000f9c g     F .text	00000098 strlen
0100a358 g     F .text	00000014 _init_signal_r
01011b1c g     F .text	00000160 open
0100c530 g     F .text	000000f0 .hidden __gedf2
01011ea8 g     F .text	00000030 alt_putchar
01009908 g     F .text	00000014 __assert
010083e0 g     F .text	00000018 __sprint_r
010115fc g     F .text	00000020 alt_icache_flush_all
0101478c g     O .rwdata	00000004 alt_priority_mask
01000af4 g     F .text	0000006c displayOnLeds
0101166c g     F .text	00000088 alt_ic_irq_enable
01003120 g     F .text	0000001c __vfprintf_internal
0100a2b8 g     F .text	0000000c _wctomb_r
0100ceb8 g     F .text	00000934 .hidden __subdf3
01006e78 g     F .text	000000b0 __lo0bits
0101477c g     O .rwdata	00000008 alt_alarm_list
0100a5b0 g     F .text	00000010 __sigtramp
010001d0 g     F .text	000000e0 write_to_accel
0100a230 g     F .text	00000088 wcrtomb
0100da9c g     F .text	000000dc close
010133a4 g     O .rwdata	0000016c __global_locale
010103bc g     F .text	0000004c alt_avalon_i2c_tfr_cmd_fifo_threshold_get
0100dfb0 g     F .text	00000084 alt_load
0100f64c g     F .text	0000013c alt_avalon_i2c_master_rx
01009cc8 g     F .text	00000078 fputwc
0100a56c g     F .text	00000010 raise
0100529c g     F .text	00000004 __sinit_lock_acquire
01006b80 g     F .text	0000015c __multadd
01006b5c g     F .text	00000024 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
   4:	08406514 	ori	at,at,404
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0ffff17 	ldw	r3,-4(fp)
 120:	e0bffe17 	ldw	r2,-8(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001126 	beq	r2,zero,170 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	100690fa 	slli	r3,r2,3
 134:	00804074 	movhi	r2,257
 138:	1885883a 	add	r2,r3,r2
 13c:	10d90117 	ldw	r3,25604(r2)
 140:	e0bffd17 	ldw	r2,-12(fp)
 144:	100890fa 	slli	r4,r2,3
 148:	00804074 	movhi	r2,257
 14c:	2085883a 	add	r2,r4,r2
 150:	10990217 	ldw	r2,25608(r2)
 154:	1009883a 	mov	r4,r2
 158:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 15c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 160:	0005313a 	rdctl	r2,ipending
 164:	e0bffb15 	stw	r2,-20(fp)
  return active;
 168:	e0bffb17 	ldw	r2,-20(fp)
 16c:	00000706 	br	18c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 170:	e0bffe17 	ldw	r2,-8(fp)
 174:	1085883a 	add	r2,r2,r2
 178:	e0bffe15 	stw	r2,-8(fp)
      i++;
 17c:	e0bffd17 	ldw	r2,-12(fp)
 180:	10800044 	addi	r2,r2,1
 184:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 188:	003fe406 	br	11c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 18c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	103fde1e 	bne	r2,zero,110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 198:	0001883a 	nop
}
 19c:	0001883a 	nop
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

01000194 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000194:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 1000198:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100019c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001a0:	d6b1d414 	ori	gp,gp,51024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001a4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001a8:	1098ea14 	ori	r2,r2,25512

    movhi r3, %hi(__bss_end)
 10001ac:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001b0:	18d94114 	ori	r3,r3,25860

    beq r2, r3, 1f
 10001b4:	10c00326 	beq	r2,r3,10001c4 <_start+0x30>

0:
    stw zero, (r2)
 10001b8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001bc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001c0:	10fffd36 	bltu	r2,r3,10001b8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001c4:	100dfb00 	call	100dfb0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001c8:	100e1500 	call	100e150 <alt_main>

010001cc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001cc:	003fff06 	br	10001cc <alt_after_alt_main>

010001d0 <write_to_accel>:
 10001d0:	defff704 	addi	sp,sp,-36
 10001d4:	dfc00815 	stw	ra,32(sp)
 10001d8:	df000715 	stw	fp,28(sp)
 10001dc:	df000704 	addi	fp,sp,28
 10001e0:	2005883a 	mov	r2,r4
 10001e4:	2807883a 	mov	r3,r5
 10001e8:	e0bffd05 	stb	r2,-12(fp)
 10001ec:	1805883a 	mov	r2,r3
 10001f0:	e0bffc05 	stb	r2,-16(fp)
 10001f4:	e0bffd03 	ldbu	r2,-12(fp)
 10001f8:	e0bffe85 	stb	r2,-6(fp)
 10001fc:	e0bffc03 	ldbu	r2,-16(fp)
 1000200:	e0bffec5 	stb	r2,-5(fp)
 1000204:	e0fffe84 	addi	r3,fp,-6
 1000208:	d8000215 	stw	zero,8(sp)
 100020c:	e0bffe44 	addi	r2,fp,-7
 1000210:	d8800115 	stw	r2,4(sp)
 1000214:	d8000015 	stw	zero,0(sp)
 1000218:	180f883a 	mov	r7,r3
 100021c:	01800084 	movi	r6,2
 1000220:	000b883a 	mov	r5,zero
 1000224:	01010034 	movhi	r4,1024
 1000228:	21141804 	addi	r4,r4,20576
 100022c:	1010ee00 	call	1010ee0 <alt_avalon_spi_command>
 1000230:	e0bfff15 	stw	r2,-4(fp)
 1000234:	e17fff17 	ldw	r5,-4(fp)
 1000238:	01004074 	movhi	r4,257
 100023c:	21091504 	addi	r4,r4,9300
 1000240:	1000e880 	call	1000e88 <printf>
 1000244:	e0fffd03 	ldbu	r3,-12(fp)
 1000248:	00bfe004 	movi	r2,-128
 100024c:	1884b03a 	or	r2,r3,r2
 1000250:	e0bffe05 	stb	r2,-8(fp)
 1000254:	e0fffe04 	addi	r3,fp,-8
 1000258:	d8000215 	stw	zero,8(sp)
 100025c:	e0bffe44 	addi	r2,fp,-7
 1000260:	d8800115 	stw	r2,4(sp)
 1000264:	00800044 	movi	r2,1
 1000268:	d8800015 	stw	r2,0(sp)
 100026c:	180f883a 	mov	r7,r3
 1000270:	01800044 	movi	r6,1
 1000274:	000b883a 	mov	r5,zero
 1000278:	01010034 	movhi	r4,1024
 100027c:	21141804 	addi	r4,r4,20576
 1000280:	1010ee00 	call	1010ee0 <alt_avalon_spi_command>
 1000284:	e0bfff15 	stw	r2,-4(fp)
 1000288:	e0bffe43 	ldbu	r2,-7(fp)
 100028c:	e0fffc03 	ldbu	r3,-16(fp)
 1000290:	10803fcc 	andi	r2,r2,255
 1000294:	1884c03a 	cmpne	r2,r3,r2
 1000298:	10803fcc 	andi	r2,r2,255
 100029c:	e037883a 	mov	sp,fp
 10002a0:	dfc00117 	ldw	ra,4(sp)
 10002a4:	df000017 	ldw	fp,0(sp)
 10002a8:	dec00204 	addi	sp,sp,8
 10002ac:	f800283a 	ret

010002b0 <read_from_accel>:
 10002b0:	defff704 	addi	sp,sp,-36
 10002b4:	dfc00815 	stw	ra,32(sp)
 10002b8:	df000715 	stw	fp,28(sp)
 10002bc:	df000704 	addi	fp,sp,28
 10002c0:	2005883a 	mov	r2,r4
 10002c4:	2807883a 	mov	r3,r5
 10002c8:	e1bffc15 	stw	r6,-16(fp)
 10002cc:	e0bffe05 	stb	r2,-8(fp)
 10002d0:	1805883a 	mov	r2,r3
 10002d4:	e0bffd05 	stb	r2,-12(fp)
 10002d8:	e0fffe03 	ldbu	r3,-8(fp)
 10002dc:	00bff004 	movi	r2,-64
 10002e0:	1884b03a 	or	r2,r3,r2
 10002e4:	e0bfffc5 	stb	r2,-1(fp)
 10002e8:	e0bffd03 	ldbu	r2,-12(fp)
 10002ec:	e13fffc4 	addi	r4,fp,-1
 10002f0:	d8000215 	stw	zero,8(sp)
 10002f4:	e0fffc17 	ldw	r3,-16(fp)
 10002f8:	d8c00115 	stw	r3,4(sp)
 10002fc:	d8800015 	stw	r2,0(sp)
 1000300:	200f883a 	mov	r7,r4
 1000304:	01800044 	movi	r6,1
 1000308:	000b883a 	mov	r5,zero
 100030c:	01010034 	movhi	r4,1024
 1000310:	21141804 	addi	r4,r4,20576
 1000314:	1010ee00 	call	1010ee0 <alt_avalon_spi_command>
 1000318:	e037883a 	mov	sp,fp
 100031c:	dfc00117 	ldw	ra,4(sp)
 1000320:	df000017 	ldw	fp,0(sp)
 1000324:	dec00204 	addi	sp,sp,8
 1000328:	f800283a 	ret

0100032c <accel_to_int>:
 100032c:	defffe04 	addi	sp,sp,-8
 1000330:	df000115 	stw	fp,4(sp)
 1000334:	df000104 	addi	fp,sp,4
 1000338:	e13fff15 	stw	r4,-4(fp)
 100033c:	e0bfff17 	ldw	r2,-4(fp)
 1000340:	10800003 	ldbu	r2,0(r2)
 1000344:	10803fcc 	andi	r2,r2,255
 1000348:	1004923a 	slli	r2,r2,8
 100034c:	10c3c00c 	andi	r3,r2,3840
 1000350:	e0bfff17 	ldw	r2,-4(fp)
 1000354:	10800044 	addi	r2,r2,1
 1000358:	10800003 	ldbu	r2,0(r2)
 100035c:	10803fcc 	andi	r2,r2,255
 1000360:	1885883a 	add	r2,r3,r2
 1000364:	e037883a 	mov	sp,fp
 1000368:	df000017 	ldw	fp,0(sp)
 100036c:	dec00104 	addi	sp,sp,4
 1000370:	f800283a 	ret

01000374 <initAccelerometer>:
 1000374:	defffd04 	addi	sp,sp,-12
 1000378:	dfc00215 	stw	ra,8(sp)
 100037c:	df000115 	stw	fp,4(sp)
 1000380:	df000104 	addi	fp,sp,4
 1000384:	00bfed44 	movi	r2,-75
 1000388:	e0bfffc5 	stb	r2,-1(fp)
 100038c:	e0bfffc4 	addi	r2,fp,-1
 1000390:	100d883a 	mov	r6,r2
 1000394:	01400044 	movi	r5,1
 1000398:	010003c4 	movi	r4,15
 100039c:	10002b00 	call	10002b0 <read_from_accel>
 10003a0:	e0bfffc3 	ldbu	r2,-1(fp)
 10003a4:	10803fcc 	andi	r2,r2,255
 10003a8:	10800ce0 	cmpeqi	r2,r2,51
 10003ac:	1000081e 	bne	r2,zero,10003d0 <initAccelerometer+0x5c>
 10003b0:	e0bfffc3 	ldbu	r2,-1(fp)
 10003b4:	10803fcc 	andi	r2,r2,255
 10003b8:	100b883a 	mov	r5,r2
 10003bc:	01004074 	movhi	r4,257
 10003c0:	21091a04 	addi	r4,r4,9320
 10003c4:	1000e880 	call	1000e88 <printf>
 10003c8:	00800044 	movi	r2,1
 10003cc:	00004f06 	br	100050c <initAccelerometer+0x198>
 10003d0:	01403004 	movi	r5,192
 10003d4:	010007c4 	movi	r4,31
 10003d8:	10001d00 	call	10001d0 <write_to_accel>
 10003dc:	10000226 	beq	r2,zero,10003e8 <initAccelerometer+0x74>
 10003e0:	00800044 	movi	r2,1
 10003e4:	00004906 	br	100050c <initAccelerometer+0x198>
 10003e8:	01401dc4 	movi	r5,119
 10003ec:	01000804 	movi	r4,32
 10003f0:	10001d00 	call	10001d0 <write_to_accel>
 10003f4:	10000226 	beq	r2,zero,1000400 <initAccelerometer+0x8c>
 10003f8:	00800084 	movi	r2,2
 10003fc:	00004306 	br	100050c <initAccelerometer+0x198>
 1000400:	01400204 	movi	r5,8
 1000404:	01000844 	movi	r4,33
 1000408:	10001d00 	call	10001d0 <write_to_accel>
 100040c:	10000226 	beq	r2,zero,1000418 <initAccelerometer+0xa4>
 1000410:	00800084 	movi	r2,2
 1000414:	00003d06 	br	100050c <initAccelerometer+0x198>
 1000418:	01402004 	movi	r5,128
 100041c:	01000884 	movi	r4,34
 1000420:	10001d00 	call	10001d0 <write_to_accel>
 1000424:	10000226 	beq	r2,zero,1000430 <initAccelerometer+0xbc>
 1000428:	00800084 	movi	r2,2
 100042c:	00003706 	br	100050c <initAccelerometer+0x198>
 1000430:	01402004 	movi	r5,128
 1000434:	010008c4 	movi	r4,35
 1000438:	10001d00 	call	10001d0 <write_to_accel>
 100043c:	10000226 	beq	r2,zero,1000448 <initAccelerometer+0xd4>
 1000440:	00800084 	movi	r2,2
 1000444:	00003106 	br	100050c <initAccelerometer+0x198>
 1000448:	01400284 	movi	r5,10
 100044c:	01000904 	movi	r4,36
 1000450:	10001d00 	call	10001d0 <write_to_accel>
 1000454:	10000226 	beq	r2,zero,1000460 <initAccelerometer+0xec>
 1000458:	00800084 	movi	r2,2
 100045c:	00002b06 	br	100050c <initAccelerometer+0x198>
 1000460:	000b883a 	mov	r5,zero
 1000464:	01000944 	movi	r4,37
 1000468:	10001d00 	call	10001d0 <write_to_accel>
 100046c:	10000226 	beq	r2,zero,1000478 <initAccelerometer+0x104>
 1000470:	00800084 	movi	r2,2
 1000474:	00002506 	br	100050c <initAccelerometer+0x198>
 1000478:	000b883a 	mov	r5,zero
 100047c:	01000c04 	movi	r4,48
 1000480:	10001d00 	call	10001d0 <write_to_accel>
 1000484:	10000226 	beq	r2,zero,1000490 <initAccelerometer+0x11c>
 1000488:	008000c4 	movi	r2,3
 100048c:	00001f06 	br	100050c <initAccelerometer+0x198>
 1000490:	01400fc4 	movi	r5,63
 1000494:	01000e04 	movi	r4,56
 1000498:	10001d00 	call	10001d0 <write_to_accel>
 100049c:	10000226 	beq	r2,zero,10004a8 <initAccelerometer+0x134>
 10004a0:	008000c4 	movi	r2,3
 10004a4:	00001906 	br	100050c <initAccelerometer+0x198>
 10004a8:	01402204 	movi	r5,136
 10004ac:	01000e84 	movi	r4,58
 10004b0:	10001d00 	call	10001d0 <write_to_accel>
 10004b4:	10000226 	beq	r2,zero,10004c0 <initAccelerometer+0x14c>
 10004b8:	008000c4 	movi	r2,3
 10004bc:	00001306 	br	100050c <initAccelerometer+0x198>
 10004c0:	01400cc4 	movi	r5,51
 10004c4:	01000ec4 	movi	r4,59
 10004c8:	10001d00 	call	10001d0 <write_to_accel>
 10004cc:	10000226 	beq	r2,zero,10004d8 <initAccelerometer+0x164>
 10004d0:	008000c4 	movi	r2,3
 10004d4:	00000d06 	br	100050c <initAccelerometer+0x198>
 10004d8:	01400544 	movi	r5,21
 10004dc:	01000f04 	movi	r4,60
 10004e0:	10001d00 	call	10001d0 <write_to_accel>
 10004e4:	10000226 	beq	r2,zero,10004f0 <initAccelerometer+0x17c>
 10004e8:	008000c4 	movi	r2,3
 10004ec:	00000706 	br	100050c <initAccelerometer+0x198>
 10004f0:	01401084 	movi	r5,66
 10004f4:	01000f44 	movi	r4,61
 10004f8:	10001d00 	call	10001d0 <write_to_accel>
 10004fc:	10000226 	beq	r2,zero,1000508 <initAccelerometer+0x194>
 1000500:	008000c4 	movi	r2,3
 1000504:	00000106 	br	100050c <initAccelerometer+0x198>
 1000508:	0005883a 	mov	r2,zero
 100050c:	e037883a 	mov	sp,fp
 1000510:	dfc00117 	ldw	ra,4(sp)
 1000514:	df000017 	ldw	fp,0(sp)
 1000518:	dec00204 	addi	sp,sp,8
 100051c:	f800283a 	ret

01000520 <accelFetchEvents>:
 1000520:	defffd04 	addi	sp,sp,-12
 1000524:	dfc00215 	stw	ra,8(sp)
 1000528:	df000115 	stw	fp,4(sp)
 100052c:	df000104 	addi	fp,sp,4
 1000530:	e03fffc5 	stb	zero,-1(fp)
 1000534:	e0bfffc4 	addi	r2,fp,-1
 1000538:	100d883a 	mov	r6,r2
 100053c:	01400044 	movi	r5,1
 1000540:	01000c44 	movi	r4,49
 1000544:	10002b00 	call	10002b0 <read_from_accel>
 1000548:	e03fff85 	stb	zero,-2(fp)
 100054c:	e0bfff84 	addi	r2,fp,-2
 1000550:	100d883a 	mov	r6,r2
 1000554:	01400044 	movi	r5,1
 1000558:	01000e44 	movi	r4,57
 100055c:	10002b00 	call	10002b0 <read_from_accel>
 1000560:	e0bfffc3 	ldbu	r2,-1(fp)
 1000564:	10803fcc 	andi	r2,r2,255
 1000568:	e0ffff83 	ldbu	r3,-2(fp)
 100056c:	18c03fcc 	andi	r3,r3,255
 1000570:	180d883a 	mov	r6,r3
 1000574:	100b883a 	mov	r5,r2
 1000578:	01004074 	movhi	r4,257
 100057c:	21092104 	addi	r4,r4,9348
 1000580:	1000e880 	call	1000e88 <printf>
 1000584:	e0bfff83 	ldbu	r2,-2(fp)
 1000588:	10803fcc 	andi	r2,r2,255
 100058c:	1080040c 	andi	r2,r2,16
 1000590:	10000226 	beq	r2,zero,100059c <accelFetchEvents+0x7c>
 1000594:	00800044 	movi	r2,1
 1000598:	00000706 	br	10005b8 <accelFetchEvents+0x98>
 100059c:	e0bfff83 	ldbu	r2,-2(fp)
 10005a0:	10803fcc 	andi	r2,r2,255
 10005a4:	1080080c 	andi	r2,r2,32
 10005a8:	10000226 	beq	r2,zero,10005b4 <accelFetchEvents+0x94>
 10005ac:	00800084 	movi	r2,2
 10005b0:	00000106 	br	10005b8 <accelFetchEvents+0x98>
 10005b4:	0005883a 	mov	r2,zero
 10005b8:	e037883a 	mov	sp,fp
 10005bc:	dfc00117 	ldw	ra,4(sp)
 10005c0:	df000017 	ldw	fp,0(sp)
 10005c4:	dec00204 	addi	sp,sp,8
 10005c8:	f800283a 	ret

010005cc <initCO2>:
 10005cc:	deffec04 	addi	sp,sp,-80
 10005d0:	dfc01315 	stw	ra,76(sp)
 10005d4:	df001215 	stw	fp,72(sp)
 10005d8:	df001204 	addi	fp,sp,72
 10005dc:	01004074 	movhi	r4,257
 10005e0:	21092504 	addi	r4,r4,9364
 10005e4:	100eb800 	call	100eb80 <alt_avalon_i2c_open>
 10005e8:	e0bfff15 	stw	r2,-4(fp)
 10005ec:	e0bfff17 	ldw	r2,-4(fp)
 10005f0:	1000021e 	bne	r2,zero,10005fc <initCO2+0x30>
 10005f4:	0005883a 	mov	r2,zero
 10005f8:	00003e06 	br	10006f4 <initCO2+0x128>
 10005fc:	01401684 	movi	r5,90
 1000600:	e13fff17 	ldw	r4,-4(fp)
 1000604:	100f35c0 	call	100f35c <alt_avalon_i2c_master_target_set>
 1000608:	00bfffc4 	movi	r2,-1
 100060c:	e0bff605 	stb	r2,-40(fp)
 1000610:	00800444 	movi	r2,17
 1000614:	e0bff645 	stb	r2,-39(fp)
 1000618:	00bff944 	movi	r2,-27
 100061c:	e0bff685 	stb	r2,-38(fp)
 1000620:	00801c84 	movi	r2,114
 1000624:	e0bff6c5 	stb	r2,-37(fp)
 1000628:	00bfe284 	movi	r2,-118
 100062c:	e0bff705 	stb	r2,-36(fp)
 1000630:	e0bff604 	addi	r2,fp,-40
 1000634:	000f883a 	mov	r7,zero
 1000638:	01800144 	movi	r6,5
 100063c:	100b883a 	mov	r5,r2
 1000640:	e13fff17 	ldw	r4,-4(fp)
 1000644:	100f5640 	call	100f564 <alt_avalon_i2c_master_tx>
 1000648:	e0bffe15 	stw	r2,-8(fp)
 100064c:	01007d04 	movi	r4,500
 1000650:	1000bfc0 	call	1000bfc <mysleep>
 1000654:	000b883a 	mov	r5,zero
 1000658:	e13fff17 	ldw	r4,-4(fp)
 100065c:	10007080 	call	1000708 <printRegister>
 1000660:	01400804 	movi	r5,32
 1000664:	e13fff17 	ldw	r4,-4(fp)
 1000668:	10007080 	call	1000708 <printRegister>
 100066c:	01400844 	movi	r5,33
 1000670:	e13fff17 	ldw	r4,-4(fp)
 1000674:	10007080 	call	1000708 <printRegister>
 1000678:	014008c4 	movi	r5,35
 100067c:	e13fff17 	ldw	r4,-4(fp)
 1000680:	10007080 	call	1000708 <printRegister>
 1000684:	01400904 	movi	r5,36
 1000688:	e13fff17 	ldw	r4,-4(fp)
 100068c:	10007080 	call	1000708 <printRegister>
 1000690:	00bffd04 	movi	r2,-12
 1000694:	e0bff605 	stb	r2,-40(fp)
 1000698:	e0bff604 	addi	r2,fp,-40
 100069c:	000f883a 	mov	r7,zero
 10006a0:	01800044 	movi	r6,1
 10006a4:	100b883a 	mov	r5,r2
 10006a8:	e13fff17 	ldw	r4,-4(fp)
 10006ac:	100f5640 	call	100f564 <alt_avalon_i2c_master_tx>
 10006b0:	e0bffe15 	stw	r2,-8(fp)
 10006b4:	01007d04 	movi	r4,500
 10006b8:	1000bfc0 	call	1000bfc <mysleep>
 10006bc:	00800044 	movi	r2,1
 10006c0:	e0bff605 	stb	r2,-40(fp)
 10006c4:	00800404 	movi	r2,16
 10006c8:	e0bff645 	stb	r2,-39(fp)
 10006cc:	e0bff604 	addi	r2,fp,-40
 10006d0:	000f883a 	mov	r7,zero
 10006d4:	01800084 	movi	r6,2
 10006d8:	100b883a 	mov	r5,r2
 10006dc:	e13fff17 	ldw	r4,-4(fp)
 10006e0:	100f5640 	call	100f564 <alt_avalon_i2c_master_tx>
 10006e4:	e0bffe15 	stw	r2,-8(fp)
 10006e8:	01007d04 	movi	r4,500
 10006ec:	1000bfc0 	call	1000bfc <mysleep>
 10006f0:	e0bfff17 	ldw	r2,-4(fp)
 10006f4:	e037883a 	mov	sp,fp
 10006f8:	dfc00117 	ldw	ra,4(sp)
 10006fc:	df000017 	ldw	fp,0(sp)
 1000700:	dec00204 	addi	sp,sp,8
 1000704:	f800283a 	ret

01000708 <printRegister>:
 1000708:	defff804 	addi	sp,sp,-32
 100070c:	dfc00715 	stw	ra,28(sp)
 1000710:	df000615 	stw	fp,24(sp)
 1000714:	df000604 	addi	fp,sp,24
 1000718:	e13ffd15 	stw	r4,-12(fp)
 100071c:	2805883a 	mov	r2,r5
 1000720:	e0bffc05 	stb	r2,-16(fp)
 1000724:	e13ffec4 	addi	r4,fp,-5
 1000728:	e0fffc04 	addi	r3,fp,-16
 100072c:	d8000115 	stw	zero,4(sp)
 1000730:	00800044 	movi	r2,1
 1000734:	d8800015 	stw	r2,0(sp)
 1000738:	200f883a 	mov	r7,r4
 100073c:	01800044 	movi	r6,1
 1000740:	180b883a 	mov	r5,r3
 1000744:	e13ffd17 	ldw	r4,-12(fp)
 1000748:	100f7880 	call	100f788 <alt_avalon_i2c_master_tx_rx>
 100074c:	e0bfff15 	stw	r2,-4(fp)
 1000750:	e0bffec3 	ldbu	r2,-5(fp)
 1000754:	e037883a 	mov	sp,fp
 1000758:	dfc00117 	ldw	ra,4(sp)
 100075c:	df000017 	ldw	fp,0(sp)
 1000760:	dec00204 	addi	sp,sp,8
 1000764:	f800283a 	ret

01000768 <bufferToU16>:
 1000768:	defffe04 	addi	sp,sp,-8
 100076c:	df000115 	stw	fp,4(sp)
 1000770:	df000104 	addi	fp,sp,4
 1000774:	e13fff15 	stw	r4,-4(fp)
 1000778:	e0bfff17 	ldw	r2,-4(fp)
 100077c:	10800003 	ldbu	r2,0(r2)
 1000780:	10803fcc 	andi	r2,r2,255
 1000784:	1004923a 	slli	r2,r2,8
 1000788:	1007883a 	mov	r3,r2
 100078c:	e0bfff17 	ldw	r2,-4(fp)
 1000790:	10800044 	addi	r2,r2,1
 1000794:	10800003 	ldbu	r2,0(r2)
 1000798:	10803fcc 	andi	r2,r2,255
 100079c:	1885883a 	add	r2,r3,r2
 10007a0:	e037883a 	mov	sp,fp
 10007a4:	df000017 	ldw	fp,0(sp)
 10007a8:	dec00104 	addi	sp,sp,4
 10007ac:	f800283a 	ret

010007b0 <fetchCO2>:
 10007b0:	deffe804 	addi	sp,sp,-96
 10007b4:	dfc01715 	stw	ra,92(sp)
 10007b8:	df001615 	stw	fp,88(sp)
 10007bc:	df001604 	addi	fp,sp,88
 10007c0:	e13fec15 	stw	r4,-80(fp)
 10007c4:	000b883a 	mov	r5,zero
 10007c8:	e13fec17 	ldw	r4,-80(fp)
 10007cc:	10007080 	call	1000708 <printRegister>
 10007d0:	e0bfffc5 	stb	r2,-1(fp)
 10007d4:	e0bfffc3 	ldbu	r2,-1(fp)
 10007d8:	1080004c 	andi	r2,r2,1
 10007dc:	10001f26 	beq	r2,zero,100085c <fetchCO2+0xac>
 10007e0:	01004074 	movhi	r4,257
 10007e4:	21092804 	addi	r4,r4,9376
 10007e8:	1000f8c0 	call	1000f8c <puts>
 10007ec:	00bff804 	movi	r2,-32
 10007f0:	e0bff505 	stb	r2,-44(fp)
 10007f4:	e13fed04 	addi	r4,fp,-76
 10007f8:	e0fff504 	addi	r3,fp,-44
 10007fc:	d8000115 	stw	zero,4(sp)
 1000800:	00800044 	movi	r2,1
 1000804:	d8800015 	stw	r2,0(sp)
 1000808:	200f883a 	mov	r7,r4
 100080c:	01800044 	movi	r6,1
 1000810:	180b883a 	mov	r5,r3
 1000814:	e13fec17 	ldw	r4,-80(fp)
 1000818:	100f7880 	call	100f788 <alt_avalon_i2c_master_tx_rx>
 100081c:	e0bffe15 	stw	r2,-8(fp)
 1000820:	e0bffe17 	ldw	r2,-8(fp)
 1000824:	10000426 	beq	r2,zero,1000838 <fetchCO2+0x88>
 1000828:	e17ffe17 	ldw	r5,-8(fp)
 100082c:	01004074 	movhi	r4,257
 1000830:	21092d04 	addi	r4,r4,9396
 1000834:	1000e880 	call	1000e88 <printf>
 1000838:	e0bff503 	ldbu	r2,-44(fp)
 100083c:	10803fcc 	andi	r2,r2,255
 1000840:	e0ffed03 	ldbu	r3,-76(fp)
 1000844:	18c03fcc 	andi	r3,r3,255
 1000848:	180d883a 	mov	r6,r3
 100084c:	100b883a 	mov	r5,r2
 1000850:	01004074 	movhi	r4,257
 1000854:	21093204 	addi	r4,r4,9416
 1000858:	1000e880 	call	1000e88 <printf>
 100085c:	e0bfffc3 	ldbu	r2,-1(fp)
 1000860:	1080020c 	andi	r2,r2,8
 1000864:	10001e26 	beq	r2,zero,10008e0 <fetchCO2+0x130>
 1000868:	00800084 	movi	r2,2
 100086c:	e0bff505 	stb	r2,-44(fp)
 1000870:	e13fed04 	addi	r4,fp,-76
 1000874:	e0fff504 	addi	r3,fp,-44
 1000878:	d8000115 	stw	zero,4(sp)
 100087c:	00800204 	movi	r2,8
 1000880:	d8800015 	stw	r2,0(sp)
 1000884:	200f883a 	mov	r7,r4
 1000888:	01800044 	movi	r6,1
 100088c:	180b883a 	mov	r5,r3
 1000890:	e13fec17 	ldw	r4,-80(fp)
 1000894:	100f7880 	call	100f788 <alt_avalon_i2c_master_tx_rx>
 1000898:	e0bffe15 	stw	r2,-8(fp)
 100089c:	e0bffe17 	ldw	r2,-8(fp)
 10008a0:	10000426 	beq	r2,zero,10008b4 <fetchCO2+0x104>
 10008a4:	e17ffe17 	ldw	r5,-8(fp)
 10008a8:	01004074 	movhi	r4,257
 10008ac:	21092d04 	addi	r4,r4,9396
 10008b0:	1000e880 	call	1000e88 <printf>
 10008b4:	e0bfed04 	addi	r2,fp,-76
 10008b8:	1009883a 	mov	r4,r2
 10008bc:	10007680 	call	1000768 <bufferToU16>
 10008c0:	e0bffd8d 	sth	r2,-10(fp)
 10008c4:	e0bfed04 	addi	r2,fp,-76
 10008c8:	10800084 	addi	r2,r2,2
 10008cc:	1009883a 	mov	r4,r2
 10008d0:	10007680 	call	1000768 <bufferToU16>
 10008d4:	e0bffd0d 	sth	r2,-12(fp)
 10008d8:	e0bffd8b 	ldhu	r2,-10(fp)
 10008dc:	00000106 	br	10008e4 <fetchCO2+0x134>
 10008e0:	0005883a 	mov	r2,zero
 10008e4:	e037883a 	mov	sp,fp
 10008e8:	dfc00117 	ldw	ra,4(sp)
 10008ec:	df000017 	ldw	fp,0(sp)
 10008f0:	dec00204 	addi	sp,sp,8
 10008f4:	f800283a 	ret

010008f8 <main>:
 10008f8:	defff704 	addi	sp,sp,-36
 10008fc:	dfc00815 	stw	ra,32(sp)
 1000900:	df000715 	stw	fp,28(sp)
 1000904:	df000704 	addi	fp,sp,28
 1000908:	0109c404 	movi	r4,10000
 100090c:	1000af40 	call	1000af4 <displayOnLeds>
 1000910:	10005cc0 	call	10005cc <initCO2>
 1000914:	e0bffb15 	stw	r2,-20(fp)
 1000918:	10003740 	call	1000374 <initAccelerometer>
 100091c:	e03fff8d 	sth	zero,-2(fp)
 1000920:	e03ffe15 	stw	zero,-8(fp)
 1000924:	e03ffd15 	stw	zero,-12(fp)
 1000928:	e03ffc15 	stw	zero,-16(fp)
 100092c:	d0a72017 	ldw	r2,-25472(gp)
 1000930:	100b883a 	mov	r5,r2
 1000934:	e13ffe17 	ldw	r4,-8(fp)
 1000938:	1000d700 	call	1000d70 <__udivsi3>
 100093c:	100d883a 	mov	r6,r2
 1000940:	e17ffc17 	ldw	r5,-16(fp)
 1000944:	01004074 	movhi	r4,257
 1000948:	21093704 	addi	r4,r4,9436
 100094c:	1000e880 	call	1000e88 <printf>
 1000950:	10005200 	call	1000520 <accelFetchEvents>
 1000954:	e0bffa15 	stw	r2,-24(fp)
 1000958:	e13ffb17 	ldw	r4,-20(fp)
 100095c:	10007b00 	call	10007b0 <fetchCO2>
 1000960:	e0bff98d 	sth	r2,-26(fp)
 1000964:	e0bff98b 	ldhu	r2,-26(fp)
 1000968:	10000226 	beq	r2,zero,1000974 <main+0x7c>
 100096c:	e0bff98b 	ldhu	r2,-26(fp)
 1000970:	e0bfff8d 	sth	r2,-2(fp)
 1000974:	e0bffc17 	ldw	r2,-16(fp)
 1000978:	10000b1e 	bne	r2,zero,10009a8 <main+0xb0>
 100097c:	e0bffa17 	ldw	r2,-24(fp)
 1000980:	10800098 	cmpnei	r2,r2,2
 1000984:	1000041e 	bne	r2,zero,1000998 <main+0xa0>
 1000988:	00800044 	movi	r2,1
 100098c:	e0bffc15 	stw	r2,-16(fp)
 1000990:	d0a72117 	ldw	r2,-25468(gp)
 1000994:	e0bffd15 	stw	r2,-12(fp)
 1000998:	e0bfff8b 	ldhu	r2,-2(fp)
 100099c:	1009883a 	mov	r4,r2
 10009a0:	1000af40 	call	1000af4 <displayOnLeds>
 10009a4:	00005006 	br	1000ae8 <main+0x1f0>
 10009a8:	e0bffa17 	ldw	r2,-24(fp)
 10009ac:	10800058 	cmpnei	r2,r2,1
 10009b0:	1000051e 	bne	r2,zero,10009c8 <main+0xd0>
 10009b4:	e0bfff8b 	ldhu	r2,-2(fp)
 10009b8:	1009883a 	mov	r4,r2
 10009bc:	1000af40 	call	1000af4 <displayOnLeds>
 10009c0:	0102ee04 	movi	r4,3000
 10009c4:	1000bfc0 	call	1000bfc <mysleep>
 10009c8:	d0e72117 	ldw	r3,-25468(gp)
 10009cc:	e0bffd17 	ldw	r2,-12(fp)
 10009d0:	1885c83a 	sub	r2,r3,r2
 10009d4:	e0bffe15 	stw	r2,-8(fp)
 10009d8:	e0bffc17 	ldw	r2,-16(fp)
 10009dc:	10800058 	cmpnei	r2,r2,1
 10009e0:	1000111e 	bne	r2,zero,1000a28 <main+0x130>
 10009e4:	01000044 	movi	r4,1
 10009e8:	1000b600 	call	1000b60 <blinkOnLeds>
 10009ec:	e0bffa17 	ldw	r2,-24(fp)
 10009f0:	10800098 	cmpnei	r2,r2,2
 10009f4:	1000021e 	bne	r2,zero,1000a00 <main+0x108>
 10009f8:	e03ffc15 	stw	zero,-16(fp)
 10009fc:	00003a06 	br	1000ae8 <main+0x1f0>
 1000a00:	d0a72017 	ldw	r2,-25472(gp)
 1000a04:	01417704 	movi	r5,1500
 1000a08:	1009883a 	mov	r4,r2
 1000a0c:	1000e300 	call	1000e30 <__mulsi3>
 1000a10:	1007883a 	mov	r3,r2
 1000a14:	e0bffe17 	ldw	r2,-8(fp)
 1000a18:	10c03336 	bltu	r2,r3,1000ae8 <main+0x1f0>
 1000a1c:	00800084 	movi	r2,2
 1000a20:	e0bffc15 	stw	r2,-16(fp)
 1000a24:	00003006 	br	1000ae8 <main+0x1f0>
 1000a28:	e0bffc17 	ldw	r2,-16(fp)
 1000a2c:	10800098 	cmpnei	r2,r2,2
 1000a30:	10000a1e 	bne	r2,zero,1000a5c <main+0x164>
 1000a34:	01000084 	movi	r4,2
 1000a38:	1000b600 	call	1000b60 <blinkOnLeds>
 1000a3c:	e0bffa17 	ldw	r2,-24(fp)
 1000a40:	10800098 	cmpnei	r2,r2,2
 1000a44:	1000281e 	bne	r2,zero,1000ae8 <main+0x1f0>
 1000a48:	008000c4 	movi	r2,3
 1000a4c:	e0bffc15 	stw	r2,-16(fp)
 1000a50:	d0a72117 	ldw	r2,-25468(gp)
 1000a54:	e0bffd15 	stw	r2,-12(fp)
 1000a58:	00002306 	br	1000ae8 <main+0x1f0>
 1000a5c:	e0bffc17 	ldw	r2,-16(fp)
 1000a60:	108000d8 	cmpnei	r2,r2,3
 1000a64:	1000111e 	bne	r2,zero,1000aac <main+0x1b4>
 1000a68:	01000104 	movi	r4,4
 1000a6c:	1000b600 	call	1000b60 <blinkOnLeds>
 1000a70:	e0bffa17 	ldw	r2,-24(fp)
 1000a74:	10800098 	cmpnei	r2,r2,2
 1000a78:	1000021e 	bne	r2,zero,1000a84 <main+0x18c>
 1000a7c:	e03ffc15 	stw	zero,-16(fp)
 1000a80:	00001906 	br	1000ae8 <main+0x1f0>
 1000a84:	d0a72017 	ldw	r2,-25472(gp)
 1000a88:	01404b04 	movi	r5,300
 1000a8c:	1009883a 	mov	r4,r2
 1000a90:	1000e300 	call	1000e30 <__mulsi3>
 1000a94:	1007883a 	mov	r3,r2
 1000a98:	e0bffe17 	ldw	r2,-8(fp)
 1000a9c:	10c01236 	bltu	r2,r3,1000ae8 <main+0x1f0>
 1000aa0:	00800104 	movi	r2,4
 1000aa4:	e0bffc15 	stw	r2,-16(fp)
 1000aa8:	00000f06 	br	1000ae8 <main+0x1f0>
 1000aac:	e0bffc17 	ldw	r2,-16(fp)
 1000ab0:	10800118 	cmpnei	r2,r2,4
 1000ab4:	10000c1e 	bne	r2,zero,1000ae8 <main+0x1f0>
 1000ab8:	1000bc80 	call	1000bc8 <clearLeds>
 1000abc:	e0bffa17 	ldw	r2,-24(fp)
 1000ac0:	10800060 	cmpeqi	r2,r2,1
 1000ac4:	1000071e 	bne	r2,zero,1000ae4 <main+0x1ec>
 1000ac8:	d0a72017 	ldw	r2,-25472(gp)
 1000acc:	01409604 	movi	r5,600
 1000ad0:	1009883a 	mov	r4,r2
 1000ad4:	1000e300 	call	1000e30 <__mulsi3>
 1000ad8:	1007883a 	mov	r3,r2
 1000adc:	e0bffe17 	ldw	r2,-8(fp)
 1000ae0:	10c00136 	bltu	r2,r3,1000ae8 <main+0x1f0>
 1000ae4:	e03ffc15 	stw	zero,-16(fp)
 1000ae8:	01001904 	movi	r4,100
 1000aec:	1000bfc0 	call	1000bfc <mysleep>
 1000af0:	003f8e06 	br	100092c <main+0x34>

01000af4 <displayOnLeds>:
 1000af4:	defffe04 	addi	sp,sp,-8
 1000af8:	df000115 	stw	fp,4(sp)
 1000afc:	df000104 	addi	fp,sp,4
 1000b00:	e13fff15 	stw	r4,-4(fp)
 1000b04:	e0bfff17 	ldw	r2,-4(fp)
 1000b08:	10811328 	cmpgeui	r2,r2,1100
 1000b0c:	1000031e 	bne	r2,zero,1000b1c <displayOnLeds+0x28>
 1000b10:	00800104 	movi	r2,4
 1000b14:	d0a71615 	stw	r2,-25512(gp)
 1000b18:	00000806 	br	1000b3c <displayOnLeds+0x48>
 1000b1c:	e0bfff17 	ldw	r2,-4(fp)
 1000b20:	1082ee28 	cmpgeui	r2,r2,3000
 1000b24:	1000031e 	bne	r2,zero,1000b34 <displayOnLeds+0x40>
 1000b28:	00800084 	movi	r2,2
 1000b2c:	d0a71615 	stw	r2,-25512(gp)
 1000b30:	00000206 	br	1000b3c <displayOnLeds+0x48>
 1000b34:	00800044 	movi	r2,1
 1000b38:	d0a71615 	stw	r2,-25512(gp)
 1000b3c:	d0a71617 	ldw	r2,-25512(gp)
 1000b40:	1007883a 	mov	r3,r2
 1000b44:	00810034 	movhi	r2,1024
 1000b48:	10d40c35 	stwio	r3,20528(r2)
 1000b4c:	0001883a 	nop
 1000b50:	e037883a 	mov	sp,fp
 1000b54:	df000017 	ldw	fp,0(sp)
 1000b58:	dec00104 	addi	sp,sp,4
 1000b5c:	f800283a 	ret

01000b60 <blinkOnLeds>:
 1000b60:	defffd04 	addi	sp,sp,-12
 1000b64:	dfc00215 	stw	ra,8(sp)
 1000b68:	df000115 	stw	fp,4(sp)
 1000b6c:	df000104 	addi	fp,sp,4
 1000b70:	2005883a 	mov	r2,r4
 1000b74:	e0bfff05 	stb	r2,-4(fp)
 1000b78:	e0ffff03 	ldbu	r3,-4(fp)
 1000b7c:	00810034 	movhi	r2,1024
 1000b80:	10d40c35 	stwio	r3,20528(r2)
 1000b84:	01007d04 	movi	r4,500
 1000b88:	1000bfc0 	call	1000bfc <mysleep>
 1000b8c:	0007883a 	mov	r3,zero
 1000b90:	00810034 	movhi	r2,1024
 1000b94:	10d40c35 	stwio	r3,20528(r2)
 1000b98:	01007d04 	movi	r4,500
 1000b9c:	1000bfc0 	call	1000bfc <mysleep>
 1000ba0:	d0a71617 	ldw	r2,-25512(gp)
 1000ba4:	1007883a 	mov	r3,r2
 1000ba8:	00810034 	movhi	r2,1024
 1000bac:	10d40c35 	stwio	r3,20528(r2)
 1000bb0:	0001883a 	nop
 1000bb4:	e037883a 	mov	sp,fp
 1000bb8:	dfc00117 	ldw	ra,4(sp)
 1000bbc:	df000017 	ldw	fp,0(sp)
 1000bc0:	dec00204 	addi	sp,sp,8
 1000bc4:	f800283a 	ret

01000bc8 <clearLeds>:
 1000bc8:	deffff04 	addi	sp,sp,-4
 1000bcc:	df000015 	stw	fp,0(sp)
 1000bd0:	d839883a 	mov	fp,sp
 1000bd4:	d0271615 	stw	zero,-25512(gp)
 1000bd8:	d0a71617 	ldw	r2,-25512(gp)
 1000bdc:	1007883a 	mov	r3,r2
 1000be0:	00810034 	movhi	r2,1024
 1000be4:	10d40c35 	stwio	r3,20528(r2)
 1000be8:	0001883a 	nop
 1000bec:	e037883a 	mov	sp,fp
 1000bf0:	df000017 	ldw	fp,0(sp)
 1000bf4:	dec00104 	addi	sp,sp,4
 1000bf8:	f800283a 	ret

01000bfc <mysleep>:
 1000bfc:	defffc04 	addi	sp,sp,-16
 1000c00:	dfc00315 	stw	ra,12(sp)
 1000c04:	df000215 	stw	fp,8(sp)
 1000c08:	df000204 	addi	fp,sp,8
 1000c0c:	e13ffe15 	stw	r4,-8(fp)
 1000c10:	d0a71717 	ldw	r2,-25508(gp)
 1000c14:	1000021e 	bne	r2,zero,1000c20 <mysleep+0x24>
 1000c18:	d0a72117 	ldw	r2,-25468(gp)
 1000c1c:	d0a71715 	stw	r2,-25508(gp)
 1000c20:	d0a72017 	ldw	r2,-25472(gp)
 1000c24:	e17ffe17 	ldw	r5,-8(fp)
 1000c28:	1009883a 	mov	r4,r2
 1000c2c:	1000e300 	call	1000e30 <__mulsi3>
 1000c30:	0140fa04 	movi	r5,1000
 1000c34:	1009883a 	mov	r4,r2
 1000c38:	1000d700 	call	1000d70 <__udivsi3>
 1000c3c:	1007883a 	mov	r3,r2
 1000c40:	d0a71717 	ldw	r2,-25508(gp)
 1000c44:	1885883a 	add	r2,r3,r2
 1000c48:	e0bfff15 	stw	r2,-4(fp)
 1000c4c:	0001883a 	nop
 1000c50:	d0a72117 	ldw	r2,-25468(gp)
 1000c54:	e0ffff17 	ldw	r3,-4(fp)
 1000c58:	18bffd2e 	bgeu	r3,r2,1000c50 <mysleep+0x54>
 1000c5c:	e0bfff17 	ldw	r2,-4(fp)
 1000c60:	d0a71715 	stw	r2,-25508(gp)
 1000c64:	0001883a 	nop
 1000c68:	e037883a 	mov	sp,fp
 1000c6c:	dfc00117 	ldw	ra,4(sp)
 1000c70:	df000017 	ldw	fp,0(sp)
 1000c74:	dec00204 	addi	sp,sp,8
 1000c78:	f800283a 	ret

01000c7c <__divsi3>:
 1000c7c:	20001a16 	blt	r4,zero,1000ce8 <__divsi3+0x6c>
 1000c80:	000f883a 	mov	r7,zero
 1000c84:	2800020e 	bge	r5,zero,1000c90 <__divsi3+0x14>
 1000c88:	014bc83a 	sub	r5,zero,r5
 1000c8c:	39c0005c 	xori	r7,r7,1
 1000c90:	200d883a 	mov	r6,r4
 1000c94:	00c00044 	movi	r3,1
 1000c98:	2900092e 	bgeu	r5,r4,1000cc0 <__divsi3+0x44>
 1000c9c:	00800804 	movi	r2,32
 1000ca0:	00c00044 	movi	r3,1
 1000ca4:	00000106 	br	1000cac <__divsi3+0x30>
 1000ca8:	10001226 	beq	r2,zero,1000cf4 <__divsi3+0x78>
 1000cac:	294b883a 	add	r5,r5,r5
 1000cb0:	10bfffc4 	addi	r2,r2,-1
 1000cb4:	18c7883a 	add	r3,r3,r3
 1000cb8:	293ffb36 	bltu	r5,r4,1000ca8 <__divsi3+0x2c>
 1000cbc:	18000d26 	beq	r3,zero,1000cf4 <__divsi3+0x78>
 1000cc0:	0005883a 	mov	r2,zero
 1000cc4:	31400236 	bltu	r6,r5,1000cd0 <__divsi3+0x54>
 1000cc8:	314dc83a 	sub	r6,r6,r5
 1000ccc:	10c4b03a 	or	r2,r2,r3
 1000cd0:	1806d07a 	srli	r3,r3,1
 1000cd4:	280ad07a 	srli	r5,r5,1
 1000cd8:	183ffa1e 	bne	r3,zero,1000cc4 <__divsi3+0x48>
 1000cdc:	38000126 	beq	r7,zero,1000ce4 <__divsi3+0x68>
 1000ce0:	0085c83a 	sub	r2,zero,r2
 1000ce4:	f800283a 	ret
 1000ce8:	0109c83a 	sub	r4,zero,r4
 1000cec:	01c00044 	movi	r7,1
 1000cf0:	003fe406 	br	1000c84 <__divsi3+0x8>
 1000cf4:	0005883a 	mov	r2,zero
 1000cf8:	003ff806 	br	1000cdc <__divsi3+0x60>

01000cfc <__modsi3>:
 1000cfc:	20001916 	blt	r4,zero,1000d64 <__modsi3+0x68>
 1000d00:	000f883a 	mov	r7,zero
 1000d04:	2005883a 	mov	r2,r4
 1000d08:	2800010e 	bge	r5,zero,1000d10 <__modsi3+0x14>
 1000d0c:	014bc83a 	sub	r5,zero,r5
 1000d10:	00c00044 	movi	r3,1
 1000d14:	2900092e 	bgeu	r5,r4,1000d3c <__modsi3+0x40>
 1000d18:	01800804 	movi	r6,32
 1000d1c:	00c00044 	movi	r3,1
 1000d20:	00000106 	br	1000d28 <__modsi3+0x2c>
 1000d24:	30000d26 	beq	r6,zero,1000d5c <__modsi3+0x60>
 1000d28:	294b883a 	add	r5,r5,r5
 1000d2c:	31bfffc4 	addi	r6,r6,-1
 1000d30:	18c7883a 	add	r3,r3,r3
 1000d34:	293ffb36 	bltu	r5,r4,1000d24 <__modsi3+0x28>
 1000d38:	18000826 	beq	r3,zero,1000d5c <__modsi3+0x60>
 1000d3c:	1806d07a 	srli	r3,r3,1
 1000d40:	11400136 	bltu	r2,r5,1000d48 <__modsi3+0x4c>
 1000d44:	1145c83a 	sub	r2,r2,r5
 1000d48:	280ad07a 	srli	r5,r5,1
 1000d4c:	183ffb1e 	bne	r3,zero,1000d3c <__modsi3+0x40>
 1000d50:	38000126 	beq	r7,zero,1000d58 <__modsi3+0x5c>
 1000d54:	0085c83a 	sub	r2,zero,r2
 1000d58:	f800283a 	ret
 1000d5c:	2005883a 	mov	r2,r4
 1000d60:	003ffb06 	br	1000d50 <__modsi3+0x54>
 1000d64:	0109c83a 	sub	r4,zero,r4
 1000d68:	01c00044 	movi	r7,1
 1000d6c:	003fe506 	br	1000d04 <__modsi3+0x8>

01000d70 <__udivsi3>:
 1000d70:	200d883a 	mov	r6,r4
 1000d74:	2900152e 	bgeu	r5,r4,1000dcc <__udivsi3+0x5c>
 1000d78:	28001416 	blt	r5,zero,1000dcc <__udivsi3+0x5c>
 1000d7c:	00800804 	movi	r2,32
 1000d80:	00c00044 	movi	r3,1
 1000d84:	00000206 	br	1000d90 <__udivsi3+0x20>
 1000d88:	10000e26 	beq	r2,zero,1000dc4 <__udivsi3+0x54>
 1000d8c:	28000516 	blt	r5,zero,1000da4 <__udivsi3+0x34>
 1000d90:	294b883a 	add	r5,r5,r5
 1000d94:	10bfffc4 	addi	r2,r2,-1
 1000d98:	18c7883a 	add	r3,r3,r3
 1000d9c:	293ffa36 	bltu	r5,r4,1000d88 <__udivsi3+0x18>
 1000da0:	18000826 	beq	r3,zero,1000dc4 <__udivsi3+0x54>
 1000da4:	0005883a 	mov	r2,zero
 1000da8:	31400236 	bltu	r6,r5,1000db4 <__udivsi3+0x44>
 1000dac:	314dc83a 	sub	r6,r6,r5
 1000db0:	10c4b03a 	or	r2,r2,r3
 1000db4:	1806d07a 	srli	r3,r3,1
 1000db8:	280ad07a 	srli	r5,r5,1
 1000dbc:	183ffa1e 	bne	r3,zero,1000da8 <__udivsi3+0x38>
 1000dc0:	f800283a 	ret
 1000dc4:	0005883a 	mov	r2,zero
 1000dc8:	f800283a 	ret
 1000dcc:	00c00044 	movi	r3,1
 1000dd0:	003ff406 	br	1000da4 <__udivsi3+0x34>

01000dd4 <__umodsi3>:
 1000dd4:	2005883a 	mov	r2,r4
 1000dd8:	2900132e 	bgeu	r5,r4,1000e28 <__umodsi3+0x54>
 1000ddc:	28001216 	blt	r5,zero,1000e28 <__umodsi3+0x54>
 1000de0:	01800804 	movi	r6,32
 1000de4:	00c00044 	movi	r3,1
 1000de8:	00000206 	br	1000df4 <__umodsi3+0x20>
 1000dec:	30000c26 	beq	r6,zero,1000e20 <__umodsi3+0x4c>
 1000df0:	28000516 	blt	r5,zero,1000e08 <__umodsi3+0x34>
 1000df4:	294b883a 	add	r5,r5,r5
 1000df8:	31bfffc4 	addi	r6,r6,-1
 1000dfc:	18c7883a 	add	r3,r3,r3
 1000e00:	293ffa36 	bltu	r5,r4,1000dec <__umodsi3+0x18>
 1000e04:	18000626 	beq	r3,zero,1000e20 <__umodsi3+0x4c>
 1000e08:	1806d07a 	srli	r3,r3,1
 1000e0c:	11400136 	bltu	r2,r5,1000e14 <__umodsi3+0x40>
 1000e10:	1145c83a 	sub	r2,r2,r5
 1000e14:	280ad07a 	srli	r5,r5,1
 1000e18:	183ffb1e 	bne	r3,zero,1000e08 <__umodsi3+0x34>
 1000e1c:	f800283a 	ret
 1000e20:	2005883a 	mov	r2,r4
 1000e24:	f800283a 	ret
 1000e28:	00c00044 	movi	r3,1
 1000e2c:	003ff606 	br	1000e08 <__umodsi3+0x34>

01000e30 <__mulsi3>:
 1000e30:	0005883a 	mov	r2,zero
 1000e34:	20000726 	beq	r4,zero,1000e54 <__mulsi3+0x24>
 1000e38:	20c0004c 	andi	r3,r4,1
 1000e3c:	2008d07a 	srli	r4,r4,1
 1000e40:	18000126 	beq	r3,zero,1000e48 <__mulsi3+0x18>
 1000e44:	1145883a 	add	r2,r2,r5
 1000e48:	294b883a 	add	r5,r5,r5
 1000e4c:	203ffa1e 	bne	r4,zero,1000e38 <__mulsi3+0x8>
 1000e50:	f800283a 	ret
 1000e54:	f800283a 	ret

01000e58 <_printf_r>:
 1000e58:	defffd04 	addi	sp,sp,-12
 1000e5c:	2805883a 	mov	r2,r5
 1000e60:	dfc00015 	stw	ra,0(sp)
 1000e64:	d9800115 	stw	r6,4(sp)
 1000e68:	d9c00215 	stw	r7,8(sp)
 1000e6c:	21400217 	ldw	r5,8(r4)
 1000e70:	d9c00104 	addi	r7,sp,4
 1000e74:	100d883a 	mov	r6,r2
 1000e78:	10010340 	call	1001034 <___vfprintf_internal_r>
 1000e7c:	dfc00017 	ldw	ra,0(sp)
 1000e80:	dec00304 	addi	sp,sp,12
 1000e84:	f800283a 	ret

01000e88 <printf>:
 1000e88:	defffc04 	addi	sp,sp,-16
 1000e8c:	dfc00015 	stw	ra,0(sp)
 1000e90:	d9400115 	stw	r5,4(sp)
 1000e94:	d9800215 	stw	r6,8(sp)
 1000e98:	d9c00315 	stw	r7,12(sp)
 1000e9c:	00804074 	movhi	r2,257
 1000ea0:	1091d517 	ldw	r2,18260(r2)
 1000ea4:	200b883a 	mov	r5,r4
 1000ea8:	d9800104 	addi	r6,sp,4
 1000eac:	11000217 	ldw	r4,8(r2)
 1000eb0:	10031200 	call	1003120 <__vfprintf_internal>
 1000eb4:	dfc00017 	ldw	ra,0(sp)
 1000eb8:	dec00404 	addi	sp,sp,16
 1000ebc:	f800283a 	ret

01000ec0 <_puts_r>:
 1000ec0:	defff504 	addi	sp,sp,-44
 1000ec4:	dc000815 	stw	r16,32(sp)
 1000ec8:	2021883a 	mov	r16,r4
 1000ecc:	2809883a 	mov	r4,r5
 1000ed0:	dc400915 	stw	r17,36(sp)
 1000ed4:	dfc00a15 	stw	ra,40(sp)
 1000ed8:	2823883a 	mov	r17,r5
 1000edc:	1000f9c0 	call	1000f9c <strlen>
 1000ee0:	11000044 	addi	r4,r2,1
 1000ee4:	d8800515 	stw	r2,20(sp)
 1000ee8:	00800044 	movi	r2,1
 1000eec:	00c04074 	movhi	r3,257
 1000ef0:	d8800715 	stw	r2,28(sp)
 1000ef4:	d8800404 	addi	r2,sp,16
 1000ef8:	18c93d04 	addi	r3,r3,9460
 1000efc:	d8800115 	stw	r2,4(sp)
 1000f00:	00800084 	movi	r2,2
 1000f04:	dc400415 	stw	r17,16(sp)
 1000f08:	d8c00615 	stw	r3,24(sp)
 1000f0c:	d9000315 	stw	r4,12(sp)
 1000f10:	d8800215 	stw	r2,8(sp)
 1000f14:	81400217 	ldw	r5,8(r16)
 1000f18:	80000226 	beq	r16,zero,1000f24 <_puts_r+0x64>
 1000f1c:	80800e17 	ldw	r2,56(r16)
 1000f20:	10001326 	beq	r2,zero,1000f70 <_puts_r+0xb0>
 1000f24:	2880030b 	ldhu	r2,12(r5)
 1000f28:	10c8000c 	andi	r3,r2,8192
 1000f2c:	1800061e 	bne	r3,zero,1000f48 <_puts_r+0x88>
 1000f30:	28c01917 	ldw	r3,100(r5)
 1000f34:	0137ffc4 	movi	r4,-8193
 1000f38:	10880014 	ori	r2,r2,8192
 1000f3c:	1906703a 	and	r3,r3,r4
 1000f40:	2880030d 	sth	r2,12(r5)
 1000f44:	28c01915 	stw	r3,100(r5)
 1000f48:	d9800104 	addi	r6,sp,4
 1000f4c:	8009883a 	mov	r4,r16
 1000f50:	10056e40 	call	10056e4 <__sfvwrite_r>
 1000f54:	10000b1e 	bne	r2,zero,1000f84 <_puts_r+0xc4>
 1000f58:	00800284 	movi	r2,10
 1000f5c:	dfc00a17 	ldw	ra,40(sp)
 1000f60:	dc400917 	ldw	r17,36(sp)
 1000f64:	dc000817 	ldw	r16,32(sp)
 1000f68:	dec00b04 	addi	sp,sp,44
 1000f6c:	f800283a 	ret
 1000f70:	8009883a 	mov	r4,r16
 1000f74:	d9400015 	stw	r5,0(sp)
 1000f78:	10052840 	call	1005284 <__sinit>
 1000f7c:	d9400017 	ldw	r5,0(sp)
 1000f80:	003fe806 	br	1000f24 <_puts_r+0x64>
 1000f84:	00bfffc4 	movi	r2,-1
 1000f88:	003ff406 	br	1000f5c <_puts_r+0x9c>

01000f8c <puts>:
 1000f8c:	00804074 	movhi	r2,257
 1000f90:	200b883a 	mov	r5,r4
 1000f94:	1111d517 	ldw	r4,18260(r2)
 1000f98:	1000ec01 	jmpi	1000ec0 <_puts_r>

01000f9c <strlen>:
 1000f9c:	208000cc 	andi	r2,r4,3
 1000fa0:	10000926 	beq	r2,zero,1000fc8 <strlen+0x2c>
 1000fa4:	2005883a 	mov	r2,r4
 1000fa8:	00000306 	br	1000fb8 <strlen+0x1c>
 1000fac:	10800044 	addi	r2,r2,1
 1000fb0:	10c000cc 	andi	r3,r2,3
 1000fb4:	18000526 	beq	r3,zero,1000fcc <strlen+0x30>
 1000fb8:	10c00007 	ldb	r3,0(r2)
 1000fbc:	183ffb1e 	bne	r3,zero,1000fac <strlen+0x10>
 1000fc0:	1105c83a 	sub	r2,r2,r4
 1000fc4:	f800283a 	ret
 1000fc8:	2005883a 	mov	r2,r4
 1000fcc:	11400017 	ldw	r5,0(r2)
 1000fd0:	01ffbff4 	movhi	r7,65279
 1000fd4:	39ffbfc4 	addi	r7,r7,-257
 1000fd8:	29c7883a 	add	r3,r5,r7
 1000fdc:	01a02074 	movhi	r6,32897
 1000fe0:	014a303a 	nor	r5,zero,r5
 1000fe4:	1946703a 	and	r3,r3,r5
 1000fe8:	31a02004 	addi	r6,r6,-32640
 1000fec:	1986703a 	and	r3,r3,r6
 1000ff0:	1800071e 	bne	r3,zero,1001010 <strlen+0x74>
 1000ff4:	11400117 	ldw	r5,4(r2)
 1000ff8:	10800104 	addi	r2,r2,4
 1000ffc:	29c7883a 	add	r3,r5,r7
 1001000:	014a303a 	nor	r5,zero,r5
 1001004:	1946703a 	and	r3,r3,r5
 1001008:	1986703a 	and	r3,r3,r6
 100100c:	183ff926 	beq	r3,zero,1000ff4 <strlen+0x58>
 1001010:	10c00007 	ldb	r3,0(r2)
 1001014:	183fea26 	beq	r3,zero,1000fc0 <strlen+0x24>
 1001018:	10c00047 	ldb	r3,1(r2)
 100101c:	10800044 	addi	r2,r2,1
 1001020:	183fe726 	beq	r3,zero,1000fc0 <strlen+0x24>
 1001024:	10c00047 	ldb	r3,1(r2)
 1001028:	10800044 	addi	r2,r2,1
 100102c:	183ffa1e 	bne	r3,zero,1001018 <strlen+0x7c>
 1001030:	003fe306 	br	1000fc0 <strlen+0x24>

01001034 <___vfprintf_internal_r>:
 1001034:	deffbf04 	addi	sp,sp,-260
 1001038:	dfc04015 	stw	ra,256(sp)
 100103c:	dd803d15 	stw	r22,244(sp)
 1001040:	dcc03a15 	stw	r19,232(sp)
 1001044:	dc803915 	stw	r18,228(sp)
 1001048:	2027883a 	mov	r19,r4
 100104c:	2825883a 	mov	r18,r5
 1001050:	302d883a 	mov	r22,r6
 1001054:	d9c00615 	stw	r7,24(sp)
 1001058:	df003f15 	stw	fp,252(sp)
 100105c:	ddc03e15 	stw	r23,248(sp)
 1001060:	dd403c15 	stw	r21,240(sp)
 1001064:	dd003b15 	stw	r20,236(sp)
 1001068:	dc403815 	stw	r17,224(sp)
 100106c:	dc003715 	stw	r16,220(sp)
 1001070:	1005cf80 	call	1005cf8 <_localeconv_r>
 1001074:	10800017 	ldw	r2,0(r2)
 1001078:	1009883a 	mov	r4,r2
 100107c:	d8800d15 	stw	r2,52(sp)
 1001080:	1000f9c0 	call	1000f9c <strlen>
 1001084:	d8800b15 	stw	r2,44(sp)
 1001088:	98000226 	beq	r19,zero,1001094 <___vfprintf_internal_r+0x60>
 100108c:	98800e17 	ldw	r2,56(r19)
 1001090:	1001d726 	beq	r2,zero,10017f0 <___vfprintf_internal_r+0x7bc>
 1001094:	9080030b 	ldhu	r2,12(r18)
 1001098:	10c8000c 	andi	r3,r2,8192
 100109c:	1800061e 	bne	r3,zero,10010b8 <___vfprintf_internal_r+0x84>
 10010a0:	90c01917 	ldw	r3,100(r18)
 10010a4:	0137ffc4 	movi	r4,-8193
 10010a8:	10880014 	ori	r2,r2,8192
 10010ac:	1906703a 	and	r3,r3,r4
 10010b0:	9080030d 	sth	r2,12(r18)
 10010b4:	90c01915 	stw	r3,100(r18)
 10010b8:	10c0020c 	andi	r3,r2,8
 10010bc:	1800fc26 	beq	r3,zero,10014b0 <___vfprintf_internal_r+0x47c>
 10010c0:	90c00417 	ldw	r3,16(r18)
 10010c4:	1800fa26 	beq	r3,zero,10014b0 <___vfprintf_internal_r+0x47c>
 10010c8:	1080068c 	andi	r2,r2,26
 10010cc:	10800298 	cmpnei	r2,r2,10
 10010d0:	1000ff26 	beq	r2,zero,10014d0 <___vfprintf_internal_r+0x49c>
 10010d4:	d8802704 	addi	r2,sp,156
 10010d8:	b02f883a 	mov	r23,r22
 10010dc:	d8801a15 	stw	r2,104(sp)
 10010e0:	d8001c15 	stw	zero,112(sp)
 10010e4:	d8001b15 	stw	zero,108(sp)
 10010e8:	d8000815 	stw	zero,32(sp)
 10010ec:	d8000915 	stw	zero,36(sp)
 10010f0:	d8000a15 	stw	zero,40(sp)
 10010f4:	d8000c15 	stw	zero,48(sp)
 10010f8:	d8001015 	stw	zero,64(sp)
 10010fc:	d8000515 	stw	zero,20(sp)
 1001100:	102d883a 	mov	r22,r2
 1001104:	b8800007 	ldb	r2,0(r23)
 1001108:	1000d726 	beq	r2,zero,1001468 <___vfprintf_internal_r+0x434>
 100110c:	b821883a 	mov	r16,r23
 1001110:	00000306 	br	1001120 <___vfprintf_internal_r+0xec>
 1001114:	80800047 	ldb	r2,1(r16)
 1001118:	84000044 	addi	r16,r16,1
 100111c:	10011926 	beq	r2,zero,1001584 <___vfprintf_internal_r+0x550>
 1001120:	10800958 	cmpnei	r2,r2,37
 1001124:	103ffb1e 	bne	r2,zero,1001114 <___vfprintf_internal_r+0xe0>
 1001128:	85e3c83a 	sub	r17,r16,r23
 100112c:	85c1171e 	bne	r16,r23,100158c <___vfprintf_internal_r+0x558>
 1001130:	80800003 	ldbu	r2,0(r16)
 1001134:	10803fcc 	andi	r2,r2,255
 1001138:	1080201c 	xori	r2,r2,128
 100113c:	10bfe004 	addi	r2,r2,-128
 1001140:	1000c926 	beq	r2,zero,1001468 <___vfprintf_internal_r+0x434>
 1001144:	82c00047 	ldb	r11,1(r16)
 1001148:	85c00044 	addi	r23,r16,1
 100114c:	d8001345 	stb	zero,77(sp)
 1001150:	0009883a 	mov	r4,zero
 1001154:	000b883a 	mov	r5,zero
 1001158:	023fffc4 	movi	r8,-1
 100115c:	0021883a 	mov	r16,zero
 1001160:	0019883a 	mov	r12,zero
 1001164:	bdc00044 	addi	r23,r23,1
 1001168:	5839883a 	mov	fp,r11
 100116c:	e0bff804 	addi	r2,fp,-32
 1001170:	10c01668 	cmpgeui	r3,r2,89
 1001174:	18006c1e 	bne	r3,zero,1001328 <___vfprintf_internal_r+0x2f4>
 1001178:	100490ba 	slli	r2,r2,2
 100117c:	00c04034 	movhi	r3,256
 1001180:	10c7883a 	add	r3,r2,r3
 1001184:	18846317 	ldw	r2,4492(r3)
 1001188:	1000683a 	jmp	r2
 100118c:	01001b78 	rdprs	r4,zero,109
 1001190:	01001328 	cmpgeui	r4,zero,76
 1001194:	01001328 	cmpgeui	r4,zero,76
 1001198:	01001b6c 	andhi	r4,zero,109
 100119c:	01001328 	cmpgeui	r4,zero,76
 10011a0:	01001328 	cmpgeui	r4,zero,76
 10011a4:	01001328 	cmpgeui	r4,zero,76
 10011a8:	01001328 	cmpgeui	r4,zero,76
 10011ac:	01001328 	cmpgeui	r4,zero,76
 10011b0:	01001328 	cmpgeui	r4,zero,76
 10011b4:	01001b44 	movi	r4,109
 10011b8:	01001b34 	movhi	r4,108
 10011bc:	01001328 	cmpgeui	r4,zero,76
 10011c0:	01001b1c 	xori	r4,zero,108
 10011c4:	01001ad0 	cmplti	r4,zero,107
 10011c8:	01001328 	cmpgeui	r4,zero,76
 10011cc:	01001ac4 	movi	r4,107
 10011d0:	010012f0 	cmpltui	r4,zero,75
 10011d4:	010012f0 	cmpltui	r4,zero,75
 10011d8:	010012f0 	cmpltui	r4,zero,75
 10011dc:	010012f0 	cmpltui	r4,zero,75
 10011e0:	010012f0 	cmpltui	r4,zero,75
 10011e4:	010012f0 	cmpltui	r4,zero,75
 10011e8:	010012f0 	cmpltui	r4,zero,75
 10011ec:	010012f0 	cmpltui	r4,zero,75
 10011f0:	010012f0 	cmpltui	r4,zero,75
 10011f4:	01001328 	cmpgeui	r4,zero,76
 10011f8:	01001328 	cmpgeui	r4,zero,76
 10011fc:	01001328 	cmpgeui	r4,zero,76
 1001200:	01001328 	cmpgeui	r4,zero,76
 1001204:	01001328 	cmpgeui	r4,zero,76
 1001208:	01001328 	cmpgeui	r4,zero,76
 100120c:	01001328 	cmpgeui	r4,zero,76
 1001210:	01001328 	cmpgeui	r4,zero,76
 1001214:	01001328 	cmpgeui	r4,zero,76
 1001218:	01001328 	cmpgeui	r4,zero,76
 100121c:	010019b8 	rdprs	r4,zero,102
 1001220:	010015e8 	cmpgeui	r4,zero,87
 1001224:	01001328 	cmpgeui	r4,zero,76
 1001228:	010015e8 	cmpgeui	r4,zero,87
 100122c:	01001328 	cmpgeui	r4,zero,76
 1001230:	01001328 	cmpgeui	r4,zero,76
 1001234:	01001328 	cmpgeui	r4,zero,76
 1001238:	01001328 	cmpgeui	r4,zero,76
 100123c:	01001ba4 	muli	r4,zero,110
 1001240:	01001328 	cmpgeui	r4,zero,76
 1001244:	01001328 	cmpgeui	r4,zero,76
 1001248:	0100151c 	xori	r4,zero,84
 100124c:	01001328 	cmpgeui	r4,zero,76
 1001250:	01001328 	cmpgeui	r4,zero,76
 1001254:	01001328 	cmpgeui	r4,zero,76
 1001258:	01001328 	cmpgeui	r4,zero,76
 100125c:	01001328 	cmpgeui	r4,zero,76
 1001260:	010014f4 	movhi	r4,83
 1001264:	01001328 	cmpgeui	r4,zero,76
 1001268:	01001328 	cmpgeui	r4,zero,76
 100126c:	01001bd8 	cmpnei	r4,zero,111
 1001270:	01001328 	cmpgeui	r4,zero,76
 1001274:	01001328 	cmpgeui	r4,zero,76
 1001278:	01001328 	cmpgeui	r4,zero,76
 100127c:	01001328 	cmpgeui	r4,zero,76
 1001280:	01001328 	cmpgeui	r4,zero,76
 1001284:	01001328 	cmpgeui	r4,zero,76
 1001288:	01001328 	cmpgeui	r4,zero,76
 100128c:	01001328 	cmpgeui	r4,zero,76
 1001290:	01001328 	cmpgeui	r4,zero,76
 1001294:	01001328 	cmpgeui	r4,zero,76
 1001298:	01001bb0 	cmpltui	r4,zero,110
 100129c:	010017fc 	xorhi	r4,zero,95
 10012a0:	010015e8 	cmpgeui	r4,zero,87
 10012a4:	010015e8 	cmpgeui	r4,zero,87
 10012a8:	010015e8 	cmpgeui	r4,zero,87
 10012ac:	01001870 	cmpltui	r4,zero,97
 10012b0:	010017fc 	xorhi	r4,zero,95
 10012b4:	01001328 	cmpgeui	r4,zero,76
 10012b8:	01001328 	cmpgeui	r4,zero,76
 10012bc:	010019a4 	muli	r4,zero,102
 10012c0:	01001328 	cmpgeui	r4,zero,76
 10012c4:	01001968 	cmpgeui	r4,zero,101
 10012c8:	01001520 	cmpeqi	r4,zero,84
 10012cc:	01001928 	cmpgeui	r4,zero,100
 10012d0:	0100191c 	xori	r4,zero,100
 10012d4:	01001328 	cmpgeui	r4,zero,76
 10012d8:	010018c4 	movi	r4,99
 10012dc:	01001328 	cmpgeui	r4,zero,76
 10012e0:	010014f8 	rdprs	r4,zero,83
 10012e4:	01001328 	cmpgeui	r4,zero,76
 10012e8:	01001328 	cmpgeui	r4,zero,76
 10012ec:	0100187c 	xorhi	r4,zero,97
 10012f0:	0021883a 	mov	r16,zero
 10012f4:	e0fff404 	addi	r3,fp,-48
 10012f8:	800490ba 	slli	r2,r16,2
 10012fc:	bf000007 	ldb	fp,0(r23)
 1001300:	bdc00044 	addi	r23,r23,1
 1001304:	1421883a 	add	r16,r2,r16
 1001308:	8421883a 	add	r16,r16,r16
 100130c:	1c21883a 	add	r16,r3,r16
 1001310:	e0fff404 	addi	r3,fp,-48
 1001314:	188002b0 	cmpltui	r2,r3,10
 1001318:	103ff71e 	bne	r2,zero,10012f8 <___vfprintf_internal_r+0x2c4>
 100131c:	e0bff804 	addi	r2,fp,-32
 1001320:	10c01668 	cmpgeui	r3,r2,89
 1001324:	183f9426 	beq	r3,zero,1001178 <___vfprintf_internal_r+0x144>
 1001328:	21003fcc 	andi	r4,r4,255
 100132c:	20068f1e 	bne	r4,zero,1002d6c <___vfprintf_internal_r+0x1d38>
 1001330:	e0004d26 	beq	fp,zero,1001468 <___vfprintf_internal_r+0x434>
 1001334:	df001d05 	stb	fp,116(sp)
 1001338:	d8001345 	stb	zero,77(sp)
 100133c:	05000044 	movi	r20,1
 1001340:	05400044 	movi	r21,1
 1001344:	dc401d04 	addi	r17,sp,116
 1001348:	db000415 	stw	r12,16(sp)
 100134c:	0011883a 	mov	r8,zero
 1001350:	d8000715 	stw	zero,28(sp)
 1001354:	d8800417 	ldw	r2,16(sp)
 1001358:	1380008c 	andi	r14,r2,2
 100135c:	70000126 	beq	r14,zero,1001364 <___vfprintf_internal_r+0x330>
 1001360:	a5000084 	addi	r20,r20,2
 1001364:	d8800417 	ldw	r2,16(sp)
 1001368:	d8c01c17 	ldw	r3,112(sp)
 100136c:	1340210c 	andi	r13,r2,132
 1001370:	6800021e 	bne	r13,zero,100137c <___vfprintf_internal_r+0x348>
 1001374:	850fc83a 	sub	r7,r16,r20
 1001378:	01c36016 	blt	zero,r7,10020fc <___vfprintf_internal_r+0x10c8>
 100137c:	d8801347 	ldb	r2,77(sp)
 1001380:	10000c26 	beq	r2,zero,10013b4 <___vfprintf_internal_r+0x380>
 1001384:	d8801b17 	ldw	r2,108(sp)
 1001388:	d9001344 	addi	r4,sp,77
 100138c:	18c00044 	addi	r3,r3,1
 1001390:	10800044 	addi	r2,r2,1
 1001394:	b1000015 	stw	r4,0(r22)
 1001398:	01000044 	movi	r4,1
 100139c:	d8801b15 	stw	r2,108(sp)
 10013a0:	b1000115 	stw	r4,4(r22)
 10013a4:	d8c01c15 	stw	r3,112(sp)
 10013a8:	10800208 	cmpgei	r2,r2,8
 10013ac:	1003a01e 	bne	r2,zero,1002230 <___vfprintf_internal_r+0x11fc>
 10013b0:	b5800204 	addi	r22,r22,8
 10013b4:	70000c26 	beq	r14,zero,10013e8 <___vfprintf_internal_r+0x3b4>
 10013b8:	d8801b17 	ldw	r2,108(sp)
 10013bc:	d9001384 	addi	r4,sp,78
 10013c0:	18c00084 	addi	r3,r3,2
 10013c4:	10800044 	addi	r2,r2,1
 10013c8:	b1000015 	stw	r4,0(r22)
 10013cc:	01000084 	movi	r4,2
 10013d0:	d8801b15 	stw	r2,108(sp)
 10013d4:	b1000115 	stw	r4,4(r22)
 10013d8:	d8c01c15 	stw	r3,112(sp)
 10013dc:	10800208 	cmpgei	r2,r2,8
 10013e0:	1003871e 	bne	r2,zero,1002200 <___vfprintf_internal_r+0x11cc>
 10013e4:	b5800204 	addi	r22,r22,8
 10013e8:	6b402018 	cmpnei	r13,r13,128
 10013ec:	68025226 	beq	r13,zero,1001d38 <___vfprintf_internal_r+0xd04>
 10013f0:	4551c83a 	sub	r8,r8,r21
 10013f4:	02028a16 	blt	zero,r8,1001e20 <___vfprintf_internal_r+0xdec>
 10013f8:	d8800417 	ldw	r2,16(sp)
 10013fc:	1080400c 	andi	r2,r2,256
 1001400:	1002071e 	bne	r2,zero,1001c20 <___vfprintf_internal_r+0xbec>
 1001404:	d8801b17 	ldw	r2,108(sp)
 1001408:	1d47883a 	add	r3,r3,r21
 100140c:	b4400015 	stw	r17,0(r22)
 1001410:	10800044 	addi	r2,r2,1
 1001414:	b5400115 	stw	r21,4(r22)
 1001418:	d8801b15 	stw	r2,108(sp)
 100141c:	d8c01c15 	stw	r3,112(sp)
 1001420:	10800208 	cmpgei	r2,r2,8
 1001424:	1002ee1e 	bne	r2,zero,1001fe0 <___vfprintf_internal_r+0xfac>
 1001428:	b5800204 	addi	r22,r22,8
 100142c:	d8800417 	ldw	r2,16(sp)
 1001430:	1440010c 	andi	r17,r2,4
 1001434:	88000226 	beq	r17,zero,1001440 <___vfprintf_internal_r+0x40c>
 1001438:	8523c83a 	sub	r17,r16,r20
 100143c:	0440bd16 	blt	zero,r17,1001734 <___vfprintf_internal_r+0x700>
 1001440:	8500010e 	bge	r16,r20,1001448 <___vfprintf_internal_r+0x414>
 1001444:	a021883a 	mov	r16,r20
 1001448:	d8800517 	ldw	r2,20(sp)
 100144c:	1405883a 	add	r2,r2,r16
 1001450:	d8800515 	stw	r2,20(sp)
 1001454:	1802b91e 	bne	r3,zero,1001f3c <___vfprintf_internal_r+0xf08>
 1001458:	b8800007 	ldb	r2,0(r23)
 100145c:	d8001b15 	stw	zero,108(sp)
 1001460:	dd802704 	addi	r22,sp,156
 1001464:	103f291e 	bne	r2,zero,100110c <___vfprintf_internal_r+0xd8>
 1001468:	d8801c17 	ldw	r2,112(sp)
 100146c:	10063a1e 	bne	r2,zero,1002d58 <___vfprintf_internal_r+0x1d24>
 1001470:	9080030b 	ldhu	r2,12(r18)
 1001474:	1080100c 	andi	r2,r2,64
 1001478:	1006c91e 	bne	r2,zero,1002fa0 <___vfprintf_internal_r+0x1f6c>
 100147c:	d8800517 	ldw	r2,20(sp)
 1001480:	dfc04017 	ldw	ra,256(sp)
 1001484:	df003f17 	ldw	fp,252(sp)
 1001488:	ddc03e17 	ldw	r23,248(sp)
 100148c:	dd803d17 	ldw	r22,244(sp)
 1001490:	dd403c17 	ldw	r21,240(sp)
 1001494:	dd003b17 	ldw	r20,236(sp)
 1001498:	dcc03a17 	ldw	r19,232(sp)
 100149c:	dc803917 	ldw	r18,228(sp)
 10014a0:	dc403817 	ldw	r17,224(sp)
 10014a4:	dc003717 	ldw	r16,220(sp)
 10014a8:	dec04104 	addi	sp,sp,260
 10014ac:	f800283a 	ret
 10014b0:	900b883a 	mov	r5,r18
 10014b4:	9809883a 	mov	r4,r19
 10014b8:	10031fc0 	call	10031fc <__swsetup_r>
 10014bc:	1006b81e 	bne	r2,zero,1002fa0 <___vfprintf_internal_r+0x1f6c>
 10014c0:	9080030b 	ldhu	r2,12(r18)
 10014c4:	1080068c 	andi	r2,r2,26
 10014c8:	10800298 	cmpnei	r2,r2,10
 10014cc:	103f011e 	bne	r2,zero,10010d4 <___vfprintf_internal_r+0xa0>
 10014d0:	9080038f 	ldh	r2,14(r18)
 10014d4:	103eff16 	blt	r2,zero,10010d4 <___vfprintf_internal_r+0xa0>
 10014d8:	d9c00617 	ldw	r7,24(sp)
 10014dc:	b00d883a 	mov	r6,r22
 10014e0:	900b883a 	mov	r5,r18
 10014e4:	9809883a 	mov	r4,r19
 10014e8:	100313c0 	call	100313c <__sbprintf>
 10014ec:	d8800515 	stw	r2,20(sp)
 10014f0:	003fe206 	br	100147c <___vfprintf_internal_r+0x448>
 10014f4:	63000414 	ori	r12,r12,16
 10014f8:	6080080c 	andi	r2,r12,32
 10014fc:	10008126 	beq	r2,zero,1001704 <___vfprintf_internal_r+0x6d0>
 1001500:	d8c00617 	ldw	r3,24(sp)
 1001504:	00800044 	movi	r2,1
 1001508:	1d000017 	ldw	r20,0(r3)
 100150c:	1d400117 	ldw	r21,4(r3)
 1001510:	18c00204 	addi	r3,r3,8
 1001514:	d8c00615 	stw	r3,24(sp)
 1001518:	00000906 	br	1001540 <___vfprintf_internal_r+0x50c>
 100151c:	63000414 	ori	r12,r12,16
 1001520:	6080080c 	andi	r2,r12,32
 1001524:	10006b26 	beq	r2,zero,10016d4 <___vfprintf_internal_r+0x6a0>
 1001528:	d8c00617 	ldw	r3,24(sp)
 100152c:	0005883a 	mov	r2,zero
 1001530:	1d000017 	ldw	r20,0(r3)
 1001534:	1d400117 	ldw	r21,4(r3)
 1001538:	18c00204 	addi	r3,r3,8
 100153c:	d8c00615 	stw	r3,24(sp)
 1001540:	d8001345 	stb	zero,77(sp)
 1001544:	40ffffe0 	cmpeqi	r3,r8,-1
 1001548:	001b883a 	mov	r13,zero
 100154c:	1801351e 	bne	r3,zero,1001a24 <___vfprintf_internal_r+0x9f0>
 1001550:	047fdfc4 	movi	r17,-129
 1001554:	6448703a 	and	r4,r12,r17
 1001558:	a546b03a 	or	r3,r20,r21
 100155c:	d9000415 	stw	r4,16(sp)
 1001560:	1802e41e 	bne	r3,zero,10020f4 <___vfprintf_internal_r+0x10c0>
 1001564:	40025f1e 	bne	r8,zero,1001ee4 <___vfprintf_internal_r+0xeb0>
 1001568:	1003a61e 	bne	r2,zero,1002404 <___vfprintf_internal_r+0x13d0>
 100156c:	6540004c 	andi	r21,r12,1
 1001570:	a803d426 	beq	r21,zero,10024c4 <___vfprintf_internal_r+0x1490>
 1001574:	00800c04 	movi	r2,48
 1001578:	d88026c5 	stb	r2,155(sp)
 100157c:	dc4026c4 	addi	r17,sp,155
 1001580:	00014606 	br	1001a9c <___vfprintf_internal_r+0xa68>
 1001584:	85e3c83a 	sub	r17,r16,r23
 1001588:	85ffb726 	beq	r16,r23,1001468 <___vfprintf_internal_r+0x434>
 100158c:	d8c01c17 	ldw	r3,112(sp)
 1001590:	d8801b17 	ldw	r2,108(sp)
 1001594:	b5c00015 	stw	r23,0(r22)
 1001598:	1c47883a 	add	r3,r3,r17
 100159c:	10800044 	addi	r2,r2,1
 10015a0:	d8801b15 	stw	r2,108(sp)
 10015a4:	b4400115 	stw	r17,4(r22)
 10015a8:	d8c01c15 	stw	r3,112(sp)
 10015ac:	10800208 	cmpgei	r2,r2,8
 10015b0:	1000061e 	bne	r2,zero,10015cc <___vfprintf_internal_r+0x598>
 10015b4:	b5800204 	addi	r22,r22,8
 10015b8:	d8c00517 	ldw	r3,20(sp)
 10015bc:	80800003 	ldbu	r2,0(r16)
 10015c0:	1c47883a 	add	r3,r3,r17
 10015c4:	d8c00515 	stw	r3,20(sp)
 10015c8:	003eda06 	br	1001134 <___vfprintf_internal_r+0x100>
 10015cc:	d9801a04 	addi	r6,sp,104
 10015d0:	900b883a 	mov	r5,r18
 10015d4:	9809883a 	mov	r4,r19
 10015d8:	10083e00 	call	10083e0 <__sprint_r>
 10015dc:	103fa41e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10015e0:	dd802704 	addi	r22,sp,156
 10015e4:	003ff406 	br	10015b8 <___vfprintf_internal_r+0x584>
 10015e8:	21003fcc 	andi	r4,r4,255
 10015ec:	20066a1e 	bne	r4,zero,1002f98 <___vfprintf_internal_r+0x1f64>
 10015f0:	d8c00617 	ldw	r3,24(sp)
 10015f4:	6080020c 	andi	r2,r12,8
 10015f8:	19000204 	addi	r4,r3,8
 10015fc:	d9000e15 	stw	r4,56(sp)
 1001600:	1003d01e 	bne	r2,zero,1002544 <___vfprintf_internal_r+0x1510>
 1001604:	d8800617 	ldw	r2,24(sp)
 1001608:	10c00017 	ldw	r3,0(r2)
 100160c:	10800117 	ldw	r2,4(r2)
 1001610:	d8c00915 	stw	r3,36(sp)
 1001614:	d8800a15 	stw	r2,40(sp)
 1001618:	dd400a17 	ldw	r21,40(sp)
 100161c:	dd000917 	ldw	r20,36(sp)
 1001620:	00a00034 	movhi	r2,32768
 1001624:	10bfffc4 	addi	r2,r2,-1
 1001628:	a8a2703a 	and	r17,r21,r2
 100162c:	01dffc34 	movhi	r7,32752
 1001630:	01bfffc4 	movi	r6,-1
 1001634:	39ffffc4 	addi	r7,r7,-1
 1001638:	a009883a 	mov	r4,r20
 100163c:	880b883a 	mov	r5,r17
 1001640:	da000615 	stw	r8,24(sp)
 1001644:	db000415 	stw	r12,16(sp)
 1001648:	100d7ec0 	call	100d7ec <__unorddf2>
 100164c:	db000417 	ldw	r12,16(sp)
 1001650:	da000617 	ldw	r8,24(sp)
 1001654:	1004701e 	bne	r2,zero,1002818 <___vfprintf_internal_r+0x17e4>
 1001658:	01dffc34 	movhi	r7,32752
 100165c:	01bfffc4 	movi	r6,-1
 1001660:	39ffffc4 	addi	r7,r7,-1
 1001664:	a009883a 	mov	r4,r20
 1001668:	880b883a 	mov	r5,r17
 100166c:	100c6200 	call	100c620 <__ledf2>
 1001670:	db000417 	ldw	r12,16(sp)
 1001674:	da000617 	ldw	r8,24(sp)
 1001678:	0084670e 	bge	zero,r2,1002818 <___vfprintf_internal_r+0x17e4>
 100167c:	000d883a 	mov	r6,zero
 1001680:	000f883a 	mov	r7,zero
 1001684:	a009883a 	mov	r4,r20
 1001688:	a80b883a 	mov	r5,r21
 100168c:	100c6200 	call	100c620 <__ledf2>
 1001690:	db000417 	ldw	r12,16(sp)
 1001694:	10059d16 	blt	r2,zero,1002d0c <___vfprintf_internal_r+0x1cd8>
 1001698:	db401343 	ldbu	r13,77(sp)
 100169c:	e0801210 	cmplti	r2,fp,72
 10016a0:	1005741e 	bne	r2,zero,1002c74 <___vfprintf_internal_r+0x1c40>
 10016a4:	04404074 	movhi	r17,257
 10016a8:	8c493f04 	addi	r17,r17,9468
 10016ac:	00bfdfc4 	movi	r2,-129
 10016b0:	6084703a 	and	r2,r12,r2
 10016b4:	d8800415 	stw	r2,16(sp)
 10016b8:	d8800e17 	ldw	r2,56(sp)
 10016bc:	050000c4 	movi	r20,3
 10016c0:	054000c4 	movi	r21,3
 10016c4:	d8800615 	stw	r2,24(sp)
 10016c8:	0011883a 	mov	r8,zero
 10016cc:	d8000715 	stw	zero,28(sp)
 10016d0:	0000f606 	br	1001aac <___vfprintf_internal_r+0xa78>
 10016d4:	d9000617 	ldw	r4,24(sp)
 10016d8:	6080040c 	andi	r2,r12,16
 10016dc:	20c00104 	addi	r3,r4,4
 10016e0:	1003891e 	bne	r2,zero,1002508 <___vfprintf_internal_r+0x14d4>
 10016e4:	6080100c 	andi	r2,r12,64
 10016e8:	10056b26 	beq	r2,zero,1002c98 <___vfprintf_internal_r+0x1c64>
 10016ec:	d8800617 	ldw	r2,24(sp)
 10016f0:	002b883a 	mov	r21,zero
 10016f4:	d8c00615 	stw	r3,24(sp)
 10016f8:	1500000b 	ldhu	r20,0(r2)
 10016fc:	0005883a 	mov	r2,zero
 1001700:	003f8f06 	br	1001540 <___vfprintf_internal_r+0x50c>
 1001704:	d9000617 	ldw	r4,24(sp)
 1001708:	6080040c 	andi	r2,r12,16
 100170c:	20c00104 	addi	r3,r4,4
 1001710:	1003821e 	bne	r2,zero,100251c <___vfprintf_internal_r+0x14e8>
 1001714:	6080100c 	andi	r2,r12,64
 1001718:	10056526 	beq	r2,zero,1002cb0 <___vfprintf_internal_r+0x1c7c>
 100171c:	d8800617 	ldw	r2,24(sp)
 1001720:	002b883a 	mov	r21,zero
 1001724:	d8c00615 	stw	r3,24(sp)
 1001728:	1500000b 	ldhu	r20,0(r2)
 100172c:	00800044 	movi	r2,1
 1001730:	003f8306 	br	1001540 <___vfprintf_internal_r+0x50c>
 1001734:	03004074 	movhi	r12,257
 1001738:	89000450 	cmplti	r4,r17,17
 100173c:	d8801b17 	ldw	r2,108(sp)
 1001740:	63095304 	addi	r12,r12,9548
 1001744:	20001b1e 	bne	r4,zero,10017b4 <___vfprintf_internal_r+0x780>
 1001748:	05400404 	movi	r21,16
 100174c:	6039883a 	mov	fp,r12
 1001750:	00000406 	br	1001764 <___vfprintf_internal_r+0x730>
 1001754:	8c7ffc04 	addi	r17,r17,-16
 1001758:	89000448 	cmpgei	r4,r17,17
 100175c:	b5800204 	addi	r22,r22,8
 1001760:	20001326 	beq	r4,zero,10017b0 <___vfprintf_internal_r+0x77c>
 1001764:	10800044 	addi	r2,r2,1
 1001768:	18c00404 	addi	r3,r3,16
 100176c:	b7000015 	stw	fp,0(r22)
 1001770:	b5400115 	stw	r21,4(r22)
 1001774:	d8c01c15 	stw	r3,112(sp)
 1001778:	d8801b15 	stw	r2,108(sp)
 100177c:	11000208 	cmpgei	r4,r2,8
 1001780:	203ff426 	beq	r4,zero,1001754 <___vfprintf_internal_r+0x720>
 1001784:	d9801a04 	addi	r6,sp,104
 1001788:	900b883a 	mov	r5,r18
 100178c:	9809883a 	mov	r4,r19
 1001790:	10083e00 	call	10083e0 <__sprint_r>
 1001794:	103f361e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001798:	8c7ffc04 	addi	r17,r17,-16
 100179c:	89000448 	cmpgei	r4,r17,17
 10017a0:	d8c01c17 	ldw	r3,112(sp)
 10017a4:	d8801b17 	ldw	r2,108(sp)
 10017a8:	dd802704 	addi	r22,sp,156
 10017ac:	203fed1e 	bne	r4,zero,1001764 <___vfprintf_internal_r+0x730>
 10017b0:	e019883a 	mov	r12,fp
 10017b4:	10800044 	addi	r2,r2,1
 10017b8:	1c47883a 	add	r3,r3,r17
 10017bc:	d8801b15 	stw	r2,108(sp)
 10017c0:	b3000015 	stw	r12,0(r22)
 10017c4:	b4400115 	stw	r17,4(r22)
 10017c8:	d8c01c15 	stw	r3,112(sp)
 10017cc:	10800210 	cmplti	r2,r2,8
 10017d0:	103f1b1e 	bne	r2,zero,1001440 <___vfprintf_internal_r+0x40c>
 10017d4:	d9801a04 	addi	r6,sp,104
 10017d8:	900b883a 	mov	r5,r18
 10017dc:	9809883a 	mov	r4,r19
 10017e0:	10083e00 	call	10083e0 <__sprint_r>
 10017e4:	103f221e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10017e8:	d8c01c17 	ldw	r3,112(sp)
 10017ec:	003f1406 	br	1001440 <___vfprintf_internal_r+0x40c>
 10017f0:	9809883a 	mov	r4,r19
 10017f4:	10052840 	call	1005284 <__sinit>
 10017f8:	003e2606 	br	1001094 <___vfprintf_internal_r+0x60>
 10017fc:	21003fcc 	andi	r4,r4,255
 1001800:	2005db1e 	bne	r4,zero,1002f70 <___vfprintf_internal_r+0x1f3c>
 1001804:	6080080c 	andi	r2,r12,32
 1001808:	10007026 	beq	r2,zero,10019cc <___vfprintf_internal_r+0x998>
 100180c:	d8c00617 	ldw	r3,24(sp)
 1001810:	18800117 	ldw	r2,4(r3)
 1001814:	1d000017 	ldw	r20,0(r3)
 1001818:	18c00204 	addi	r3,r3,8
 100181c:	d8c00615 	stw	r3,24(sp)
 1001820:	102b883a 	mov	r21,r2
 1001824:	10007516 	blt	r2,zero,10019fc <___vfprintf_internal_r+0x9c8>
 1001828:	40bfffd8 	cmpnei	r2,r8,-1
 100182c:	10034a26 	beq	r2,zero,1002558 <___vfprintf_internal_r+0x1524>
 1001830:	047fdfc4 	movi	r17,-129
 1001834:	6446703a 	and	r3,r12,r17
 1001838:	a544b03a 	or	r2,r20,r21
 100183c:	d8c00415 	stw	r3,16(sp)
 1001840:	db401343 	ldbu	r13,77(sp)
 1001844:	1002ee26 	beq	r2,zero,1002400 <___vfprintf_internal_r+0x13cc>
 1001848:	db000417 	ldw	r12,16(sp)
 100184c:	a803441e 	bne	r21,zero,1002560 <___vfprintf_internal_r+0x152c>
 1001850:	a08002a8 	cmpgeui	r2,r20,10
 1001854:	1003421e 	bne	r2,zero,1002560 <___vfprintf_internal_r+0x152c>
 1001858:	a5000c04 	addi	r20,r20,48
 100185c:	dd0026c5 	stb	r20,155(sp)
 1001860:	db000415 	stw	r12,16(sp)
 1001864:	05400044 	movi	r21,1
 1001868:	dc4026c4 	addi	r17,sp,155
 100186c:	00008b06 	br	1001a9c <___vfprintf_internal_r+0xa68>
 1001870:	bac00007 	ldb	r11,0(r23)
 1001874:	63001014 	ori	r12,r12,64
 1001878:	003e3a06 	br	1001164 <___vfprintf_internal_r+0x130>
 100187c:	21003fcc 	andi	r4,r4,255
 1001880:	2005c11e 	bne	r4,zero,1002f88 <___vfprintf_internal_r+0x1f54>
 1001884:	00804074 	movhi	r2,257
 1001888:	10894704 	addi	r2,r2,9500
 100188c:	d8800c15 	stw	r2,48(sp)
 1001890:	6080080c 	andi	r2,r12,32
 1001894:	1000d726 	beq	r2,zero,1001bf4 <___vfprintf_internal_r+0xbc0>
 1001898:	d8800617 	ldw	r2,24(sp)
 100189c:	15000017 	ldw	r20,0(r2)
 10018a0:	15400117 	ldw	r21,4(r2)
 10018a4:	10800204 	addi	r2,r2,8
 10018a8:	d8800615 	stw	r2,24(sp)
 10018ac:	6080004c 	andi	r2,r12,1
 10018b0:	10000226 	beq	r2,zero,10018bc <___vfprintf_internal_r+0x888>
 10018b4:	a544b03a 	or	r2,r20,r21
 10018b8:	1003091e 	bne	r2,zero,10024e0 <___vfprintf_internal_r+0x14ac>
 10018bc:	00800084 	movi	r2,2
 10018c0:	003f1f06 	br	1001540 <___vfprintf_internal_r+0x50c>
 10018c4:	d8800617 	ldw	r2,24(sp)
 10018c8:	d8001345 	stb	zero,77(sp)
 10018cc:	14400017 	ldw	r17,0(r2)
 10018d0:	10c00104 	addi	r3,r2,4
 10018d4:	88037726 	beq	r17,zero,10026b4 <___vfprintf_internal_r+0x1680>
 10018d8:	40bfffe0 	cmpeqi	r2,r8,-1
 10018dc:	1004661e 	bne	r2,zero,1002a78 <___vfprintf_internal_r+0x1a44>
 10018e0:	400d883a 	mov	r6,r8
 10018e4:	000b883a 	mov	r5,zero
 10018e8:	8809883a 	mov	r4,r17
 10018ec:	d8c00715 	stw	r3,28(sp)
 10018f0:	db000615 	stw	r12,24(sp)
 10018f4:	da000415 	stw	r8,16(sp)
 10018f8:	10066c80 	call	10066c8 <memchr>
 10018fc:	da000417 	ldw	r8,16(sp)
 1001900:	db000617 	ldw	r12,24(sp)
 1001904:	d8c00717 	ldw	r3,28(sp)
 1001908:	10058926 	beq	r2,zero,1002f30 <___vfprintf_internal_r+0x1efc>
 100190c:	146bc83a 	sub	r21,r2,r17
 1001910:	a829883a 	mov	r20,r21
 1001914:	d8c00615 	stw	r3,24(sp)
 1001918:	003e8b06 	br	1001348 <___vfprintf_internal_r+0x314>
 100191c:	bac00007 	ldb	r11,0(r23)
 1001920:	63000814 	ori	r12,r12,32
 1001924:	003e0f06 	br	1001164 <___vfprintf_internal_r+0x130>
 1001928:	d8c00617 	ldw	r3,24(sp)
 100192c:	00800c04 	movi	r2,48
 1001930:	d8801385 	stb	r2,78(sp)
 1001934:	00801e04 	movi	r2,120
 1001938:	01004074 	movhi	r4,257
 100193c:	d88013c5 	stb	r2,79(sp)
 1001940:	18800104 	addi	r2,r3,4
 1001944:	d8800615 	stw	r2,24(sp)
 1001948:	20894704 	addi	r2,r4,9500
 100194c:	d8800c15 	stw	r2,48(sp)
 1001950:	1d000017 	ldw	r20,0(r3)
 1001954:	002b883a 	mov	r21,zero
 1001958:	63000094 	ori	r12,r12,2
 100195c:	00800084 	movi	r2,2
 1001960:	07001e04 	movi	fp,120
 1001964:	003ef606 	br	1001540 <___vfprintf_internal_r+0x50c>
 1001968:	21003fcc 	andi	r4,r4,255
 100196c:	2005881e 	bne	r4,zero,1002f90 <___vfprintf_internal_r+0x1f5c>
 1001970:	d9000617 	ldw	r4,24(sp)
 1001974:	6080080c 	andi	r2,r12,32
 1001978:	20c00017 	ldw	r3,0(r4)
 100197c:	21000104 	addi	r4,r4,4
 1001980:	d9000615 	stw	r4,24(sp)
 1001984:	1002d11e 	bne	r2,zero,10024cc <___vfprintf_internal_r+0x1498>
 1001988:	6080040c 	andi	r2,r12,16
 100198c:	10036f1e 	bne	r2,zero,100274c <___vfprintf_internal_r+0x1718>
 1001990:	6300100c 	andi	r12,r12,64
 1001994:	60036d26 	beq	r12,zero,100274c <___vfprintf_internal_r+0x1718>
 1001998:	d8800517 	ldw	r2,20(sp)
 100199c:	1880000d 	sth	r2,0(r3)
 10019a0:	003dd806 	br	1001104 <___vfprintf_internal_r+0xd0>
 10019a4:	bac00007 	ldb	r11,0(r23)
 10019a8:	58801b18 	cmpnei	r2,r11,108
 10019ac:	10033026 	beq	r2,zero,1002670 <___vfprintf_internal_r+0x163c>
 10019b0:	63000414 	ori	r12,r12,16
 10019b4:	003deb06 	br	1001164 <___vfprintf_internal_r+0x130>
 10019b8:	21003fcc 	andi	r4,r4,255
 10019bc:	2005701e 	bne	r4,zero,1002f80 <___vfprintf_internal_r+0x1f4c>
 10019c0:	63000414 	ori	r12,r12,16
 10019c4:	6080080c 	andi	r2,r12,32
 10019c8:	103f901e 	bne	r2,zero,100180c <___vfprintf_internal_r+0x7d8>
 10019cc:	d9000617 	ldw	r4,24(sp)
 10019d0:	6080040c 	andi	r2,r12,16
 10019d4:	20c00104 	addi	r3,r4,4
 10019d8:	1002d51e 	bne	r2,zero,1002530 <___vfprintf_internal_r+0x14fc>
 10019dc:	6080100c 	andi	r2,r12,64
 10019e0:	1004a726 	beq	r2,zero,1002c80 <___vfprintf_internal_r+0x1c4c>
 10019e4:	d8800617 	ldw	r2,24(sp)
 10019e8:	d8c00615 	stw	r3,24(sp)
 10019ec:	1500000f 	ldh	r20,0(r2)
 10019f0:	a02bd7fa 	srai	r21,r20,31
 10019f4:	a805883a 	mov	r2,r21
 10019f8:	103f8b0e 	bge	r2,zero,1001828 <___vfprintf_internal_r+0x7f4>
 10019fc:	a004c03a 	cmpne	r2,r20,zero
 1001a00:	056bc83a 	sub	r21,zero,r21
 1001a04:	a8abc83a 	sub	r21,r21,r2
 1001a08:	00800b44 	movi	r2,45
 1001a0c:	d8801345 	stb	r2,77(sp)
 1001a10:	40ffffe0 	cmpeqi	r3,r8,-1
 1001a14:	0529c83a 	sub	r20,zero,r20
 1001a18:	03400b44 	movi	r13,45
 1001a1c:	00800044 	movi	r2,1
 1001a20:	183ecb26 	beq	r3,zero,1001550 <___vfprintf_internal_r+0x51c>
 1001a24:	10c00060 	cmpeqi	r3,r2,1
 1001a28:	183f881e 	bne	r3,zero,100184c <___vfprintf_internal_r+0x818>
 1001a2c:	108000a0 	cmpeqi	r2,r2,2
 1001a30:	1001311e 	bne	r2,zero,1001ef8 <___vfprintf_internal_r+0xec4>
 1001a34:	dc402704 	addi	r17,sp,156
 1001a38:	a004d0fa 	srli	r2,r20,3
 1001a3c:	a806977a 	slli	r3,r21,29
 1001a40:	a82ad0fa 	srli	r21,r21,3
 1001a44:	a50001cc 	andi	r20,r20,7
 1001a48:	a1000c04 	addi	r4,r20,48
 1001a4c:	18a8b03a 	or	r20,r3,r2
 1001a50:	893fffc5 	stb	r4,-1(r17)
 1001a54:	a544b03a 	or	r2,r20,r21
 1001a58:	880b883a 	mov	r5,r17
 1001a5c:	8c7fffc4 	addi	r17,r17,-1
 1001a60:	103ff51e 	bne	r2,zero,1001a38 <___vfprintf_internal_r+0xa04>
 1001a64:	6080004c 	andi	r2,r12,1
 1001a68:	10013026 	beq	r2,zero,1001f2c <___vfprintf_internal_r+0xef8>
 1001a6c:	21003fcc 	andi	r4,r4,255
 1001a70:	2100201c 	xori	r4,r4,128
 1001a74:	213fe004 	addi	r4,r4,-128
 1001a78:	20800c18 	cmpnei	r2,r4,48
 1001a7c:	10012b26 	beq	r2,zero,1001f2c <___vfprintf_internal_r+0xef8>
 1001a80:	00800c04 	movi	r2,48
 1001a84:	297fff84 	addi	r5,r5,-2
 1001a88:	88bfffc5 	stb	r2,-1(r17)
 1001a8c:	d8802704 	addi	r2,sp,156
 1001a90:	116bc83a 	sub	r21,r2,r5
 1001a94:	db000415 	stw	r12,16(sp)
 1001a98:	2823883a 	mov	r17,r5
 1001a9c:	4029883a 	mov	r20,r8
 1001aa0:	4540010e 	bge	r8,r21,1001aa8 <___vfprintf_internal_r+0xa74>
 1001aa4:	a829883a 	mov	r20,r21
 1001aa8:	d8000715 	stw	zero,28(sp)
 1001aac:	6b403fcc 	andi	r13,r13,255
 1001ab0:	6b40201c 	xori	r13,r13,128
 1001ab4:	6b7fe004 	addi	r13,r13,-128
 1001ab8:	683e2626 	beq	r13,zero,1001354 <___vfprintf_internal_r+0x320>
 1001abc:	a5000044 	addi	r20,r20,1
 1001ac0:	003e2406 	br	1001354 <___vfprintf_internal_r+0x320>
 1001ac4:	bac00007 	ldb	r11,0(r23)
 1001ac8:	63002014 	ori	r12,r12,128
 1001acc:	003da506 	br	1001164 <___vfprintf_internal_r+0x130>
 1001ad0:	bf000007 	ldb	fp,0(r23)
 1001ad4:	b8800044 	addi	r2,r23,1
 1001ad8:	e0c00aa0 	cmpeqi	r3,fp,42
 1001adc:	1805841e 	bne	r3,zero,10030f0 <___vfprintf_internal_r+0x20bc>
 1001ae0:	e0fff404 	addi	r3,fp,-48
 1001ae4:	198002b0 	cmpltui	r6,r3,10
 1001ae8:	102f883a 	mov	r23,r2
 1001aec:	0011883a 	mov	r8,zero
 1001af0:	303d9e26 	beq	r6,zero,100116c <___vfprintf_internal_r+0x138>
 1001af4:	400490ba 	slli	r2,r8,2
 1001af8:	bf000007 	ldb	fp,0(r23)
 1001afc:	bdc00044 	addi	r23,r23,1
 1001b00:	1211883a 	add	r8,r2,r8
 1001b04:	4211883a 	add	r8,r8,r8
 1001b08:	40d1883a 	add	r8,r8,r3
 1001b0c:	e0fff404 	addi	r3,fp,-48
 1001b10:	188002b0 	cmpltui	r2,r3,10
 1001b14:	103ff71e 	bne	r2,zero,1001af4 <___vfprintf_internal_r+0xac0>
 1001b18:	003d9406 	br	100116c <___vfprintf_internal_r+0x138>
 1001b1c:	bf000003 	ldbu	fp,0(r23)
 1001b20:	e2c03fcc 	andi	r11,fp,255
 1001b24:	5ac0201c 	xori	r11,r11,128
 1001b28:	63000114 	ori	r12,r12,4
 1001b2c:	5affe004 	addi	r11,r11,-128
 1001b30:	003d8c06 	br	1001164 <___vfprintf_internal_r+0x130>
 1001b34:	bac00007 	ldb	r11,0(r23)
 1001b38:	01000044 	movi	r4,1
 1001b3c:	01400ac4 	movi	r5,43
 1001b40:	003d8806 	br	1001164 <___vfprintf_internal_r+0x130>
 1001b44:	d8800617 	ldw	r2,24(sp)
 1001b48:	bf000003 	ldbu	fp,0(r23)
 1001b4c:	14000017 	ldw	r16,0(r2)
 1001b50:	10800104 	addi	r2,r2,4
 1001b54:	8002aa16 	blt	r16,zero,1002600 <___vfprintf_internal_r+0x15cc>
 1001b58:	d8800615 	stw	r2,24(sp)
 1001b5c:	e2c03fcc 	andi	r11,fp,255
 1001b60:	5ac0201c 	xori	r11,r11,128
 1001b64:	5affe004 	addi	r11,r11,-128
 1001b68:	003d7e06 	br	1001164 <___vfprintf_internal_r+0x130>
 1001b6c:	bac00007 	ldb	r11,0(r23)
 1001b70:	63000054 	ori	r12,r12,1
 1001b74:	003d7b06 	br	1001164 <___vfprintf_internal_r+0x130>
 1001b78:	28803fcc 	andi	r2,r5,255
 1001b7c:	1080201c 	xori	r2,r2,128
 1001b80:	10bfe004 	addi	r2,r2,-128
 1001b84:	bf000003 	ldbu	fp,0(r23)
 1001b88:	103ff41e 	bne	r2,zero,1001b5c <___vfprintf_internal_r+0xb28>
 1001b8c:	e2c03fcc 	andi	r11,fp,255
 1001b90:	5ac0201c 	xori	r11,r11,128
 1001b94:	01000044 	movi	r4,1
 1001b98:	01400804 	movi	r5,32
 1001b9c:	5affe004 	addi	r11,r11,-128
 1001ba0:	003d7006 	br	1001164 <___vfprintf_internal_r+0x130>
 1001ba4:	bac00007 	ldb	r11,0(r23)
 1001ba8:	63000214 	ori	r12,r12,8
 1001bac:	003d6d06 	br	1001164 <___vfprintf_internal_r+0x130>
 1001bb0:	d8c00617 	ldw	r3,24(sp)
 1001bb4:	d8001345 	stb	zero,77(sp)
 1001bb8:	05000044 	movi	r20,1
 1001bbc:	18800017 	ldw	r2,0(r3)
 1001bc0:	18c00104 	addi	r3,r3,4
 1001bc4:	d8c00615 	stw	r3,24(sp)
 1001bc8:	d8801d05 	stb	r2,116(sp)
 1001bcc:	05400044 	movi	r21,1
 1001bd0:	dc401d04 	addi	r17,sp,116
 1001bd4:	003ddc06 	br	1001348 <___vfprintf_internal_r+0x314>
 1001bd8:	21003fcc 	andi	r4,r4,255
 1001bdc:	2004e61e 	bne	r4,zero,1002f78 <___vfprintf_internal_r+0x1f44>
 1001be0:	00804074 	movhi	r2,257
 1001be4:	10894204 	addi	r2,r2,9480
 1001be8:	d8800c15 	stw	r2,48(sp)
 1001bec:	6080080c 	andi	r2,r12,32
 1001bf0:	103f291e 	bne	r2,zero,1001898 <___vfprintf_internal_r+0x864>
 1001bf4:	d9000617 	ldw	r4,24(sp)
 1001bf8:	6080040c 	andi	r2,r12,16
 1001bfc:	20c00104 	addi	r3,r4,4
 1001c00:	10023d1e 	bne	r2,zero,10024f8 <___vfprintf_internal_r+0x14c4>
 1001c04:	6080100c 	andi	r2,r12,64
 1001c08:	10042f26 	beq	r2,zero,1002cc8 <___vfprintf_internal_r+0x1c94>
 1001c0c:	d8800617 	ldw	r2,24(sp)
 1001c10:	002b883a 	mov	r21,zero
 1001c14:	d8c00615 	stw	r3,24(sp)
 1001c18:	1500000b 	ldhu	r20,0(r2)
 1001c1c:	003f2306 	br	10018ac <___vfprintf_internal_r+0x878>
 1001c20:	e2c01990 	cmplti	r11,fp,102
 1001c24:	5800f61e 	bne	r11,zero,1002000 <___vfprintf_internal_r+0xfcc>
 1001c28:	d9000917 	ldw	r4,36(sp)
 1001c2c:	d9400a17 	ldw	r5,40(sp)
 1001c30:	000d883a 	mov	r6,zero
 1001c34:	000f883a 	mov	r7,zero
 1001c38:	d8c00e15 	stw	r3,56(sp)
 1001c3c:	100c4b00 	call	100c4b0 <__eqdf2>
 1001c40:	d8c00e17 	ldw	r3,56(sp)
 1001c44:	1001881e 	bne	r2,zero,1002268 <___vfprintf_internal_r+0x1234>
 1001c48:	d8801b17 	ldw	r2,108(sp)
 1001c4c:	01004074 	movhi	r4,257
 1001c50:	21094e04 	addi	r4,r4,9528
 1001c54:	10800044 	addi	r2,r2,1
 1001c58:	18c00044 	addi	r3,r3,1
 1001c5c:	b1000015 	stw	r4,0(r22)
 1001c60:	01000044 	movi	r4,1
 1001c64:	d8801b15 	stw	r2,108(sp)
 1001c68:	b1000115 	stw	r4,4(r22)
 1001c6c:	d8c01c15 	stw	r3,112(sp)
 1001c70:	10800208 	cmpgei	r2,r2,8
 1001c74:	10036e1e 	bne	r2,zero,1002a30 <___vfprintf_internal_r+0x19fc>
 1001c78:	b5800204 	addi	r22,r22,8
 1001c7c:	d8801417 	ldw	r2,80(sp)
 1001c80:	d9000817 	ldw	r4,32(sp)
 1001c84:	11020b0e 	bge	r2,r4,10024b4 <___vfprintf_internal_r+0x1480>
 1001c88:	d8800d17 	ldw	r2,52(sp)
 1001c8c:	d9000b17 	ldw	r4,44(sp)
 1001c90:	b0800015 	stw	r2,0(r22)
 1001c94:	d8801b17 	ldw	r2,108(sp)
 1001c98:	1907883a 	add	r3,r3,r4
 1001c9c:	b1000115 	stw	r4,4(r22)
 1001ca0:	10800044 	addi	r2,r2,1
 1001ca4:	d8801b15 	stw	r2,108(sp)
 1001ca8:	d8c01c15 	stw	r3,112(sp)
 1001cac:	10800208 	cmpgei	r2,r2,8
 1001cb0:	1002761e 	bne	r2,zero,100268c <___vfprintf_internal_r+0x1658>
 1001cb4:	b5800204 	addi	r22,r22,8
 1001cb8:	d8800817 	ldw	r2,32(sp)
 1001cbc:	157fffc4 	addi	r21,r2,-1
 1001cc0:	057dda0e 	bge	zero,r21,100142c <___vfprintf_internal_r+0x3f8>
 1001cc4:	01c04074 	movhi	r7,257
 1001cc8:	a9000450 	cmplti	r4,r21,17
 1001ccc:	d8801b17 	ldw	r2,108(sp)
 1001cd0:	39c94f04 	addi	r7,r7,9532
 1001cd4:	2003521e 	bne	r4,zero,1002a20 <___vfprintf_internal_r+0x19ec>
 1001cd8:	07000404 	movi	fp,16
 1001cdc:	3823883a 	mov	r17,r7
 1001ce0:	00000406 	br	1001cf4 <___vfprintf_internal_r+0xcc0>
 1001ce4:	b5800204 	addi	r22,r22,8
 1001ce8:	ad7ffc04 	addi	r21,r21,-16
 1001cec:	a9000448 	cmpgei	r4,r21,17
 1001cf0:	20034a26 	beq	r4,zero,1002a1c <___vfprintf_internal_r+0x19e8>
 1001cf4:	10800044 	addi	r2,r2,1
 1001cf8:	18c00404 	addi	r3,r3,16
 1001cfc:	b4400015 	stw	r17,0(r22)
 1001d00:	b7000115 	stw	fp,4(r22)
 1001d04:	d8c01c15 	stw	r3,112(sp)
 1001d08:	d8801b15 	stw	r2,108(sp)
 1001d0c:	11000208 	cmpgei	r4,r2,8
 1001d10:	203ff426 	beq	r4,zero,1001ce4 <___vfprintf_internal_r+0xcb0>
 1001d14:	d9801a04 	addi	r6,sp,104
 1001d18:	900b883a 	mov	r5,r18
 1001d1c:	9809883a 	mov	r4,r19
 1001d20:	10083e00 	call	10083e0 <__sprint_r>
 1001d24:	103dd21e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001d28:	d8c01c17 	ldw	r3,112(sp)
 1001d2c:	d8801b17 	ldw	r2,108(sp)
 1001d30:	dd802704 	addi	r22,sp,156
 1001d34:	003fec06 	br	1001ce8 <___vfprintf_internal_r+0xcb4>
 1001d38:	8519c83a 	sub	r12,r16,r20
 1001d3c:	033dac0e 	bge	zero,r12,10013f0 <___vfprintf_internal_r+0x3bc>
 1001d40:	01c04074 	movhi	r7,257
 1001d44:	61000450 	cmplti	r4,r12,17
 1001d48:	d8801b17 	ldw	r2,108(sp)
 1001d4c:	39c94f04 	addi	r7,r7,9532
 1001d50:	2000281e 	bne	r4,zero,1001df4 <___vfprintf_internal_r+0xdc0>
 1001d54:	dc400e15 	stw	r17,56(sp)
 1001d58:	dc000f15 	stw	r16,60(sp)
 1001d5c:	b009883a 	mov	r4,r22
 1001d60:	03400404 	movi	r13,16
 1001d64:	a02d883a 	mov	r22,r20
 1001d68:	6021883a 	mov	r16,r12
 1001d6c:	4029883a 	mov	r20,r8
 1001d70:	3823883a 	mov	r17,r7
 1001d74:	00000406 	br	1001d88 <___vfprintf_internal_r+0xd54>
 1001d78:	843ffc04 	addi	r16,r16,-16
 1001d7c:	81400448 	cmpgei	r5,r16,17
 1001d80:	21000204 	addi	r4,r4,8
 1001d84:	28001426 	beq	r5,zero,1001dd8 <___vfprintf_internal_r+0xda4>
 1001d88:	10800044 	addi	r2,r2,1
 1001d8c:	18c00404 	addi	r3,r3,16
 1001d90:	24400015 	stw	r17,0(r4)
 1001d94:	23400115 	stw	r13,4(r4)
 1001d98:	d8c01c15 	stw	r3,112(sp)
 1001d9c:	d8801b15 	stw	r2,108(sp)
 1001da0:	11400208 	cmpgei	r5,r2,8
 1001da4:	283ff426 	beq	r5,zero,1001d78 <___vfprintf_internal_r+0xd44>
 1001da8:	d9801a04 	addi	r6,sp,104
 1001dac:	900b883a 	mov	r5,r18
 1001db0:	9809883a 	mov	r4,r19
 1001db4:	10083e00 	call	10083e0 <__sprint_r>
 1001db8:	103dad1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001dbc:	843ffc04 	addi	r16,r16,-16
 1001dc0:	81400448 	cmpgei	r5,r16,17
 1001dc4:	d8c01c17 	ldw	r3,112(sp)
 1001dc8:	d8801b17 	ldw	r2,108(sp)
 1001dcc:	d9002704 	addi	r4,sp,156
 1001dd0:	03400404 	movi	r13,16
 1001dd4:	283fec1e 	bne	r5,zero,1001d88 <___vfprintf_internal_r+0xd54>
 1001dd8:	8019883a 	mov	r12,r16
 1001ddc:	880f883a 	mov	r7,r17
 1001de0:	dc000f17 	ldw	r16,60(sp)
 1001de4:	dc400e17 	ldw	r17,56(sp)
 1001de8:	a011883a 	mov	r8,r20
 1001dec:	b029883a 	mov	r20,r22
 1001df0:	202d883a 	mov	r22,r4
 1001df4:	10800044 	addi	r2,r2,1
 1001df8:	1b07883a 	add	r3,r3,r12
 1001dfc:	d8801b15 	stw	r2,108(sp)
 1001e00:	b1c00015 	stw	r7,0(r22)
 1001e04:	b3000115 	stw	r12,4(r22)
 1001e08:	d8c01c15 	stw	r3,112(sp)
 1001e0c:	10800208 	cmpgei	r2,r2,8
 1001e10:	10030f1e 	bne	r2,zero,1002a50 <___vfprintf_internal_r+0x1a1c>
 1001e14:	4551c83a 	sub	r8,r8,r21
 1001e18:	b5800204 	addi	r22,r22,8
 1001e1c:	023d760e 	bge	zero,r8,10013f8 <___vfprintf_internal_r+0x3c4>
 1001e20:	01c04074 	movhi	r7,257
 1001e24:	41000450 	cmplti	r4,r8,17
 1001e28:	d8801b17 	ldw	r2,108(sp)
 1001e2c:	39c94f04 	addi	r7,r7,9532
 1001e30:	2000221e 	bne	r4,zero,1001ebc <___vfprintf_internal_r+0xe88>
 1001e34:	dc400e15 	stw	r17,56(sp)
 1001e38:	dc000f15 	stw	r16,60(sp)
 1001e3c:	03000404 	movi	r12,16
 1001e40:	4021883a 	mov	r16,r8
 1001e44:	3823883a 	mov	r17,r7
 1001e48:	00000406 	br	1001e5c <___vfprintf_internal_r+0xe28>
 1001e4c:	843ffc04 	addi	r16,r16,-16
 1001e50:	81000448 	cmpgei	r4,r16,17
 1001e54:	b5800204 	addi	r22,r22,8
 1001e58:	20001426 	beq	r4,zero,1001eac <___vfprintf_internal_r+0xe78>
 1001e5c:	10800044 	addi	r2,r2,1
 1001e60:	18c00404 	addi	r3,r3,16
 1001e64:	b4400015 	stw	r17,0(r22)
 1001e68:	b3000115 	stw	r12,4(r22)
 1001e6c:	d8c01c15 	stw	r3,112(sp)
 1001e70:	d8801b15 	stw	r2,108(sp)
 1001e74:	11000208 	cmpgei	r4,r2,8
 1001e78:	203ff426 	beq	r4,zero,1001e4c <___vfprintf_internal_r+0xe18>
 1001e7c:	d9801a04 	addi	r6,sp,104
 1001e80:	900b883a 	mov	r5,r18
 1001e84:	9809883a 	mov	r4,r19
 1001e88:	10083e00 	call	10083e0 <__sprint_r>
 1001e8c:	103d781e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001e90:	843ffc04 	addi	r16,r16,-16
 1001e94:	81000448 	cmpgei	r4,r16,17
 1001e98:	d8c01c17 	ldw	r3,112(sp)
 1001e9c:	d8801b17 	ldw	r2,108(sp)
 1001ea0:	dd802704 	addi	r22,sp,156
 1001ea4:	03000404 	movi	r12,16
 1001ea8:	203fec1e 	bne	r4,zero,1001e5c <___vfprintf_internal_r+0xe28>
 1001eac:	8011883a 	mov	r8,r16
 1001eb0:	880f883a 	mov	r7,r17
 1001eb4:	dc000f17 	ldw	r16,60(sp)
 1001eb8:	dc400e17 	ldw	r17,56(sp)
 1001ebc:	10800044 	addi	r2,r2,1
 1001ec0:	1a07883a 	add	r3,r3,r8
 1001ec4:	d8801b15 	stw	r2,108(sp)
 1001ec8:	b1c00015 	stw	r7,0(r22)
 1001ecc:	b2000115 	stw	r8,4(r22)
 1001ed0:	d8c01c15 	stw	r3,112(sp)
 1001ed4:	10800208 	cmpgei	r2,r2,8
 1001ed8:	10016e1e 	bne	r2,zero,1002494 <___vfprintf_internal_r+0x1460>
 1001edc:	b5800204 	addi	r22,r22,8
 1001ee0:	003d4506 	br	10013f8 <___vfprintf_internal_r+0x3c4>
 1001ee4:	10c00060 	cmpeqi	r3,r2,1
 1001ee8:	1803c81e 	bne	r3,zero,1002e0c <___vfprintf_internal_r+0x1dd8>
 1001eec:	108000a0 	cmpeqi	r2,r2,2
 1001ef0:	db000417 	ldw	r12,16(sp)
 1001ef4:	103ecf26 	beq	r2,zero,1001a34 <___vfprintf_internal_r+0xa00>
 1001ef8:	d9000c17 	ldw	r4,48(sp)
 1001efc:	dc402704 	addi	r17,sp,156
 1001f00:	a08003cc 	andi	r2,r20,15
 1001f04:	a806973a 	slli	r3,r21,28
 1001f08:	a028d13a 	srli	r20,r20,4
 1001f0c:	2085883a 	add	r2,r4,r2
 1001f10:	10800003 	ldbu	r2,0(r2)
 1001f14:	a82ad13a 	srli	r21,r21,4
 1001f18:	1d28b03a 	or	r20,r3,r20
 1001f1c:	88bfffc5 	stb	r2,-1(r17)
 1001f20:	a544b03a 	or	r2,r20,r21
 1001f24:	8c7fffc4 	addi	r17,r17,-1
 1001f28:	103ff51e 	bne	r2,zero,1001f00 <___vfprintf_internal_r+0xecc>
 1001f2c:	d8802704 	addi	r2,sp,156
 1001f30:	146bc83a 	sub	r21,r2,r17
 1001f34:	db000415 	stw	r12,16(sp)
 1001f38:	003ed806 	br	1001a9c <___vfprintf_internal_r+0xa68>
 1001f3c:	d9801a04 	addi	r6,sp,104
 1001f40:	900b883a 	mov	r5,r18
 1001f44:	9809883a 	mov	r4,r19
 1001f48:	10083e00 	call	10083e0 <__sprint_r>
 1001f4c:	103d4226 	beq	r2,zero,1001458 <___vfprintf_internal_r+0x424>
 1001f50:	003d4706 	br	1001470 <___vfprintf_internal_r+0x43c>
 1001f54:	d9801a04 	addi	r6,sp,104
 1001f58:	900b883a 	mov	r5,r18
 1001f5c:	9809883a 	mov	r4,r19
 1001f60:	10083e00 	call	10083e0 <__sprint_r>
 1001f64:	103d421e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001f68:	d9401417 	ldw	r5,80(sp)
 1001f6c:	d8c01c17 	ldw	r3,112(sp)
 1001f70:	dd802704 	addi	r22,sp,156
 1001f74:	2802c81e 	bne	r5,zero,1002a98 <___vfprintf_internal_r+0x1a64>
 1001f78:	d8800417 	ldw	r2,16(sp)
 1001f7c:	d9000817 	ldw	r4,32(sp)
 1001f80:	1080004c 	andi	r2,r2,1
 1001f84:	1104b03a 	or	r2,r2,r4
 1001f88:	103d2826 	beq	r2,zero,100142c <___vfprintf_internal_r+0x3f8>
 1001f8c:	d8800d17 	ldw	r2,52(sp)
 1001f90:	d9000b17 	ldw	r4,44(sp)
 1001f94:	b0800015 	stw	r2,0(r22)
 1001f98:	d8801b17 	ldw	r2,108(sp)
 1001f9c:	20c7883a 	add	r3,r4,r3
 1001fa0:	b1000115 	stw	r4,4(r22)
 1001fa4:	10800044 	addi	r2,r2,1
 1001fa8:	d8c01c15 	stw	r3,112(sp)
 1001fac:	d8801b15 	stw	r2,108(sp)
 1001fb0:	11000208 	cmpgei	r4,r2,8
 1001fb4:	2003821e 	bne	r4,zero,1002dc0 <___vfprintf_internal_r+0x1d8c>
 1001fb8:	b5800204 	addi	r22,r22,8
 1001fbc:	d9000817 	ldw	r4,32(sp)
 1001fc0:	10800044 	addi	r2,r2,1
 1001fc4:	d8801b15 	stw	r2,108(sp)
 1001fc8:	20c7883a 	add	r3,r4,r3
 1001fcc:	b4400015 	stw	r17,0(r22)
 1001fd0:	b1000115 	stw	r4,4(r22)
 1001fd4:	d8c01c15 	stw	r3,112(sp)
 1001fd8:	10800208 	cmpgei	r2,r2,8
 1001fdc:	103d1226 	beq	r2,zero,1001428 <___vfprintf_internal_r+0x3f4>
 1001fe0:	d9801a04 	addi	r6,sp,104
 1001fe4:	900b883a 	mov	r5,r18
 1001fe8:	9809883a 	mov	r4,r19
 1001fec:	10083e00 	call	10083e0 <__sprint_r>
 1001ff0:	103d1f1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1001ff4:	d8c01c17 	ldw	r3,112(sp)
 1001ff8:	dd802704 	addi	r22,sp,156
 1001ffc:	003d0b06 	br	100142c <___vfprintf_internal_r+0x3f8>
 1002000:	d8800817 	ldw	r2,32(sp)
 1002004:	da001b17 	ldw	r8,108(sp)
 1002008:	18c00044 	addi	r3,r3,1
 100200c:	10800088 	cmpgei	r2,r2,2
 1002010:	45400044 	addi	r21,r8,1
 1002014:	b7000204 	addi	fp,r22,8
 1002018:	1000ec26 	beq	r2,zero,10023cc <___vfprintf_internal_r+0x1398>
 100201c:	00800044 	movi	r2,1
 1002020:	b0800115 	stw	r2,4(r22)
 1002024:	b4400015 	stw	r17,0(r22)
 1002028:	d8c01c15 	stw	r3,112(sp)
 100202c:	dd401b15 	stw	r21,108(sp)
 1002030:	a8800210 	cmplti	r2,r21,8
 1002034:	1001d126 	beq	r2,zero,100277c <___vfprintf_internal_r+0x1748>
 1002038:	d8800b17 	ldw	r2,44(sp)
 100203c:	d9000d17 	ldw	r4,52(sp)
 1002040:	ad400044 	addi	r21,r21,1
 1002044:	1887883a 	add	r3,r3,r2
 1002048:	e0800115 	stw	r2,4(fp)
 100204c:	e1000015 	stw	r4,0(fp)
 1002050:	d8c01c15 	stw	r3,112(sp)
 1002054:	dd401b15 	stw	r21,108(sp)
 1002058:	a8800208 	cmpgei	r2,r21,8
 100205c:	1001be1e 	bne	r2,zero,1002758 <___vfprintf_internal_r+0x1724>
 1002060:	e7000204 	addi	fp,fp,8
 1002064:	d9000917 	ldw	r4,36(sp)
 1002068:	d9400a17 	ldw	r5,40(sp)
 100206c:	aa000044 	addi	r8,r21,1
 1002070:	000d883a 	mov	r6,zero
 1002074:	000f883a 	mov	r7,zero
 1002078:	d8c00e15 	stw	r3,56(sp)
 100207c:	da000715 	stw	r8,28(sp)
 1002080:	100c4b00 	call	100c4b0 <__eqdf2>
 1002084:	d8c00817 	ldw	r3,32(sp)
 1002088:	da000717 	ldw	r8,28(sp)
 100208c:	e5800204 	addi	r22,fp,8
 1002090:	1affffc4 	addi	r11,r3,-1
 1002094:	d8c00e17 	ldw	r3,56(sp)
 1002098:	1000de26 	beq	r2,zero,1002414 <___vfprintf_internal_r+0x13e0>
 100209c:	8a400044 	addi	r9,r17,1
 10020a0:	1ac7883a 	add	r3,r3,r11
 10020a4:	da001b15 	stw	r8,108(sp)
 10020a8:	e2400015 	stw	r9,0(fp)
 10020ac:	e2c00115 	stw	r11,4(fp)
 10020b0:	d8c01c15 	stw	r3,112(sp)
 10020b4:	42000208 	cmpgei	r8,r8,8
 10020b8:	4001621e 	bne	r8,zero,1002644 <___vfprintf_internal_r+0x1610>
 10020bc:	e0800404 	addi	r2,fp,16
 10020c0:	aa000084 	addi	r8,r21,2
 10020c4:	b039883a 	mov	fp,r22
 10020c8:	102d883a 	mov	r22,r2
 10020cc:	d9001017 	ldw	r4,64(sp)
 10020d0:	d8801644 	addi	r2,sp,89
 10020d4:	da001b15 	stw	r8,108(sp)
 10020d8:	20c7883a 	add	r3,r4,r3
 10020dc:	e0800015 	stw	r2,0(fp)
 10020e0:	e1000115 	stw	r4,4(fp)
 10020e4:	d8c01c15 	stw	r3,112(sp)
 10020e8:	42000210 	cmplti	r8,r8,8
 10020ec:	403ccf1e 	bne	r8,zero,100142c <___vfprintf_internal_r+0x3f8>
 10020f0:	003fbb06 	br	1001fe0 <___vfprintf_internal_r+0xfac>
 10020f4:	db000417 	ldw	r12,16(sp)
 10020f8:	003e4a06 	br	1001a24 <___vfprintf_internal_r+0x9f0>
 10020fc:	03004074 	movhi	r12,257
 1002100:	39000450 	cmplti	r4,r7,17
 1002104:	d8801b17 	ldw	r2,108(sp)
 1002108:	63095304 	addi	r12,r12,9548
 100210c:	2000321e 	bne	r4,zero,10021d8 <___vfprintf_internal_r+0x11a4>
 1002110:	dc401115 	stw	r17,68(sp)
 1002114:	b009883a 	mov	r4,r22
 1002118:	9023883a 	mov	r17,r18
 100211c:	a82d883a 	mov	r22,r21
 1002120:	ddc01215 	stw	r23,72(sp)
 1002124:	03c00404 	movi	r15,16
 1002128:	a02f883a 	mov	r23,r20
 100212c:	db800e15 	stw	r14,56(sp)
 1002130:	8029883a 	mov	r20,r16
 1002134:	db400f15 	stw	r13,60(sp)
 1002138:	402b883a 	mov	r21,r8
 100213c:	3821883a 	mov	r16,r7
 1002140:	6025883a 	mov	r18,r12
 1002144:	00000406 	br	1002158 <___vfprintf_internal_r+0x1124>
 1002148:	843ffc04 	addi	r16,r16,-16
 100214c:	81800448 	cmpgei	r6,r16,17
 1002150:	21000204 	addi	r4,r4,8
 1002154:	30001426 	beq	r6,zero,10021a8 <___vfprintf_internal_r+0x1174>
 1002158:	10800044 	addi	r2,r2,1
 100215c:	18c00404 	addi	r3,r3,16
 1002160:	24800015 	stw	r18,0(r4)
 1002164:	23c00115 	stw	r15,4(r4)
 1002168:	d8c01c15 	stw	r3,112(sp)
 100216c:	d8801b15 	stw	r2,108(sp)
 1002170:	11800208 	cmpgei	r6,r2,8
 1002174:	303ff426 	beq	r6,zero,1002148 <___vfprintf_internal_r+0x1114>
 1002178:	d9801a04 	addi	r6,sp,104
 100217c:	880b883a 	mov	r5,r17
 1002180:	9809883a 	mov	r4,r19
 1002184:	10083e00 	call	10083e0 <__sprint_r>
 1002188:	1001a11e 	bne	r2,zero,1002810 <___vfprintf_internal_r+0x17dc>
 100218c:	843ffc04 	addi	r16,r16,-16
 1002190:	81800448 	cmpgei	r6,r16,17
 1002194:	d8c01c17 	ldw	r3,112(sp)
 1002198:	d8801b17 	ldw	r2,108(sp)
 100219c:	d9002704 	addi	r4,sp,156
 10021a0:	03c00404 	movi	r15,16
 10021a4:	303fec1e 	bne	r6,zero,1002158 <___vfprintf_internal_r+0x1124>
 10021a8:	800f883a 	mov	r7,r16
 10021ac:	9019883a 	mov	r12,r18
 10021b0:	a021883a 	mov	r16,r20
 10021b4:	8825883a 	mov	r18,r17
 10021b8:	b829883a 	mov	r20,r23
 10021bc:	db800e17 	ldw	r14,56(sp)
 10021c0:	db400f17 	ldw	r13,60(sp)
 10021c4:	ddc01217 	ldw	r23,72(sp)
 10021c8:	dc401117 	ldw	r17,68(sp)
 10021cc:	a811883a 	mov	r8,r21
 10021d0:	b02b883a 	mov	r21,r22
 10021d4:	202d883a 	mov	r22,r4
 10021d8:	10800044 	addi	r2,r2,1
 10021dc:	19c7883a 	add	r3,r3,r7
 10021e0:	d8801b15 	stw	r2,108(sp)
 10021e4:	b3000015 	stw	r12,0(r22)
 10021e8:	b1c00115 	stw	r7,4(r22)
 10021ec:	d8c01c15 	stw	r3,112(sp)
 10021f0:	10800208 	cmpgei	r2,r2,8
 10021f4:	1001781e 	bne	r2,zero,10027d8 <___vfprintf_internal_r+0x17a4>
 10021f8:	b5800204 	addi	r22,r22,8
 10021fc:	003c5f06 	br	100137c <___vfprintf_internal_r+0x348>
 1002200:	d9801a04 	addi	r6,sp,104
 1002204:	900b883a 	mov	r5,r18
 1002208:	9809883a 	mov	r4,r19
 100220c:	da000f15 	stw	r8,60(sp)
 1002210:	db400e15 	stw	r13,56(sp)
 1002214:	10083e00 	call	10083e0 <__sprint_r>
 1002218:	103c951e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 100221c:	d8c01c17 	ldw	r3,112(sp)
 1002220:	da000f17 	ldw	r8,60(sp)
 1002224:	db400e17 	ldw	r13,56(sp)
 1002228:	dd802704 	addi	r22,sp,156
 100222c:	003c6e06 	br	10013e8 <___vfprintf_internal_r+0x3b4>
 1002230:	d9801a04 	addi	r6,sp,104
 1002234:	900b883a 	mov	r5,r18
 1002238:	9809883a 	mov	r4,r19
 100223c:	da001115 	stw	r8,68(sp)
 1002240:	db400f15 	stw	r13,60(sp)
 1002244:	db800e15 	stw	r14,56(sp)
 1002248:	10083e00 	call	10083e0 <__sprint_r>
 100224c:	103c881e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002250:	d8c01c17 	ldw	r3,112(sp)
 1002254:	da001117 	ldw	r8,68(sp)
 1002258:	db400f17 	ldw	r13,60(sp)
 100225c:	db800e17 	ldw	r14,56(sp)
 1002260:	dd802704 	addi	r22,sp,156
 1002264:	003c5306 	br	10013b4 <___vfprintf_internal_r+0x380>
 1002268:	d9401417 	ldw	r5,80(sp)
 100226c:	01414c0e 	bge	zero,r5,10027a0 <___vfprintf_internal_r+0x176c>
 1002270:	d8800717 	ldw	r2,28(sp)
 1002274:	d9000817 	ldw	r4,32(sp)
 1002278:	102b883a 	mov	r21,r2
 100227c:	2080e316 	blt	r4,r2,100260c <___vfprintf_internal_r+0x15d8>
 1002280:	05400a0e 	bge	zero,r21,10022ac <___vfprintf_internal_r+0x1278>
 1002284:	d8801b17 	ldw	r2,108(sp)
 1002288:	1d47883a 	add	r3,r3,r21
 100228c:	b4400015 	stw	r17,0(r22)
 1002290:	10800044 	addi	r2,r2,1
 1002294:	d8801b15 	stw	r2,108(sp)
 1002298:	b5400115 	stw	r21,4(r22)
 100229c:	d8c01c15 	stw	r3,112(sp)
 10022a0:	10800208 	cmpgei	r2,r2,8
 10022a4:	10030c1e 	bne	r2,zero,1002ed8 <___vfprintf_internal_r+0x1ea4>
 10022a8:	b5800204 	addi	r22,r22,8
 10022ac:	a800ff16 	blt	r21,zero,10026ac <___vfprintf_internal_r+0x1678>
 10022b0:	d8800717 	ldw	r2,28(sp)
 10022b4:	156bc83a 	sub	r21,r2,r21
 10022b8:	05410616 	blt	zero,r21,10026d4 <___vfprintf_internal_r+0x16a0>
 10022bc:	dd401417 	ldw	r21,80(sp)
 10022c0:	d8800817 	ldw	r2,32(sp)
 10022c4:	a880d40e 	bge	r21,r2,1002618 <___vfprintf_internal_r+0x15e4>
 10022c8:	d8800d17 	ldw	r2,52(sp)
 10022cc:	d9000b17 	ldw	r4,44(sp)
 10022d0:	b0800015 	stw	r2,0(r22)
 10022d4:	d8801b17 	ldw	r2,108(sp)
 10022d8:	1907883a 	add	r3,r3,r4
 10022dc:	b1000115 	stw	r4,4(r22)
 10022e0:	10800044 	addi	r2,r2,1
 10022e4:	d8801b15 	stw	r2,108(sp)
 10022e8:	d8c01c15 	stw	r3,112(sp)
 10022ec:	10800208 	cmpgei	r2,r2,8
 10022f0:	10028e1e 	bne	r2,zero,1002d2c <___vfprintf_internal_r+0x1cf8>
 10022f4:	b5800204 	addi	r22,r22,8
 10022f8:	d9000817 	ldw	r4,32(sp)
 10022fc:	d9400717 	ldw	r5,28(sp)
 1002300:	2545c83a 	sub	r2,r4,r21
 1002304:	2149c83a 	sub	r4,r4,r5
 1002308:	102b883a 	mov	r21,r2
 100230c:	2080010e 	bge	r4,r2,1002314 <___vfprintf_internal_r+0x12e0>
 1002310:	202b883a 	mov	r21,r4
 1002314:	05400c0e 	bge	zero,r21,1002348 <___vfprintf_internal_r+0x1314>
 1002318:	d9000717 	ldw	r4,28(sp)
 100231c:	1d47883a 	add	r3,r3,r21
 1002320:	b5400115 	stw	r21,4(r22)
 1002324:	8913883a 	add	r9,r17,r4
 1002328:	d9001b17 	ldw	r4,108(sp)
 100232c:	b2400015 	stw	r9,0(r22)
 1002330:	d8c01c15 	stw	r3,112(sp)
 1002334:	21000044 	addi	r4,r4,1
 1002338:	d9001b15 	stw	r4,108(sp)
 100233c:	21000208 	cmpgei	r4,r4,8
 1002340:	2002f01e 	bne	r4,zero,1002f04 <___vfprintf_internal_r+0x1ed0>
 1002344:	b5800204 	addi	r22,r22,8
 1002348:	a800010e 	bge	r21,zero,1002350 <___vfprintf_internal_r+0x131c>
 100234c:	002b883a 	mov	r21,zero
 1002350:	156bc83a 	sub	r21,r2,r21
 1002354:	057c350e 	bge	zero,r21,100142c <___vfprintf_internal_r+0x3f8>
 1002358:	01c04074 	movhi	r7,257
 100235c:	a9000450 	cmplti	r4,r21,17
 1002360:	d8801b17 	ldw	r2,108(sp)
 1002364:	39c94f04 	addi	r7,r7,9532
 1002368:	2001ad1e 	bne	r4,zero,1002a20 <___vfprintf_internal_r+0x19ec>
 100236c:	07000404 	movi	fp,16
 1002370:	3823883a 	mov	r17,r7
 1002374:	00000406 	br	1002388 <___vfprintf_internal_r+0x1354>
 1002378:	b5800204 	addi	r22,r22,8
 100237c:	ad7ffc04 	addi	r21,r21,-16
 1002380:	a9000448 	cmpgei	r4,r21,17
 1002384:	2001a526 	beq	r4,zero,1002a1c <___vfprintf_internal_r+0x19e8>
 1002388:	10800044 	addi	r2,r2,1
 100238c:	18c00404 	addi	r3,r3,16
 1002390:	b4400015 	stw	r17,0(r22)
 1002394:	b7000115 	stw	fp,4(r22)
 1002398:	d8c01c15 	stw	r3,112(sp)
 100239c:	d8801b15 	stw	r2,108(sp)
 10023a0:	11000208 	cmpgei	r4,r2,8
 10023a4:	203ff426 	beq	r4,zero,1002378 <___vfprintf_internal_r+0x1344>
 10023a8:	d9801a04 	addi	r6,sp,104
 10023ac:	900b883a 	mov	r5,r18
 10023b0:	9809883a 	mov	r4,r19
 10023b4:	10083e00 	call	10083e0 <__sprint_r>
 10023b8:	103c2d1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10023bc:	d8c01c17 	ldw	r3,112(sp)
 10023c0:	d8801b17 	ldw	r2,108(sp)
 10023c4:	dd802704 	addi	r22,sp,156
 10023c8:	003fec06 	br	100237c <___vfprintf_internal_r+0x1348>
 10023cc:	d8800417 	ldw	r2,16(sp)
 10023d0:	1080004c 	andi	r2,r2,1
 10023d4:	103f111e 	bne	r2,zero,100201c <___vfprintf_internal_r+0xfe8>
 10023d8:	00800044 	movi	r2,1
 10023dc:	dd401b15 	stw	r21,108(sp)
 10023e0:	b4400015 	stw	r17,0(r22)
 10023e4:	b0800115 	stw	r2,4(r22)
 10023e8:	d8c01c15 	stw	r3,112(sp)
 10023ec:	ad400208 	cmpgei	r21,r21,8
 10023f0:	a800941e 	bne	r21,zero,1002644 <___vfprintf_internal_r+0x1610>
 10023f4:	42000084 	addi	r8,r8,2
 10023f8:	b5800404 	addi	r22,r22,16
 10023fc:	003f3306 	br	10020cc <___vfprintf_internal_r+0x1098>
 1002400:	4002821e 	bne	r8,zero,1002e0c <___vfprintf_internal_r+0x1dd8>
 1002404:	0011883a 	mov	r8,zero
 1002408:	002b883a 	mov	r21,zero
 100240c:	dc402704 	addi	r17,sp,156
 1002410:	003da206 	br	1001a9c <___vfprintf_internal_r+0xa68>
 1002414:	02ff2d0e 	bge	zero,r11,10020cc <___vfprintf_internal_r+0x1098>
 1002418:	58800450 	cmplti	r2,r11,17
 100241c:	01c04074 	movhi	r7,257
 1002420:	1003261e 	bne	r2,zero,10030bc <___vfprintf_internal_r+0x2088>
 1002424:	39c94f04 	addi	r7,r7,9532
 1002428:	dc000715 	stw	r16,28(sp)
 100242c:	05800404 	movi	r22,16
 1002430:	5823883a 	mov	r17,r11
 1002434:	402b883a 	mov	r21,r8
 1002438:	3821883a 	mov	r16,r7
 100243c:	00000506 	br	1002454 <___vfprintf_internal_r+0x1420>
 1002440:	e7000204 	addi	fp,fp,8
 1002444:	8c7ffc04 	addi	r17,r17,-16
 1002448:	88800448 	cmpgei	r2,r17,17
 100244c:	1001be26 	beq	r2,zero,1002b48 <___vfprintf_internal_r+0x1b14>
 1002450:	ad400044 	addi	r21,r21,1
 1002454:	18c00404 	addi	r3,r3,16
 1002458:	e4000015 	stw	r16,0(fp)
 100245c:	e5800115 	stw	r22,4(fp)
 1002460:	d8c01c15 	stw	r3,112(sp)
 1002464:	dd401b15 	stw	r21,108(sp)
 1002468:	a8800208 	cmpgei	r2,r21,8
 100246c:	103ff426 	beq	r2,zero,1002440 <___vfprintf_internal_r+0x140c>
 1002470:	d9801a04 	addi	r6,sp,104
 1002474:	900b883a 	mov	r5,r18
 1002478:	9809883a 	mov	r4,r19
 100247c:	10083e00 	call	10083e0 <__sprint_r>
 1002480:	103bfb1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002484:	dd401b17 	ldw	r21,108(sp)
 1002488:	d8c01c17 	ldw	r3,112(sp)
 100248c:	df002704 	addi	fp,sp,156
 1002490:	003fec06 	br	1002444 <___vfprintf_internal_r+0x1410>
 1002494:	d9801a04 	addi	r6,sp,104
 1002498:	900b883a 	mov	r5,r18
 100249c:	9809883a 	mov	r4,r19
 10024a0:	10083e00 	call	10083e0 <__sprint_r>
 10024a4:	103bf21e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10024a8:	d8c01c17 	ldw	r3,112(sp)
 10024ac:	dd802704 	addi	r22,sp,156
 10024b0:	003bd106 	br	10013f8 <___vfprintf_internal_r+0x3c4>
 10024b4:	d8800417 	ldw	r2,16(sp)
 10024b8:	1080004c 	andi	r2,r2,1
 10024bc:	103bdb26 	beq	r2,zero,100142c <___vfprintf_internal_r+0x3f8>
 10024c0:	003df106 	br	1001c88 <___vfprintf_internal_r+0xc54>
 10024c4:	dc402704 	addi	r17,sp,156
 10024c8:	003d7406 	br	1001a9c <___vfprintf_internal_r+0xa68>
 10024cc:	d9000517 	ldw	r4,20(sp)
 10024d0:	2005d7fa 	srai	r2,r4,31
 10024d4:	19000015 	stw	r4,0(r3)
 10024d8:	18800115 	stw	r2,4(r3)
 10024dc:	003b0906 	br	1001104 <___vfprintf_internal_r+0xd0>
 10024e0:	00800c04 	movi	r2,48
 10024e4:	d8801385 	stb	r2,78(sp)
 10024e8:	df0013c5 	stb	fp,79(sp)
 10024ec:	63000094 	ori	r12,r12,2
 10024f0:	00800084 	movi	r2,2
 10024f4:	003c1206 	br	1001540 <___vfprintf_internal_r+0x50c>
 10024f8:	25000017 	ldw	r20,0(r4)
 10024fc:	002b883a 	mov	r21,zero
 1002500:	d8c00615 	stw	r3,24(sp)
 1002504:	003ce906 	br	10018ac <___vfprintf_internal_r+0x878>
 1002508:	25000017 	ldw	r20,0(r4)
 100250c:	002b883a 	mov	r21,zero
 1002510:	d8c00615 	stw	r3,24(sp)
 1002514:	0005883a 	mov	r2,zero
 1002518:	003c0906 	br	1001540 <___vfprintf_internal_r+0x50c>
 100251c:	25000017 	ldw	r20,0(r4)
 1002520:	002b883a 	mov	r21,zero
 1002524:	d8c00615 	stw	r3,24(sp)
 1002528:	00800044 	movi	r2,1
 100252c:	003c0406 	br	1001540 <___vfprintf_internal_r+0x50c>
 1002530:	25000017 	ldw	r20,0(r4)
 1002534:	d8c00615 	stw	r3,24(sp)
 1002538:	a02bd7fa 	srai	r21,r20,31
 100253c:	a805883a 	mov	r2,r21
 1002540:	003cb806 	br	1001824 <___vfprintf_internal_r+0x7f0>
 1002544:	18800017 	ldw	r2,0(r3)
 1002548:	d8800915 	stw	r2,36(sp)
 100254c:	18800117 	ldw	r2,4(r3)
 1002550:	d8800a15 	stw	r2,40(sp)
 1002554:	003c3006 	br	1001618 <___vfprintf_internal_r+0x5e4>
 1002558:	db401343 	ldbu	r13,77(sp)
 100255c:	a83cbc26 	beq	r21,zero,1001850 <___vfprintf_internal_r+0x81c>
 1002560:	dc402704 	addi	r17,sp,156
 1002564:	a805883a 	mov	r2,r21
 1002568:	dc000715 	stw	r16,28(sp)
 100256c:	902b883a 	mov	r21,r18
 1002570:	8821883a 	mov	r16,r17
 1002574:	db000415 	stw	r12,16(sp)
 1002578:	a023883a 	mov	r17,r20
 100257c:	da000e15 	stw	r8,56(sp)
 1002580:	9829883a 	mov	r20,r19
 1002584:	1025883a 	mov	r18,r2
 1002588:	6827883a 	mov	r19,r13
 100258c:	8809883a 	mov	r4,r17
 1002590:	900b883a 	mov	r5,r18
 1002594:	01800284 	movi	r6,10
 1002598:	000f883a 	mov	r7,zero
 100259c:	100ac400 	call	100ac40 <__umoddi3>
 10025a0:	10800c04 	addi	r2,r2,48
 10025a4:	8809883a 	mov	r4,r17
 10025a8:	900b883a 	mov	r5,r18
 10025ac:	01800284 	movi	r6,10
 10025b0:	000f883a 	mov	r7,zero
 10025b4:	80bfffc5 	stb	r2,-1(r16)
 10025b8:	100a6240 	call	100a624 <__udivdi3>
 10025bc:	900d883a 	mov	r6,r18
 10025c0:	880f883a 	mov	r7,r17
 10025c4:	843fffc4 	addi	r16,r16,-1
 10025c8:	1023883a 	mov	r17,r2
 10025cc:	1825883a 	mov	r18,r3
 10025d0:	303fee1e 	bne	r6,zero,100258c <___vfprintf_internal_r+0x1558>
 10025d4:	39c002a8 	cmpgeui	r7,r7,10
 10025d8:	383fec1e 	bne	r7,zero,100258c <___vfprintf_internal_r+0x1558>
 10025dc:	8023883a 	mov	r17,r16
 10025e0:	d8802704 	addi	r2,sp,156
 10025e4:	981b883a 	mov	r13,r19
 10025e8:	a825883a 	mov	r18,r21
 10025ec:	dc000717 	ldw	r16,28(sp)
 10025f0:	da000e17 	ldw	r8,56(sp)
 10025f4:	a027883a 	mov	r19,r20
 10025f8:	146bc83a 	sub	r21,r2,r17
 10025fc:	003d2706 	br	1001a9c <___vfprintf_internal_r+0xa68>
 1002600:	0421c83a 	sub	r16,zero,r16
 1002604:	d8800615 	stw	r2,24(sp)
 1002608:	003d4506 	br	1001b20 <___vfprintf_internal_r+0xaec>
 100260c:	202b883a 	mov	r21,r4
 1002610:	057f1c16 	blt	zero,r21,1002284 <___vfprintf_internal_r+0x1250>
 1002614:	003f2506 	br	10022ac <___vfprintf_internal_r+0x1278>
 1002618:	d8800417 	ldw	r2,16(sp)
 100261c:	1080004c 	andi	r2,r2,1
 1002620:	103f291e 	bne	r2,zero,10022c8 <___vfprintf_internal_r+0x1294>
 1002624:	d9000817 	ldw	r4,32(sp)
 1002628:	d9400717 	ldw	r5,28(sp)
 100262c:	2545c83a 	sub	r2,r4,r21
 1002630:	2179c83a 	sub	fp,r4,r5
 1002634:	102b883a 	mov	r21,r2
 1002638:	e0bf430e 	bge	fp,r2,1002348 <___vfprintf_internal_r+0x1314>
 100263c:	e02b883a 	mov	r21,fp
 1002640:	003f4106 	br	1002348 <___vfprintf_internal_r+0x1314>
 1002644:	d9801a04 	addi	r6,sp,104
 1002648:	900b883a 	mov	r5,r18
 100264c:	9809883a 	mov	r4,r19
 1002650:	10083e00 	call	10083e0 <__sprint_r>
 1002654:	103b861e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002658:	da001b17 	ldw	r8,108(sp)
 100265c:	d8c01c17 	ldw	r3,112(sp)
 1002660:	dd802904 	addi	r22,sp,164
 1002664:	42000044 	addi	r8,r8,1
 1002668:	df002704 	addi	fp,sp,156
 100266c:	003e9706 	br	10020cc <___vfprintf_internal_r+0x1098>
 1002670:	bf000043 	ldbu	fp,1(r23)
 1002674:	63000814 	ori	r12,r12,32
 1002678:	bdc00044 	addi	r23,r23,1
 100267c:	e2c03fcc 	andi	r11,fp,255
 1002680:	5ac0201c 	xori	r11,r11,128
 1002684:	5affe004 	addi	r11,r11,-128
 1002688:	003ab606 	br	1001164 <___vfprintf_internal_r+0x130>
 100268c:	d9801a04 	addi	r6,sp,104
 1002690:	900b883a 	mov	r5,r18
 1002694:	9809883a 	mov	r4,r19
 1002698:	10083e00 	call	10083e0 <__sprint_r>
 100269c:	103b741e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10026a0:	d8c01c17 	ldw	r3,112(sp)
 10026a4:	dd802704 	addi	r22,sp,156
 10026a8:	003d8306 	br	1001cb8 <___vfprintf_internal_r+0xc84>
 10026ac:	002b883a 	mov	r21,zero
 10026b0:	003eff06 	br	10022b0 <___vfprintf_internal_r+0x127c>
 10026b4:	408001f0 	cmpltui	r2,r8,7
 10026b8:	402b883a 	mov	r21,r8
 10026bc:	1001a426 	beq	r2,zero,1002d50 <___vfprintf_internal_r+0x1d1c>
 10026c0:	04404074 	movhi	r17,257
 10026c4:	a829883a 	mov	r20,r21
 10026c8:	d8c00615 	stw	r3,24(sp)
 10026cc:	8c494c04 	addi	r17,r17,9520
 10026d0:	003b1d06 	br	1001348 <___vfprintf_internal_r+0x314>
 10026d4:	01c04074 	movhi	r7,257
 10026d8:	a9000450 	cmplti	r4,r21,17
 10026dc:	d8801b17 	ldw	r2,108(sp)
 10026e0:	39c94f04 	addi	r7,r7,9532
 10026e4:	20017f1e 	bne	r4,zero,1002ce4 <___vfprintf_internal_r+0x1cb0>
 10026e8:	dc000e15 	stw	r16,56(sp)
 10026ec:	07000404 	movi	fp,16
 10026f0:	3821883a 	mov	r16,r7
 10026f4:	00000406 	br	1002708 <___vfprintf_internal_r+0x16d4>
 10026f8:	b5800204 	addi	r22,r22,8
 10026fc:	ad7ffc04 	addi	r21,r21,-16
 1002700:	a9000448 	cmpgei	r4,r21,17
 1002704:	20017526 	beq	r4,zero,1002cdc <___vfprintf_internal_r+0x1ca8>
 1002708:	10800044 	addi	r2,r2,1
 100270c:	18c00404 	addi	r3,r3,16
 1002710:	b4000015 	stw	r16,0(r22)
 1002714:	b7000115 	stw	fp,4(r22)
 1002718:	d8c01c15 	stw	r3,112(sp)
 100271c:	d8801b15 	stw	r2,108(sp)
 1002720:	11000208 	cmpgei	r4,r2,8
 1002724:	203ff426 	beq	r4,zero,10026f8 <___vfprintf_internal_r+0x16c4>
 1002728:	d9801a04 	addi	r6,sp,104
 100272c:	900b883a 	mov	r5,r18
 1002730:	9809883a 	mov	r4,r19
 1002734:	10083e00 	call	10083e0 <__sprint_r>
 1002738:	103b4d1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 100273c:	d8c01c17 	ldw	r3,112(sp)
 1002740:	d8801b17 	ldw	r2,108(sp)
 1002744:	dd802704 	addi	r22,sp,156
 1002748:	003fec06 	br	10026fc <___vfprintf_internal_r+0x16c8>
 100274c:	d8800517 	ldw	r2,20(sp)
 1002750:	18800015 	stw	r2,0(r3)
 1002754:	003a6b06 	br	1001104 <___vfprintf_internal_r+0xd0>
 1002758:	d9801a04 	addi	r6,sp,104
 100275c:	900b883a 	mov	r5,r18
 1002760:	9809883a 	mov	r4,r19
 1002764:	10083e00 	call	10083e0 <__sprint_r>
 1002768:	103b411e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 100276c:	d8c01c17 	ldw	r3,112(sp)
 1002770:	dd401b17 	ldw	r21,108(sp)
 1002774:	df002704 	addi	fp,sp,156
 1002778:	003e3a06 	br	1002064 <___vfprintf_internal_r+0x1030>
 100277c:	d9801a04 	addi	r6,sp,104
 1002780:	900b883a 	mov	r5,r18
 1002784:	9809883a 	mov	r4,r19
 1002788:	10083e00 	call	10083e0 <__sprint_r>
 100278c:	103b381e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002790:	d8c01c17 	ldw	r3,112(sp)
 1002794:	dd401b17 	ldw	r21,108(sp)
 1002798:	df002704 	addi	fp,sp,156
 100279c:	003e2606 	br	1002038 <___vfprintf_internal_r+0x1004>
 10027a0:	d8801b17 	ldw	r2,108(sp)
 10027a4:	01004074 	movhi	r4,257
 10027a8:	21094e04 	addi	r4,r4,9528
 10027ac:	10800044 	addi	r2,r2,1
 10027b0:	18c00044 	addi	r3,r3,1
 10027b4:	b1000015 	stw	r4,0(r22)
 10027b8:	01000044 	movi	r4,1
 10027bc:	d8801b15 	stw	r2,108(sp)
 10027c0:	b1000115 	stw	r4,4(r22)
 10027c4:	d8c01c15 	stw	r3,112(sp)
 10027c8:	10800208 	cmpgei	r2,r2,8
 10027cc:	103de11e 	bne	r2,zero,1001f54 <___vfprintf_internal_r+0xf20>
 10027d0:	b5800204 	addi	r22,r22,8
 10027d4:	003de706 	br	1001f74 <___vfprintf_internal_r+0xf40>
 10027d8:	d9801a04 	addi	r6,sp,104
 10027dc:	900b883a 	mov	r5,r18
 10027e0:	9809883a 	mov	r4,r19
 10027e4:	da001115 	stw	r8,68(sp)
 10027e8:	db400f15 	stw	r13,60(sp)
 10027ec:	db800e15 	stw	r14,56(sp)
 10027f0:	10083e00 	call	10083e0 <__sprint_r>
 10027f4:	103b1e1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 10027f8:	d8c01c17 	ldw	r3,112(sp)
 10027fc:	da001117 	ldw	r8,68(sp)
 1002800:	db400f17 	ldw	r13,60(sp)
 1002804:	db800e17 	ldw	r14,56(sp)
 1002808:	dd802704 	addi	r22,sp,156
 100280c:	003adb06 	br	100137c <___vfprintf_internal_r+0x348>
 1002810:	8825883a 	mov	r18,r17
 1002814:	003b1606 	br	1001470 <___vfprintf_internal_r+0x43c>
 1002818:	d9000917 	ldw	r4,36(sp)
 100281c:	d9400a17 	ldw	r5,40(sp)
 1002820:	da000615 	stw	r8,24(sp)
 1002824:	200d883a 	mov	r6,r4
 1002828:	280f883a 	mov	r7,r5
 100282c:	db000415 	stw	r12,16(sp)
 1002830:	100d7ec0 	call	100d7ec <__unorddf2>
 1002834:	db000417 	ldw	r12,16(sp)
 1002838:	da000617 	ldw	r8,24(sp)
 100283c:	1002091e 	bne	r2,zero,1003064 <___vfprintf_internal_r+0x2030>
 1002840:	057ff7c4 	movi	r21,-33
 1002844:	40bfffe0 	cmpeqi	r2,r8,-1
 1002848:	e56a703a 	and	r21,fp,r21
 100284c:	1001ab1e 	bne	r2,zero,1002efc <___vfprintf_internal_r+0x1ec8>
 1002850:	a88011d8 	cmpnei	r2,r21,71
 1002854:	10015726 	beq	r2,zero,1002db4 <___vfprintf_internal_r+0x1d80>
 1002858:	60804014 	ori	r2,r12,256
 100285c:	d8800415 	stw	r2,16(sp)
 1002860:	d8800a17 	ldw	r2,40(sp)
 1002864:	10012d16 	blt	r2,zero,1002d1c <___vfprintf_internal_r+0x1ce8>
 1002868:	dd000a17 	ldw	r20,40(sp)
 100286c:	d8000605 	stb	zero,24(sp)
 1002870:	e08019a0 	cmpeqi	r2,fp,102
 1002874:	d8800f15 	stw	r2,60(sp)
 1002878:	1000c31e 	bne	r2,zero,1002b88 <___vfprintf_internal_r+0x1b54>
 100287c:	e08011a0 	cmpeqi	r2,fp,70
 1002880:	1000c11e 	bne	r2,zero,1002b88 <___vfprintf_internal_r+0x1b54>
 1002884:	a8801158 	cmpnei	r2,r21,69
 1002888:	10016226 	beq	r2,zero,1002e14 <___vfprintf_internal_r+0x1de0>
 100288c:	d8801804 	addi	r2,sp,96
 1002890:	d8800315 	stw	r2,12(sp)
 1002894:	d9400917 	ldw	r5,36(sp)
 1002898:	d8801504 	addi	r2,sp,84
 100289c:	d8800215 	stw	r2,8(sp)
 10028a0:	d8801404 	addi	r2,sp,80
 10028a4:	da000015 	stw	r8,0(sp)
 10028a8:	9809883a 	mov	r4,r19
 10028ac:	d8800115 	stw	r2,4(sp)
 10028b0:	01c00084 	movi	r7,2
 10028b4:	a00d883a 	mov	r6,r20
 10028b8:	db000815 	stw	r12,32(sp)
 10028bc:	da000715 	stw	r8,28(sp)
 10028c0:	10035780 	call	1003578 <_dtoa_r>
 10028c4:	da000717 	ldw	r8,28(sp)
 10028c8:	e10019d8 	cmpnei	r4,fp,103
 10028cc:	db000817 	ldw	r12,32(sp)
 10028d0:	1023883a 	mov	r17,r2
 10028d4:	4007883a 	mov	r3,r8
 10028d8:	2001621e 	bne	r4,zero,1002e64 <___vfprintf_internal_r+0x1e30>
 10028dc:	6080004c 	andi	r2,r12,1
 10028e0:	1001621e 	bne	r2,zero,1002e6c <___vfprintf_internal_r+0x1e38>
 10028e4:	d8801417 	ldw	r2,80(sp)
 10028e8:	ad4011e0 	cmpeqi	r21,r21,71
 10028ec:	d8800715 	stw	r2,28(sp)
 10028f0:	d8801817 	ldw	r2,96(sp)
 10028f4:	1445c83a 	sub	r2,r2,r17
 10028f8:	d8800815 	stw	r2,32(sp)
 10028fc:	a8000526 	beq	r21,zero,1002914 <___vfprintf_internal_r+0x18e0>
 1002900:	d8c00717 	ldw	r3,28(sp)
 1002904:	18bfff50 	cmplti	r2,r3,-3
 1002908:	1000011e 	bne	r2,zero,1002910 <___vfprintf_internal_r+0x18dc>
 100290c:	40c1670e 	bge	r8,r3,1002eac <___vfprintf_internal_r+0x1e78>
 1002910:	e73fff84 	addi	fp,fp,-2
 1002914:	d8800717 	ldw	r2,28(sp)
 1002918:	df001645 	stb	fp,89(sp)
 100291c:	157fffc4 	addi	r21,r2,-1
 1002920:	dd401415 	stw	r21,80(sp)
 1002924:	a801c316 	blt	r21,zero,1003034 <___vfprintf_internal_r+0x2000>
 1002928:	00800ac4 	movi	r2,43
 100292c:	d8801685 	stb	r2,90(sp)
 1002930:	a8800290 	cmplti	r2,r21,10
 1002934:	1001b81e 	bne	r2,zero,1003018 <___vfprintf_internal_r+0x1fe4>
 1002938:	d98019c4 	addi	r6,sp,103
 100293c:	9029883a 	mov	r20,r18
 1002940:	dc400715 	stw	r17,28(sp)
 1002944:	8025883a 	mov	r18,r16
 1002948:	db000f15 	stw	r12,60(sp)
 100294c:	3021883a 	mov	r16,r6
 1002950:	a809883a 	mov	r4,r21
 1002954:	01400284 	movi	r5,10
 1002958:	1000cfc0 	call	1000cfc <__modsi3>
 100295c:	10800c04 	addi	r2,r2,48
 1002960:	a809883a 	mov	r4,r21
 1002964:	80bfffc5 	stb	r2,-1(r16)
 1002968:	01400284 	movi	r5,10
 100296c:	1000c7c0 	call	1000c7c <__divsi3>
 1002970:	a9001908 	cmpgei	r4,r21,100
 1002974:	8023883a 	mov	r17,r16
 1002978:	102b883a 	mov	r21,r2
 100297c:	843fffc4 	addi	r16,r16,-1
 1002980:	203ff31e 	bne	r4,zero,1002950 <___vfprintf_internal_r+0x191c>
 1002984:	800d883a 	mov	r6,r16
 1002988:	11000c04 	addi	r4,r2,48
 100298c:	9021883a 	mov	r16,r18
 1002990:	a025883a 	mov	r18,r20
 1002994:	8829883a 	mov	r20,r17
 1002998:	a0bfff84 	addi	r2,r20,-2
 100299c:	313fffc5 	stb	r4,-1(r6)
 10029a0:	d8c019c4 	addi	r3,sp,103
 10029a4:	db000f17 	ldw	r12,60(sp)
 10029a8:	dc400717 	ldw	r17,28(sp)
 10029ac:	10c1cd2e 	bgeu	r2,r3,10030e4 <___vfprintf_internal_r+0x20b0>
 10029b0:	d8c016c4 	addi	r3,sp,91
 10029b4:	00000106 	br	10029bc <___vfprintf_internal_r+0x1988>
 10029b8:	11000003 	ldbu	r4,0(r2)
 10029bc:	19000005 	stb	r4,0(r3)
 10029c0:	10800044 	addi	r2,r2,1
 10029c4:	d90019c4 	addi	r4,sp,103
 10029c8:	18c00044 	addi	r3,r3,1
 10029cc:	113ffa1e 	bne	r2,r4,10029b8 <___vfprintf_internal_r+0x1984>
 10029d0:	d8801a44 	addi	r2,sp,105
 10029d4:	d8c016c4 	addi	r3,sp,91
 10029d8:	1505c83a 	sub	r2,r2,r20
 10029dc:	1885883a 	add	r2,r3,r2
 10029e0:	d8c01644 	addi	r3,sp,89
 10029e4:	10c5c83a 	sub	r2,r2,r3
 10029e8:	d8801015 	stw	r2,64(sp)
 10029ec:	d8c00817 	ldw	r3,32(sp)
 10029f0:	d9001017 	ldw	r4,64(sp)
 10029f4:	18800088 	cmpgei	r2,r3,2
 10029f8:	20eb883a 	add	r21,r4,r3
 10029fc:	10019226 	beq	r2,zero,1003048 <___vfprintf_internal_r+0x2014>
 1002a00:	d8800b17 	ldw	r2,44(sp)
 1002a04:	a8ab883a 	add	r21,r21,r2
 1002a08:	a829883a 	mov	r20,r21
 1002a0c:	a800010e 	bge	r21,zero,1002a14 <___vfprintf_internal_r+0x19e0>
 1002a10:	0029883a 	mov	r20,zero
 1002a14:	d8000715 	stw	zero,28(sp)
 1002a18:	00008e06 	br	1002c54 <___vfprintf_internal_r+0x1c20>
 1002a1c:	880f883a 	mov	r7,r17
 1002a20:	10800044 	addi	r2,r2,1
 1002a24:	1d47883a 	add	r3,r3,r21
 1002a28:	b1c00015 	stw	r7,0(r22)
 1002a2c:	003a7906 	br	1001414 <___vfprintf_internal_r+0x3e0>
 1002a30:	d9801a04 	addi	r6,sp,104
 1002a34:	900b883a 	mov	r5,r18
 1002a38:	9809883a 	mov	r4,r19
 1002a3c:	10083e00 	call	10083e0 <__sprint_r>
 1002a40:	103a8b1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002a44:	d8c01c17 	ldw	r3,112(sp)
 1002a48:	dd802704 	addi	r22,sp,156
 1002a4c:	003c8b06 	br	1001c7c <___vfprintf_internal_r+0xc48>
 1002a50:	d9801a04 	addi	r6,sp,104
 1002a54:	900b883a 	mov	r5,r18
 1002a58:	9809883a 	mov	r4,r19
 1002a5c:	da000e15 	stw	r8,56(sp)
 1002a60:	10083e00 	call	10083e0 <__sprint_r>
 1002a64:	103a821e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002a68:	d8c01c17 	ldw	r3,112(sp)
 1002a6c:	da000e17 	ldw	r8,56(sp)
 1002a70:	dd802704 	addi	r22,sp,156
 1002a74:	003a5e06 	br	10013f0 <___vfprintf_internal_r+0x3bc>
 1002a78:	8809883a 	mov	r4,r17
 1002a7c:	db000415 	stw	r12,16(sp)
 1002a80:	d8c00615 	stw	r3,24(sp)
 1002a84:	1000f9c0 	call	1000f9c <strlen>
 1002a88:	db000417 	ldw	r12,16(sp)
 1002a8c:	102b883a 	mov	r21,r2
 1002a90:	1029883a 	mov	r20,r2
 1002a94:	003a2c06 	br	1001348 <___vfprintf_internal_r+0x314>
 1002a98:	d8800d17 	ldw	r2,52(sp)
 1002a9c:	d9000b17 	ldw	r4,44(sp)
 1002aa0:	b0800015 	stw	r2,0(r22)
 1002aa4:	d8801b17 	ldw	r2,108(sp)
 1002aa8:	20c7883a 	add	r3,r4,r3
 1002aac:	b1000115 	stw	r4,4(r22)
 1002ab0:	10800044 	addi	r2,r2,1
 1002ab4:	d8c01c15 	stw	r3,112(sp)
 1002ab8:	d8801b15 	stw	r2,108(sp)
 1002abc:	11000208 	cmpgei	r4,r2,8
 1002ac0:	2000bf1e 	bne	r4,zero,1002dc0 <___vfprintf_internal_r+0x1d8c>
 1002ac4:	b5800204 	addi	r22,r22,8
 1002ac8:	283d3c0e 	bge	r5,zero,1001fbc <___vfprintf_internal_r+0xf88>
 1002acc:	01c04074 	movhi	r7,257
 1002ad0:	293ffc08 	cmpgei	r4,r5,-16
 1002ad4:	39c94f04 	addi	r7,r7,9532
 1002ad8:	0179c83a 	sub	fp,zero,r5
 1002adc:	2001361e 	bne	r4,zero,1002fb8 <___vfprintf_internal_r+0x1f84>
 1002ae0:	dc000715 	stw	r16,28(sp)
 1002ae4:	05400404 	movi	r21,16
 1002ae8:	9021883a 	mov	r16,r18
 1002aec:	3825883a 	mov	r18,r7
 1002af0:	00000406 	br	1002b04 <___vfprintf_internal_r+0x1ad0>
 1002af4:	b5800204 	addi	r22,r22,8
 1002af8:	e73ffc04 	addi	fp,fp,-16
 1002afc:	e1800448 	cmpgei	r6,fp,17
 1002b00:	30012a26 	beq	r6,zero,1002fac <___vfprintf_internal_r+0x1f78>
 1002b04:	10800044 	addi	r2,r2,1
 1002b08:	18c00404 	addi	r3,r3,16
 1002b0c:	b4800015 	stw	r18,0(r22)
 1002b10:	b5400115 	stw	r21,4(r22)
 1002b14:	d8c01c15 	stw	r3,112(sp)
 1002b18:	d8801b15 	stw	r2,108(sp)
 1002b1c:	11800208 	cmpgei	r6,r2,8
 1002b20:	303ff426 	beq	r6,zero,1002af4 <___vfprintf_internal_r+0x1ac0>
 1002b24:	d9801a04 	addi	r6,sp,104
 1002b28:	800b883a 	mov	r5,r16
 1002b2c:	9809883a 	mov	r4,r19
 1002b30:	10083e00 	call	10083e0 <__sprint_r>
 1002b34:	10015f1e 	bne	r2,zero,10030b4 <___vfprintf_internal_r+0x2080>
 1002b38:	d8c01c17 	ldw	r3,112(sp)
 1002b3c:	d8801b17 	ldw	r2,108(sp)
 1002b40:	dd802704 	addi	r22,sp,156
 1002b44:	003fec06 	br	1002af8 <___vfprintf_internal_r+0x1ac4>
 1002b48:	800f883a 	mov	r7,r16
 1002b4c:	dc000717 	ldw	r16,28(sp)
 1002b50:	8817883a 	mov	r11,r17
 1002b54:	aa000044 	addi	r8,r21,1
 1002b58:	e0800204 	addi	r2,fp,8
 1002b5c:	1ac7883a 	add	r3,r3,r11
 1002b60:	e1c00015 	stw	r7,0(fp)
 1002b64:	e2c00115 	stw	r11,4(fp)
 1002b68:	d8c01c15 	stw	r3,112(sp)
 1002b6c:	da001b15 	stw	r8,108(sp)
 1002b70:	41000208 	cmpgei	r4,r8,8
 1002b74:	203eb31e 	bne	r4,zero,1002644 <___vfprintf_internal_r+0x1610>
 1002b78:	42000044 	addi	r8,r8,1
 1002b7c:	15800204 	addi	r22,r2,8
 1002b80:	1039883a 	mov	fp,r2
 1002b84:	003d5106 	br	10020cc <___vfprintf_internal_r+0x1098>
 1002b88:	d8801804 	addi	r2,sp,96
 1002b8c:	d8800315 	stw	r2,12(sp)
 1002b90:	d9400917 	ldw	r5,36(sp)
 1002b94:	d8801504 	addi	r2,sp,84
 1002b98:	d8800215 	stw	r2,8(sp)
 1002b9c:	d8801404 	addi	r2,sp,80
 1002ba0:	da000015 	stw	r8,0(sp)
 1002ba4:	d8800115 	stw	r2,4(sp)
 1002ba8:	01c000c4 	movi	r7,3
 1002bac:	a00d883a 	mov	r6,r20
 1002bb0:	9809883a 	mov	r4,r19
 1002bb4:	db000815 	stw	r12,32(sp)
 1002bb8:	da000715 	stw	r8,28(sp)
 1002bbc:	10035780 	call	1003578 <_dtoa_r>
 1002bc0:	da000717 	ldw	r8,28(sp)
 1002bc4:	1023883a 	mov	r17,r2
 1002bc8:	db000817 	ldw	r12,32(sp)
 1002bcc:	1207883a 	add	r3,r2,r8
 1002bd0:	88800007 	ldb	r2,0(r17)
 1002bd4:	10800c20 	cmpeqi	r2,r2,48
 1002bd8:	1000661e 	bne	r2,zero,1002d74 <___vfprintf_internal_r+0x1d40>
 1002bdc:	d8801417 	ldw	r2,80(sp)
 1002be0:	1893883a 	add	r9,r3,r2
 1002be4:	d9000917 	ldw	r4,36(sp)
 1002be8:	000d883a 	mov	r6,zero
 1002bec:	000f883a 	mov	r7,zero
 1002bf0:	a00b883a 	mov	r5,r20
 1002bf4:	da401115 	stw	r9,68(sp)
 1002bf8:	da000815 	stw	r8,32(sp)
 1002bfc:	db000715 	stw	r12,28(sp)
 1002c00:	100c4b00 	call	100c4b0 <__eqdf2>
 1002c04:	db000717 	ldw	r12,28(sp)
 1002c08:	da000817 	ldw	r8,32(sp)
 1002c0c:	da401117 	ldw	r9,68(sp)
 1002c10:	1000981e 	bne	r2,zero,1002e74 <___vfprintf_internal_r+0x1e40>
 1002c14:	4805883a 	mov	r2,r9
 1002c18:	d8c01417 	ldw	r3,80(sp)
 1002c1c:	1445c83a 	sub	r2,r2,r17
 1002c20:	ad4011d8 	cmpnei	r21,r21,71
 1002c24:	d8c00715 	stw	r3,28(sp)
 1002c28:	d8800815 	stw	r2,32(sp)
 1002c2c:	a83f3426 	beq	r21,zero,1002900 <___vfprintf_internal_r+0x18cc>
 1002c30:	d8800f17 	ldw	r2,60(sp)
 1002c34:	103f3726 	beq	r2,zero,1002914 <___vfprintf_internal_r+0x18e0>
 1002c38:	d8c00717 	ldw	r3,28(sp)
 1002c3c:	6080004c 	andi	r2,r12,1
 1002c40:	1204b03a 	or	r2,r2,r8
 1002c44:	00c1130e 	bge	zero,r3,1003094 <___vfprintf_internal_r+0x2060>
 1002c48:	10010e1e 	bne	r2,zero,1003084 <___vfprintf_internal_r+0x2050>
 1002c4c:	dd400717 	ldw	r21,28(sp)
 1002c50:	a829883a 	mov	r20,r21
 1002c54:	d8800607 	ldb	r2,24(sp)
 1002c58:	10008f26 	beq	r2,zero,1002e98 <___vfprintf_internal_r+0x1e64>
 1002c5c:	00800b44 	movi	r2,45
 1002c60:	d8801345 	stb	r2,77(sp)
 1002c64:	d8800e17 	ldw	r2,56(sp)
 1002c68:	0011883a 	mov	r8,zero
 1002c6c:	d8800615 	stw	r2,24(sp)
 1002c70:	003b9206 	br	1001abc <___vfprintf_internal_r+0xa88>
 1002c74:	04404074 	movhi	r17,257
 1002c78:	8c493e04 	addi	r17,r17,9464
 1002c7c:	003a8b06 	br	10016ac <___vfprintf_internal_r+0x678>
 1002c80:	d8800617 	ldw	r2,24(sp)
 1002c84:	d8c00615 	stw	r3,24(sp)
 1002c88:	15000017 	ldw	r20,0(r2)
 1002c8c:	a02bd7fa 	srai	r21,r20,31
 1002c90:	a805883a 	mov	r2,r21
 1002c94:	003ae306 	br	1001824 <___vfprintf_internal_r+0x7f0>
 1002c98:	d8800617 	ldw	r2,24(sp)
 1002c9c:	002b883a 	mov	r21,zero
 1002ca0:	d8c00615 	stw	r3,24(sp)
 1002ca4:	15000017 	ldw	r20,0(r2)
 1002ca8:	0005883a 	mov	r2,zero
 1002cac:	003a2406 	br	1001540 <___vfprintf_internal_r+0x50c>
 1002cb0:	d8800617 	ldw	r2,24(sp)
 1002cb4:	002b883a 	mov	r21,zero
 1002cb8:	d8c00615 	stw	r3,24(sp)
 1002cbc:	15000017 	ldw	r20,0(r2)
 1002cc0:	00800044 	movi	r2,1
 1002cc4:	003a1e06 	br	1001540 <___vfprintf_internal_r+0x50c>
 1002cc8:	d8800617 	ldw	r2,24(sp)
 1002ccc:	002b883a 	mov	r21,zero
 1002cd0:	d8c00615 	stw	r3,24(sp)
 1002cd4:	15000017 	ldw	r20,0(r2)
 1002cd8:	003af406 	br	10018ac <___vfprintf_internal_r+0x878>
 1002cdc:	800f883a 	mov	r7,r16
 1002ce0:	dc000e17 	ldw	r16,56(sp)
 1002ce4:	10800044 	addi	r2,r2,1
 1002ce8:	1d47883a 	add	r3,r3,r21
 1002cec:	d8801b15 	stw	r2,108(sp)
 1002cf0:	b1c00015 	stw	r7,0(r22)
 1002cf4:	b5400115 	stw	r21,4(r22)
 1002cf8:	d8c01c15 	stw	r3,112(sp)
 1002cfc:	10800208 	cmpgei	r2,r2,8
 1002d00:	10003a1e 	bne	r2,zero,1002dec <___vfprintf_internal_r+0x1db8>
 1002d04:	b5800204 	addi	r22,r22,8
 1002d08:	003d6c06 	br	10022bc <___vfprintf_internal_r+0x1288>
 1002d0c:	00800b44 	movi	r2,45
 1002d10:	d8801345 	stb	r2,77(sp)
 1002d14:	03400b44 	movi	r13,45
 1002d18:	003a6006 	br	100169c <___vfprintf_internal_r+0x668>
 1002d1c:	1520003c 	xorhi	r20,r2,32768
 1002d20:	00800b44 	movi	r2,45
 1002d24:	d8800605 	stb	r2,24(sp)
 1002d28:	003ed106 	br	1002870 <___vfprintf_internal_r+0x183c>
 1002d2c:	d9801a04 	addi	r6,sp,104
 1002d30:	900b883a 	mov	r5,r18
 1002d34:	9809883a 	mov	r4,r19
 1002d38:	10083e00 	call	10083e0 <__sprint_r>
 1002d3c:	1039cc1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002d40:	dd401417 	ldw	r21,80(sp)
 1002d44:	d8c01c17 	ldw	r3,112(sp)
 1002d48:	dd802704 	addi	r22,sp,156
 1002d4c:	003d6a06 	br	10022f8 <___vfprintf_internal_r+0x12c4>
 1002d50:	05400184 	movi	r21,6
 1002d54:	003e5a06 	br	10026c0 <___vfprintf_internal_r+0x168c>
 1002d58:	d9801a04 	addi	r6,sp,104
 1002d5c:	900b883a 	mov	r5,r18
 1002d60:	9809883a 	mov	r4,r19
 1002d64:	10083e00 	call	10083e0 <__sprint_r>
 1002d68:	0039c106 	br	1001470 <___vfprintf_internal_r+0x43c>
 1002d6c:	d9401345 	stb	r5,77(sp)
 1002d70:	00396f06 	br	1001330 <___vfprintf_internal_r+0x2fc>
 1002d74:	d9000917 	ldw	r4,36(sp)
 1002d78:	000d883a 	mov	r6,zero
 1002d7c:	000f883a 	mov	r7,zero
 1002d80:	a00b883a 	mov	r5,r20
 1002d84:	d8c01115 	stw	r3,68(sp)
 1002d88:	da000815 	stw	r8,32(sp)
 1002d8c:	db000715 	stw	r12,28(sp)
 1002d90:	100c4b00 	call	100c4b0 <__eqdf2>
 1002d94:	db000717 	ldw	r12,28(sp)
 1002d98:	da000817 	ldw	r8,32(sp)
 1002d9c:	d8c01117 	ldw	r3,68(sp)
 1002da0:	103f8e26 	beq	r2,zero,1002bdc <___vfprintf_internal_r+0x1ba8>
 1002da4:	00800044 	movi	r2,1
 1002da8:	1205c83a 	sub	r2,r2,r8
 1002dac:	d8801415 	stw	r2,80(sp)
 1002db0:	003f8b06 	br	1002be0 <___vfprintf_internal_r+0x1bac>
 1002db4:	403ea81e 	bne	r8,zero,1002858 <___vfprintf_internal_r+0x1824>
 1002db8:	02000044 	movi	r8,1
 1002dbc:	003ea606 	br	1002858 <___vfprintf_internal_r+0x1824>
 1002dc0:	d9801a04 	addi	r6,sp,104
 1002dc4:	900b883a 	mov	r5,r18
 1002dc8:	9809883a 	mov	r4,r19
 1002dcc:	10083e00 	call	10083e0 <__sprint_r>
 1002dd0:	1039a71e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002dd4:	d9401417 	ldw	r5,80(sp)
 1002dd8:	d8c01c17 	ldw	r3,112(sp)
 1002ddc:	d8801b17 	ldw	r2,108(sp)
 1002de0:	dd802704 	addi	r22,sp,156
 1002de4:	283c750e 	bge	r5,zero,1001fbc <___vfprintf_internal_r+0xf88>
 1002de8:	003f3806 	br	1002acc <___vfprintf_internal_r+0x1a98>
 1002dec:	d9801a04 	addi	r6,sp,104
 1002df0:	900b883a 	mov	r5,r18
 1002df4:	9809883a 	mov	r4,r19
 1002df8:	10083e00 	call	10083e0 <__sprint_r>
 1002dfc:	10399c1e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002e00:	d8c01c17 	ldw	r3,112(sp)
 1002e04:	dd802704 	addi	r22,sp,156
 1002e08:	003d2c06 	br	10022bc <___vfprintf_internal_r+0x1288>
 1002e0c:	db000417 	ldw	r12,16(sp)
 1002e10:	003a9106 	br	1001858 <___vfprintf_internal_r+0x824>
 1002e14:	d8801804 	addi	r2,sp,96
 1002e18:	d8800315 	stw	r2,12(sp)
 1002e1c:	d9400917 	ldw	r5,36(sp)
 1002e20:	d8801504 	addi	r2,sp,84
 1002e24:	40c00044 	addi	r3,r8,1
 1002e28:	d8800215 	stw	r2,8(sp)
 1002e2c:	d8801404 	addi	r2,sp,80
 1002e30:	d8c00015 	stw	r3,0(sp)
 1002e34:	d8800115 	stw	r2,4(sp)
 1002e38:	01c00084 	movi	r7,2
 1002e3c:	a00d883a 	mov	r6,r20
 1002e40:	9809883a 	mov	r4,r19
 1002e44:	db001115 	stw	r12,68(sp)
 1002e48:	da000815 	stw	r8,32(sp)
 1002e4c:	d8c00715 	stw	r3,28(sp)
 1002e50:	10035780 	call	1003578 <_dtoa_r>
 1002e54:	d8c00717 	ldw	r3,28(sp)
 1002e58:	da000817 	ldw	r8,32(sp)
 1002e5c:	db001117 	ldw	r12,68(sp)
 1002e60:	1023883a 	mov	r17,r2
 1002e64:	e08011d8 	cmpnei	r2,fp,71
 1002e68:	103e9c26 	beq	r2,zero,10028dc <___vfprintf_internal_r+0x18a8>
 1002e6c:	88d3883a 	add	r9,r17,r3
 1002e70:	003f5c06 	br	1002be4 <___vfprintf_internal_r+0x1bb0>
 1002e74:	d8801817 	ldw	r2,96(sp)
 1002e78:	127f672e 	bgeu	r2,r9,1002c18 <___vfprintf_internal_r+0x1be4>
 1002e7c:	01000c04 	movi	r4,48
 1002e80:	10c00044 	addi	r3,r2,1
 1002e84:	d8c01815 	stw	r3,96(sp)
 1002e88:	11000005 	stb	r4,0(r2)
 1002e8c:	d8801817 	ldw	r2,96(sp)
 1002e90:	127ffb36 	bltu	r2,r9,1002e80 <___vfprintf_internal_r+0x1e4c>
 1002e94:	003f6006 	br	1002c18 <___vfprintf_internal_r+0x1be4>
 1002e98:	d8800e17 	ldw	r2,56(sp)
 1002e9c:	db401343 	ldbu	r13,77(sp)
 1002ea0:	0011883a 	mov	r8,zero
 1002ea4:	d8800615 	stw	r2,24(sp)
 1002ea8:	003b0006 	br	1001aac <___vfprintf_internal_r+0xa78>
 1002eac:	d8800717 	ldw	r2,28(sp)
 1002eb0:	d8c00817 	ldw	r3,32(sp)
 1002eb4:	10c02216 	blt	r2,r3,1002f40 <___vfprintf_internal_r+0x1f0c>
 1002eb8:	6300004c 	andi	r12,r12,1
 1002ebc:	60004f1e 	bne	r12,zero,1002ffc <___vfprintf_internal_r+0x1fc8>
 1002ec0:	1029883a 	mov	r20,r2
 1002ec4:	1000010e 	bge	r2,zero,1002ecc <___vfprintf_internal_r+0x1e98>
 1002ec8:	0029883a 	mov	r20,zero
 1002ecc:	dd400717 	ldw	r21,28(sp)
 1002ed0:	070019c4 	movi	fp,103
 1002ed4:	003f5f06 	br	1002c54 <___vfprintf_internal_r+0x1c20>
 1002ed8:	d9801a04 	addi	r6,sp,104
 1002edc:	900b883a 	mov	r5,r18
 1002ee0:	9809883a 	mov	r4,r19
 1002ee4:	10083e00 	call	10083e0 <__sprint_r>
 1002ee8:	1039611e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002eec:	d8c01c17 	ldw	r3,112(sp)
 1002ef0:	dd802704 	addi	r22,sp,156
 1002ef4:	a83cee0e 	bge	r21,zero,10022b0 <___vfprintf_internal_r+0x127c>
 1002ef8:	003dec06 	br	10026ac <___vfprintf_internal_r+0x1678>
 1002efc:	02000184 	movi	r8,6
 1002f00:	003e5506 	br	1002858 <___vfprintf_internal_r+0x1824>
 1002f04:	d9801a04 	addi	r6,sp,104
 1002f08:	900b883a 	mov	r5,r18
 1002f0c:	9809883a 	mov	r4,r19
 1002f10:	10083e00 	call	10083e0 <__sprint_r>
 1002f14:	1039561e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002f18:	d8801417 	ldw	r2,80(sp)
 1002f1c:	d9000817 	ldw	r4,32(sp)
 1002f20:	d8c01c17 	ldw	r3,112(sp)
 1002f24:	dd802704 	addi	r22,sp,156
 1002f28:	2085c83a 	sub	r2,r4,r2
 1002f2c:	003d0606 	br	1002348 <___vfprintf_internal_r+0x1314>
 1002f30:	4029883a 	mov	r20,r8
 1002f34:	d8c00615 	stw	r3,24(sp)
 1002f38:	402b883a 	mov	r21,r8
 1002f3c:	00390206 	br	1001348 <___vfprintf_internal_r+0x314>
 1002f40:	d8800817 	ldw	r2,32(sp)
 1002f44:	d8c00b17 	ldw	r3,44(sp)
 1002f48:	10eb883a 	add	r21,r2,r3
 1002f4c:	d8800717 	ldw	r2,28(sp)
 1002f50:	00800316 	blt	zero,r2,1002f60 <___vfprintf_internal_r+0x1f2c>
 1002f54:	d8800717 	ldw	r2,28(sp)
 1002f58:	a8abc83a 	sub	r21,r21,r2
 1002f5c:	ad400044 	addi	r21,r21,1
 1002f60:	a829883a 	mov	r20,r21
 1002f64:	a8002a16 	blt	r21,zero,1003010 <___vfprintf_internal_r+0x1fdc>
 1002f68:	070019c4 	movi	fp,103
 1002f6c:	003f3906 	br	1002c54 <___vfprintf_internal_r+0x1c20>
 1002f70:	d9401345 	stb	r5,77(sp)
 1002f74:	003a2306 	br	1001804 <___vfprintf_internal_r+0x7d0>
 1002f78:	d9401345 	stb	r5,77(sp)
 1002f7c:	003b1806 	br	1001be0 <___vfprintf_internal_r+0xbac>
 1002f80:	d9401345 	stb	r5,77(sp)
 1002f84:	003a8e06 	br	10019c0 <___vfprintf_internal_r+0x98c>
 1002f88:	d9401345 	stb	r5,77(sp)
 1002f8c:	003a3d06 	br	1001884 <___vfprintf_internal_r+0x850>
 1002f90:	d9401345 	stb	r5,77(sp)
 1002f94:	003a7606 	br	1001970 <___vfprintf_internal_r+0x93c>
 1002f98:	d9401345 	stb	r5,77(sp)
 1002f9c:	00399406 	br	10015f0 <___vfprintf_internal_r+0x5bc>
 1002fa0:	00bfffc4 	movi	r2,-1
 1002fa4:	d8800515 	stw	r2,20(sp)
 1002fa8:	00393406 	br	100147c <___vfprintf_internal_r+0x448>
 1002fac:	900f883a 	mov	r7,r18
 1002fb0:	8025883a 	mov	r18,r16
 1002fb4:	dc000717 	ldw	r16,28(sp)
 1002fb8:	10800044 	addi	r2,r2,1
 1002fbc:	1f07883a 	add	r3,r3,fp
 1002fc0:	b1c00015 	stw	r7,0(r22)
 1002fc4:	b7000115 	stw	fp,4(r22)
 1002fc8:	d8c01c15 	stw	r3,112(sp)
 1002fcc:	d8801b15 	stw	r2,108(sp)
 1002fd0:	11000208 	cmpgei	r4,r2,8
 1002fd4:	203bf826 	beq	r4,zero,1001fb8 <___vfprintf_internal_r+0xf84>
 1002fd8:	d9801a04 	addi	r6,sp,104
 1002fdc:	900b883a 	mov	r5,r18
 1002fe0:	9809883a 	mov	r4,r19
 1002fe4:	10083e00 	call	10083e0 <__sprint_r>
 1002fe8:	1039211e 	bne	r2,zero,1001470 <___vfprintf_internal_r+0x43c>
 1002fec:	d8c01c17 	ldw	r3,112(sp)
 1002ff0:	d8801b17 	ldw	r2,108(sp)
 1002ff4:	dd802704 	addi	r22,sp,156
 1002ff8:	003bf006 	br	1001fbc <___vfprintf_internal_r+0xf88>
 1002ffc:	d8800717 	ldw	r2,28(sp)
 1003000:	d8c00b17 	ldw	r3,44(sp)
 1003004:	10eb883a 	add	r21,r2,r3
 1003008:	a829883a 	mov	r20,r21
 100300c:	a83fd60e 	bge	r21,zero,1002f68 <___vfprintf_internal_r+0x1f34>
 1003010:	0029883a 	mov	r20,zero
 1003014:	003fd406 	br	1002f68 <___vfprintf_internal_r+0x1f34>
 1003018:	00800c04 	movi	r2,48
 100301c:	ad400c04 	addi	r21,r21,48
 1003020:	d88016c5 	stb	r2,91(sp)
 1003024:	00800104 	movi	r2,4
 1003028:	dd401705 	stb	r21,92(sp)
 100302c:	d8801015 	stw	r2,64(sp)
 1003030:	003e6e06 	br	10029ec <___vfprintf_internal_r+0x19b8>
 1003034:	05400044 	movi	r21,1
 1003038:	a8abc83a 	sub	r21,r21,r2
 100303c:	00800b44 	movi	r2,45
 1003040:	d8801685 	stb	r2,90(sp)
 1003044:	003e3a06 	br	1002930 <___vfprintf_internal_r+0x18fc>
 1003048:	6080004c 	andi	r2,r12,1
 100304c:	d8800715 	stw	r2,28(sp)
 1003050:	103e6b1e 	bne	r2,zero,1002a00 <___vfprintf_internal_r+0x19cc>
 1003054:	a829883a 	mov	r20,r21
 1003058:	a83efe0e 	bge	r21,zero,1002c54 <___vfprintf_internal_r+0x1c20>
 100305c:	0029883a 	mov	r20,zero
 1003060:	003efc06 	br	1002c54 <___vfprintf_internal_r+0x1c20>
 1003064:	d8800a17 	ldw	r2,40(sp)
 1003068:	10001a16 	blt	r2,zero,10030d4 <___vfprintf_internal_r+0x20a0>
 100306c:	db401343 	ldbu	r13,77(sp)
 1003070:	e0801210 	cmplti	r2,fp,72
 1003074:	1000141e 	bne	r2,zero,10030c8 <___vfprintf_internal_r+0x2094>
 1003078:	04404074 	movhi	r17,257
 100307c:	8c494104 	addi	r17,r17,9476
 1003080:	00398a06 	br	10016ac <___vfprintf_internal_r+0x678>
 1003084:	d8800b17 	ldw	r2,44(sp)
 1003088:	18ab883a 	add	r21,r3,r2
 100308c:	aa2b883a 	add	r21,r21,r8
 1003090:	003ff006 	br	1003054 <___vfprintf_internal_r+0x2020>
 1003094:	1000031e 	bne	r2,zero,10030a4 <___vfprintf_internal_r+0x2070>
 1003098:	05000044 	movi	r20,1
 100309c:	05400044 	movi	r21,1
 10030a0:	003eec06 	br	1002c54 <___vfprintf_internal_r+0x1c20>
 10030a4:	d8800b17 	ldw	r2,44(sp)
 10030a8:	15400044 	addi	r21,r2,1
 10030ac:	aa2b883a 	add	r21,r21,r8
 10030b0:	003fe806 	br	1003054 <___vfprintf_internal_r+0x2020>
 10030b4:	8025883a 	mov	r18,r16
 10030b8:	0038ed06 	br	1001470 <___vfprintf_internal_r+0x43c>
 10030bc:	b005883a 	mov	r2,r22
 10030c0:	39c94f04 	addi	r7,r7,9532
 10030c4:	003ea506 	br	1002b5c <___vfprintf_internal_r+0x1b28>
 10030c8:	04404074 	movhi	r17,257
 10030cc:	8c494004 	addi	r17,r17,9472
 10030d0:	00397606 	br	10016ac <___vfprintf_internal_r+0x678>
 10030d4:	00800b44 	movi	r2,45
 10030d8:	d8801345 	stb	r2,77(sp)
 10030dc:	03400b44 	movi	r13,45
 10030e0:	003fe306 	br	1003070 <___vfprintf_internal_r+0x203c>
 10030e4:	00800084 	movi	r2,2
 10030e8:	d8801015 	stw	r2,64(sp)
 10030ec:	003e3f06 	br	10029ec <___vfprintf_internal_r+0x19b8>
 10030f0:	d8c00617 	ldw	r3,24(sp)
 10030f4:	1a000017 	ldw	r8,0(r3)
 10030f8:	18c00104 	addi	r3,r3,4
 10030fc:	4000010e 	bge	r8,zero,1003104 <___vfprintf_internal_r+0x20d0>
 1003100:	023fffc4 	movi	r8,-1
 1003104:	bf000043 	ldbu	fp,1(r23)
 1003108:	d8c00615 	stw	r3,24(sp)
 100310c:	102f883a 	mov	r23,r2
 1003110:	e2c03fcc 	andi	r11,fp,255
 1003114:	5ac0201c 	xori	r11,r11,128
 1003118:	5affe004 	addi	r11,r11,-128
 100311c:	00381106 	br	1001164 <___vfprintf_internal_r+0x130>

01003120 <__vfprintf_internal>:
 1003120:	00c04074 	movhi	r3,257
 1003124:	2005883a 	mov	r2,r4
 1003128:	1911d517 	ldw	r4,18260(r3)
 100312c:	300f883a 	mov	r7,r6
 1003130:	280d883a 	mov	r6,r5
 1003134:	100b883a 	mov	r5,r2
 1003138:	10010341 	jmpi	1001034 <___vfprintf_internal_r>

0100313c <__sbprintf>:
 100313c:	2880030b 	ldhu	r2,12(r5)
 1003140:	2b001917 	ldw	r12,100(r5)
 1003144:	2ac0038b 	ldhu	r11,14(r5)
 1003148:	2a800717 	ldw	r10,28(r5)
 100314c:	2a400917 	ldw	r9,36(r5)
 1003150:	defee204 	addi	sp,sp,-1144
 1003154:	da001a04 	addi	r8,sp,104
 1003158:	00c10004 	movi	r3,1024
 100315c:	dc011a15 	stw	r16,1128(sp)
 1003160:	10bfff4c 	andi	r2,r2,65533
 1003164:	2821883a 	mov	r16,r5
 1003168:	d80b883a 	mov	r5,sp
 100316c:	dc811c15 	stw	r18,1136(sp)
 1003170:	dc411b15 	stw	r17,1132(sp)
 1003174:	dfc11d15 	stw	ra,1140(sp)
 1003178:	2025883a 	mov	r18,r4
 100317c:	d880030d 	sth	r2,12(sp)
 1003180:	db001915 	stw	r12,100(sp)
 1003184:	dac0038d 	sth	r11,14(sp)
 1003188:	da800715 	stw	r10,28(sp)
 100318c:	da400915 	stw	r9,36(sp)
 1003190:	da000015 	stw	r8,0(sp)
 1003194:	da000415 	stw	r8,16(sp)
 1003198:	d8c00215 	stw	r3,8(sp)
 100319c:	d8c00515 	stw	r3,20(sp)
 10031a0:	d8000615 	stw	zero,24(sp)
 10031a4:	10010340 	call	1001034 <___vfprintf_internal_r>
 10031a8:	1023883a 	mov	r17,r2
 10031ac:	10000d0e 	bge	r2,zero,10031e4 <__sbprintf+0xa8>
 10031b0:	d880030b 	ldhu	r2,12(sp)
 10031b4:	1080100c 	andi	r2,r2,64
 10031b8:	10000326 	beq	r2,zero,10031c8 <__sbprintf+0x8c>
 10031bc:	8080030b 	ldhu	r2,12(r16)
 10031c0:	10801014 	ori	r2,r2,64
 10031c4:	8080030d 	sth	r2,12(r16)
 10031c8:	8805883a 	mov	r2,r17
 10031cc:	dfc11d17 	ldw	ra,1140(sp)
 10031d0:	dc811c17 	ldw	r18,1136(sp)
 10031d4:	dc411b17 	ldw	r17,1132(sp)
 10031d8:	dc011a17 	ldw	r16,1128(sp)
 10031dc:	dec11e04 	addi	sp,sp,1144
 10031e0:	f800283a 	ret
 10031e4:	d80b883a 	mov	r5,sp
 10031e8:	9009883a 	mov	r4,r18
 10031ec:	1004ef00 	call	1004ef0 <_fflush_r>
 10031f0:	103fef26 	beq	r2,zero,10031b0 <__sbprintf+0x74>
 10031f4:	047fffc4 	movi	r17,-1
 10031f8:	003fed06 	br	10031b0 <__sbprintf+0x74>

010031fc <__swsetup_r>:
 10031fc:	00804074 	movhi	r2,257
 1003200:	1091d517 	ldw	r2,18260(r2)
 1003204:	defffd04 	addi	sp,sp,-12
 1003208:	dc400115 	stw	r17,4(sp)
 100320c:	dc000015 	stw	r16,0(sp)
 1003210:	dfc00215 	stw	ra,8(sp)
 1003214:	2023883a 	mov	r17,r4
 1003218:	2821883a 	mov	r16,r5
 100321c:	10000226 	beq	r2,zero,1003228 <__swsetup_r+0x2c>
 1003220:	10c00e17 	ldw	r3,56(r2)
 1003224:	18003326 	beq	r3,zero,10032f4 <__swsetup_r+0xf8>
 1003228:	8180030b 	ldhu	r6,12(r16)
 100322c:	30c0020c 	andi	r3,r6,8
 1003230:	3005883a 	mov	r2,r6
 1003234:	18000f26 	beq	r3,zero,1003274 <__swsetup_r+0x78>
 1003238:	80c00417 	ldw	r3,16(r16)
 100323c:	18001626 	beq	r3,zero,1003298 <__swsetup_r+0x9c>
 1003240:	1100004c 	andi	r4,r2,1
 1003244:	20001f1e 	bne	r4,zero,10032c4 <__swsetup_r+0xc8>
 1003248:	1100008c 	andi	r4,r2,2
 100324c:	20002c1e 	bne	r4,zero,1003300 <__swsetup_r+0x104>
 1003250:	81000517 	ldw	r4,20(r16)
 1003254:	81000215 	stw	r4,8(r16)
 1003258:	18001f26 	beq	r3,zero,10032d8 <__swsetup_r+0xdc>
 100325c:	0005883a 	mov	r2,zero
 1003260:	dfc00217 	ldw	ra,8(sp)
 1003264:	dc400117 	ldw	r17,4(sp)
 1003268:	dc000017 	ldw	r16,0(sp)
 100326c:	dec00304 	addi	sp,sp,12
 1003270:	f800283a 	ret
 1003274:	3080040c 	andi	r2,r6,16
 1003278:	10003126 	beq	r2,zero,1003340 <__swsetup_r+0x144>
 100327c:	3080010c 	andi	r2,r6,4
 1003280:	1000211e 	bne	r2,zero,1003308 <__swsetup_r+0x10c>
 1003284:	80c00417 	ldw	r3,16(r16)
 1003288:	30800214 	ori	r2,r6,8
 100328c:	8080030d 	sth	r2,12(r16)
 1003290:	100d883a 	mov	r6,r2
 1003294:	183fea1e 	bne	r3,zero,1003240 <__swsetup_r+0x44>
 1003298:	1100a00c 	andi	r4,r2,640
 100329c:	21008020 	cmpeqi	r4,r4,512
 10032a0:	203fe71e 	bne	r4,zero,1003240 <__swsetup_r+0x44>
 10032a4:	8809883a 	mov	r4,r17
 10032a8:	800b883a 	mov	r5,r16
 10032ac:	1005da80 	call	1005da8 <__smakebuf_r>
 10032b0:	8180030b 	ldhu	r6,12(r16)
 10032b4:	80c00417 	ldw	r3,16(r16)
 10032b8:	3005883a 	mov	r2,r6
 10032bc:	1100004c 	andi	r4,r2,1
 10032c0:	203fe126 	beq	r4,zero,1003248 <__swsetup_r+0x4c>
 10032c4:	81000517 	ldw	r4,20(r16)
 10032c8:	80000215 	stw	zero,8(r16)
 10032cc:	0109c83a 	sub	r4,zero,r4
 10032d0:	81000615 	stw	r4,24(r16)
 10032d4:	183fe11e 	bne	r3,zero,100325c <__swsetup_r+0x60>
 10032d8:	10c0200c 	andi	r3,r2,128
 10032dc:	0005883a 	mov	r2,zero
 10032e0:	183fdf26 	beq	r3,zero,1003260 <__swsetup_r+0x64>
 10032e4:	31801014 	ori	r6,r6,64
 10032e8:	8180030d 	sth	r6,12(r16)
 10032ec:	00bfffc4 	movi	r2,-1
 10032f0:	003fdb06 	br	1003260 <__swsetup_r+0x64>
 10032f4:	1009883a 	mov	r4,r2
 10032f8:	10052840 	call	1005284 <__sinit>
 10032fc:	003fca06 	br	1003228 <__swsetup_r+0x2c>
 1003300:	0009883a 	mov	r4,zero
 1003304:	003fd306 	br	1003254 <__swsetup_r+0x58>
 1003308:	81400c17 	ldw	r5,48(r16)
 100330c:	28000626 	beq	r5,zero,1003328 <__swsetup_r+0x12c>
 1003310:	80801004 	addi	r2,r16,64
 1003314:	28800326 	beq	r5,r2,1003324 <__swsetup_r+0x128>
 1003318:	8809883a 	mov	r4,r17
 100331c:	10053e80 	call	10053e8 <_free_r>
 1003320:	8180030b 	ldhu	r6,12(r16)
 1003324:	80000c15 	stw	zero,48(r16)
 1003328:	80c00417 	ldw	r3,16(r16)
 100332c:	00bff6c4 	movi	r2,-37
 1003330:	118c703a 	and	r6,r2,r6
 1003334:	80000115 	stw	zero,4(r16)
 1003338:	80c00015 	stw	r3,0(r16)
 100333c:	003fd206 	br	1003288 <__swsetup_r+0x8c>
 1003340:	00800244 	movi	r2,9
 1003344:	88800015 	stw	r2,0(r17)
 1003348:	31801014 	ori	r6,r6,64
 100334c:	8180030d 	sth	r6,12(r16)
 1003350:	00bfffc4 	movi	r2,-1
 1003354:	003fc206 	br	1003260 <__swsetup_r+0x64>

01003358 <quorem>:
 1003358:	defff204 	addi	sp,sp,-56
 100335c:	dc400515 	stw	r17,20(sp)
 1003360:	20800417 	ldw	r2,16(r4)
 1003364:	2c400417 	ldw	r17,16(r5)
 1003368:	dfc00d15 	stw	ra,52(sp)
 100336c:	df000c15 	stw	fp,48(sp)
 1003370:	ddc00b15 	stw	r23,44(sp)
 1003374:	dd800a15 	stw	r22,40(sp)
 1003378:	dd400915 	stw	r21,36(sp)
 100337c:	dd000815 	stw	r20,32(sp)
 1003380:	dcc00715 	stw	r19,28(sp)
 1003384:	dc800615 	stw	r18,24(sp)
 1003388:	dc000415 	stw	r16,16(sp)
 100338c:	d9000115 	stw	r4,4(sp)
 1003390:	d9400215 	stw	r5,8(sp)
 1003394:	14407616 	blt	r2,r17,1003570 <quorem+0x218>
 1003398:	8c7fffc4 	addi	r17,r17,-1
 100339c:	882a90ba 	slli	r21,r17,2
 10033a0:	2f000504 	addi	fp,r5,20
 10033a4:	25800504 	addi	r22,r4,20
 10033a8:	e565883a 	add	r18,fp,r21
 10033ac:	b545883a 	add	r2,r22,r21
 10033b0:	95c00017 	ldw	r23,0(r18)
 10033b4:	15000017 	ldw	r20,0(r2)
 10033b8:	dd800015 	stw	r22,0(sp)
 10033bc:	bdc00044 	addi	r23,r23,1
 10033c0:	b80b883a 	mov	r5,r23
 10033c4:	a009883a 	mov	r4,r20
 10033c8:	d8800315 	stw	r2,12(sp)
 10033cc:	1000d700 	call	1000d70 <__udivsi3>
 10033d0:	1021883a 	mov	r16,r2
 10033d4:	a5c02f36 	bltu	r20,r23,1003494 <quorem+0x13c>
 10033d8:	e029883a 	mov	r20,fp
 10033dc:	002b883a 	mov	r21,zero
 10033e0:	002f883a 	mov	r23,zero
 10033e4:	a4c00017 	ldw	r19,0(r20)
 10033e8:	800b883a 	mov	r5,r16
 10033ec:	b5800104 	addi	r22,r22,4
 10033f0:	993fffcc 	andi	r4,r19,65535
 10033f4:	1000e300 	call	1000e30 <__mulsi3>
 10033f8:	9808d43a 	srli	r4,r19,16
 10033fc:	800b883a 	mov	r5,r16
 1003400:	156b883a 	add	r21,r2,r21
 1003404:	1000e300 	call	1000e30 <__mulsi3>
 1003408:	b0ffff17 	ldw	r3,-4(r22)
 100340c:	a80ad43a 	srli	r5,r21,16
 1003410:	a93fffcc 	andi	r4,r21,65535
 1003414:	19bfffcc 	andi	r6,r3,65535
 1003418:	b909c83a 	sub	r4,r23,r4
 100341c:	2189883a 	add	r4,r4,r6
 1003420:	1806d43a 	srli	r3,r3,16
 1003424:	1145883a 	add	r2,r2,r5
 1003428:	200bd43a 	srai	r5,r4,16
 100342c:	11bfffcc 	andi	r6,r2,65535
 1003430:	1987c83a 	sub	r3,r3,r6
 1003434:	1947883a 	add	r3,r3,r5
 1003438:	180a943a 	slli	r5,r3,16
 100343c:	213fffcc 	andi	r4,r4,65535
 1003440:	a5000104 	addi	r20,r20,4
 1003444:	2908b03a 	or	r4,r5,r4
 1003448:	b13fff15 	stw	r4,-4(r22)
 100344c:	102ad43a 	srli	r21,r2,16
 1003450:	182fd43a 	srai	r23,r3,16
 1003454:	953fe32e 	bgeu	r18,r20,10033e4 <quorem+0x8c>
 1003458:	d8c00317 	ldw	r3,12(sp)
 100345c:	18800017 	ldw	r2,0(r3)
 1003460:	10000c1e 	bne	r2,zero,1003494 <quorem+0x13c>
 1003464:	d8800017 	ldw	r2,0(sp)
 1003468:	1d7fff04 	addi	r21,r3,-4
 100346c:	15400436 	bltu	r2,r21,1003480 <quorem+0x128>
 1003470:	00000606 	br	100348c <quorem+0x134>
 1003474:	d8800017 	ldw	r2,0(sp)
 1003478:	8c7fffc4 	addi	r17,r17,-1
 100347c:	1540032e 	bgeu	r2,r21,100348c <quorem+0x134>
 1003480:	a8800017 	ldw	r2,0(r21)
 1003484:	ad7fff04 	addi	r21,r21,-4
 1003488:	103ffa26 	beq	r2,zero,1003474 <quorem+0x11c>
 100348c:	d8800117 	ldw	r2,4(sp)
 1003490:	14400415 	stw	r17,16(r2)
 1003494:	d9400217 	ldw	r5,8(sp)
 1003498:	d9000117 	ldw	r4,4(sp)
 100349c:	10074c80 	call	10074c8 <__mcmp>
 10034a0:	10002616 	blt	r2,zero,100353c <quorem+0x1e4>
 10034a4:	d9800017 	ldw	r6,0(sp)
 10034a8:	84000044 	addi	r16,r16,1
 10034ac:	0007883a 	mov	r3,zero
 10034b0:	e1000017 	ldw	r4,0(fp)
 10034b4:	31400017 	ldw	r5,0(r6)
 10034b8:	31800104 	addi	r6,r6,4
 10034bc:	20bfffcc 	andi	r2,r4,65535
 10034c0:	1887c83a 	sub	r3,r3,r2
 10034c4:	28bfffcc 	andi	r2,r5,65535
 10034c8:	1885883a 	add	r2,r3,r2
 10034cc:	2008d43a 	srli	r4,r4,16
 10034d0:	2806d43a 	srli	r3,r5,16
 10034d4:	100fd43a 	srai	r7,r2,16
 10034d8:	117fffcc 	andi	r5,r2,65535
 10034dc:	1907c83a 	sub	r3,r3,r4
 10034e0:	19c7883a 	add	r3,r3,r7
 10034e4:	1804943a 	slli	r2,r3,16
 10034e8:	e7000104 	addi	fp,fp,4
 10034ec:	1807d43a 	srai	r3,r3,16
 10034f0:	1144b03a 	or	r2,r2,r5
 10034f4:	30bfff15 	stw	r2,-4(r6)
 10034f8:	973fed2e 	bgeu	r18,fp,10034b0 <quorem+0x158>
 10034fc:	880490ba 	slli	r2,r17,2
 1003500:	d9000017 	ldw	r4,0(sp)
 1003504:	2085883a 	add	r2,r4,r2
 1003508:	10c00017 	ldw	r3,0(r2)
 100350c:	18000b1e 	bne	r3,zero,100353c <quorem+0x1e4>
 1003510:	10bfff04 	addi	r2,r2,-4
 1003514:	20800436 	bltu	r4,r2,1003528 <quorem+0x1d0>
 1003518:	00000606 	br	1003534 <quorem+0x1dc>
 100351c:	d8c00017 	ldw	r3,0(sp)
 1003520:	8c7fffc4 	addi	r17,r17,-1
 1003524:	1880032e 	bgeu	r3,r2,1003534 <quorem+0x1dc>
 1003528:	10c00017 	ldw	r3,0(r2)
 100352c:	10bfff04 	addi	r2,r2,-4
 1003530:	183ffa26 	beq	r3,zero,100351c <quorem+0x1c4>
 1003534:	d8800117 	ldw	r2,4(sp)
 1003538:	14400415 	stw	r17,16(r2)
 100353c:	8005883a 	mov	r2,r16
 1003540:	dfc00d17 	ldw	ra,52(sp)
 1003544:	df000c17 	ldw	fp,48(sp)
 1003548:	ddc00b17 	ldw	r23,44(sp)
 100354c:	dd800a17 	ldw	r22,40(sp)
 1003550:	dd400917 	ldw	r21,36(sp)
 1003554:	dd000817 	ldw	r20,32(sp)
 1003558:	dcc00717 	ldw	r19,28(sp)
 100355c:	dc800617 	ldw	r18,24(sp)
 1003560:	dc400517 	ldw	r17,20(sp)
 1003564:	dc000417 	ldw	r16,16(sp)
 1003568:	dec00e04 	addi	sp,sp,56
 100356c:	f800283a 	ret
 1003570:	0005883a 	mov	r2,zero
 1003574:	003ff206 	br	1003540 <quorem+0x1e8>

01003578 <_dtoa_r>:
 1003578:	20801017 	ldw	r2,64(r4)
 100357c:	deffe204 	addi	sp,sp,-120
 1003580:	ddc01b15 	stw	r23,108(sp)
 1003584:	dd001815 	stw	r20,96(sp)
 1003588:	dc801615 	stw	r18,88(sp)
 100358c:	dc401515 	stw	r17,84(sp)
 1003590:	dc001415 	stw	r16,80(sp)
 1003594:	dfc01d15 	stw	ra,116(sp)
 1003598:	df001c15 	stw	fp,112(sp)
 100359c:	dd801a15 	stw	r22,104(sp)
 10035a0:	dd401915 	stw	r21,100(sp)
 10035a4:	dcc01715 	stw	r19,92(sp)
 10035a8:	d9c00115 	stw	r7,4(sp)
 10035ac:	dc002017 	ldw	r16,128(sp)
 10035b0:	202f883a 	mov	r23,r4
 10035b4:	3025883a 	mov	r18,r6
 10035b8:	2829883a 	mov	r20,r5
 10035bc:	3023883a 	mov	r17,r6
 10035c0:	10000826 	beq	r2,zero,10035e4 <_dtoa_r+0x6c>
 10035c4:	21801117 	ldw	r6,68(r4)
 10035c8:	00c00044 	movi	r3,1
 10035cc:	100b883a 	mov	r5,r2
 10035d0:	1986983a 	sll	r3,r3,r6
 10035d4:	11800115 	stw	r6,4(r2)
 10035d8:	10c00215 	stw	r3,8(r2)
 10035dc:	1006b5c0 	call	1006b5c <_Bfree>
 10035e0:	b8001015 	stw	zero,64(r23)
 10035e4:	90018616 	blt	r18,zero,1003c00 <_dtoa_r+0x688>
 10035e8:	80000015 	stw	zero,0(r16)
 10035ec:	909ffc2c 	andhi	r2,r18,32752
 10035f0:	00dffc34 	movhi	r3,32752
 10035f4:	10c18b26 	beq	r2,r3,1003c24 <_dtoa_r+0x6ac>
 10035f8:	000d883a 	mov	r6,zero
 10035fc:	000f883a 	mov	r7,zero
 1003600:	a009883a 	mov	r4,r20
 1003604:	880b883a 	mov	r5,r17
 1003608:	100c4b00 	call	100c4b0 <__eqdf2>
 100360c:	1000181e 	bne	r2,zero,1003670 <_dtoa_r+0xf8>
 1003610:	d8c01f17 	ldw	r3,124(sp)
 1003614:	00800044 	movi	r2,1
 1003618:	18800015 	stw	r2,0(r3)
 100361c:	d8802117 	ldw	r2,132(sp)
 1003620:	10030b26 	beq	r2,zero,1004250 <_dtoa_r+0xcd8>
 1003624:	d8c02117 	ldw	r3,132(sp)
 1003628:	00804074 	movhi	r2,257
 100362c:	10894e44 	addi	r2,r2,9529
 1003630:	07004074 	movhi	fp,257
 1003634:	18800015 	stw	r2,0(r3)
 1003638:	e7094e04 	addi	fp,fp,9528
 100363c:	e005883a 	mov	r2,fp
 1003640:	dfc01d17 	ldw	ra,116(sp)
 1003644:	df001c17 	ldw	fp,112(sp)
 1003648:	ddc01b17 	ldw	r23,108(sp)
 100364c:	dd801a17 	ldw	r22,104(sp)
 1003650:	dd401917 	ldw	r21,100(sp)
 1003654:	dd001817 	ldw	r20,96(sp)
 1003658:	dcc01717 	ldw	r19,92(sp)
 100365c:	dc801617 	ldw	r18,88(sp)
 1003660:	dc401517 	ldw	r17,84(sp)
 1003664:	dc001417 	ldw	r16,80(sp)
 1003668:	dec01e04 	addi	sp,sp,120
 100366c:	f800283a 	ret
 1003670:	d8801204 	addi	r2,sp,72
 1003674:	9020d53a 	srli	r16,r18,20
 1003678:	d8800015 	stw	r2,0(sp)
 100367c:	d9c01304 	addi	r7,sp,76
 1003680:	a00b883a 	mov	r5,r20
 1003684:	880d883a 	mov	r6,r17
 1003688:	b809883a 	mov	r4,r23
 100368c:	10078ac0 	call	10078ac <__d2b>
 1003690:	102d883a 	mov	r22,r2
 1003694:	8001741e 	bne	r16,zero,1003c68 <_dtoa_r+0x6f0>
 1003698:	df001217 	ldw	fp,72(sp)
 100369c:	dc001317 	ldw	r16,76(sp)
 10036a0:	e421883a 	add	r16,fp,r16
 10036a4:	80810c84 	addi	r2,r16,1074
 10036a8:	10c00850 	cmplti	r3,r2,33
 10036ac:	1802f81e 	bne	r3,zero,1004290 <_dtoa_r+0xd18>
 10036b0:	01001004 	movi	r4,64
 10036b4:	2085c83a 	sub	r2,r4,r2
 10036b8:	81010484 	addi	r4,r16,1042
 10036bc:	90a4983a 	sll	r18,r18,r2
 10036c0:	a108d83a 	srl	r4,r20,r4
 10036c4:	9108b03a 	or	r4,r18,r4
 10036c8:	100d97c0 	call	100d97c <__floatunsidf>
 10036cc:	1009883a 	mov	r4,r2
 10036d0:	017f8434 	movhi	r5,65040
 10036d4:	00800044 	movi	r2,1
 10036d8:	194b883a 	add	r5,r3,r5
 10036dc:	843fffc4 	addi	r16,r16,-1
 10036e0:	d8800915 	stw	r2,36(sp)
 10036e4:	000d883a 	mov	r6,zero
 10036e8:	01cffe34 	movhi	r7,16376
 10036ec:	100ceb80 	call	100ceb8 <__subdf3>
 10036f0:	0198dbf4 	movhi	r6,25455
 10036f4:	01cff4f4 	movhi	r7,16339
 10036f8:	3190d844 	addi	r6,r6,17249
 10036fc:	39e1e9c4 	addi	r7,r7,-30809
 1003700:	1009883a 	mov	r4,r2
 1003704:	180b883a 	mov	r5,r3
 1003708:	100c7100 	call	100c710 <__muldf3>
 100370c:	01a2d874 	movhi	r6,35681
 1003710:	01cff1f4 	movhi	r7,16327
 1003714:	31b22cc4 	addi	r6,r6,-14157
 1003718:	39e28a04 	addi	r7,r7,-30168
 100371c:	180b883a 	mov	r5,r3
 1003720:	1009883a 	mov	r4,r2
 1003724:	100b2040 	call	100b204 <__adddf3>
 1003728:	8009883a 	mov	r4,r16
 100372c:	1027883a 	mov	r19,r2
 1003730:	1825883a 	mov	r18,r3
 1003734:	100d8c00 	call	100d8c0 <__floatsidf>
 1003738:	019427f4 	movhi	r6,20639
 100373c:	01cff4f4 	movhi	r7,16339
 1003740:	319e7ec4 	addi	r6,r6,31227
 1003744:	39d104c4 	addi	r7,r7,17427
 1003748:	1009883a 	mov	r4,r2
 100374c:	180b883a 	mov	r5,r3
 1003750:	100c7100 	call	100c710 <__muldf3>
 1003754:	100d883a 	mov	r6,r2
 1003758:	180f883a 	mov	r7,r3
 100375c:	9809883a 	mov	r4,r19
 1003760:	900b883a 	mov	r5,r18
 1003764:	100b2040 	call	100b204 <__adddf3>
 1003768:	1009883a 	mov	r4,r2
 100376c:	180b883a 	mov	r5,r3
 1003770:	1025883a 	mov	r18,r2
 1003774:	182b883a 	mov	r21,r3
 1003778:	100d8400 	call	100d840 <__fixdfsi>
 100377c:	000d883a 	mov	r6,zero
 1003780:	000f883a 	mov	r7,zero
 1003784:	9009883a 	mov	r4,r18
 1003788:	a80b883a 	mov	r5,r21
 100378c:	1027883a 	mov	r19,r2
 1003790:	100c6200 	call	100c620 <__ledf2>
 1003794:	1002a416 	blt	r2,zero,1004228 <_dtoa_r+0xcb0>
 1003798:	e439c83a 	sub	fp,fp,r16
 100379c:	e0ffffc4 	addi	r3,fp,-1
 10037a0:	988005e8 	cmpgeui	r2,r19,23
 10037a4:	d8c00215 	stw	r3,8(sp)
 10037a8:	1002961e 	bne	r2,zero,1004204 <_dtoa_r+0xc8c>
 10037ac:	980690fa 	slli	r3,r19,3
 10037b0:	00804074 	movhi	r2,257
 10037b4:	10899704 	addi	r2,r2,9820
 10037b8:	10c5883a 	add	r2,r2,r3
 10037bc:	11800017 	ldw	r6,0(r2)
 10037c0:	11c00117 	ldw	r7,4(r2)
 10037c4:	a009883a 	mov	r4,r20
 10037c8:	880b883a 	mov	r5,r17
 10037cc:	100c6200 	call	100c620 <__ledf2>
 10037d0:	1002670e 	bge	r2,zero,1004170 <_dtoa_r+0xbf8>
 10037d4:	d8000815 	stw	zero,32(sp)
 10037d8:	e0bfffc4 	addi	r2,fp,-1
 10037dc:	9cffffc4 	addi	r19,r19,-1
 10037e0:	10028c16 	blt	r2,zero,1004214 <_dtoa_r+0xc9c>
 10037e4:	d8000515 	stw	zero,20(sp)
 10037e8:	9802650e 	bge	r19,zero,1004180 <_dtoa_r+0xc08>
 10037ec:	d8800517 	ldw	r2,20(sp)
 10037f0:	d8c00117 	ldw	r3,4(sp)
 10037f4:	dcc00315 	stw	r19,12(sp)
 10037f8:	14c5c83a 	sub	r2,r2,r19
 10037fc:	d8800515 	stw	r2,20(sp)
 1003800:	04c5c83a 	sub	r2,zero,r19
 1003804:	d8800715 	stw	r2,28(sp)
 1003808:	188002a8 	cmpgeui	r2,r3,10
 100380c:	0027883a 	mov	r19,zero
 1003810:	1002631e 	bne	r2,zero,10041a0 <_dtoa_r+0xc28>
 1003814:	18800190 	cmplti	r2,r3,6
 1003818:	1002a11e 	bne	r2,zero,10042a0 <_dtoa_r+0xd28>
 100381c:	18bfff04 	addi	r2,r3,-4
 1003820:	d8800115 	stw	r2,4(sp)
 1003824:	0021883a 	mov	r16,zero
 1003828:	d8c00117 	ldw	r3,4(sp)
 100382c:	18800120 	cmpeqi	r2,r3,4
 1003830:	1003721e 	bne	r2,zero,10045fc <_dtoa_r+0x1084>
 1003834:	18800160 	cmpeqi	r2,r3,5
 1003838:	10032f1e 	bne	r2,zero,10044f8 <_dtoa_r+0xf80>
 100383c:	188000a0 	cmpeqi	r2,r3,2
 1003840:	10026326 	beq	r2,zero,10041d0 <_dtoa_r+0xc58>
 1003844:	d8000615 	stw	zero,24(sp)
 1003848:	d8801e17 	ldw	r2,120(sp)
 100384c:	00833c0e 	bge	zero,r2,1004540 <_dtoa_r+0xfc8>
 1003850:	d8800b15 	stw	r2,44(sp)
 1003854:	d8800415 	stw	r2,16(sp)
 1003858:	100d883a 	mov	r6,r2
 100385c:	b8001115 	stw	zero,68(r23)
 1003860:	30800610 	cmplti	r2,r6,24
 1003864:	1005161e 	bne	r2,zero,1004cc0 <_dtoa_r+0x1748>
 1003868:	00c00044 	movi	r3,1
 100386c:	00800104 	movi	r2,4
 1003870:	1085883a 	add	r2,r2,r2
 1003874:	11000504 	addi	r4,r2,20
 1003878:	180b883a 	mov	r5,r3
 100387c:	18c00044 	addi	r3,r3,1
 1003880:	313ffb2e 	bgeu	r6,r4,1003870 <_dtoa_r+0x2f8>
 1003884:	b9401115 	stw	r5,68(r23)
 1003888:	b809883a 	mov	r4,r23
 100388c:	1006ab80 	call	1006ab8 <_Balloc>
 1003890:	1039883a 	mov	fp,r2
 1003894:	1004f526 	beq	r2,zero,1004c6c <_dtoa_r+0x16f4>
 1003898:	b8801015 	stw	r2,64(r23)
 100389c:	d8800417 	ldw	r2,16(sp)
 10038a0:	108003e8 	cmpgeui	r2,r2,15
 10038a4:	10010b1e 	bne	r2,zero,1003cd4 <_dtoa_r+0x75c>
 10038a8:	80010a26 	beq	r16,zero,1003cd4 <_dtoa_r+0x75c>
 10038ac:	d9000317 	ldw	r4,12(sp)
 10038b0:	0103a30e 	bge	zero,r4,1004740 <_dtoa_r+0x11c8>
 10038b4:	208003cc 	andi	r2,r4,15
 10038b8:	100690fa 	slli	r3,r2,3
 10038bc:	202bd13a 	srai	r21,r4,4
 10038c0:	00804074 	movhi	r2,257
 10038c4:	10899704 	addi	r2,r2,9820
 10038c8:	10c5883a 	add	r2,r2,r3
 10038cc:	a8c0040c 	andi	r3,r21,16
 10038d0:	12800017 	ldw	r10,0(r2)
 10038d4:	12400117 	ldw	r9,4(r2)
 10038d8:	18034226 	beq	r3,zero,10045e4 <_dtoa_r+0x106c>
 10038dc:	00804074 	movhi	r2,257
 10038e0:	10898d04 	addi	r2,r2,9780
 10038e4:	11800817 	ldw	r6,32(r2)
 10038e8:	11c00917 	ldw	r7,36(r2)
 10038ec:	a009883a 	mov	r4,r20
 10038f0:	880b883a 	mov	r5,r17
 10038f4:	da400e15 	stw	r9,56(sp)
 10038f8:	da800d15 	stw	r10,52(sp)
 10038fc:	100bb7c0 	call	100bb7c <__divdf3>
 1003900:	da800d17 	ldw	r10,52(sp)
 1003904:	da400e17 	ldw	r9,56(sp)
 1003908:	ad4003cc 	andi	r21,r21,15
 100390c:	d8800a15 	stw	r2,40(sp)
 1003910:	d8c00c15 	stw	r3,48(sp)
 1003914:	040000c4 	movi	r16,3
 1003918:	a8001126 	beq	r21,zero,1003960 <_dtoa_r+0x3e8>
 100391c:	04804074 	movhi	r18,257
 1003920:	94898d04 	addi	r18,r18,9780
 1003924:	5009883a 	mov	r4,r10
 1003928:	480b883a 	mov	r5,r9
 100392c:	a980004c 	andi	r6,r21,1
 1003930:	30000626 	beq	r6,zero,100394c <_dtoa_r+0x3d4>
 1003934:	91800017 	ldw	r6,0(r18)
 1003938:	91c00117 	ldw	r7,4(r18)
 100393c:	84000044 	addi	r16,r16,1
 1003940:	100c7100 	call	100c710 <__muldf3>
 1003944:	1009883a 	mov	r4,r2
 1003948:	180b883a 	mov	r5,r3
 100394c:	a82bd07a 	srai	r21,r21,1
 1003950:	94800204 	addi	r18,r18,8
 1003954:	a83ff51e 	bne	r21,zero,100392c <_dtoa_r+0x3b4>
 1003958:	2015883a 	mov	r10,r4
 100395c:	2813883a 	mov	r9,r5
 1003960:	d9000a17 	ldw	r4,40(sp)
 1003964:	d9400c17 	ldw	r5,48(sp)
 1003968:	500d883a 	mov	r6,r10
 100396c:	480f883a 	mov	r7,r9
 1003970:	100bb7c0 	call	100bb7c <__divdf3>
 1003974:	1025883a 	mov	r18,r2
 1003978:	d8c00a15 	stw	r3,40(sp)
 100397c:	d8800817 	ldw	r2,32(sp)
 1003980:	10000726 	beq	r2,zero,10039a0 <_dtoa_r+0x428>
 1003984:	dd400a17 	ldw	r21,40(sp)
 1003988:	000d883a 	mov	r6,zero
 100398c:	01cffc34 	movhi	r7,16368
 1003990:	9009883a 	mov	r4,r18
 1003994:	a80b883a 	mov	r5,r21
 1003998:	100c6200 	call	100c620 <__ledf2>
 100399c:	10045516 	blt	r2,zero,1004af4 <_dtoa_r+0x157c>
 10039a0:	8009883a 	mov	r4,r16
 10039a4:	100d8c00 	call	100d8c0 <__floatsidf>
 10039a8:	d9c00a17 	ldw	r7,40(sp)
 10039ac:	900d883a 	mov	r6,r18
 10039b0:	1009883a 	mov	r4,r2
 10039b4:	180b883a 	mov	r5,r3
 10039b8:	100c7100 	call	100c710 <__muldf3>
 10039bc:	000d883a 	mov	r6,zero
 10039c0:	01d00734 	movhi	r7,16412
 10039c4:	1009883a 	mov	r4,r2
 10039c8:	180b883a 	mov	r5,r3
 10039cc:	100b2040 	call	100b204 <__adddf3>
 10039d0:	d8800c15 	stw	r2,48(sp)
 10039d4:	00bf3034 	movhi	r2,64704
 10039d8:	1885883a 	add	r2,r3,r2
 10039dc:	d8800d15 	stw	r2,52(sp)
 10039e0:	d8800417 	ldw	r2,16(sp)
 10039e4:	10033926 	beq	r2,zero,10046cc <_dtoa_r+0x1154>
 10039e8:	d8800317 	ldw	r2,12(sp)
 10039ec:	d8801115 	stw	r2,68(sp)
 10039f0:	d8800417 	ldw	r2,16(sp)
 10039f4:	d8800e15 	stw	r2,56(sp)
 10039f8:	dc000a17 	ldw	r16,40(sp)
 10039fc:	9009883a 	mov	r4,r18
 1003a00:	800b883a 	mov	r5,r16
 1003a04:	100d8400 	call	100d840 <__fixdfsi>
 1003a08:	d8c00e17 	ldw	r3,56(sp)
 1003a0c:	d8801015 	stw	r2,64(sp)
 1003a10:	18ffffc4 	addi	r3,r3,-1
 1003a14:	180890fa 	slli	r4,r3,3
 1003a18:	00c04074 	movhi	r3,257
 1003a1c:	18c99704 	addi	r3,r3,9820
 1003a20:	1907883a 	add	r3,r3,r4
 1003a24:	1b000017 	ldw	r12,0(r3)
 1003a28:	1b400117 	ldw	r13,4(r3)
 1003a2c:	1009883a 	mov	r4,r2
 1003a30:	db000f15 	stw	r12,60(sp)
 1003a34:	db400a15 	stw	r13,40(sp)
 1003a38:	100d8c00 	call	100d8c0 <__floatsidf>
 1003a3c:	9009883a 	mov	r4,r18
 1003a40:	800b883a 	mov	r5,r16
 1003a44:	100d883a 	mov	r6,r2
 1003a48:	180f883a 	mov	r7,r3
 1003a4c:	100ceb80 	call	100ceb8 <__subdf3>
 1003a50:	dac01017 	ldw	r11,64(sp)
 1003a54:	102b883a 	mov	r21,r2
 1003a58:	d8800617 	ldw	r2,24(sp)
 1003a5c:	db400a17 	ldw	r13,40(sp)
 1003a60:	db000f17 	ldw	r12,60(sp)
 1003a64:	e4000044 	addi	r16,fp,1
 1003a68:	1825883a 	mov	r18,r3
 1003a6c:	5ac00c04 	addi	r11,r11,48
 1003a70:	1003c626 	beq	r2,zero,100498c <_dtoa_r+0x1414>
 1003a74:	600d883a 	mov	r6,r12
 1003a78:	680f883a 	mov	r7,r13
 1003a7c:	0009883a 	mov	r4,zero
 1003a80:	014ff834 	movhi	r5,16352
 1003a84:	dac00f15 	stw	r11,60(sp)
 1003a88:	100bb7c0 	call	100bb7c <__divdf3>
 1003a8c:	d9800c17 	ldw	r6,48(sp)
 1003a90:	d9c00d17 	ldw	r7,52(sp)
 1003a94:	1009883a 	mov	r4,r2
 1003a98:	180b883a 	mov	r5,r3
 1003a9c:	100ceb80 	call	100ceb8 <__subdf3>
 1003aa0:	dac00f17 	ldw	r11,60(sp)
 1003aa4:	a80d883a 	mov	r6,r21
 1003aa8:	900f883a 	mov	r7,r18
 1003aac:	e2c00005 	stb	r11,0(fp)
 1003ab0:	1009883a 	mov	r4,r2
 1003ab4:	180b883a 	mov	r5,r3
 1003ab8:	d8800a15 	stw	r2,40(sp)
 1003abc:	d8c00c15 	stw	r3,48(sp)
 1003ac0:	100c5300 	call	100c530 <__gedf2>
 1003ac4:	00844116 	blt	zero,r2,1004bcc <_dtoa_r+0x1654>
 1003ac8:	0005883a 	mov	r2,zero
 1003acc:	dcc00f15 	stw	r19,60(sp)
 1003ad0:	dd800d15 	stw	r22,52(sp)
 1003ad4:	dcc00c17 	ldw	r19,48(sp)
 1003ad8:	dd800e17 	ldw	r22,56(sp)
 1003adc:	dc400c15 	stw	r17,48(sp)
 1003ae0:	ddc00e15 	stw	r23,56(sp)
 1003ae4:	dc400a17 	ldw	r17,40(sp)
 1003ae8:	dd000a15 	stw	r20,40(sp)
 1003aec:	1029883a 	mov	r20,r2
 1003af0:	00002606 	br	1003b8c <_dtoa_r+0x614>
 1003af4:	a5000044 	addi	r20,r20,1
 1003af8:	a5843d0e 	bge	r20,r22,1004bf0 <_dtoa_r+0x1678>
 1003afc:	8809883a 	mov	r4,r17
 1003b00:	980b883a 	mov	r5,r19
 1003b04:	000d883a 	mov	r6,zero
 1003b08:	01d00934 	movhi	r7,16420
 1003b0c:	100c7100 	call	100c710 <__muldf3>
 1003b10:	000d883a 	mov	r6,zero
 1003b14:	01d00934 	movhi	r7,16420
 1003b18:	a809883a 	mov	r4,r21
 1003b1c:	900b883a 	mov	r5,r18
 1003b20:	1023883a 	mov	r17,r2
 1003b24:	1827883a 	mov	r19,r3
 1003b28:	100c7100 	call	100c710 <__muldf3>
 1003b2c:	180b883a 	mov	r5,r3
 1003b30:	1009883a 	mov	r4,r2
 1003b34:	1825883a 	mov	r18,r3
 1003b38:	102b883a 	mov	r21,r2
 1003b3c:	100d8400 	call	100d840 <__fixdfsi>
 1003b40:	1009883a 	mov	r4,r2
 1003b44:	102f883a 	mov	r23,r2
 1003b48:	100d8c00 	call	100d8c0 <__floatsidf>
 1003b4c:	a809883a 	mov	r4,r21
 1003b50:	900b883a 	mov	r5,r18
 1003b54:	100d883a 	mov	r6,r2
 1003b58:	180f883a 	mov	r7,r3
 1003b5c:	100ceb80 	call	100ceb8 <__subdf3>
 1003b60:	84000044 	addi	r16,r16,1
 1003b64:	ba000c04 	addi	r8,r23,48
 1003b68:	823fffc5 	stb	r8,-1(r16)
 1003b6c:	880d883a 	mov	r6,r17
 1003b70:	980f883a 	mov	r7,r19
 1003b74:	1009883a 	mov	r4,r2
 1003b78:	180b883a 	mov	r5,r3
 1003b7c:	102b883a 	mov	r21,r2
 1003b80:	1825883a 	mov	r18,r3
 1003b84:	100c6200 	call	100c620 <__ledf2>
 1003b88:	10040e16 	blt	r2,zero,1004bc4 <_dtoa_r+0x164c>
 1003b8c:	a80d883a 	mov	r6,r21
 1003b90:	900f883a 	mov	r7,r18
 1003b94:	0009883a 	mov	r4,zero
 1003b98:	014ffc34 	movhi	r5,16368
 1003b9c:	100ceb80 	call	100ceb8 <__subdf3>
 1003ba0:	880d883a 	mov	r6,r17
 1003ba4:	980f883a 	mov	r7,r19
 1003ba8:	1009883a 	mov	r4,r2
 1003bac:	180b883a 	mov	r5,r3
 1003bb0:	100c6200 	call	100c620 <__ledf2>
 1003bb4:	103fcf0e 	bge	r2,zero,1003af4 <_dtoa_r+0x57c>
 1003bb8:	dd800d17 	ldw	r22,52(sp)
 1003bbc:	ddc00e17 	ldw	r23,56(sp)
 1003bc0:	d8801117 	ldw	r2,68(sp)
 1003bc4:	10800044 	addi	r2,r2,1
 1003bc8:	d8800315 	stw	r2,12(sp)
 1003bcc:	00000106 	br	1003bd4 <_dtoa_r+0x65c>
 1003bd0:	e403ee26 	beq	fp,r16,1004b8c <_dtoa_r+0x1614>
 1003bd4:	80ffffc3 	ldbu	r3,-1(r16)
 1003bd8:	8025883a 	mov	r18,r16
 1003bdc:	843fffc4 	addi	r16,r16,-1
 1003be0:	18803fcc 	andi	r2,r3,255
 1003be4:	1080201c 	xori	r2,r2,128
 1003be8:	10bfe004 	addi	r2,r2,-128
 1003bec:	10800e60 	cmpeqi	r2,r2,57
 1003bf0:	103ff71e 	bne	r2,zero,1003bd0 <_dtoa_r+0x658>
 1003bf4:	18c00044 	addi	r3,r3,1
 1003bf8:	80c00005 	stb	r3,0(r16)
 1003bfc:	00015106 	br	1004144 <_dtoa_r+0xbcc>
 1003c00:	04600034 	movhi	r17,32768
 1003c04:	8c7fffc4 	addi	r17,r17,-1
 1003c08:	9462703a 	and	r17,r18,r17
 1003c0c:	00800044 	movi	r2,1
 1003c10:	8825883a 	mov	r18,r17
 1003c14:	80800015 	stw	r2,0(r16)
 1003c18:	00dffc34 	movhi	r3,32752
 1003c1c:	909ffc2c 	andhi	r2,r18,32752
 1003c20:	10fe751e 	bne	r2,r3,10035f8 <_dtoa_r+0x80>
 1003c24:	d8c01f17 	ldw	r3,124(sp)
 1003c28:	00800434 	movhi	r2,16
 1003c2c:	10bfffc4 	addi	r2,r2,-1
 1003c30:	90a4703a 	and	r18,r18,r2
 1003c34:	0089c3c4 	movi	r2,9999
 1003c38:	18800015 	stw	r2,0(r3)
 1003c3c:	9528b03a 	or	r20,r18,r20
 1003c40:	a000121e 	bne	r20,zero,1003c8c <_dtoa_r+0x714>
 1003c44:	d8802117 	ldw	r2,132(sp)
 1003c48:	07004074 	movhi	fp,257
 1003c4c:	10041526 	beq	r2,zero,1004ca4 <_dtoa_r+0x172c>
 1003c50:	00804074 	movhi	r2,257
 1003c54:	e7095804 	addi	fp,fp,9568
 1003c58:	10895a04 	addi	r2,r2,9576
 1003c5c:	d8c02117 	ldw	r3,132(sp)
 1003c60:	18800015 	stw	r2,0(r3)
 1003c64:	003e7506 	br	100363c <_dtoa_r+0xc4>
 1003c68:	01400434 	movhi	r5,16
 1003c6c:	297fffc4 	addi	r5,r5,-1
 1003c70:	894a703a 	and	r5,r17,r5
 1003c74:	df001217 	ldw	fp,72(sp)
 1003c78:	a009883a 	mov	r4,r20
 1003c7c:	294ffc34 	orhi	r5,r5,16368
 1003c80:	843f0044 	addi	r16,r16,-1023
 1003c84:	d8000915 	stw	zero,36(sp)
 1003c88:	003e9606 	br	10036e4 <_dtoa_r+0x16c>
 1003c8c:	d8802117 	ldw	r2,132(sp)
 1003c90:	07004074 	movhi	fp,257
 1003c94:	1002141e 	bne	r2,zero,10044e8 <_dtoa_r+0xf70>
 1003c98:	e7095704 	addi	fp,fp,9564
 1003c9c:	003e6706 	br	100363c <_dtoa_r+0xc4>
 1003ca0:	b8001115 	stw	zero,68(r23)
 1003ca4:	000b883a 	mov	r5,zero
 1003ca8:	b809883a 	mov	r4,r23
 1003cac:	1006ab80 	call	1006ab8 <_Balloc>
 1003cb0:	1039883a 	mov	fp,r2
 1003cb4:	1003ed26 	beq	r2,zero,1004c6c <_dtoa_r+0x16f4>
 1003cb8:	b8801015 	stw	r2,64(r23)
 1003cbc:	00bfffc4 	movi	r2,-1
 1003cc0:	d8800415 	stw	r2,16(sp)
 1003cc4:	d8800b15 	stw	r2,44(sp)
 1003cc8:	00800044 	movi	r2,1
 1003ccc:	d8001e15 	stw	zero,120(sp)
 1003cd0:	d8800615 	stw	r2,24(sp)
 1003cd4:	d8801317 	ldw	r2,76(sp)
 1003cd8:	10007216 	blt	r2,zero,1003ea4 <_dtoa_r+0x92c>
 1003cdc:	d9000317 	ldw	r4,12(sp)
 1003ce0:	20c003c8 	cmpgei	r3,r4,15
 1003ce4:	18006f1e 	bne	r3,zero,1003ea4 <_dtoa_r+0x92c>
 1003ce8:	200690fa 	slli	r3,r4,3
 1003cec:	00804074 	movhi	r2,257
 1003cf0:	10899704 	addi	r2,r2,9820
 1003cf4:	10c5883a 	add	r2,r2,r3
 1003cf8:	10c00017 	ldw	r3,0(r2)
 1003cfc:	14800117 	ldw	r18,4(r2)
 1003d00:	d8801e17 	ldw	r2,120(sp)
 1003d04:	d8c00115 	stw	r3,4(sp)
 1003d08:	1000150e 	bge	r2,zero,1003d60 <_dtoa_r+0x7e8>
 1003d0c:	d8800417 	ldw	r2,16(sp)
 1003d10:	00801316 	blt	zero,r2,1003d60 <_dtoa_r+0x7e8>
 1003d14:	d8800417 	ldw	r2,16(sp)
 1003d18:	1002801e 	bne	r2,zero,100471c <_dtoa_r+0x11a4>
 1003d1c:	d9000117 	ldw	r4,4(sp)
 1003d20:	000d883a 	mov	r6,zero
 1003d24:	01d00534 	movhi	r7,16404
 1003d28:	900b883a 	mov	r5,r18
 1003d2c:	100c7100 	call	100c710 <__muldf3>
 1003d30:	100d883a 	mov	r6,r2
 1003d34:	180f883a 	mov	r7,r3
 1003d38:	a009883a 	mov	r4,r20
 1003d3c:	880b883a 	mov	r5,r17
 1003d40:	100c6200 	call	100c620 <__ledf2>
 1003d44:	002b883a 	mov	r21,zero
 1003d48:	0021883a 	mov	r16,zero
 1003d4c:	00820f16 	blt	zero,r2,100458c <_dtoa_r+0x1014>
 1003d50:	d8801e17 	ldw	r2,120(sp)
 1003d54:	e025883a 	mov	r18,fp
 1003d58:	00a2303a 	nor	r17,zero,r2
 1003d5c:	00021006 	br	10045a0 <_dtoa_r+0x1028>
 1003d60:	dd400117 	ldw	r21,4(sp)
 1003d64:	900f883a 	mov	r7,r18
 1003d68:	a009883a 	mov	r4,r20
 1003d6c:	a80d883a 	mov	r6,r21
 1003d70:	880b883a 	mov	r5,r17
 1003d74:	100bb7c0 	call	100bb7c <__divdf3>
 1003d78:	180b883a 	mov	r5,r3
 1003d7c:	1009883a 	mov	r4,r2
 1003d80:	100d8400 	call	100d840 <__fixdfsi>
 1003d84:	1009883a 	mov	r4,r2
 1003d88:	1027883a 	mov	r19,r2
 1003d8c:	100d8c00 	call	100d8c0 <__floatsidf>
 1003d90:	a80d883a 	mov	r6,r21
 1003d94:	900f883a 	mov	r7,r18
 1003d98:	1009883a 	mov	r4,r2
 1003d9c:	180b883a 	mov	r5,r3
 1003da0:	100c7100 	call	100c710 <__muldf3>
 1003da4:	100d883a 	mov	r6,r2
 1003da8:	a009883a 	mov	r4,r20
 1003dac:	880b883a 	mov	r5,r17
 1003db0:	180f883a 	mov	r7,r3
 1003db4:	100ceb80 	call	100ceb8 <__subdf3>
 1003db8:	d9800417 	ldw	r6,16(sp)
 1003dbc:	1009883a 	mov	r4,r2
 1003dc0:	98800c04 	addi	r2,r19,48
 1003dc4:	e0800005 	stb	r2,0(fp)
 1003dc8:	30800060 	cmpeqi	r2,r6,1
 1003dcc:	180b883a 	mov	r5,r3
 1003dd0:	e4000044 	addi	r16,fp,1
 1003dd4:	1002a91e 	bne	r2,zero,100487c <_dtoa_r+0x1304>
 1003dd8:	04400044 	movi	r17,1
 1003ddc:	3027883a 	mov	r19,r6
 1003de0:	dd800215 	stw	r22,8(sp)
 1003de4:	ddc00415 	stw	r23,16(sp)
 1003de8:	00001c06 	br	1003e5c <_dtoa_r+0x8e4>
 1003dec:	a80d883a 	mov	r6,r21
 1003df0:	900f883a 	mov	r7,r18
 1003df4:	b809883a 	mov	r4,r23
 1003df8:	a00b883a 	mov	r5,r20
 1003dfc:	100bb7c0 	call	100bb7c <__divdf3>
 1003e00:	180b883a 	mov	r5,r3
 1003e04:	1009883a 	mov	r4,r2
 1003e08:	100d8400 	call	100d840 <__fixdfsi>
 1003e0c:	1009883a 	mov	r4,r2
 1003e10:	102d883a 	mov	r22,r2
 1003e14:	100d8c00 	call	100d8c0 <__floatsidf>
 1003e18:	a80d883a 	mov	r6,r21
 1003e1c:	900f883a 	mov	r7,r18
 1003e20:	1009883a 	mov	r4,r2
 1003e24:	180b883a 	mov	r5,r3
 1003e28:	100c7100 	call	100c710 <__muldf3>
 1003e2c:	b809883a 	mov	r4,r23
 1003e30:	a00b883a 	mov	r5,r20
 1003e34:	100d883a 	mov	r6,r2
 1003e38:	180f883a 	mov	r7,r3
 1003e3c:	100ceb80 	call	100ceb8 <__subdf3>
 1003e40:	b1000c04 	addi	r4,r22,48
 1003e44:	81000005 	stb	r4,0(r16)
 1003e48:	8c400044 	addi	r17,r17,1
 1003e4c:	84000044 	addi	r16,r16,1
 1003e50:	1009883a 	mov	r4,r2
 1003e54:	180b883a 	mov	r5,r3
 1003e58:	9c428526 	beq	r19,r17,1004870 <_dtoa_r+0x12f8>
 1003e5c:	000d883a 	mov	r6,zero
 1003e60:	01d00934 	movhi	r7,16420
 1003e64:	100c7100 	call	100c710 <__muldf3>
 1003e68:	000d883a 	mov	r6,zero
 1003e6c:	000f883a 	mov	r7,zero
 1003e70:	1009883a 	mov	r4,r2
 1003e74:	180b883a 	mov	r5,r3
 1003e78:	102f883a 	mov	r23,r2
 1003e7c:	1829883a 	mov	r20,r3
 1003e80:	100c4b00 	call	100c4b0 <__eqdf2>
 1003e84:	103fd91e 	bne	r2,zero,1003dec <_dtoa_r+0x874>
 1003e88:	d8800317 	ldw	r2,12(sp)
 1003e8c:	dd800217 	ldw	r22,8(sp)
 1003e90:	ddc00417 	ldw	r23,16(sp)
 1003e94:	10800044 	addi	r2,r2,1
 1003e98:	d8800315 	stw	r2,12(sp)
 1003e9c:	8025883a 	mov	r18,r16
 1003ea0:	0000a806 	br	1004144 <_dtoa_r+0xbcc>
 1003ea4:	d8c00617 	ldw	r3,24(sp)
 1003ea8:	1800ec26 	beq	r3,zero,100425c <_dtoa_r+0xce4>
 1003eac:	d8c00117 	ldw	r3,4(sp)
 1003eb0:	18c00088 	cmpgei	r3,r3,2
 1003eb4:	1801e926 	beq	r3,zero,100465c <_dtoa_r+0x10e4>
 1003eb8:	d8800417 	ldw	r2,16(sp)
 1003ebc:	157fffc4 	addi	r21,r2,-1
 1003ec0:	d8800717 	ldw	r2,28(sp)
 1003ec4:	1541c50e 	bge	r2,r21,10045dc <_dtoa_r+0x1064>
 1003ec8:	d8800717 	ldw	r2,28(sp)
 1003ecc:	dd400715 	stw	r21,28(sp)
 1003ed0:	a885c83a 	sub	r2,r21,r2
 1003ed4:	98a7883a 	add	r19,r19,r2
 1003ed8:	002b883a 	mov	r21,zero
 1003edc:	d8800417 	ldw	r2,16(sp)
 1003ee0:	10029516 	blt	r2,zero,1004938 <_dtoa_r+0x13c0>
 1003ee4:	d8c00517 	ldw	r3,20(sp)
 1003ee8:	d9000217 	ldw	r4,8(sp)
 1003eec:	1825883a 	mov	r18,r3
 1003ef0:	2089883a 	add	r4,r4,r2
 1003ef4:	10c5883a 	add	r2,r2,r3
 1003ef8:	d9000215 	stw	r4,8(sp)
 1003efc:	d8800515 	stw	r2,20(sp)
 1003f00:	01400044 	movi	r5,1
 1003f04:	b809883a 	mov	r4,r23
 1003f08:	1006f280 	call	1006f28 <__i2b>
 1003f0c:	1021883a 	mov	r16,r2
 1003f10:	04800b0e 	bge	zero,r18,1003f40 <_dtoa_r+0x9c8>
 1003f14:	d8c00217 	ldw	r3,8(sp)
 1003f18:	00c0090e 	bge	zero,r3,1003f40 <_dtoa_r+0x9c8>
 1003f1c:	9005883a 	mov	r2,r18
 1003f20:	1c81a616 	blt	r3,r18,10045bc <_dtoa_r+0x1044>
 1003f24:	d8c00517 	ldw	r3,20(sp)
 1003f28:	90a5c83a 	sub	r18,r18,r2
 1003f2c:	1887c83a 	sub	r3,r3,r2
 1003f30:	d8c00515 	stw	r3,20(sp)
 1003f34:	d8c00217 	ldw	r3,8(sp)
 1003f38:	1885c83a 	sub	r2,r3,r2
 1003f3c:	d8800215 	stw	r2,8(sp)
 1003f40:	d8800717 	ldw	r2,28(sp)
 1003f44:	10001526 	beq	r2,zero,1003f9c <_dtoa_r+0xa24>
 1003f48:	d8800617 	ldw	r2,24(sp)
 1003f4c:	1001f626 	beq	r2,zero,1004728 <_dtoa_r+0x11b0>
 1003f50:	05400f0e 	bge	zero,r21,1003f90 <_dtoa_r+0xa18>
 1003f54:	800b883a 	mov	r5,r16
 1003f58:	a80d883a 	mov	r6,r21
 1003f5c:	b809883a 	mov	r4,r23
 1003f60:	10072280 	call	1007228 <__pow5mult>
 1003f64:	b00d883a 	mov	r6,r22
 1003f68:	100b883a 	mov	r5,r2
 1003f6c:	b809883a 	mov	r4,r23
 1003f70:	1021883a 	mov	r16,r2
 1003f74:	1006f7c0 	call	1006f7c <__multiply>
 1003f78:	b00b883a 	mov	r5,r22
 1003f7c:	b809883a 	mov	r4,r23
 1003f80:	d8800915 	stw	r2,36(sp)
 1003f84:	1006b5c0 	call	1006b5c <_Bfree>
 1003f88:	d8800917 	ldw	r2,36(sp)
 1003f8c:	102d883a 	mov	r22,r2
 1003f90:	d8800717 	ldw	r2,28(sp)
 1003f94:	154dc83a 	sub	r6,r2,r21
 1003f98:	1542621e 	bne	r2,r21,1004924 <_dtoa_r+0x13ac>
 1003f9c:	01400044 	movi	r5,1
 1003fa0:	b809883a 	mov	r4,r23
 1003fa4:	1006f280 	call	1006f28 <__i2b>
 1003fa8:	102b883a 	mov	r21,r2
 1003fac:	04c0be16 	blt	zero,r19,10042a8 <_dtoa_r+0xd30>
 1003fb0:	d8800117 	ldw	r2,4(sp)
 1003fb4:	10800088 	cmpgei	r2,r2,2
 1003fb8:	10015226 	beq	r2,zero,1004504 <_dtoa_r+0xf8c>
 1003fbc:	0023883a 	mov	r17,zero
 1003fc0:	00800044 	movi	r2,1
 1003fc4:	9800c11e 	bne	r19,zero,10042cc <_dtoa_r+0xd54>
 1003fc8:	d9400217 	ldw	r5,8(sp)
 1003fcc:	1145883a 	add	r2,r2,r5
 1003fd0:	108007cc 	andi	r2,r2,31
 1003fd4:	1000a526 	beq	r2,zero,100426c <_dtoa_r+0xcf4>
 1003fd8:	00c00804 	movi	r3,32
 1003fdc:	1887c83a 	sub	r3,r3,r2
 1003fe0:	19000150 	cmplti	r4,r3,5
 1003fe4:	2003311e 	bne	r4,zero,1004cac <_dtoa_r+0x1734>
 1003fe8:	00c00704 	movi	r3,28
 1003fec:	1885c83a 	sub	r2,r3,r2
 1003ff0:	d8c00517 	ldw	r3,20(sp)
 1003ff4:	90a5883a 	add	r18,r18,r2
 1003ff8:	1887883a 	add	r3,r3,r2
 1003ffc:	2885883a 	add	r2,r5,r2
 1004000:	d8c00515 	stw	r3,20(sp)
 1004004:	d8800215 	stw	r2,8(sp)
 1004008:	d8800517 	ldw	r2,20(sp)
 100400c:	0080050e 	bge	zero,r2,1004024 <_dtoa_r+0xaac>
 1004010:	b00b883a 	mov	r5,r22
 1004014:	100d883a 	mov	r6,r2
 1004018:	b809883a 	mov	r4,r23
 100401c:	10073400 	call	1007340 <__lshift>
 1004020:	102d883a 	mov	r22,r2
 1004024:	d8800217 	ldw	r2,8(sp)
 1004028:	0080050e 	bge	zero,r2,1004040 <_dtoa_r+0xac8>
 100402c:	a80b883a 	mov	r5,r21
 1004030:	100d883a 	mov	r6,r2
 1004034:	b809883a 	mov	r4,r23
 1004038:	10073400 	call	1007340 <__lshift>
 100403c:	102b883a 	mov	r21,r2
 1004040:	d8800817 	ldw	r2,32(sp)
 1004044:	1001161e 	bne	r2,zero,10044a0 <_dtoa_r+0xf28>
 1004048:	d8800417 	ldw	r2,16(sp)
 100404c:	0081040e 	bge	zero,r2,1004460 <_dtoa_r+0xee8>
 1004050:	d8800617 	ldw	r2,24(sp)
 1004054:	1000b01e 	bne	r2,zero,1004318 <_dtoa_r+0xda0>
 1004058:	d8800317 	ldw	r2,12(sp)
 100405c:	10800044 	addi	r2,r2,1
 1004060:	d8800315 	stw	r2,12(sp)
 1004064:	dc800417 	ldw	r18,16(sp)
 1004068:	04400044 	movi	r17,1
 100406c:	00000706 	br	100408c <_dtoa_r+0xb14>
 1004070:	b00b883a 	mov	r5,r22
 1004074:	000f883a 	mov	r7,zero
 1004078:	01800284 	movi	r6,10
 100407c:	b809883a 	mov	r4,r23
 1004080:	1006b800 	call	1006b80 <__multadd>
 1004084:	102d883a 	mov	r22,r2
 1004088:	8c400044 	addi	r17,r17,1
 100408c:	a80b883a 	mov	r5,r21
 1004090:	b009883a 	mov	r4,r22
 1004094:	10033580 	call	1003358 <quorem>
 1004098:	10c00c04 	addi	r3,r2,48
 100409c:	e445883a 	add	r2,fp,r17
 10040a0:	10ffffc5 	stb	r3,-1(r2)
 10040a4:	8cbff216 	blt	r17,r18,1004070 <_dtoa_r+0xaf8>
 10040a8:	d8800417 	ldw	r2,16(sp)
 10040ac:	0081510e 	bge	zero,r2,10045f4 <_dtoa_r+0x107c>
 10040b0:	e0a5883a 	add	r18,fp,r2
 10040b4:	0023883a 	mov	r17,zero
 10040b8:	b00b883a 	mov	r5,r22
 10040bc:	01800044 	movi	r6,1
 10040c0:	b809883a 	mov	r4,r23
 10040c4:	d8c00115 	stw	r3,4(sp)
 10040c8:	10073400 	call	1007340 <__lshift>
 10040cc:	1009883a 	mov	r4,r2
 10040d0:	a80b883a 	mov	r5,r21
 10040d4:	102d883a 	mov	r22,r2
 10040d8:	10074c80 	call	10074c8 <__mcmp>
 10040dc:	913fffc3 	ldbu	r4,-1(r18)
 10040e0:	00800416 	blt	zero,r2,10040f4 <_dtoa_r+0xb7c>
 10040e4:	00014806 	br	1004608 <_dtoa_r+0x1090>
 10040e8:	e0c15626 	beq	fp,r3,1004644 <_dtoa_r+0x10cc>
 10040ec:	193fffc3 	ldbu	r4,-1(r3)
 10040f0:	1825883a 	mov	r18,r3
 10040f4:	20803fcc 	andi	r2,r4,255
 10040f8:	1080201c 	xori	r2,r2,128
 10040fc:	10bfe004 	addi	r2,r2,-128
 1004100:	10800e60 	cmpeqi	r2,r2,57
 1004104:	90ffffc4 	addi	r3,r18,-1
 1004108:	103ff71e 	bne	r2,zero,10040e8 <_dtoa_r+0xb70>
 100410c:	21000044 	addi	r4,r4,1
 1004110:	19000005 	stb	r4,0(r3)
 1004114:	a80b883a 	mov	r5,r21
 1004118:	b809883a 	mov	r4,r23
 100411c:	1006b5c0 	call	1006b5c <_Bfree>
 1004120:	80000826 	beq	r16,zero,1004144 <_dtoa_r+0xbcc>
 1004124:	88000426 	beq	r17,zero,1004138 <_dtoa_r+0xbc0>
 1004128:	8c000326 	beq	r17,r16,1004138 <_dtoa_r+0xbc0>
 100412c:	880b883a 	mov	r5,r17
 1004130:	b809883a 	mov	r4,r23
 1004134:	1006b5c0 	call	1006b5c <_Bfree>
 1004138:	800b883a 	mov	r5,r16
 100413c:	b809883a 	mov	r4,r23
 1004140:	1006b5c0 	call	1006b5c <_Bfree>
 1004144:	b00b883a 	mov	r5,r22
 1004148:	b809883a 	mov	r4,r23
 100414c:	1006b5c0 	call	1006b5c <_Bfree>
 1004150:	d8801f17 	ldw	r2,124(sp)
 1004154:	d8c00317 	ldw	r3,12(sp)
 1004158:	90000005 	stb	zero,0(r18)
 100415c:	10c00015 	stw	r3,0(r2)
 1004160:	d8802117 	ldw	r2,132(sp)
 1004164:	103d3526 	beq	r2,zero,100363c <_dtoa_r+0xc4>
 1004168:	14800015 	stw	r18,0(r2)
 100416c:	003d3306 	br	100363c <_dtoa_r+0xc4>
 1004170:	e0bfffc4 	addi	r2,fp,-1
 1004174:	d8000815 	stw	zero,32(sp)
 1004178:	10002616 	blt	r2,zero,1004214 <_dtoa_r+0xc9c>
 100417c:	d8000515 	stw	zero,20(sp)
 1004180:	d8800217 	ldw	r2,8(sp)
 1004184:	d8c00117 	ldw	r3,4(sp)
 1004188:	dcc00315 	stw	r19,12(sp)
 100418c:	14c5883a 	add	r2,r2,r19
 1004190:	d8800215 	stw	r2,8(sp)
 1004194:	d8000715 	stw	zero,28(sp)
 1004198:	188002a8 	cmpgeui	r2,r3,10
 100419c:	103d9d26 	beq	r2,zero,1003814 <_dtoa_r+0x29c>
 10041a0:	00800044 	movi	r2,1
 10041a4:	d8800615 	stw	r2,24(sp)
 10041a8:	00bfffc4 	movi	r2,-1
 10041ac:	04000044 	movi	r16,1
 10041b0:	d8000115 	stw	zero,4(sp)
 10041b4:	d8800415 	stw	r2,16(sp)
 10041b8:	d8001e15 	stw	zero,120(sp)
 10041bc:	d8800417 	ldw	r2,16(sp)
 10041c0:	b8001115 	stw	zero,68(r23)
 10041c4:	000b883a 	mov	r5,zero
 10041c8:	d8800b15 	stw	r2,44(sp)
 10041cc:	003dae06 	br	1003888 <_dtoa_r+0x310>
 10041d0:	188000e0 	cmpeqi	r2,r3,3
 10041d4:	d8000615 	stw	zero,24(sp)
 10041d8:	103eb126 	beq	r2,zero,1003ca0 <_dtoa_r+0x728>
 10041dc:	d8801e17 	ldw	r2,120(sp)
 10041e0:	d8c00317 	ldw	r3,12(sp)
 10041e4:	10c5883a 	add	r2,r2,r3
 10041e8:	d8800b15 	stw	r2,44(sp)
 10041ec:	10800044 	addi	r2,r2,1
 10041f0:	d8800415 	stw	r2,16(sp)
 10041f4:	100d883a 	mov	r6,r2
 10041f8:	00bd9816 	blt	zero,r2,100385c <_dtoa_r+0x2e4>
 10041fc:	01800044 	movi	r6,1
 1004200:	003d9606 	br	100385c <_dtoa_r+0x2e4>
 1004204:	00800044 	movi	r2,1
 1004208:	d8800815 	stw	r2,32(sp)
 100420c:	e0bfffc4 	addi	r2,fp,-1
 1004210:	103d740e 	bge	r2,zero,10037e4 <_dtoa_r+0x26c>
 1004214:	00800044 	movi	r2,1
 1004218:	1705c83a 	sub	r2,r2,fp
 100421c:	d8800515 	stw	r2,20(sp)
 1004220:	d8000215 	stw	zero,8(sp)
 1004224:	003d7006 	br	10037e8 <_dtoa_r+0x270>
 1004228:	9809883a 	mov	r4,r19
 100422c:	100d8c00 	call	100d8c0 <__floatsidf>
 1004230:	900d883a 	mov	r6,r18
 1004234:	a80f883a 	mov	r7,r21
 1004238:	1009883a 	mov	r4,r2
 100423c:	180b883a 	mov	r5,r3
 1004240:	100c4b00 	call	100c4b0 <__eqdf2>
 1004244:	103d5426 	beq	r2,zero,1003798 <_dtoa_r+0x220>
 1004248:	9cffffc4 	addi	r19,r19,-1
 100424c:	003d5206 	br	1003798 <_dtoa_r+0x220>
 1004250:	07004074 	movhi	fp,257
 1004254:	e7094e04 	addi	fp,fp,9528
 1004258:	003cf806 	br	100363c <_dtoa_r+0xc4>
 100425c:	dd400717 	ldw	r21,28(sp)
 1004260:	dc800517 	ldw	r18,20(sp)
 1004264:	0021883a 	mov	r16,zero
 1004268:	003f2906 	br	1003f10 <_dtoa_r+0x998>
 100426c:	00800704 	movi	r2,28
 1004270:	d8c00517 	ldw	r3,20(sp)
 1004274:	90a5883a 	add	r18,r18,r2
 1004278:	1887883a 	add	r3,r3,r2
 100427c:	d8c00515 	stw	r3,20(sp)
 1004280:	d8c00217 	ldw	r3,8(sp)
 1004284:	1885883a 	add	r2,r3,r2
 1004288:	d8800215 	stw	r2,8(sp)
 100428c:	003f5e06 	br	1004008 <_dtoa_r+0xa90>
 1004290:	01000804 	movi	r4,32
 1004294:	2089c83a 	sub	r4,r4,r2
 1004298:	a108983a 	sll	r4,r20,r4
 100429c:	003d0a06 	br	10036c8 <_dtoa_r+0x150>
 10042a0:	04000044 	movi	r16,1
 10042a4:	003d6006 	br	1003828 <_dtoa_r+0x2b0>
 10042a8:	100b883a 	mov	r5,r2
 10042ac:	980d883a 	mov	r6,r19
 10042b0:	b809883a 	mov	r4,r23
 10042b4:	10072280 	call	1007228 <__pow5mult>
 10042b8:	d8c00117 	ldw	r3,4(sp)
 10042bc:	102b883a 	mov	r21,r2
 10042c0:	18c00090 	cmplti	r3,r3,2
 10042c4:	18014b1e 	bne	r3,zero,10047f4 <_dtoa_r+0x127c>
 10042c8:	0023883a 	mov	r17,zero
 10042cc:	a8800417 	ldw	r2,16(r21)
 10042d0:	10800104 	addi	r2,r2,4
 10042d4:	100490ba 	slli	r2,r2,2
 10042d8:	a885883a 	add	r2,r21,r2
 10042dc:	11000017 	ldw	r4,0(r2)
 10042e0:	1006e140 	call	1006e14 <__hi0bits>
 10042e4:	00c00804 	movi	r3,32
 10042e8:	1885c83a 	sub	r2,r3,r2
 10042ec:	003f3606 	br	1003fc8 <_dtoa_r+0xa50>
 10042f0:	800b883a 	mov	r5,r16
 10042f4:	000f883a 	mov	r7,zero
 10042f8:	01800284 	movi	r6,10
 10042fc:	b809883a 	mov	r4,r23
 1004300:	1006b800 	call	1006b80 <__multadd>
 1004304:	1021883a 	mov	r16,r2
 1004308:	d8800b17 	ldw	r2,44(sp)
 100430c:	00824d0e 	bge	zero,r2,1004c44 <_dtoa_r+0x16cc>
 1004310:	dcc00315 	stw	r19,12(sp)
 1004314:	d8800415 	stw	r2,16(sp)
 1004318:	0480aa16 	blt	zero,r18,10045c4 <_dtoa_r+0x104c>
 100431c:	8801701e 	bne	r17,zero,10048e0 <_dtoa_r+0x1368>
 1004320:	8027883a 	mov	r19,r16
 1004324:	d9000417 	ldw	r4,16(sp)
 1004328:	e0bfffc4 	addi	r2,fp,-1
 100432c:	a0c0004c 	andi	r3,r20,1
 1004330:	1105883a 	add	r2,r2,r4
 1004334:	d8800415 	stw	r2,16(sp)
 1004338:	d8800117 	ldw	r2,4(sp)
 100433c:	d8c00715 	stw	r3,28(sp)
 1004340:	e029883a 	mov	r20,fp
 1004344:	1884b03a 	or	r2,r3,r2
 1004348:	d8800615 	stw	r2,24(sp)
 100434c:	df000815 	stw	fp,32(sp)
 1004350:	00002906 	br	10043f8 <_dtoa_r+0xe80>
 1004354:	b009883a 	mov	r4,r22
 1004358:	10074c80 	call	10074c8 <__mcmp>
 100435c:	900b883a 	mov	r5,r18
 1004360:	b809883a 	mov	r4,r23
 1004364:	d8800215 	stw	r2,8(sp)
 1004368:	1006b5c0 	call	1006b5c <_Bfree>
 100436c:	d8800217 	ldw	r2,8(sp)
 1004370:	1000021e 	bne	r2,zero,100437c <_dtoa_r+0xe04>
 1004374:	d8c00617 	ldw	r3,24(sp)
 1004378:	18022326 	beq	r3,zero,1004c08 <_dtoa_r+0x1690>
 100437c:	a4800044 	addi	r18,r20,1
 1004380:	88012216 	blt	r17,zero,100480c <_dtoa_r+0x1294>
 1004384:	d8c00117 	ldw	r3,4(sp)
 1004388:	1c62b03a 	or	r17,r3,r17
 100438c:	d8c00717 	ldw	r3,28(sp)
 1004390:	1c62b03a 	or	r17,r3,r17
 1004394:	88011d26 	beq	r17,zero,100480c <_dtoa_r+0x1294>
 1004398:	00816b16 	blt	zero,r2,1004948 <_dtoa_r+0x13d0>
 100439c:	d8800417 	ldw	r2,16(sp)
 10043a0:	a7000005 	stb	fp,0(r20)
 10043a4:	15017126 	beq	r2,r20,100496c <_dtoa_r+0x13f4>
 10043a8:	b00b883a 	mov	r5,r22
 10043ac:	000f883a 	mov	r7,zero
 10043b0:	01800284 	movi	r6,10
 10043b4:	b809883a 	mov	r4,r23
 10043b8:	1006b800 	call	1006b80 <__multadd>
 10043bc:	102d883a 	mov	r22,r2
 10043c0:	800b883a 	mov	r5,r16
 10043c4:	000f883a 	mov	r7,zero
 10043c8:	01800284 	movi	r6,10
 10043cc:	b809883a 	mov	r4,r23
 10043d0:	84c01f26 	beq	r16,r19,1004450 <_dtoa_r+0xed8>
 10043d4:	1006b800 	call	1006b80 <__multadd>
 10043d8:	980b883a 	mov	r5,r19
 10043dc:	000f883a 	mov	r7,zero
 10043e0:	01800284 	movi	r6,10
 10043e4:	b809883a 	mov	r4,r23
 10043e8:	1021883a 	mov	r16,r2
 10043ec:	1006b800 	call	1006b80 <__multadd>
 10043f0:	1027883a 	mov	r19,r2
 10043f4:	9029883a 	mov	r20,r18
 10043f8:	a80b883a 	mov	r5,r21
 10043fc:	b009883a 	mov	r4,r22
 1004400:	10033580 	call	1003358 <quorem>
 1004404:	800b883a 	mov	r5,r16
 1004408:	b009883a 	mov	r4,r22
 100440c:	1039883a 	mov	fp,r2
 1004410:	d8800515 	stw	r2,20(sp)
 1004414:	10074c80 	call	10074c8 <__mcmp>
 1004418:	a80b883a 	mov	r5,r21
 100441c:	980d883a 	mov	r6,r19
 1004420:	b809883a 	mov	r4,r23
 1004424:	1023883a 	mov	r17,r2
 1004428:	10075200 	call	1007520 <__mdiff>
 100442c:	1025883a 	mov	r18,r2
 1004430:	10800317 	ldw	r2,12(r2)
 1004434:	e7000c04 	addi	fp,fp,48
 1004438:	900b883a 	mov	r5,r18
 100443c:	103fc526 	beq	r2,zero,1004354 <_dtoa_r+0xddc>
 1004440:	b809883a 	mov	r4,r23
 1004444:	1006b5c0 	call	1006b5c <_Bfree>
 1004448:	00800044 	movi	r2,1
 100444c:	003fcb06 	br	100437c <_dtoa_r+0xe04>
 1004450:	1006b800 	call	1006b80 <__multadd>
 1004454:	1021883a 	mov	r16,r2
 1004458:	1027883a 	mov	r19,r2
 100445c:	003fe506 	br	10043f4 <_dtoa_r+0xe7c>
 1004460:	d8800117 	ldw	r2,4(sp)
 1004464:	108000d0 	cmplti	r2,r2,3
 1004468:	10003c26 	beq	r2,zero,100455c <_dtoa_r+0xfe4>
 100446c:	d8800617 	ldw	r2,24(sp)
 1004470:	103fa91e 	bne	r2,zero,1004318 <_dtoa_r+0xda0>
 1004474:	a80b883a 	mov	r5,r21
 1004478:	b009883a 	mov	r4,r22
 100447c:	10033580 	call	1003358 <quorem>
 1004480:	10c00c04 	addi	r3,r2,48
 1004484:	d8800317 	ldw	r2,12(sp)
 1004488:	e4800044 	addi	r18,fp,1
 100448c:	e0c00005 	stb	r3,0(fp)
 1004490:	10800044 	addi	r2,r2,1
 1004494:	d8800315 	stw	r2,12(sp)
 1004498:	0023883a 	mov	r17,zero
 100449c:	003f0606 	br	10040b8 <_dtoa_r+0xb40>
 10044a0:	a80b883a 	mov	r5,r21
 10044a4:	b009883a 	mov	r4,r22
 10044a8:	10074c80 	call	10074c8 <__mcmp>
 10044ac:	103ee60e 	bge	r2,zero,1004048 <_dtoa_r+0xad0>
 10044b0:	b00b883a 	mov	r5,r22
 10044b4:	000f883a 	mov	r7,zero
 10044b8:	01800284 	movi	r6,10
 10044bc:	b809883a 	mov	r4,r23
 10044c0:	1006b800 	call	1006b80 <__multadd>
 10044c4:	d8c00317 	ldw	r3,12(sp)
 10044c8:	102d883a 	mov	r22,r2
 10044cc:	d8800617 	ldw	r2,24(sp)
 10044d0:	1cffffc4 	addi	r19,r3,-1
 10044d4:	103f861e 	bne	r2,zero,10042f0 <_dtoa_r+0xd78>
 10044d8:	d8800b17 	ldw	r2,44(sp)
 10044dc:	0081d40e 	bge	zero,r2,1004c30 <_dtoa_r+0x16b8>
 10044e0:	d8800415 	stw	r2,16(sp)
 10044e4:	003edf06 	br	1004064 <_dtoa_r+0xaec>
 10044e8:	00804074 	movhi	r2,257
 10044ec:	e7095704 	addi	fp,fp,9564
 10044f0:	108957c4 	addi	r2,r2,9567
 10044f4:	003dd906 	br	1003c5c <_dtoa_r+0x6e4>
 10044f8:	00800044 	movi	r2,1
 10044fc:	d8800615 	stw	r2,24(sp)
 1004500:	003f3606 	br	10041dc <_dtoa_r+0xc64>
 1004504:	a03ead1e 	bne	r20,zero,1003fbc <_dtoa_r+0xa44>
 1004508:	00800434 	movhi	r2,16
 100450c:	10bfffc4 	addi	r2,r2,-1
 1004510:	8884703a 	and	r2,r17,r2
 1004514:	103ea91e 	bne	r2,zero,1003fbc <_dtoa_r+0xa44>
 1004518:	8c5ffc2c 	andhi	r17,r17,32752
 100451c:	883ea726 	beq	r17,zero,1003fbc <_dtoa_r+0xa44>
 1004520:	d8800517 	ldw	r2,20(sp)
 1004524:	04400044 	movi	r17,1
 1004528:	10800044 	addi	r2,r2,1
 100452c:	d8800515 	stw	r2,20(sp)
 1004530:	d8800217 	ldw	r2,8(sp)
 1004534:	10800044 	addi	r2,r2,1
 1004538:	d8800215 	stw	r2,8(sp)
 100453c:	003ea006 	br	1003fc0 <_dtoa_r+0xa48>
 1004540:	00800044 	movi	r2,1
 1004544:	d8800415 	stw	r2,16(sp)
 1004548:	d8801e15 	stw	r2,120(sp)
 100454c:	003f1b06 	br	10041bc <_dtoa_r+0xc44>
 1004550:	d8800b17 	ldw	r2,44(sp)
 1004554:	dcc00315 	stw	r19,12(sp)
 1004558:	d8800415 	stw	r2,16(sp)
 100455c:	d8800417 	ldw	r2,16(sp)
 1004560:	103dfb1e 	bne	r2,zero,1003d50 <_dtoa_r+0x7d8>
 1004564:	a80b883a 	mov	r5,r21
 1004568:	b809883a 	mov	r4,r23
 100456c:	000f883a 	mov	r7,zero
 1004570:	01800144 	movi	r6,5
 1004574:	1006b800 	call	1006b80 <__multadd>
 1004578:	100b883a 	mov	r5,r2
 100457c:	b009883a 	mov	r4,r22
 1004580:	102b883a 	mov	r21,r2
 1004584:	10074c80 	call	10074c8 <__mcmp>
 1004588:	00bdf10e 	bge	zero,r2,1003d50 <_dtoa_r+0x7d8>
 100458c:	00800c44 	movi	r2,49
 1004590:	e0800005 	stb	r2,0(fp)
 1004594:	d8800317 	ldw	r2,12(sp)
 1004598:	e4800044 	addi	r18,fp,1
 100459c:	14400044 	addi	r17,r2,1
 10045a0:	a80b883a 	mov	r5,r21
 10045a4:	b809883a 	mov	r4,r23
 10045a8:	1006b5c0 	call	1006b5c <_Bfree>
 10045ac:	88800044 	addi	r2,r17,1
 10045b0:	d8800315 	stw	r2,12(sp)
 10045b4:	803ee01e 	bne	r16,zero,1004138 <_dtoa_r+0xbc0>
 10045b8:	003ee206 	br	1004144 <_dtoa_r+0xbcc>
 10045bc:	1805883a 	mov	r2,r3
 10045c0:	003e5806 	br	1003f24 <_dtoa_r+0x9ac>
 10045c4:	800b883a 	mov	r5,r16
 10045c8:	900d883a 	mov	r6,r18
 10045cc:	b809883a 	mov	r4,r23
 10045d0:	10073400 	call	1007340 <__lshift>
 10045d4:	1021883a 	mov	r16,r2
 10045d8:	003f5006 	br	100431c <_dtoa_r+0xda4>
 10045dc:	156bc83a 	sub	r21,r2,r21
 10045e0:	003e3e06 	br	1003edc <_dtoa_r+0x964>
 10045e4:	dd000a15 	stw	r20,40(sp)
 10045e8:	dc400c15 	stw	r17,48(sp)
 10045ec:	04000084 	movi	r16,2
 10045f0:	003cc906 	br	1003918 <_dtoa_r+0x3a0>
 10045f4:	00800044 	movi	r2,1
 10045f8:	003ead06 	br	10040b0 <_dtoa_r+0xb38>
 10045fc:	00800044 	movi	r2,1
 1004600:	d8800615 	stw	r2,24(sp)
 1004604:	003c9006 	br	1003848 <_dtoa_r+0x2d0>
 1004608:	1000031e 	bne	r2,zero,1004618 <_dtoa_r+0x10a0>
 100460c:	d8c00117 	ldw	r3,4(sp)
 1004610:	18c0004c 	andi	r3,r3,1
 1004614:	183eb71e 	bne	r3,zero,10040f4 <_dtoa_r+0xb7c>
 1004618:	2005883a 	mov	r2,r4
 100461c:	00000206 	br	1004628 <_dtoa_r+0x10b0>
 1004620:	90bfff83 	ldbu	r2,-2(r18)
 1004624:	1825883a 	mov	r18,r3
 1004628:	10803fcc 	andi	r2,r2,255
 100462c:	1080201c 	xori	r2,r2,128
 1004630:	10bfe004 	addi	r2,r2,-128
 1004634:	10800c18 	cmpnei	r2,r2,48
 1004638:	90ffffc4 	addi	r3,r18,-1
 100463c:	103ff826 	beq	r2,zero,1004620 <_dtoa_r+0x10a8>
 1004640:	003eb406 	br	1004114 <_dtoa_r+0xb9c>
 1004644:	00800c44 	movi	r2,49
 1004648:	e0800005 	stb	r2,0(fp)
 100464c:	d8800317 	ldw	r2,12(sp)
 1004650:	10800044 	addi	r2,r2,1
 1004654:	d8800315 	stw	r2,12(sp)
 1004658:	003eae06 	br	1004114 <_dtoa_r+0xb9c>
 100465c:	d8c00917 	ldw	r3,36(sp)
 1004660:	18011826 	beq	r3,zero,1004ac4 <_dtoa_r+0x154c>
 1004664:	d8c00517 	ldw	r3,20(sp)
 1004668:	d9000217 	ldw	r4,8(sp)
 100466c:	10810cc4 	addi	r2,r2,1075
 1004670:	dd400717 	ldw	r21,28(sp)
 1004674:	2089883a 	add	r4,r4,r2
 1004678:	1885883a 	add	r2,r3,r2
 100467c:	1825883a 	mov	r18,r3
 1004680:	d9000215 	stw	r4,8(sp)
 1004684:	d8800515 	stw	r2,20(sp)
 1004688:	003e1d06 	br	1003f00 <_dtoa_r+0x988>
 100468c:	8009883a 	mov	r4,r16
 1004690:	100d8c00 	call	100d8c0 <__floatsidf>
 1004694:	d9c00a17 	ldw	r7,40(sp)
 1004698:	900d883a 	mov	r6,r18
 100469c:	1009883a 	mov	r4,r2
 10046a0:	180b883a 	mov	r5,r3
 10046a4:	100c7100 	call	100c710 <__muldf3>
 10046a8:	000d883a 	mov	r6,zero
 10046ac:	01d00734 	movhi	r7,16412
 10046b0:	1009883a 	mov	r4,r2
 10046b4:	180b883a 	mov	r5,r3
 10046b8:	100b2040 	call	100b204 <__adddf3>
 10046bc:	d8800c15 	stw	r2,48(sp)
 10046c0:	00bf3034 	movhi	r2,64704
 10046c4:	1885883a 	add	r2,r3,r2
 10046c8:	d8800d15 	stw	r2,52(sp)
 10046cc:	d9400a17 	ldw	r5,40(sp)
 10046d0:	9009883a 	mov	r4,r18
 10046d4:	000d883a 	mov	r6,zero
 10046d8:	01d00534 	movhi	r7,16404
 10046dc:	100ceb80 	call	100ceb8 <__subdf3>
 10046e0:	dd400d17 	ldw	r21,52(sp)
 10046e4:	d9800c17 	ldw	r6,48(sp)
 10046e8:	1009883a 	mov	r4,r2
 10046ec:	a80f883a 	mov	r7,r21
 10046f0:	180b883a 	mov	r5,r3
 10046f4:	1025883a 	mov	r18,r2
 10046f8:	1821883a 	mov	r16,r3
 10046fc:	100c5300 	call	100c530 <__gedf2>
 1004700:	00812d16 	blt	zero,r2,1004bb8 <_dtoa_r+0x1640>
 1004704:	d9800c17 	ldw	r6,48(sp)
 1004708:	a9e0003c 	xorhi	r7,r21,32768
 100470c:	9009883a 	mov	r4,r18
 1004710:	800b883a 	mov	r5,r16
 1004714:	100c6200 	call	100c620 <__ledf2>
 1004718:	103d6e0e 	bge	r2,zero,1003cd4 <_dtoa_r+0x75c>
 100471c:	002b883a 	mov	r21,zero
 1004720:	0021883a 	mov	r16,zero
 1004724:	003d8a06 	br	1003d50 <_dtoa_r+0x7d8>
 1004728:	d9800717 	ldw	r6,28(sp)
 100472c:	b00b883a 	mov	r5,r22
 1004730:	b809883a 	mov	r4,r23
 1004734:	10072280 	call	1007228 <__pow5mult>
 1004738:	102d883a 	mov	r22,r2
 100473c:	003e1706 	br	1003f9c <_dtoa_r+0xa24>
 1004740:	d8800317 	ldw	r2,12(sp)
 1004744:	10010d26 	beq	r2,zero,1004b7c <_dtoa_r+0x1604>
 1004748:	00abc83a 	sub	r21,zero,r2
 100474c:	a88003cc 	andi	r2,r21,15
 1004750:	100690fa 	slli	r3,r2,3
 1004754:	00804074 	movhi	r2,257
 1004758:	10899704 	addi	r2,r2,9820
 100475c:	10c5883a 	add	r2,r2,r3
 1004760:	11800017 	ldw	r6,0(r2)
 1004764:	11c00117 	ldw	r7,4(r2)
 1004768:	a009883a 	mov	r4,r20
 100476c:	880b883a 	mov	r5,r17
 1004770:	a82bd13a 	srai	r21,r21,4
 1004774:	100c7100 	call	100c710 <__muldf3>
 1004778:	d8c00a15 	stw	r3,40(sp)
 100477c:	1025883a 	mov	r18,r2
 1004780:	a8013826 	beq	r21,zero,1004c64 <_dtoa_r+0x16ec>
 1004784:	02004074 	movhi	r8,257
 1004788:	04000084 	movi	r16,2
 100478c:	42098d04 	addi	r8,r8,9780
 1004790:	180b883a 	mov	r5,r3
 1004794:	dc400c15 	stw	r17,48(sp)
 1004798:	1009883a 	mov	r4,r2
 100479c:	8023883a 	mov	r17,r16
 10047a0:	0007883a 	mov	r3,zero
 10047a4:	4021883a 	mov	r16,r8
 10047a8:	a980004c 	andi	r6,r21,1
 10047ac:	30000726 	beq	r6,zero,10047cc <_dtoa_r+0x1254>
 10047b0:	81800017 	ldw	r6,0(r16)
 10047b4:	81c00117 	ldw	r7,4(r16)
 10047b8:	8c400044 	addi	r17,r17,1
 10047bc:	100c7100 	call	100c710 <__muldf3>
 10047c0:	180b883a 	mov	r5,r3
 10047c4:	1009883a 	mov	r4,r2
 10047c8:	00c00044 	movi	r3,1
 10047cc:	a82bd07a 	srai	r21,r21,1
 10047d0:	84000204 	addi	r16,r16,8
 10047d4:	a83ff41e 	bne	r21,zero,10047a8 <_dtoa_r+0x1230>
 10047d8:	18c03fcc 	andi	r3,r3,255
 10047dc:	8821883a 	mov	r16,r17
 10047e0:	dc400c17 	ldw	r17,48(sp)
 10047e4:	183c6526 	beq	r3,zero,100397c <_dtoa_r+0x404>
 10047e8:	2025883a 	mov	r18,r4
 10047ec:	d9400a15 	stw	r5,40(sp)
 10047f0:	003c6206 	br	100397c <_dtoa_r+0x404>
 10047f4:	a03eb41e 	bne	r20,zero,10042c8 <_dtoa_r+0xd50>
 10047f8:	00800434 	movhi	r2,16
 10047fc:	10bfffc4 	addi	r2,r2,-1
 1004800:	8884703a 	and	r2,r17,r2
 1004804:	103f4426 	beq	r2,zero,1004518 <_dtoa_r+0xfa0>
 1004808:	003eaf06 	br	10042c8 <_dtoa_r+0xd50>
 100480c:	d9000317 	ldw	r4,12(sp)
 1004810:	e007883a 	mov	r3,fp
 1004814:	df000817 	ldw	fp,32(sp)
 1004818:	21000044 	addi	r4,r4,1
 100481c:	d9000315 	stw	r4,12(sp)
 1004820:	00800f0e 	bge	zero,r2,1004860 <_dtoa_r+0x12e8>
 1004824:	b00b883a 	mov	r5,r22
 1004828:	01800044 	movi	r6,1
 100482c:	b809883a 	mov	r4,r23
 1004830:	d8c00115 	stw	r3,4(sp)
 1004834:	10073400 	call	1007340 <__lshift>
 1004838:	a80b883a 	mov	r5,r21
 100483c:	1009883a 	mov	r4,r2
 1004840:	102d883a 	mov	r22,r2
 1004844:	10074c80 	call	10074c8 <__mcmp>
 1004848:	d8c00117 	ldw	r3,4(sp)
 100484c:	0080e40e 	bge	zero,r2,1004be0 <_dtoa_r+0x1668>
 1004850:	18c00e60 	cmpeqi	r3,r3,57
 1004854:	1800d21e 	bne	r3,zero,1004ba0 <_dtoa_r+0x1628>
 1004858:	d8800517 	ldw	r2,20(sp)
 100485c:	10c00c44 	addi	r3,r2,49
 1004860:	8023883a 	mov	r17,r16
 1004864:	a0c00005 	stb	r3,0(r20)
 1004868:	9821883a 	mov	r16,r19
 100486c:	003e2906 	br	1004114 <_dtoa_r+0xb9c>
 1004870:	b027883a 	mov	r19,r22
 1004874:	ddc00417 	ldw	r23,16(sp)
 1004878:	dd800217 	ldw	r22,8(sp)
 100487c:	200d883a 	mov	r6,r4
 1004880:	280f883a 	mov	r7,r5
 1004884:	100b2040 	call	100b204 <__adddf3>
 1004888:	dd400117 	ldw	r21,4(sp)
 100488c:	180b883a 	mov	r5,r3
 1004890:	900f883a 	mov	r7,r18
 1004894:	a80d883a 	mov	r6,r21
 1004898:	1009883a 	mov	r4,r2
 100489c:	1823883a 	mov	r17,r3
 10048a0:	1029883a 	mov	r20,r2
 10048a4:	100c5300 	call	100c530 <__gedf2>
 10048a8:	d8c00317 	ldw	r3,12(sp)
 10048ac:	18c00044 	addi	r3,r3,1
 10048b0:	d8c00315 	stw	r3,12(sp)
 10048b4:	00bcc716 	blt	zero,r2,1003bd4 <_dtoa_r+0x65c>
 10048b8:	a80d883a 	mov	r6,r21
 10048bc:	900f883a 	mov	r7,r18
 10048c0:	a009883a 	mov	r4,r20
 10048c4:	880b883a 	mov	r5,r17
 10048c8:	100c4b00 	call	100c4b0 <__eqdf2>
 10048cc:	1000021e 	bne	r2,zero,10048d8 <_dtoa_r+0x1360>
 10048d0:	9cc0004c 	andi	r19,r19,1
 10048d4:	983cbf1e 	bne	r19,zero,1003bd4 <_dtoa_r+0x65c>
 10048d8:	8025883a 	mov	r18,r16
 10048dc:	003e1906 	br	1004144 <_dtoa_r+0xbcc>
 10048e0:	81400117 	ldw	r5,4(r16)
 10048e4:	b809883a 	mov	r4,r23
 10048e8:	1006ab80 	call	1006ab8 <_Balloc>
 10048ec:	1023883a 	mov	r17,r2
 10048f0:	1000e526 	beq	r2,zero,1004c88 <_dtoa_r+0x1710>
 10048f4:	81800417 	ldw	r6,16(r16)
 10048f8:	81400304 	addi	r5,r16,12
 10048fc:	11000304 	addi	r4,r2,12
 1004900:	31800084 	addi	r6,r6,2
 1004904:	300c90ba 	slli	r6,r6,2
 1004908:	100679c0 	call	100679c <memcpy>
 100490c:	01800044 	movi	r6,1
 1004910:	880b883a 	mov	r5,r17
 1004914:	b809883a 	mov	r4,r23
 1004918:	10073400 	call	1007340 <__lshift>
 100491c:	1027883a 	mov	r19,r2
 1004920:	003e8006 	br	1004324 <_dtoa_r+0xdac>
 1004924:	b00b883a 	mov	r5,r22
 1004928:	b809883a 	mov	r4,r23
 100492c:	10072280 	call	1007228 <__pow5mult>
 1004930:	102d883a 	mov	r22,r2
 1004934:	003d9906 	br	1003f9c <_dtoa_r+0xa24>
 1004938:	d8800517 	ldw	r2,20(sp)
 100493c:	d8c00417 	ldw	r3,16(sp)
 1004940:	10e5c83a 	sub	r18,r2,r3
 1004944:	003d6e06 	br	1003f00 <_dtoa_r+0x988>
 1004948:	d9000317 	ldw	r4,12(sp)
 100494c:	e007883a 	mov	r3,fp
 1004950:	18800e58 	cmpnei	r2,r3,57
 1004954:	21000044 	addi	r4,r4,1
 1004958:	d9000315 	stw	r4,12(sp)
 100495c:	df000817 	ldw	fp,32(sp)
 1004960:	10008f26 	beq	r2,zero,1004ba0 <_dtoa_r+0x1628>
 1004964:	18c00044 	addi	r3,r3,1
 1004968:	003fbd06 	br	1004860 <_dtoa_r+0x12e8>
 100496c:	d8800317 	ldw	r2,12(sp)
 1004970:	e007883a 	mov	r3,fp
 1004974:	8023883a 	mov	r17,r16
 1004978:	10800044 	addi	r2,r2,1
 100497c:	df000817 	ldw	fp,32(sp)
 1004980:	d8800315 	stw	r2,12(sp)
 1004984:	9821883a 	mov	r16,r19
 1004988:	003dcb06 	br	10040b8 <_dtoa_r+0xb40>
 100498c:	d9000c17 	ldw	r4,48(sp)
 1004990:	d9400d17 	ldw	r5,52(sp)
 1004994:	600d883a 	mov	r6,r12
 1004998:	680f883a 	mov	r7,r13
 100499c:	dac00a15 	stw	r11,40(sp)
 10049a0:	100c7100 	call	100c710 <__muldf3>
 10049a4:	dac00a17 	ldw	r11,40(sp)
 10049a8:	d9400e17 	ldw	r5,56(sp)
 10049ac:	d8800a15 	stw	r2,40(sp)
 10049b0:	e2c00005 	stb	r11,0(fp)
 10049b4:	29000058 	cmpnei	r4,r5,1
 10049b8:	d8c00c15 	stw	r3,48(sp)
 10049bc:	e145883a 	add	r2,fp,r5
 10049c0:	20002126 	beq	r4,zero,1004a48 <_dtoa_r+0x14d0>
 10049c4:	dc400e15 	stw	r17,56(sp)
 10049c8:	dcc00d15 	stw	r19,52(sp)
 10049cc:	8023883a 	mov	r17,r16
 10049d0:	a809883a 	mov	r4,r21
 10049d4:	900b883a 	mov	r5,r18
 10049d8:	1021883a 	mov	r16,r2
 10049dc:	000d883a 	mov	r6,zero
 10049e0:	01d00934 	movhi	r7,16420
 10049e4:	100c7100 	call	100c710 <__muldf3>
 10049e8:	180b883a 	mov	r5,r3
 10049ec:	1009883a 	mov	r4,r2
 10049f0:	182b883a 	mov	r21,r3
 10049f4:	1027883a 	mov	r19,r2
 10049f8:	100d8400 	call	100d840 <__fixdfsi>
 10049fc:	1009883a 	mov	r4,r2
 1004a00:	1025883a 	mov	r18,r2
 1004a04:	100d8c00 	call	100d8c0 <__floatsidf>
 1004a08:	9809883a 	mov	r4,r19
 1004a0c:	a80b883a 	mov	r5,r21
 1004a10:	100d883a 	mov	r6,r2
 1004a14:	180f883a 	mov	r7,r3
 1004a18:	8c400044 	addi	r17,r17,1
 1004a1c:	94800c04 	addi	r18,r18,48
 1004a20:	100ceb80 	call	100ceb8 <__subdf3>
 1004a24:	8cbfffc5 	stb	r18,-1(r17)
 1004a28:	1009883a 	mov	r4,r2
 1004a2c:	180b883a 	mov	r5,r3
 1004a30:	847fea1e 	bne	r16,r17,10049dc <_dtoa_r+0x1464>
 1004a34:	8821883a 	mov	r16,r17
 1004a38:	dcc00d17 	ldw	r19,52(sp)
 1004a3c:	dc400e17 	ldw	r17,56(sp)
 1004a40:	102b883a 	mov	r21,r2
 1004a44:	1825883a 	mov	r18,r3
 1004a48:	d9000a17 	ldw	r4,40(sp)
 1004a4c:	d9400c17 	ldw	r5,48(sp)
 1004a50:	000d883a 	mov	r6,zero
 1004a54:	01cff834 	movhi	r7,16352
 1004a58:	100b2040 	call	100b204 <__adddf3>
 1004a5c:	a80d883a 	mov	r6,r21
 1004a60:	900f883a 	mov	r7,r18
 1004a64:	1009883a 	mov	r4,r2
 1004a68:	180b883a 	mov	r5,r3
 1004a6c:	100c6200 	call	100c620 <__ledf2>
 1004a70:	103c5316 	blt	r2,zero,1003bc0 <_dtoa_r+0x648>
 1004a74:	d9800a17 	ldw	r6,40(sp)
 1004a78:	d9c00c17 	ldw	r7,48(sp)
 1004a7c:	0009883a 	mov	r4,zero
 1004a80:	014ff834 	movhi	r5,16352
 1004a84:	100ceb80 	call	100ceb8 <__subdf3>
 1004a88:	a80d883a 	mov	r6,r21
 1004a8c:	900f883a 	mov	r7,r18
 1004a90:	1009883a 	mov	r4,r2
 1004a94:	180b883a 	mov	r5,r3
 1004a98:	100c5300 	call	100c530 <__gedf2>
 1004a9c:	00bc8d0e 	bge	zero,r2,1003cd4 <_dtoa_r+0x75c>
 1004aa0:	80bfffc7 	ldb	r2,-1(r16)
 1004aa4:	8025883a 	mov	r18,r16
 1004aa8:	843fffc4 	addi	r16,r16,-1
 1004aac:	10800c20 	cmpeqi	r2,r2,48
 1004ab0:	103ffb1e 	bne	r2,zero,1004aa0 <_dtoa_r+0x1528>
 1004ab4:	d8801117 	ldw	r2,68(sp)
 1004ab8:	10800044 	addi	r2,r2,1
 1004abc:	d8800315 	stw	r2,12(sp)
 1004ac0:	003da006 	br	1004144 <_dtoa_r+0xbcc>
 1004ac4:	d8c01217 	ldw	r3,72(sp)
 1004ac8:	00800d84 	movi	r2,54
 1004acc:	d9000517 	ldw	r4,20(sp)
 1004ad0:	10c5c83a 	sub	r2,r2,r3
 1004ad4:	d8c00217 	ldw	r3,8(sp)
 1004ad8:	dd400717 	ldw	r21,28(sp)
 1004adc:	2025883a 	mov	r18,r4
 1004ae0:	1887883a 	add	r3,r3,r2
 1004ae4:	2085883a 	add	r2,r4,r2
 1004ae8:	d8c00215 	stw	r3,8(sp)
 1004aec:	d8800515 	stw	r2,20(sp)
 1004af0:	003d0306 	br	1003f00 <_dtoa_r+0x988>
 1004af4:	d8800417 	ldw	r2,16(sp)
 1004af8:	103ee426 	beq	r2,zero,100468c <_dtoa_r+0x1114>
 1004afc:	d8800b17 	ldw	r2,44(sp)
 1004b00:	00bc740e 	bge	zero,r2,1003cd4 <_dtoa_r+0x75c>
 1004b04:	a80b883a 	mov	r5,r21
 1004b08:	9009883a 	mov	r4,r18
 1004b0c:	000d883a 	mov	r6,zero
 1004b10:	01d00934 	movhi	r7,16420
 1004b14:	100c7100 	call	100c710 <__muldf3>
 1004b18:	81000044 	addi	r4,r16,1
 1004b1c:	1025883a 	mov	r18,r2
 1004b20:	182b883a 	mov	r21,r3
 1004b24:	d8c00a15 	stw	r3,40(sp)
 1004b28:	100d8c00 	call	100d8c0 <__floatsidf>
 1004b2c:	900d883a 	mov	r6,r18
 1004b30:	a80f883a 	mov	r7,r21
 1004b34:	1009883a 	mov	r4,r2
 1004b38:	180b883a 	mov	r5,r3
 1004b3c:	100c7100 	call	100c710 <__muldf3>
 1004b40:	1009883a 	mov	r4,r2
 1004b44:	000d883a 	mov	r6,zero
 1004b48:	01d00734 	movhi	r7,16412
 1004b4c:	180b883a 	mov	r5,r3
 1004b50:	100b2040 	call	100b204 <__adddf3>
 1004b54:	d9000317 	ldw	r4,12(sp)
 1004b58:	d8800c15 	stw	r2,48(sp)
 1004b5c:	00bf3034 	movhi	r2,64704
 1004b60:	1887883a 	add	r3,r3,r2
 1004b64:	d8800b17 	ldw	r2,44(sp)
 1004b68:	213fffc4 	addi	r4,r4,-1
 1004b6c:	d9001115 	stw	r4,68(sp)
 1004b70:	d8c00d15 	stw	r3,52(sp)
 1004b74:	d8800e15 	stw	r2,56(sp)
 1004b78:	003b9f06 	br	10039f8 <_dtoa_r+0x480>
 1004b7c:	a025883a 	mov	r18,r20
 1004b80:	dc400a15 	stw	r17,40(sp)
 1004b84:	04000084 	movi	r16,2
 1004b88:	003b7c06 	br	100397c <_dtoa_r+0x404>
 1004b8c:	d8800317 	ldw	r2,12(sp)
 1004b90:	00c00c44 	movi	r3,49
 1004b94:	10800044 	addi	r2,r2,1
 1004b98:	d8800315 	stw	r2,12(sp)
 1004b9c:	003c1606 	br	1003bf8 <_dtoa_r+0x680>
 1004ba0:	00800e44 	movi	r2,57
 1004ba4:	8023883a 	mov	r17,r16
 1004ba8:	a0800005 	stb	r2,0(r20)
 1004bac:	9821883a 	mov	r16,r19
 1004bb0:	01000e44 	movi	r4,57
 1004bb4:	003d4f06 	br	10040f4 <_dtoa_r+0xb7c>
 1004bb8:	002b883a 	mov	r21,zero
 1004bbc:	0021883a 	mov	r16,zero
 1004bc0:	003e7206 	br	100458c <_dtoa_r+0x1014>
 1004bc4:	dd800d17 	ldw	r22,52(sp)
 1004bc8:	ddc00e17 	ldw	r23,56(sp)
 1004bcc:	d8801117 	ldw	r2,68(sp)
 1004bd0:	8025883a 	mov	r18,r16
 1004bd4:	10800044 	addi	r2,r2,1
 1004bd8:	d8800315 	stw	r2,12(sp)
 1004bdc:	003d5906 	br	1004144 <_dtoa_r+0xbcc>
 1004be0:	103f1f1e 	bne	r2,zero,1004860 <_dtoa_r+0x12e8>
 1004be4:	1880004c 	andi	r2,r3,1
 1004be8:	103f191e 	bne	r2,zero,1004850 <_dtoa_r+0x12d8>
 1004bec:	003f1c06 	br	1004860 <_dtoa_r+0x12e8>
 1004bf0:	dcc00f17 	ldw	r19,60(sp)
 1004bf4:	dd800d17 	ldw	r22,52(sp)
 1004bf8:	ddc00e17 	ldw	r23,56(sp)
 1004bfc:	dc400c17 	ldw	r17,48(sp)
 1004c00:	dd000a17 	ldw	r20,40(sp)
 1004c04:	003c3306 	br	1003cd4 <_dtoa_r+0x75c>
 1004c08:	d9000317 	ldw	r4,12(sp)
 1004c0c:	e007883a 	mov	r3,fp
 1004c10:	18800e60 	cmpeqi	r2,r3,57
 1004c14:	21000044 	addi	r4,r4,1
 1004c18:	d9000315 	stw	r4,12(sp)
 1004c1c:	df000817 	ldw	fp,32(sp)
 1004c20:	a4800044 	addi	r18,r20,1
 1004c24:	103fde1e 	bne	r2,zero,1004ba0 <_dtoa_r+0x1628>
 1004c28:	047f0b16 	blt	zero,r17,1004858 <_dtoa_r+0x12e0>
 1004c2c:	003f0c06 	br	1004860 <_dtoa_r+0x12e8>
 1004c30:	d8800117 	ldw	r2,4(sp)
 1004c34:	108000c8 	cmpgei	r2,r2,3
 1004c38:	103e451e 	bne	r2,zero,1004550 <_dtoa_r+0xfd8>
 1004c3c:	dcc00315 	stw	r19,12(sp)
 1004c40:	003e0c06 	br	1004474 <_dtoa_r+0xefc>
 1004c44:	d8800117 	ldw	r2,4(sp)
 1004c48:	108000c8 	cmpgei	r2,r2,3
 1004c4c:	103e401e 	bne	r2,zero,1004550 <_dtoa_r+0xfd8>
 1004c50:	d8800b17 	ldw	r2,44(sp)
 1004c54:	dcc00315 	stw	r19,12(sp)
 1004c58:	d8800415 	stw	r2,16(sp)
 1004c5c:	04bdaf0e 	bge	zero,r18,100431c <_dtoa_r+0xda4>
 1004c60:	003e5806 	br	10045c4 <_dtoa_r+0x104c>
 1004c64:	04000084 	movi	r16,2
 1004c68:	003b4406 	br	100397c <_dtoa_r+0x404>
 1004c6c:	01c04074 	movhi	r7,257
 1004c70:	01004074 	movhi	r4,257
 1004c74:	39c95b04 	addi	r7,r7,9580
 1004c78:	000d883a 	mov	r6,zero
 1004c7c:	01406a84 	movi	r5,426
 1004c80:	21096004 	addi	r4,r4,9600
 1004c84:	10098a40 	call	10098a4 <__assert_func>
 1004c88:	01c04074 	movhi	r7,257
 1004c8c:	01004074 	movhi	r4,257
 1004c90:	39c95b04 	addi	r7,r7,9580
 1004c94:	000d883a 	mov	r6,zero
 1004c98:	0140ba84 	movi	r5,746
 1004c9c:	21096004 	addi	r4,r4,9600
 1004ca0:	10098a40 	call	10098a4 <__assert_func>
 1004ca4:	e7095804 	addi	fp,fp,9568
 1004ca8:	003a6406 	br	100363c <_dtoa_r+0xc4>
 1004cac:	18c00120 	cmpeqi	r3,r3,4
 1004cb0:	183cd51e 	bne	r3,zero,1004008 <_dtoa_r+0xa90>
 1004cb4:	00c00f04 	movi	r3,60
 1004cb8:	1885c83a 	sub	r2,r3,r2
 1004cbc:	003d6c06 	br	1004270 <_dtoa_r+0xcf8>
 1004cc0:	000b883a 	mov	r5,zero
 1004cc4:	003af006 	br	1003888 <_dtoa_r+0x310>

01004cc8 <__sflush_r>:
 1004cc8:	2880030b 	ldhu	r2,12(r5)
 1004ccc:	defffb04 	addi	sp,sp,-20
 1004cd0:	dcc00315 	stw	r19,12(sp)
 1004cd4:	dc000015 	stw	r16,0(sp)
 1004cd8:	dfc00415 	stw	ra,16(sp)
 1004cdc:	dc800215 	stw	r18,8(sp)
 1004ce0:	dc400115 	stw	r17,4(sp)
 1004ce4:	10c0020c 	andi	r3,r2,8
 1004ce8:	2821883a 	mov	r16,r5
 1004cec:	2027883a 	mov	r19,r4
 1004cf0:	18003f1e 	bne	r3,zero,1004df0 <__sflush_r+0x128>
 1004cf4:	28c00117 	ldw	r3,4(r5)
 1004cf8:	10820014 	ori	r2,r2,2048
 1004cfc:	2880030d 	sth	r2,12(r5)
 1004d00:	00c0550e 	bge	zero,r3,1004e58 <__sflush_r+0x190>
 1004d04:	82000a17 	ldw	r8,40(r16)
 1004d08:	40003126 	beq	r8,zero,1004dd0 <__sflush_r+0x108>
 1004d0c:	9c400017 	ldw	r17,0(r19)
 1004d10:	1104000c 	andi	r4,r2,4096
 1004d14:	98000015 	stw	zero,0(r19)
 1004d18:	81400717 	ldw	r5,28(r16)
 1004d1c:	1007883a 	mov	r3,r2
 1004d20:	2000521e 	bne	r4,zero,1004e6c <__sflush_r+0x1a4>
 1004d24:	01c00044 	movi	r7,1
 1004d28:	000d883a 	mov	r6,zero
 1004d2c:	9809883a 	mov	r4,r19
 1004d30:	403ee83a 	callr	r8
 1004d34:	10ffffd8 	cmpnei	r3,r2,-1
 1004d38:	18005826 	beq	r3,zero,1004e9c <__sflush_r+0x1d4>
 1004d3c:	80c0030b 	ldhu	r3,12(r16)
 1004d40:	82000a17 	ldw	r8,40(r16)
 1004d44:	81400717 	ldw	r5,28(r16)
 1004d48:	18c0010c 	andi	r3,r3,4
 1004d4c:	18000626 	beq	r3,zero,1004d68 <__sflush_r+0xa0>
 1004d50:	81000117 	ldw	r4,4(r16)
 1004d54:	80c00c17 	ldw	r3,48(r16)
 1004d58:	1105c83a 	sub	r2,r2,r4
 1004d5c:	18000226 	beq	r3,zero,1004d68 <__sflush_r+0xa0>
 1004d60:	80c00f17 	ldw	r3,60(r16)
 1004d64:	10c5c83a 	sub	r2,r2,r3
 1004d68:	100d883a 	mov	r6,r2
 1004d6c:	000f883a 	mov	r7,zero
 1004d70:	9809883a 	mov	r4,r19
 1004d74:	403ee83a 	callr	r8
 1004d78:	10ffffd8 	cmpnei	r3,r2,-1
 1004d7c:	18003d1e 	bne	r3,zero,1004e74 <__sflush_r+0x1ac>
 1004d80:	99000017 	ldw	r4,0(r19)
 1004d84:	80c0030b 	ldhu	r3,12(r16)
 1004d88:	20004e26 	beq	r4,zero,1004ec4 <__sflush_r+0x1fc>
 1004d8c:	21400760 	cmpeqi	r5,r4,29
 1004d90:	2800021e 	bne	r5,zero,1004d9c <__sflush_r+0xd4>
 1004d94:	210005a0 	cmpeqi	r4,r4,22
 1004d98:	20002c26 	beq	r4,zero,1004e4c <__sflush_r+0x184>
 1004d9c:	80800417 	ldw	r2,16(r16)
 1004da0:	18fdffcc 	andi	r3,r3,63487
 1004da4:	80c0030d 	sth	r3,12(r16)
 1004da8:	80000115 	stw	zero,4(r16)
 1004dac:	80800015 	stw	r2,0(r16)
 1004db0:	81400c17 	ldw	r5,48(r16)
 1004db4:	9c400015 	stw	r17,0(r19)
 1004db8:	28000526 	beq	r5,zero,1004dd0 <__sflush_r+0x108>
 1004dbc:	80801004 	addi	r2,r16,64
 1004dc0:	28800226 	beq	r5,r2,1004dcc <__sflush_r+0x104>
 1004dc4:	9809883a 	mov	r4,r19
 1004dc8:	10053e80 	call	10053e8 <_free_r>
 1004dcc:	80000c15 	stw	zero,48(r16)
 1004dd0:	0005883a 	mov	r2,zero
 1004dd4:	dfc00417 	ldw	ra,16(sp)
 1004dd8:	dcc00317 	ldw	r19,12(sp)
 1004ddc:	dc800217 	ldw	r18,8(sp)
 1004de0:	dc400117 	ldw	r17,4(sp)
 1004de4:	dc000017 	ldw	r16,0(sp)
 1004de8:	dec00504 	addi	sp,sp,20
 1004dec:	f800283a 	ret
 1004df0:	2c800417 	ldw	r18,16(r5)
 1004df4:	903ff626 	beq	r18,zero,1004dd0 <__sflush_r+0x108>
 1004df8:	2c400017 	ldw	r17,0(r5)
 1004dfc:	108000cc 	andi	r2,r2,3
 1004e00:	2c800015 	stw	r18,0(r5)
 1004e04:	8ca3c83a 	sub	r17,r17,r18
 1004e08:	1000161e 	bne	r2,zero,1004e64 <__sflush_r+0x19c>
 1004e0c:	28800517 	ldw	r2,20(r5)
 1004e10:	80800215 	stw	r2,8(r16)
 1004e14:	04400316 	blt	zero,r17,1004e24 <__sflush_r+0x15c>
 1004e18:	003fed06 	br	1004dd0 <__sflush_r+0x108>
 1004e1c:	90a5883a 	add	r18,r18,r2
 1004e20:	047feb0e 	bge	zero,r17,1004dd0 <__sflush_r+0x108>
 1004e24:	80800917 	ldw	r2,36(r16)
 1004e28:	81400717 	ldw	r5,28(r16)
 1004e2c:	880f883a 	mov	r7,r17
 1004e30:	900d883a 	mov	r6,r18
 1004e34:	9809883a 	mov	r4,r19
 1004e38:	103ee83a 	callr	r2
 1004e3c:	88a3c83a 	sub	r17,r17,r2
 1004e40:	00bff616 	blt	zero,r2,1004e1c <__sflush_r+0x154>
 1004e44:	80c0030b 	ldhu	r3,12(r16)
 1004e48:	00bfffc4 	movi	r2,-1
 1004e4c:	18c01014 	ori	r3,r3,64
 1004e50:	80c0030d 	sth	r3,12(r16)
 1004e54:	003fdf06 	br	1004dd4 <__sflush_r+0x10c>
 1004e58:	28c00f17 	ldw	r3,60(r5)
 1004e5c:	00ffa916 	blt	zero,r3,1004d04 <__sflush_r+0x3c>
 1004e60:	003fdb06 	br	1004dd0 <__sflush_r+0x108>
 1004e64:	0005883a 	mov	r2,zero
 1004e68:	003fe906 	br	1004e10 <__sflush_r+0x148>
 1004e6c:	80801417 	ldw	r2,80(r16)
 1004e70:	003fb506 	br	1004d48 <__sflush_r+0x80>
 1004e74:	80c0030b 	ldhu	r3,12(r16)
 1004e78:	81000417 	ldw	r4,16(r16)
 1004e7c:	80000115 	stw	zero,4(r16)
 1004e80:	197dffcc 	andi	r5,r3,63487
 1004e84:	8140030d 	sth	r5,12(r16)
 1004e88:	81000015 	stw	r4,0(r16)
 1004e8c:	18c4000c 	andi	r3,r3,4096
 1004e90:	183fc726 	beq	r3,zero,1004db0 <__sflush_r+0xe8>
 1004e94:	80801415 	stw	r2,80(r16)
 1004e98:	003fc506 	br	1004db0 <__sflush_r+0xe8>
 1004e9c:	98c00017 	ldw	r3,0(r19)
 1004ea0:	183fa626 	beq	r3,zero,1004d3c <__sflush_r+0x74>
 1004ea4:	19000760 	cmpeqi	r4,r3,29
 1004ea8:	20000e1e 	bne	r4,zero,1004ee4 <__sflush_r+0x21c>
 1004eac:	18c00598 	cmpnei	r3,r3,22
 1004eb0:	18000c26 	beq	r3,zero,1004ee4 <__sflush_r+0x21c>
 1004eb4:	80c0030b 	ldhu	r3,12(r16)
 1004eb8:	18c01014 	ori	r3,r3,64
 1004ebc:	80c0030d 	sth	r3,12(r16)
 1004ec0:	003fc406 	br	1004dd4 <__sflush_r+0x10c>
 1004ec4:	81000417 	ldw	r4,16(r16)
 1004ec8:	197dffcc 	andi	r5,r3,63487
 1004ecc:	8140030d 	sth	r5,12(r16)
 1004ed0:	80000115 	stw	zero,4(r16)
 1004ed4:	81000015 	stw	r4,0(r16)
 1004ed8:	18c4000c 	andi	r3,r3,4096
 1004edc:	183fb426 	beq	r3,zero,1004db0 <__sflush_r+0xe8>
 1004ee0:	003fec06 	br	1004e94 <__sflush_r+0x1cc>
 1004ee4:	9c400015 	stw	r17,0(r19)
 1004ee8:	0005883a 	mov	r2,zero
 1004eec:	003fb906 	br	1004dd4 <__sflush_r+0x10c>

01004ef0 <_fflush_r>:
 1004ef0:	defffd04 	addi	sp,sp,-12
 1004ef4:	dc000115 	stw	r16,4(sp)
 1004ef8:	dfc00215 	stw	ra,8(sp)
 1004efc:	2021883a 	mov	r16,r4
 1004f00:	20000226 	beq	r4,zero,1004f0c <_fflush_r+0x1c>
 1004f04:	20800e17 	ldw	r2,56(r4)
 1004f08:	10000726 	beq	r2,zero,1004f28 <_fflush_r+0x38>
 1004f0c:	2880030f 	ldh	r2,12(r5)
 1004f10:	10000a1e 	bne	r2,zero,1004f3c <_fflush_r+0x4c>
 1004f14:	0005883a 	mov	r2,zero
 1004f18:	dfc00217 	ldw	ra,8(sp)
 1004f1c:	dc000117 	ldw	r16,4(sp)
 1004f20:	dec00304 	addi	sp,sp,12
 1004f24:	f800283a 	ret
 1004f28:	d9400015 	stw	r5,0(sp)
 1004f2c:	10052840 	call	1005284 <__sinit>
 1004f30:	d9400017 	ldw	r5,0(sp)
 1004f34:	2880030f 	ldh	r2,12(r5)
 1004f38:	103ff626 	beq	r2,zero,1004f14 <_fflush_r+0x24>
 1004f3c:	8009883a 	mov	r4,r16
 1004f40:	dfc00217 	ldw	ra,8(sp)
 1004f44:	dc000117 	ldw	r16,4(sp)
 1004f48:	dec00304 	addi	sp,sp,12
 1004f4c:	1004cc81 	jmpi	1004cc8 <__sflush_r>

01004f50 <fflush>:
 1004f50:	200b883a 	mov	r5,r4
 1004f54:	20000326 	beq	r4,zero,1004f64 <fflush+0x14>
 1004f58:	00804074 	movhi	r2,257
 1004f5c:	1111d517 	ldw	r4,18260(r2)
 1004f60:	1004ef01 	jmpi	1004ef0 <_fflush_r>
 1004f64:	00804074 	movhi	r2,257
 1004f68:	1111d417 	ldw	r4,18256(r2)
 1004f6c:	01404034 	movhi	r5,256
 1004f70:	2953bc04 	addi	r5,r5,20208
 1004f74:	1005c481 	jmpi	1005c48 <_fwalk_reent>

01004f78 <__fp_lock>:
 1004f78:	0005883a 	mov	r2,zero
 1004f7c:	f800283a 	ret

01004f80 <_cleanup_r>:
 1004f80:	01404074 	movhi	r5,257
 1004f84:	29667804 	addi	r5,r5,-26144
 1004f88:	1005c481 	jmpi	1005c48 <_fwalk_reent>

01004f8c <__sinit.part.0>:
 1004f8c:	00c04034 	movhi	r3,256
 1004f90:	20800117 	ldw	r2,4(r4)
 1004f94:	18d3e004 	addi	r3,r3,20352
 1004f98:	20c00f15 	stw	r3,60(r4)
 1004f9c:	2140bb04 	addi	r5,r4,748
 1004fa0:	00c000c4 	movi	r3,3
 1004fa4:	20c0b915 	stw	r3,740(r4)
 1004fa8:	2140ba15 	stw	r5,744(r4)
 1004fac:	2000b815 	stw	zero,736(r4)
 1004fb0:	10001705 	stb	zero,92(r2)
 1004fb4:	10001745 	stb	zero,93(r2)
 1004fb8:	10001785 	stb	zero,94(r2)
 1004fbc:	100017c5 	stb	zero,95(r2)
 1004fc0:	10001805 	stb	zero,96(r2)
 1004fc4:	10001845 	stb	zero,97(r2)
 1004fc8:	10001885 	stb	zero,98(r2)
 1004fcc:	100018c5 	stb	zero,99(r2)
 1004fd0:	00c00104 	movi	r3,4
 1004fd4:	10c00315 	stw	r3,12(r2)
 1004fd8:	02004074 	movhi	r8,257
 1004fdc:	20c00217 	ldw	r3,8(r4)
 1004fe0:	01c04074 	movhi	r7,257
 1004fe4:	01804074 	movhi	r6,257
 1004fe8:	01404074 	movhi	r5,257
 1004fec:	42206b04 	addi	r8,r8,-32340
 1004ff0:	39e08204 	addi	r7,r7,-32248
 1004ff4:	31a0a204 	addi	r6,r6,-32120
 1004ff8:	2960b904 	addi	r5,r5,-32028
 1004ffc:	02400074 	movhi	r9,1
 1005000:	10001915 	stw	zero,100(r2)
 1005004:	10000015 	stw	zero,0(r2)
 1005008:	10000115 	stw	zero,4(r2)
 100500c:	10000215 	stw	zero,8(r2)
 1005010:	10000415 	stw	zero,16(r2)
 1005014:	10000515 	stw	zero,20(r2)
 1005018:	10000615 	stw	zero,24(r2)
 100501c:	10800715 	stw	r2,28(r2)
 1005020:	12000815 	stw	r8,32(r2)
 1005024:	11c00915 	stw	r7,36(r2)
 1005028:	11800a15 	stw	r6,40(r2)
 100502c:	11400b15 	stw	r5,44(r2)
 1005030:	4a400284 	addi	r9,r9,10
 1005034:	1a400315 	stw	r9,12(r3)
 1005038:	18001915 	stw	zero,100(r3)
 100503c:	18000015 	stw	zero,0(r3)
 1005040:	18000115 	stw	zero,4(r3)
 1005044:	18000215 	stw	zero,8(r3)
 1005048:	18000415 	stw	zero,16(r3)
 100504c:	18001705 	stb	zero,92(r3)
 1005050:	18001745 	stb	zero,93(r3)
 1005054:	18001785 	stb	zero,94(r3)
 1005058:	180017c5 	stb	zero,95(r3)
 100505c:	18001805 	stb	zero,96(r3)
 1005060:	18001845 	stb	zero,97(r3)
 1005064:	18001885 	stb	zero,98(r3)
 1005068:	180018c5 	stb	zero,99(r3)
 100506c:	20800317 	ldw	r2,12(r4)
 1005070:	024000b4 	movhi	r9,2
 1005074:	18000515 	stw	zero,20(r3)
 1005078:	18000615 	stw	zero,24(r3)
 100507c:	18c00715 	stw	r3,28(r3)
 1005080:	1a000815 	stw	r8,32(r3)
 1005084:	19c00915 	stw	r7,36(r3)
 1005088:	19800a15 	stw	r6,40(r3)
 100508c:	19400b15 	stw	r5,44(r3)
 1005090:	4a400484 	addi	r9,r9,18
 1005094:	10001915 	stw	zero,100(r2)
 1005098:	10000015 	stw	zero,0(r2)
 100509c:	10000115 	stw	zero,4(r2)
 10050a0:	10000215 	stw	zero,8(r2)
 10050a4:	12400315 	stw	r9,12(r2)
 10050a8:	10000415 	stw	zero,16(r2)
 10050ac:	10000515 	stw	zero,20(r2)
 10050b0:	10000615 	stw	zero,24(r2)
 10050b4:	10001705 	stb	zero,92(r2)
 10050b8:	10001745 	stb	zero,93(r2)
 10050bc:	10001785 	stb	zero,94(r2)
 10050c0:	100017c5 	stb	zero,95(r2)
 10050c4:	10001805 	stb	zero,96(r2)
 10050c8:	10001845 	stb	zero,97(r2)
 10050cc:	10001885 	stb	zero,98(r2)
 10050d0:	100018c5 	stb	zero,99(r2)
 10050d4:	10800715 	stw	r2,28(r2)
 10050d8:	12000815 	stw	r8,32(r2)
 10050dc:	11c00915 	stw	r7,36(r2)
 10050e0:	11800a15 	stw	r6,40(r2)
 10050e4:	11400b15 	stw	r5,44(r2)
 10050e8:	00800044 	movi	r2,1
 10050ec:	20800e15 	stw	r2,56(r4)
 10050f0:	f800283a 	ret

010050f4 <__fp_unlock>:
 10050f4:	0005883a 	mov	r2,zero
 10050f8:	f800283a 	ret

010050fc <__sfmoreglue>:
 10050fc:	defffc04 	addi	sp,sp,-16
 1005100:	dc800215 	stw	r18,8(sp)
 1005104:	2825883a 	mov	r18,r5
 1005108:	dc000015 	stw	r16,0(sp)
 100510c:	01401a04 	movi	r5,104
 1005110:	2021883a 	mov	r16,r4
 1005114:	913fffc4 	addi	r4,r18,-1
 1005118:	dfc00315 	stw	ra,12(sp)
 100511c:	dc400115 	stw	r17,4(sp)
 1005120:	1000e300 	call	1000e30 <__mulsi3>
 1005124:	8009883a 	mov	r4,r16
 1005128:	11401d04 	addi	r5,r2,116
 100512c:	1023883a 	mov	r17,r2
 1005130:	1005ee80 	call	1005ee8 <_malloc_r>
 1005134:	1021883a 	mov	r16,r2
 1005138:	10000726 	beq	r2,zero,1005158 <__sfmoreglue+0x5c>
 100513c:	11000304 	addi	r4,r2,12
 1005140:	10000015 	stw	zero,0(r2)
 1005144:	14800115 	stw	r18,4(r2)
 1005148:	11000215 	stw	r4,8(r2)
 100514c:	89801a04 	addi	r6,r17,104
 1005150:	000b883a 	mov	r5,zero
 1005154:	10069c80 	call	10069c8 <memset>
 1005158:	8005883a 	mov	r2,r16
 100515c:	dfc00317 	ldw	ra,12(sp)
 1005160:	dc800217 	ldw	r18,8(sp)
 1005164:	dc400117 	ldw	r17,4(sp)
 1005168:	dc000017 	ldw	r16,0(sp)
 100516c:	dec00404 	addi	sp,sp,16
 1005170:	f800283a 	ret

01005174 <__sfp>:
 1005174:	defffd04 	addi	sp,sp,-12
 1005178:	00804074 	movhi	r2,257
 100517c:	dc000015 	stw	r16,0(sp)
 1005180:	1411d417 	ldw	r16,18256(r2)
 1005184:	dc400115 	stw	r17,4(sp)
 1005188:	dfc00215 	stw	ra,8(sp)
 100518c:	80800e17 	ldw	r2,56(r16)
 1005190:	2023883a 	mov	r17,r4
 1005194:	10002b26 	beq	r2,zero,1005244 <__sfp+0xd0>
 1005198:	8400b804 	addi	r16,r16,736
 100519c:	80c00117 	ldw	r3,4(r16)
 10051a0:	80800217 	ldw	r2,8(r16)
 10051a4:	18ffffc4 	addi	r3,r3,-1
 10051a8:	1800030e 	bge	r3,zero,10051b8 <__sfp+0x44>
 10051ac:	00002106 	br	1005234 <__sfp+0xc0>
 10051b0:	10801a04 	addi	r2,r2,104
 10051b4:	30001f26 	beq	r6,zero,1005234 <__sfp+0xc0>
 10051b8:	1140030f 	ldh	r5,12(r2)
 10051bc:	18ffffc4 	addi	r3,r3,-1
 10051c0:	19bfffd8 	cmpnei	r6,r3,-1
 10051c4:	283ffa1e 	bne	r5,zero,10051b0 <__sfp+0x3c>
 10051c8:	00fffff4 	movhi	r3,65535
 10051cc:	18c00044 	addi	r3,r3,1
 10051d0:	10001915 	stw	zero,100(r2)
 10051d4:	10000015 	stw	zero,0(r2)
 10051d8:	10000115 	stw	zero,4(r2)
 10051dc:	10000215 	stw	zero,8(r2)
 10051e0:	10c00315 	stw	r3,12(r2)
 10051e4:	10000415 	stw	zero,16(r2)
 10051e8:	10000515 	stw	zero,20(r2)
 10051ec:	10000615 	stw	zero,24(r2)
 10051f0:	10001705 	stb	zero,92(r2)
 10051f4:	10001745 	stb	zero,93(r2)
 10051f8:	10001785 	stb	zero,94(r2)
 10051fc:	100017c5 	stb	zero,95(r2)
 1005200:	10001805 	stb	zero,96(r2)
 1005204:	10001845 	stb	zero,97(r2)
 1005208:	10001885 	stb	zero,98(r2)
 100520c:	100018c5 	stb	zero,99(r2)
 1005210:	10000c15 	stw	zero,48(r2)
 1005214:	10000d15 	stw	zero,52(r2)
 1005218:	10001115 	stw	zero,68(r2)
 100521c:	10001215 	stw	zero,72(r2)
 1005220:	dfc00217 	ldw	ra,8(sp)
 1005224:	dc400117 	ldw	r17,4(sp)
 1005228:	dc000017 	ldw	r16,0(sp)
 100522c:	dec00304 	addi	sp,sp,12
 1005230:	f800283a 	ret
 1005234:	80800017 	ldw	r2,0(r16)
 1005238:	10000526 	beq	r2,zero,1005250 <__sfp+0xdc>
 100523c:	1021883a 	mov	r16,r2
 1005240:	003fd606 	br	100519c <__sfp+0x28>
 1005244:	8009883a 	mov	r4,r16
 1005248:	1004f8c0 	call	1004f8c <__sinit.part.0>
 100524c:	003fd206 	br	1005198 <__sfp+0x24>
 1005250:	01400104 	movi	r5,4
 1005254:	8809883a 	mov	r4,r17
 1005258:	10050fc0 	call	10050fc <__sfmoreglue>
 100525c:	80800015 	stw	r2,0(r16)
 1005260:	103ff61e 	bne	r2,zero,100523c <__sfp+0xc8>
 1005264:	00c00304 	movi	r3,12
 1005268:	88c00015 	stw	r3,0(r17)
 100526c:	003fec06 	br	1005220 <__sfp+0xac>

01005270 <_cleanup>:
 1005270:	00804074 	movhi	r2,257
 1005274:	1111d417 	ldw	r4,18256(r2)
 1005278:	01404074 	movhi	r5,257
 100527c:	29667804 	addi	r5,r5,-26144
 1005280:	1005c481 	jmpi	1005c48 <_fwalk_reent>

01005284 <__sinit>:
 1005284:	20800e17 	ldw	r2,56(r4)
 1005288:	10000126 	beq	r2,zero,1005290 <__sinit+0xc>
 100528c:	f800283a 	ret
 1005290:	1004f8c1 	jmpi	1004f8c <__sinit.part.0>

01005294 <__sfp_lock_acquire>:
 1005294:	f800283a 	ret

01005298 <__sfp_lock_release>:
 1005298:	f800283a 	ret

0100529c <__sinit_lock_acquire>:
 100529c:	f800283a 	ret

010052a0 <__sinit_lock_release>:
 10052a0:	f800283a 	ret

010052a4 <__fp_lock_all>:
 10052a4:	00804074 	movhi	r2,257
 10052a8:	1111d517 	ldw	r4,18260(r2)
 10052ac:	01404034 	movhi	r5,256
 10052b0:	2953de04 	addi	r5,r5,20344
 10052b4:	1005bb01 	jmpi	1005bb0 <_fwalk>

010052b8 <__fp_unlock_all>:
 10052b8:	00804074 	movhi	r2,257
 10052bc:	1111d517 	ldw	r4,18260(r2)
 10052c0:	01404034 	movhi	r5,256
 10052c4:	29543d04 	addi	r5,r5,20724
 10052c8:	1005bb01 	jmpi	1005bb0 <_fwalk>

010052cc <_malloc_trim_r>:
 10052cc:	defffb04 	addi	sp,sp,-20
 10052d0:	dcc00315 	stw	r19,12(sp)
 10052d4:	04c04074 	movhi	r19,257
 10052d8:	dc800215 	stw	r18,8(sp)
 10052dc:	dc400115 	stw	r17,4(sp)
 10052e0:	dc000015 	stw	r16,0(sp)
 10052e4:	dfc00415 	stw	ra,16(sp)
 10052e8:	2821883a 	mov	r16,r5
 10052ec:	9ccbe704 	addi	r19,r19,12188
 10052f0:	2025883a 	mov	r18,r4
 10052f4:	100e1bc0 	call	100e1bc <__malloc_lock>
 10052f8:	98800217 	ldw	r2,8(r19)
 10052fc:	14400117 	ldw	r17,4(r2)
 1005300:	00bfff04 	movi	r2,-4
 1005304:	88a2703a 	and	r17,r17,r2
 1005308:	8c21c83a 	sub	r16,r17,r16
 100530c:	8403fbc4 	addi	r16,r16,4079
 1005310:	8020d33a 	srli	r16,r16,12
 1005314:	843fffc4 	addi	r16,r16,-1
 1005318:	8020933a 	slli	r16,r16,12
 100531c:	80840008 	cmpgei	r2,r16,4096
 1005320:	10000626 	beq	r2,zero,100533c <_malloc_trim_r+0x70>
 1005324:	000b883a 	mov	r5,zero
 1005328:	9009883a 	mov	r4,r18
 100532c:	10081540 	call	1008154 <_sbrk_r>
 1005330:	98c00217 	ldw	r3,8(r19)
 1005334:	1c47883a 	add	r3,r3,r17
 1005338:	10c00a26 	beq	r2,r3,1005364 <_malloc_trim_r+0x98>
 100533c:	9009883a 	mov	r4,r18
 1005340:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1005344:	0005883a 	mov	r2,zero
 1005348:	dfc00417 	ldw	ra,16(sp)
 100534c:	dcc00317 	ldw	r19,12(sp)
 1005350:	dc800217 	ldw	r18,8(sp)
 1005354:	dc400117 	ldw	r17,4(sp)
 1005358:	dc000017 	ldw	r16,0(sp)
 100535c:	dec00504 	addi	sp,sp,20
 1005360:	f800283a 	ret
 1005364:	040bc83a 	sub	r5,zero,r16
 1005368:	9009883a 	mov	r4,r18
 100536c:	10081540 	call	1008154 <_sbrk_r>
 1005370:	10bfffd8 	cmpnei	r2,r2,-1
 1005374:	10000d26 	beq	r2,zero,10053ac <_malloc_trim_r+0xe0>
 1005378:	00804074 	movhi	r2,257
 100537c:	1098f717 	ldw	r2,25564(r2)
 1005380:	98c00217 	ldw	r3,8(r19)
 1005384:	8c23c83a 	sub	r17,r17,r16
 1005388:	8c400054 	ori	r17,r17,1
 100538c:	1421c83a 	sub	r16,r2,r16
 1005390:	1c400115 	stw	r17,4(r3)
 1005394:	00804074 	movhi	r2,257
 1005398:	9009883a 	mov	r4,r18
 100539c:	1418f715 	stw	r16,25564(r2)
 10053a0:	100e1e00 	call	100e1e0 <__malloc_unlock>
 10053a4:	00800044 	movi	r2,1
 10053a8:	003fe706 	br	1005348 <_malloc_trim_r+0x7c>
 10053ac:	000b883a 	mov	r5,zero
 10053b0:	9009883a 	mov	r4,r18
 10053b4:	10081540 	call	1008154 <_sbrk_r>
 10053b8:	99000217 	ldw	r4,8(r19)
 10053bc:	1107c83a 	sub	r3,r2,r4
 10053c0:	19400410 	cmplti	r5,r3,16
 10053c4:	283fdd1e 	bne	r5,zero,100533c <_malloc_trim_r+0x70>
 10053c8:	01404074 	movhi	r5,257
 10053cc:	2951d617 	ldw	r5,18264(r5)
 10053d0:	18c00054 	ori	r3,r3,1
 10053d4:	20c00115 	stw	r3,4(r4)
 10053d8:	1145c83a 	sub	r2,r2,r5
 10053dc:	01404074 	movhi	r5,257
 10053e0:	2898f715 	stw	r2,25564(r5)
 10053e4:	003fd506 	br	100533c <_malloc_trim_r+0x70>

010053e8 <_free_r>:
 10053e8:	28004f26 	beq	r5,zero,1005528 <_free_r+0x140>
 10053ec:	defffd04 	addi	sp,sp,-12
 10053f0:	dc400115 	stw	r17,4(sp)
 10053f4:	dc000015 	stw	r16,0(sp)
 10053f8:	2023883a 	mov	r17,r4
 10053fc:	2821883a 	mov	r16,r5
 1005400:	dfc00215 	stw	ra,8(sp)
 1005404:	100e1bc0 	call	100e1bc <__malloc_lock>
 1005408:	81ffff17 	ldw	r7,-4(r16)
 100540c:	00bfff84 	movi	r2,-2
 1005410:	80fffe04 	addi	r3,r16,-8
 1005414:	3884703a 	and	r2,r7,r2
 1005418:	01004074 	movhi	r4,257
 100541c:	188d883a 	add	r6,r3,r2
 1005420:	210be704 	addi	r4,r4,12188
 1005424:	31400117 	ldw	r5,4(r6)
 1005428:	22000217 	ldw	r8,8(r4)
 100542c:	027fff04 	movi	r9,-4
 1005430:	2a4a703a 	and	r5,r5,r9
 1005434:	41806426 	beq	r8,r6,10055c8 <_free_r+0x1e0>
 1005438:	31400115 	stw	r5,4(r6)
 100543c:	39c0004c 	andi	r7,r7,1
 1005440:	3151883a 	add	r8,r6,r5
 1005444:	3800281e 	bne	r7,zero,10054e8 <_free_r+0x100>
 1005448:	82bffe17 	ldw	r10,-8(r16)
 100544c:	42000117 	ldw	r8,4(r8)
 1005450:	01c04074 	movhi	r7,257
 1005454:	1a87c83a 	sub	r3,r3,r10
 1005458:	1a400217 	ldw	r9,8(r3)
 100545c:	39cbe904 	addi	r7,r7,12196
 1005460:	1285883a 	add	r2,r2,r10
 1005464:	4200004c 	andi	r8,r8,1
 1005468:	49c04c26 	beq	r9,r7,100559c <_free_r+0x1b4>
 100546c:	1a800317 	ldw	r10,12(r3)
 1005470:	4a800315 	stw	r10,12(r9)
 1005474:	52400215 	stw	r9,8(r10)
 1005478:	40007126 	beq	r8,zero,1005640 <_free_r+0x258>
 100547c:	11400054 	ori	r5,r2,1
 1005480:	19400115 	stw	r5,4(r3)
 1005484:	30800015 	stw	r2,0(r6)
 1005488:	11408028 	cmpgeui	r5,r2,512
 100548c:	28002c1e 	bne	r5,zero,1005540 <_free_r+0x158>
 1005490:	100ad0fa 	srli	r5,r2,3
 1005494:	100cd17a 	srli	r6,r2,5
 1005498:	00800044 	movi	r2,1
 100549c:	29400044 	addi	r5,r5,1
 10054a0:	280a90fa 	slli	r5,r5,3
 10054a4:	21c00117 	ldw	r7,4(r4)
 10054a8:	1184983a 	sll	r2,r2,r6
 10054ac:	214b883a 	add	r5,r4,r5
 10054b0:	29800017 	ldw	r6,0(r5)
 10054b4:	11c4b03a 	or	r2,r2,r7
 10054b8:	29fffe04 	addi	r7,r5,-8
 10054bc:	19c00315 	stw	r7,12(r3)
 10054c0:	19800215 	stw	r6,8(r3)
 10054c4:	20800115 	stw	r2,4(r4)
 10054c8:	28c00015 	stw	r3,0(r5)
 10054cc:	30c00315 	stw	r3,12(r6)
 10054d0:	8809883a 	mov	r4,r17
 10054d4:	dfc00217 	ldw	ra,8(sp)
 10054d8:	dc400117 	ldw	r17,4(sp)
 10054dc:	dc000017 	ldw	r16,0(sp)
 10054e0:	dec00304 	addi	sp,sp,12
 10054e4:	100e1e01 	jmpi	100e1e0 <__malloc_unlock>
 10054e8:	41c00117 	ldw	r7,4(r8)
 10054ec:	39c0004c 	andi	r7,r7,1
 10054f0:	38000e1e 	bne	r7,zero,100552c <_free_r+0x144>
 10054f4:	01c04074 	movhi	r7,257
 10054f8:	1145883a 	add	r2,r2,r5
 10054fc:	39cbe904 	addi	r7,r7,12196
 1005500:	31400217 	ldw	r5,8(r6)
 1005504:	12400054 	ori	r9,r2,1
 1005508:	1891883a 	add	r8,r3,r2
 100550c:	29c05226 	beq	r5,r7,1005658 <_free_r+0x270>
 1005510:	31800317 	ldw	r6,12(r6)
 1005514:	29800315 	stw	r6,12(r5)
 1005518:	31400215 	stw	r5,8(r6)
 100551c:	1a400115 	stw	r9,4(r3)
 1005520:	40800015 	stw	r2,0(r8)
 1005524:	003fd806 	br	1005488 <_free_r+0xa0>
 1005528:	f800283a 	ret
 100552c:	11400054 	ori	r5,r2,1
 1005530:	817fff15 	stw	r5,-4(r16)
 1005534:	30800015 	stw	r2,0(r6)
 1005538:	11408028 	cmpgeui	r5,r2,512
 100553c:	283fd426 	beq	r5,zero,1005490 <_free_r+0xa8>
 1005540:	100ad27a 	srli	r5,r2,9
 1005544:	29800168 	cmpgeui	r6,r5,5
 1005548:	3000341e 	bne	r6,zero,100561c <_free_r+0x234>
 100554c:	100ad1ba 	srli	r5,r2,6
 1005550:	29800e44 	addi	r6,r5,57
 1005554:	300c90fa 	slli	r6,r6,3
 1005558:	29c00e04 	addi	r7,r5,56
 100555c:	218d883a 	add	r6,r4,r6
 1005560:	31400017 	ldw	r5,0(r6)
 1005564:	31bffe04 	addi	r6,r6,-8
 1005568:	31404226 	beq	r6,r5,1005674 <_free_r+0x28c>
 100556c:	01ffff04 	movi	r7,-4
 1005570:	29000117 	ldw	r4,4(r5)
 1005574:	21c8703a 	and	r4,r4,r7
 1005578:	1100022e 	bgeu	r2,r4,1005584 <_free_r+0x19c>
 100557c:	29400217 	ldw	r5,8(r5)
 1005580:	317ffb1e 	bne	r6,r5,1005570 <_free_r+0x188>
 1005584:	29800317 	ldw	r6,12(r5)
 1005588:	19800315 	stw	r6,12(r3)
 100558c:	19400215 	stw	r5,8(r3)
 1005590:	30c00215 	stw	r3,8(r6)
 1005594:	28c00315 	stw	r3,12(r5)
 1005598:	003fcd06 	br	10054d0 <_free_r+0xe8>
 100559c:	40004d1e 	bne	r8,zero,10056d4 <_free_r+0x2ec>
 10055a0:	31000317 	ldw	r4,12(r6)
 10055a4:	31800217 	ldw	r6,8(r6)
 10055a8:	2885883a 	add	r2,r5,r2
 10055ac:	11400054 	ori	r5,r2,1
 10055b0:	31000315 	stw	r4,12(r6)
 10055b4:	21800215 	stw	r6,8(r4)
 10055b8:	19400115 	stw	r5,4(r3)
 10055bc:	1887883a 	add	r3,r3,r2
 10055c0:	18800015 	stw	r2,0(r3)
 10055c4:	003fc206 	br	10054d0 <_free_r+0xe8>
 10055c8:	39c0004c 	andi	r7,r7,1
 10055cc:	1145883a 	add	r2,r2,r5
 10055d0:	3800071e 	bne	r7,zero,10055f0 <_free_r+0x208>
 10055d4:	81fffe17 	ldw	r7,-8(r16)
 10055d8:	19c7c83a 	sub	r3,r3,r7
 10055dc:	19400317 	ldw	r5,12(r3)
 10055e0:	19800217 	ldw	r6,8(r3)
 10055e4:	11c5883a 	add	r2,r2,r7
 10055e8:	31400315 	stw	r5,12(r6)
 10055ec:	29800215 	stw	r6,8(r5)
 10055f0:	01404074 	movhi	r5,257
 10055f4:	11800054 	ori	r6,r2,1
 10055f8:	2951d717 	ldw	r5,18268(r5)
 10055fc:	19800115 	stw	r6,4(r3)
 1005600:	20c00215 	stw	r3,8(r4)
 1005604:	117fb236 	bltu	r2,r5,10054d0 <_free_r+0xe8>
 1005608:	00804074 	movhi	r2,257
 100560c:	1158ee17 	ldw	r5,25528(r2)
 1005610:	8809883a 	mov	r4,r17
 1005614:	10052cc0 	call	10052cc <_malloc_trim_r>
 1005618:	003fad06 	br	10054d0 <_free_r+0xe8>
 100561c:	29800568 	cmpgeui	r6,r5,21
 1005620:	30000926 	beq	r6,zero,1005648 <_free_r+0x260>
 1005624:	29801568 	cmpgeui	r6,r5,85
 1005628:	3000191e 	bne	r6,zero,1005690 <_free_r+0x2a8>
 100562c:	100ad33a 	srli	r5,r2,12
 1005630:	29801bc4 	addi	r6,r5,111
 1005634:	300c90fa 	slli	r6,r6,3
 1005638:	29c01b84 	addi	r7,r5,110
 100563c:	003fc706 	br	100555c <_free_r+0x174>
 1005640:	1145883a 	add	r2,r2,r5
 1005644:	003fae06 	br	1005500 <_free_r+0x118>
 1005648:	29801704 	addi	r6,r5,92
 100564c:	300c90fa 	slli	r6,r6,3
 1005650:	29c016c4 	addi	r7,r5,91
 1005654:	003fc106 	br	100555c <_free_r+0x174>
 1005658:	20c00515 	stw	r3,20(r4)
 100565c:	20c00415 	stw	r3,16(r4)
 1005660:	19c00315 	stw	r7,12(r3)
 1005664:	19c00215 	stw	r7,8(r3)
 1005668:	1a400115 	stw	r9,4(r3)
 100566c:	40800015 	stw	r2,0(r8)
 1005670:	003f9706 	br	10054d0 <_free_r+0xe8>
 1005674:	380fd0ba 	srai	r7,r7,2
 1005678:	00800044 	movi	r2,1
 100567c:	22000117 	ldw	r8,4(r4)
 1005680:	11ce983a 	sll	r7,r2,r7
 1005684:	3a0eb03a 	or	r7,r7,r8
 1005688:	21c00115 	stw	r7,4(r4)
 100568c:	003fbe06 	br	1005588 <_free_r+0x1a0>
 1005690:	29805568 	cmpgeui	r6,r5,341
 1005694:	3000051e 	bne	r6,zero,10056ac <_free_r+0x2c4>
 1005698:	100ad3fa 	srli	r5,r2,15
 100569c:	29801e04 	addi	r6,r5,120
 10056a0:	300c90fa 	slli	r6,r6,3
 10056a4:	29c01dc4 	addi	r7,r5,119
 10056a8:	003fac06 	br	100555c <_free_r+0x174>
 10056ac:	29415568 	cmpgeui	r5,r5,1365
 10056b0:	2800051e 	bne	r5,zero,10056c8 <_free_r+0x2e0>
 10056b4:	100ad4ba 	srli	r5,r2,18
 10056b8:	29801f44 	addi	r6,r5,125
 10056bc:	300c90fa 	slli	r6,r6,3
 10056c0:	29c01f04 	addi	r7,r5,124
 10056c4:	003fa506 	br	100555c <_free_r+0x174>
 10056c8:	0180fe04 	movi	r6,1016
 10056cc:	01c01f84 	movi	r7,126
 10056d0:	003fa206 	br	100555c <_free_r+0x174>
 10056d4:	11000054 	ori	r4,r2,1
 10056d8:	19000115 	stw	r4,4(r3)
 10056dc:	30800015 	stw	r2,0(r6)
 10056e0:	003f7b06 	br	10054d0 <_free_r+0xe8>

010056e4 <__sfvwrite_r>:
 10056e4:	30800217 	ldw	r2,8(r6)
 10056e8:	1000c826 	beq	r2,zero,1005a0c <__sfvwrite_r+0x328>
 10056ec:	29c0030b 	ldhu	r7,12(r5)
 10056f0:	defff404 	addi	sp,sp,-48
 10056f4:	dd800815 	stw	r22,32(sp)
 10056f8:	dd400715 	stw	r21,28(sp)
 10056fc:	dc000215 	stw	r16,8(sp)
 1005700:	dfc00b15 	stw	ra,44(sp)
 1005704:	df000a15 	stw	fp,40(sp)
 1005708:	ddc00915 	stw	r23,36(sp)
 100570c:	dd000615 	stw	r20,24(sp)
 1005710:	dcc00515 	stw	r19,20(sp)
 1005714:	dc800415 	stw	r18,16(sp)
 1005718:	dc400315 	stw	r17,12(sp)
 100571c:	3880020c 	andi	r2,r7,8
 1005720:	302d883a 	mov	r22,r6
 1005724:	202b883a 	mov	r21,r4
 1005728:	2821883a 	mov	r16,r5
 100572c:	10002226 	beq	r2,zero,10057b8 <__sfvwrite_r+0xd4>
 1005730:	28800417 	ldw	r2,16(r5)
 1005734:	10002026 	beq	r2,zero,10057b8 <__sfvwrite_r+0xd4>
 1005738:	3880008c 	andi	r2,r7,2
 100573c:	b4400017 	ldw	r17,0(r22)
 1005740:	10002526 	beq	r2,zero,10057d8 <__sfvwrite_r+0xf4>
 1005744:	80800917 	ldw	r2,36(r16)
 1005748:	81400717 	ldw	r5,28(r16)
 100574c:	05200034 	movhi	r20,32768
 1005750:	0027883a 	mov	r19,zero
 1005754:	0025883a 	mov	r18,zero
 1005758:	a53f0004 	addi	r20,r20,-1024
 100575c:	980d883a 	mov	r6,r19
 1005760:	a809883a 	mov	r4,r21
 1005764:	90001026 	beq	r18,zero,10057a8 <__sfvwrite_r+0xc4>
 1005768:	900f883a 	mov	r7,r18
 100576c:	a480012e 	bgeu	r20,r18,1005774 <__sfvwrite_r+0x90>
 1005770:	a00f883a 	mov	r7,r20
 1005774:	103ee83a 	callr	r2
 1005778:	00809f0e 	bge	zero,r2,10059f8 <__sfvwrite_r+0x314>
 100577c:	b1000217 	ldw	r4,8(r22)
 1005780:	98a7883a 	add	r19,r19,r2
 1005784:	90a5c83a 	sub	r18,r18,r2
 1005788:	2085c83a 	sub	r2,r4,r2
 100578c:	b0800215 	stw	r2,8(r22)
 1005790:	10006326 	beq	r2,zero,1005920 <__sfvwrite_r+0x23c>
 1005794:	80800917 	ldw	r2,36(r16)
 1005798:	81400717 	ldw	r5,28(r16)
 100579c:	980d883a 	mov	r6,r19
 10057a0:	a809883a 	mov	r4,r21
 10057a4:	903ff01e 	bne	r18,zero,1005768 <__sfvwrite_r+0x84>
 10057a8:	8cc00017 	ldw	r19,0(r17)
 10057ac:	8c800117 	ldw	r18,4(r17)
 10057b0:	8c400204 	addi	r17,r17,8
 10057b4:	003fe906 	br	100575c <__sfvwrite_r+0x78>
 10057b8:	800b883a 	mov	r5,r16
 10057bc:	a809883a 	mov	r4,r21
 10057c0:	10031fc0 	call	10031fc <__swsetup_r>
 10057c4:	1000f81e 	bne	r2,zero,1005ba8 <__sfvwrite_r+0x4c4>
 10057c8:	81c0030b 	ldhu	r7,12(r16)
 10057cc:	b4400017 	ldw	r17,0(r22)
 10057d0:	3880008c 	andi	r2,r7,2
 10057d4:	103fdb1e 	bne	r2,zero,1005744 <__sfvwrite_r+0x60>
 10057d8:	3880004c 	andi	r2,r7,1
 10057dc:	84800217 	ldw	r18,8(r16)
 10057e0:	82000017 	ldw	r8,0(r16)
 10057e4:	10008b1e 	bne	r2,zero,1005a14 <__sfvwrite_r+0x330>
 10057e8:	00a00034 	movhi	r2,32768
 10057ec:	10bfff84 	addi	r2,r2,-2
 10057f0:	00e00034 	movhi	r3,32768
 10057f4:	d8800015 	stw	r2,0(sp)
 10057f8:	18bfffc4 	addi	r2,r3,-1
 10057fc:	0039883a 	mov	fp,zero
 1005800:	0027883a 	mov	r19,zero
 1005804:	d8800115 	stw	r2,4(sp)
 1005808:	98004126 	beq	r19,zero,1005910 <__sfvwrite_r+0x22c>
 100580c:	3880800c 	andi	r2,r7,512
 1005810:	10009326 	beq	r2,zero,1005a60 <__sfvwrite_r+0x37c>
 1005814:	902f883a 	mov	r23,r18
 1005818:	9c80ba36 	bltu	r19,r18,1005b04 <__sfvwrite_r+0x420>
 100581c:	3881200c 	andi	r2,r7,1152
 1005820:	10002626 	beq	r2,zero,10058bc <__sfvwrite_r+0x1d8>
 1005824:	81800517 	ldw	r6,20(r16)
 1005828:	81400417 	ldw	r5,16(r16)
 100582c:	98800044 	addi	r2,r19,1
 1005830:	3189883a 	add	r4,r6,r6
 1005834:	2189883a 	add	r4,r4,r6
 1005838:	2028d7fa 	srli	r20,r4,31
 100583c:	4165c83a 	sub	r18,r8,r5
 1005840:	1485883a 	add	r2,r2,r18
 1005844:	a109883a 	add	r4,r20,r4
 1005848:	2029d07a 	srai	r20,r4,1
 100584c:	a00d883a 	mov	r6,r20
 1005850:	a080022e 	bgeu	r20,r2,100585c <__sfvwrite_r+0x178>
 1005854:	1029883a 	mov	r20,r2
 1005858:	100d883a 	mov	r6,r2
 100585c:	39c1000c 	andi	r7,r7,1024
 1005860:	3800c126 	beq	r7,zero,1005b68 <__sfvwrite_r+0x484>
 1005864:	a809883a 	mov	r4,r21
 1005868:	300b883a 	mov	r5,r6
 100586c:	1005ee80 	call	1005ee8 <_malloc_r>
 1005870:	1009883a 	mov	r4,r2
 1005874:	1000c826 	beq	r2,zero,1005b98 <__sfvwrite_r+0x4b4>
 1005878:	81400417 	ldw	r5,16(r16)
 100587c:	900d883a 	mov	r6,r18
 1005880:	100679c0 	call	100679c <memcpy>
 1005884:	1009883a 	mov	r4,r2
 1005888:	8080030b 	ldhu	r2,12(r16)
 100588c:	00fedfc4 	movi	r3,-1153
 1005890:	10c4703a 	and	r2,r2,r3
 1005894:	10802014 	ori	r2,r2,128
 1005898:	8080030d 	sth	r2,12(r16)
 100589c:	2491883a 	add	r8,r4,r18
 10058a0:	a485c83a 	sub	r2,r20,r18
 10058a4:	81000415 	stw	r4,16(r16)
 10058a8:	82000015 	stw	r8,0(r16)
 10058ac:	85000515 	stw	r20,20(r16)
 10058b0:	9825883a 	mov	r18,r19
 10058b4:	80800215 	stw	r2,8(r16)
 10058b8:	982f883a 	mov	r23,r19
 10058bc:	4009883a 	mov	r4,r8
 10058c0:	b80d883a 	mov	r6,r23
 10058c4:	e00b883a 	mov	r5,fp
 10058c8:	100689c0 	call	100689c <memmove>
 10058cc:	81000217 	ldw	r4,8(r16)
 10058d0:	80800017 	ldw	r2,0(r16)
 10058d4:	9829883a 	mov	r20,r19
 10058d8:	24a5c83a 	sub	r18,r4,r18
 10058dc:	15c5883a 	add	r2,r2,r23
 10058e0:	84800215 	stw	r18,8(r16)
 10058e4:	80800015 	stw	r2,0(r16)
 10058e8:	0027883a 	mov	r19,zero
 10058ec:	b0800217 	ldw	r2,8(r22)
 10058f0:	e539883a 	add	fp,fp,r20
 10058f4:	1529c83a 	sub	r20,r2,r20
 10058f8:	b5000215 	stw	r20,8(r22)
 10058fc:	a0000826 	beq	r20,zero,1005920 <__sfvwrite_r+0x23c>
 1005900:	81c0030b 	ldhu	r7,12(r16)
 1005904:	84800217 	ldw	r18,8(r16)
 1005908:	82000017 	ldw	r8,0(r16)
 100590c:	983fbf1e 	bne	r19,zero,100580c <__sfvwrite_r+0x128>
 1005910:	8f000017 	ldw	fp,0(r17)
 1005914:	8cc00117 	ldw	r19,4(r17)
 1005918:	8c400204 	addi	r17,r17,8
 100591c:	003fba06 	br	1005808 <__sfvwrite_r+0x124>
 1005920:	0005883a 	mov	r2,zero
 1005924:	dfc00b17 	ldw	ra,44(sp)
 1005928:	df000a17 	ldw	fp,40(sp)
 100592c:	ddc00917 	ldw	r23,36(sp)
 1005930:	dd800817 	ldw	r22,32(sp)
 1005934:	dd400717 	ldw	r21,28(sp)
 1005938:	dd000617 	ldw	r20,24(sp)
 100593c:	dcc00517 	ldw	r19,20(sp)
 1005940:	dc800417 	ldw	r18,16(sp)
 1005944:	dc400317 	ldw	r17,12(sp)
 1005948:	dc000217 	ldw	r16,8(sp)
 100594c:	dec00c04 	addi	sp,sp,48
 1005950:	f800283a 	ret
 1005954:	e1c07316 	blt	fp,r7,1005b24 <__sfvwrite_r+0x440>
 1005958:	80800917 	ldw	r2,36(r16)
 100595c:	81400717 	ldw	r5,28(r16)
 1005960:	b80d883a 	mov	r6,r23
 1005964:	a809883a 	mov	r4,r21
 1005968:	103ee83a 	callr	r2
 100596c:	1025883a 	mov	r18,r2
 1005970:	0080210e 	bge	zero,r2,10059f8 <__sfvwrite_r+0x314>
 1005974:	a4a9c83a 	sub	r20,r20,r18
 1005978:	a0006526 	beq	r20,zero,1005b10 <__sfvwrite_r+0x42c>
 100597c:	00800044 	movi	r2,1
 1005980:	b1800217 	ldw	r6,8(r22)
 1005984:	bcaf883a 	add	r23,r23,r18
 1005988:	9ca7c83a 	sub	r19,r19,r18
 100598c:	34a5c83a 	sub	r18,r6,r18
 1005990:	b4800215 	stw	r18,8(r22)
 1005994:	903fe226 	beq	r18,zero,1005920 <__sfvwrite_r+0x23c>
 1005998:	84800217 	ldw	r18,8(r16)
 100599c:	82000017 	ldw	r8,0(r16)
 10059a0:	98002126 	beq	r19,zero,1005a28 <__sfvwrite_r+0x344>
 10059a4:	10002426 	beq	r2,zero,1005a38 <__sfvwrite_r+0x354>
 10059a8:	a005883a 	mov	r2,r20
 10059ac:	9839883a 	mov	fp,r19
 10059b0:	14c0012e 	bgeu	r2,r19,10059b8 <__sfvwrite_r+0x2d4>
 10059b4:	1039883a 	mov	fp,r2
 10059b8:	80800417 	ldw	r2,16(r16)
 10059bc:	81c00517 	ldw	r7,20(r16)
 10059c0:	123fe42e 	bgeu	r2,r8,1005954 <__sfvwrite_r+0x270>
 10059c4:	3ca5883a 	add	r18,r7,r18
 10059c8:	973fe20e 	bge	r18,fp,1005954 <__sfvwrite_r+0x270>
 10059cc:	b80b883a 	mov	r5,r23
 10059d0:	4009883a 	mov	r4,r8
 10059d4:	900d883a 	mov	r6,r18
 10059d8:	100689c0 	call	100689c <memmove>
 10059dc:	80800017 	ldw	r2,0(r16)
 10059e0:	800b883a 	mov	r5,r16
 10059e4:	a809883a 	mov	r4,r21
 10059e8:	1485883a 	add	r2,r2,r18
 10059ec:	80800015 	stw	r2,0(r16)
 10059f0:	1004ef00 	call	1004ef0 <_fflush_r>
 10059f4:	103fdf26 	beq	r2,zero,1005974 <__sfvwrite_r+0x290>
 10059f8:	8080030b 	ldhu	r2,12(r16)
 10059fc:	10801014 	ori	r2,r2,64
 1005a00:	8080030d 	sth	r2,12(r16)
 1005a04:	00bfffc4 	movi	r2,-1
 1005a08:	003fc606 	br	1005924 <__sfvwrite_r+0x240>
 1005a0c:	0005883a 	mov	r2,zero
 1005a10:	f800283a 	ret
 1005a14:	0027883a 	mov	r19,zero
 1005a18:	0029883a 	mov	r20,zero
 1005a1c:	0005883a 	mov	r2,zero
 1005a20:	002f883a 	mov	r23,zero
 1005a24:	983fdf1e 	bne	r19,zero,10059a4 <__sfvwrite_r+0x2c0>
 1005a28:	8cc00117 	ldw	r19,4(r17)
 1005a2c:	8dc00017 	ldw	r23,0(r17)
 1005a30:	8c400204 	addi	r17,r17,8
 1005a34:	983ffc26 	beq	r19,zero,1005a28 <__sfvwrite_r+0x344>
 1005a38:	980d883a 	mov	r6,r19
 1005a3c:	01400284 	movi	r5,10
 1005a40:	b809883a 	mov	r4,r23
 1005a44:	da000015 	stw	r8,0(sp)
 1005a48:	10066c80 	call	10066c8 <memchr>
 1005a4c:	da000017 	ldw	r8,0(sp)
 1005a50:	10004226 	beq	r2,zero,1005b5c <__sfvwrite_r+0x478>
 1005a54:	10800044 	addi	r2,r2,1
 1005a58:	15e9c83a 	sub	r20,r2,r23
 1005a5c:	003fd206 	br	10059a8 <__sfvwrite_r+0x2c4>
 1005a60:	80800417 	ldw	r2,16(r16)
 1005a64:	12001436 	bltu	r2,r8,1005ab8 <__sfvwrite_r+0x3d4>
 1005a68:	85000517 	ldw	r20,20(r16)
 1005a6c:	9d001236 	bltu	r19,r20,1005ab8 <__sfvwrite_r+0x3d4>
 1005a70:	d8800017 	ldw	r2,0(sp)
 1005a74:	14c0372e 	bgeu	r2,r19,1005b54 <__sfvwrite_r+0x470>
 1005a78:	d9000117 	ldw	r4,4(sp)
 1005a7c:	a00b883a 	mov	r5,r20
 1005a80:	1000c7c0 	call	1000c7c <__divsi3>
 1005a84:	a00b883a 	mov	r5,r20
 1005a88:	1009883a 	mov	r4,r2
 1005a8c:	1000e300 	call	1000e30 <__mulsi3>
 1005a90:	82000917 	ldw	r8,36(r16)
 1005a94:	81400717 	ldw	r5,28(r16)
 1005a98:	100f883a 	mov	r7,r2
 1005a9c:	e00d883a 	mov	r6,fp
 1005aa0:	a809883a 	mov	r4,r21
 1005aa4:	403ee83a 	callr	r8
 1005aa8:	1029883a 	mov	r20,r2
 1005aac:	00bfd20e 	bge	zero,r2,10059f8 <__sfvwrite_r+0x314>
 1005ab0:	9d27c83a 	sub	r19,r19,r20
 1005ab4:	003f8d06 	br	10058ec <__sfvwrite_r+0x208>
 1005ab8:	9029883a 	mov	r20,r18
 1005abc:	9c80012e 	bgeu	r19,r18,1005ac4 <__sfvwrite_r+0x3e0>
 1005ac0:	9829883a 	mov	r20,r19
 1005ac4:	4009883a 	mov	r4,r8
 1005ac8:	a00d883a 	mov	r6,r20
 1005acc:	e00b883a 	mov	r5,fp
 1005ad0:	100689c0 	call	100689c <memmove>
 1005ad4:	80800217 	ldw	r2,8(r16)
 1005ad8:	81000017 	ldw	r4,0(r16)
 1005adc:	1505c83a 	sub	r2,r2,r20
 1005ae0:	2509883a 	add	r4,r4,r20
 1005ae4:	80800215 	stw	r2,8(r16)
 1005ae8:	81000015 	stw	r4,0(r16)
 1005aec:	103ff01e 	bne	r2,zero,1005ab0 <__sfvwrite_r+0x3cc>
 1005af0:	800b883a 	mov	r5,r16
 1005af4:	a809883a 	mov	r4,r21
 1005af8:	1004ef00 	call	1004ef0 <_fflush_r>
 1005afc:	103fec26 	beq	r2,zero,1005ab0 <__sfvwrite_r+0x3cc>
 1005b00:	003fbd06 	br	10059f8 <__sfvwrite_r+0x314>
 1005b04:	9825883a 	mov	r18,r19
 1005b08:	982f883a 	mov	r23,r19
 1005b0c:	003f6b06 	br	10058bc <__sfvwrite_r+0x1d8>
 1005b10:	800b883a 	mov	r5,r16
 1005b14:	a809883a 	mov	r4,r21
 1005b18:	1004ef00 	call	1004ef0 <_fflush_r>
 1005b1c:	103f9826 	beq	r2,zero,1005980 <__sfvwrite_r+0x29c>
 1005b20:	003fb506 	br	10059f8 <__sfvwrite_r+0x314>
 1005b24:	e00d883a 	mov	r6,fp
 1005b28:	b80b883a 	mov	r5,r23
 1005b2c:	4009883a 	mov	r4,r8
 1005b30:	100689c0 	call	100689c <memmove>
 1005b34:	80800217 	ldw	r2,8(r16)
 1005b38:	81800017 	ldw	r6,0(r16)
 1005b3c:	e025883a 	mov	r18,fp
 1005b40:	1705c83a 	sub	r2,r2,fp
 1005b44:	370d883a 	add	r6,r6,fp
 1005b48:	80800215 	stw	r2,8(r16)
 1005b4c:	81800015 	stw	r6,0(r16)
 1005b50:	003f8806 	br	1005974 <__sfvwrite_r+0x290>
 1005b54:	9809883a 	mov	r4,r19
 1005b58:	003fc806 	br	1005a7c <__sfvwrite_r+0x398>
 1005b5c:	98800044 	addi	r2,r19,1
 1005b60:	1029883a 	mov	r20,r2
 1005b64:	003f9106 	br	10059ac <__sfvwrite_r+0x2c8>
 1005b68:	a809883a 	mov	r4,r21
 1005b6c:	1007bf00 	call	1007bf0 <_realloc_r>
 1005b70:	1009883a 	mov	r4,r2
 1005b74:	103f491e 	bne	r2,zero,100589c <__sfvwrite_r+0x1b8>
 1005b78:	81400417 	ldw	r5,16(r16)
 1005b7c:	a809883a 	mov	r4,r21
 1005b80:	10053e80 	call	10053e8 <_free_r>
 1005b84:	8080030b 	ldhu	r2,12(r16)
 1005b88:	00c00304 	movi	r3,12
 1005b8c:	a8c00015 	stw	r3,0(r21)
 1005b90:	10bfdfcc 	andi	r2,r2,65407
 1005b94:	003f9906 	br	10059fc <__sfvwrite_r+0x318>
 1005b98:	00c00304 	movi	r3,12
 1005b9c:	8080030b 	ldhu	r2,12(r16)
 1005ba0:	a8c00015 	stw	r3,0(r21)
 1005ba4:	003f9506 	br	10059fc <__sfvwrite_r+0x318>
 1005ba8:	00bfffc4 	movi	r2,-1
 1005bac:	003f5d06 	br	1005924 <__sfvwrite_r+0x240>

01005bb0 <_fwalk>:
 1005bb0:	defffa04 	addi	sp,sp,-24
 1005bb4:	dd000415 	stw	r20,16(sp)
 1005bb8:	dcc00315 	stw	r19,12(sp)
 1005bbc:	dc800215 	stw	r18,8(sp)
 1005bc0:	dfc00515 	stw	ra,20(sp)
 1005bc4:	dc400115 	stw	r17,4(sp)
 1005bc8:	dc000015 	stw	r16,0(sp)
 1005bcc:	2827883a 	mov	r19,r5
 1005bd0:	2480b804 	addi	r18,r4,736
 1005bd4:	0029883a 	mov	r20,zero
 1005bd8:	94400117 	ldw	r17,4(r18)
 1005bdc:	94000217 	ldw	r16,8(r18)
 1005be0:	8c7fffc4 	addi	r17,r17,-1
 1005be4:	88000d16 	blt	r17,zero,1005c1c <_fwalk+0x6c>
 1005be8:	8080030b 	ldhu	r2,12(r16)
 1005bec:	8c7fffc4 	addi	r17,r17,-1
 1005bf0:	108000b0 	cmpltui	r2,r2,2
 1005bf4:	1000061e 	bne	r2,zero,1005c10 <_fwalk+0x60>
 1005bf8:	8080038f 	ldh	r2,14(r16)
 1005bfc:	8009883a 	mov	r4,r16
 1005c00:	10bfffe0 	cmpeqi	r2,r2,-1
 1005c04:	1000021e 	bne	r2,zero,1005c10 <_fwalk+0x60>
 1005c08:	983ee83a 	callr	r19
 1005c0c:	a0a8b03a 	or	r20,r20,r2
 1005c10:	88bfffd8 	cmpnei	r2,r17,-1
 1005c14:	84001a04 	addi	r16,r16,104
 1005c18:	103ff31e 	bne	r2,zero,1005be8 <_fwalk+0x38>
 1005c1c:	94800017 	ldw	r18,0(r18)
 1005c20:	903fed1e 	bne	r18,zero,1005bd8 <_fwalk+0x28>
 1005c24:	a005883a 	mov	r2,r20
 1005c28:	dfc00517 	ldw	ra,20(sp)
 1005c2c:	dd000417 	ldw	r20,16(sp)
 1005c30:	dcc00317 	ldw	r19,12(sp)
 1005c34:	dc800217 	ldw	r18,8(sp)
 1005c38:	dc400117 	ldw	r17,4(sp)
 1005c3c:	dc000017 	ldw	r16,0(sp)
 1005c40:	dec00604 	addi	sp,sp,24
 1005c44:	f800283a 	ret

01005c48 <_fwalk_reent>:
 1005c48:	defff904 	addi	sp,sp,-28
 1005c4c:	dd400515 	stw	r21,20(sp)
 1005c50:	dd000415 	stw	r20,16(sp)
 1005c54:	dcc00315 	stw	r19,12(sp)
 1005c58:	dc800215 	stw	r18,8(sp)
 1005c5c:	dfc00615 	stw	ra,24(sp)
 1005c60:	dc400115 	stw	r17,4(sp)
 1005c64:	dc000015 	stw	r16,0(sp)
 1005c68:	202b883a 	mov	r21,r4
 1005c6c:	2827883a 	mov	r19,r5
 1005c70:	2480b804 	addi	r18,r4,736
 1005c74:	0029883a 	mov	r20,zero
 1005c78:	94400117 	ldw	r17,4(r18)
 1005c7c:	94000217 	ldw	r16,8(r18)
 1005c80:	8c7fffc4 	addi	r17,r17,-1
 1005c84:	88000e16 	blt	r17,zero,1005cc0 <_fwalk_reent+0x78>
 1005c88:	8080030b 	ldhu	r2,12(r16)
 1005c8c:	8c7fffc4 	addi	r17,r17,-1
 1005c90:	108000b0 	cmpltui	r2,r2,2
 1005c94:	1000071e 	bne	r2,zero,1005cb4 <_fwalk_reent+0x6c>
 1005c98:	8080038f 	ldh	r2,14(r16)
 1005c9c:	800b883a 	mov	r5,r16
 1005ca0:	a809883a 	mov	r4,r21
 1005ca4:	10bfffe0 	cmpeqi	r2,r2,-1
 1005ca8:	1000021e 	bne	r2,zero,1005cb4 <_fwalk_reent+0x6c>
 1005cac:	983ee83a 	callr	r19
 1005cb0:	a0a8b03a 	or	r20,r20,r2
 1005cb4:	88bfffd8 	cmpnei	r2,r17,-1
 1005cb8:	84001a04 	addi	r16,r16,104
 1005cbc:	103ff21e 	bne	r2,zero,1005c88 <_fwalk_reent+0x40>
 1005cc0:	94800017 	ldw	r18,0(r18)
 1005cc4:	903fec1e 	bne	r18,zero,1005c78 <_fwalk_reent+0x30>
 1005cc8:	a005883a 	mov	r2,r20
 1005ccc:	dfc00617 	ldw	ra,24(sp)
 1005cd0:	dd400517 	ldw	r21,20(sp)
 1005cd4:	dd000417 	ldw	r20,16(sp)
 1005cd8:	dcc00317 	ldw	r19,12(sp)
 1005cdc:	dc800217 	ldw	r18,8(sp)
 1005ce0:	dc400117 	ldw	r17,4(sp)
 1005ce4:	dc000017 	ldw	r16,0(sp)
 1005ce8:	dec00704 	addi	sp,sp,28
 1005cec:	f800283a 	ret

01005cf0 <__localeconv_l>:
 1005cf0:	20803c04 	addi	r2,r4,240
 1005cf4:	f800283a 	ret

01005cf8 <_localeconv_r>:
 1005cf8:	00804074 	movhi	r2,257
 1005cfc:	108d2504 	addi	r2,r2,13460
 1005d00:	f800283a 	ret

01005d04 <localeconv>:
 1005d04:	00804074 	movhi	r2,257
 1005d08:	108d2504 	addi	r2,r2,13460
 1005d0c:	f800283a 	ret

01005d10 <__swhatbuf_r>:
 1005d10:	deffea04 	addi	sp,sp,-88
 1005d14:	dc001215 	stw	r16,72(sp)
 1005d18:	2821883a 	mov	r16,r5
 1005d1c:	2940038f 	ldh	r5,14(r5)
 1005d20:	dc801415 	stw	r18,80(sp)
 1005d24:	dc401315 	stw	r17,76(sp)
 1005d28:	dfc01515 	stw	ra,84(sp)
 1005d2c:	3023883a 	mov	r17,r6
 1005d30:	3825883a 	mov	r18,r7
 1005d34:	28001016 	blt	r5,zero,1005d78 <__swhatbuf_r+0x68>
 1005d38:	d80d883a 	mov	r6,sp
 1005d3c:	1009d400 	call	1009d40 <_fstat_r>
 1005d40:	10000d16 	blt	r2,zero,1005d78 <__swhatbuf_r+0x68>
 1005d44:	d8c00117 	ldw	r3,4(sp)
 1005d48:	00820004 	movi	r2,2048
 1005d4c:	18fc000c 	andi	r3,r3,61440
 1005d50:	18c80020 	cmpeqi	r3,r3,8192
 1005d54:	90c00015 	stw	r3,0(r18)
 1005d58:	00c10004 	movi	r3,1024
 1005d5c:	88c00015 	stw	r3,0(r17)
 1005d60:	dfc01517 	ldw	ra,84(sp)
 1005d64:	dc801417 	ldw	r18,80(sp)
 1005d68:	dc401317 	ldw	r17,76(sp)
 1005d6c:	dc001217 	ldw	r16,72(sp)
 1005d70:	dec01604 	addi	sp,sp,88
 1005d74:	f800283a 	ret
 1005d78:	8080030b 	ldhu	r2,12(r16)
 1005d7c:	90000015 	stw	zero,0(r18)
 1005d80:	1080200c 	andi	r2,r2,128
 1005d84:	10000426 	beq	r2,zero,1005d98 <__swhatbuf_r+0x88>
 1005d88:	00801004 	movi	r2,64
 1005d8c:	88800015 	stw	r2,0(r17)
 1005d90:	0005883a 	mov	r2,zero
 1005d94:	003ff206 	br	1005d60 <__swhatbuf_r+0x50>
 1005d98:	00810004 	movi	r2,1024
 1005d9c:	88800015 	stw	r2,0(r17)
 1005da0:	0005883a 	mov	r2,zero
 1005da4:	003fee06 	br	1005d60 <__swhatbuf_r+0x50>

01005da8 <__smakebuf_r>:
 1005da8:	2880030b 	ldhu	r2,12(r5)
 1005dac:	defffa04 	addi	sp,sp,-24
 1005db0:	dc000215 	stw	r16,8(sp)
 1005db4:	dfc00515 	stw	ra,20(sp)
 1005db8:	dc800415 	stw	r18,16(sp)
 1005dbc:	dc400315 	stw	r17,12(sp)
 1005dc0:	1080008c 	andi	r2,r2,2
 1005dc4:	2821883a 	mov	r16,r5
 1005dc8:	10000b26 	beq	r2,zero,1005df8 <__smakebuf_r+0x50>
 1005dcc:	288010c4 	addi	r2,r5,67
 1005dd0:	28800015 	stw	r2,0(r5)
 1005dd4:	28800415 	stw	r2,16(r5)
 1005dd8:	00800044 	movi	r2,1
 1005ddc:	28800515 	stw	r2,20(r5)
 1005de0:	dfc00517 	ldw	ra,20(sp)
 1005de4:	dc800417 	ldw	r18,16(sp)
 1005de8:	dc400317 	ldw	r17,12(sp)
 1005dec:	dc000217 	ldw	r16,8(sp)
 1005df0:	dec00604 	addi	sp,sp,24
 1005df4:	f800283a 	ret
 1005df8:	d9c00104 	addi	r7,sp,4
 1005dfc:	d80d883a 	mov	r6,sp
 1005e00:	2023883a 	mov	r17,r4
 1005e04:	1005d100 	call	1005d10 <__swhatbuf_r>
 1005e08:	d9000117 	ldw	r4,4(sp)
 1005e0c:	1025883a 	mov	r18,r2
 1005e10:	2000131e 	bne	r4,zero,1005e60 <__smakebuf_r+0xb8>
 1005e14:	d9400017 	ldw	r5,0(sp)
 1005e18:	8809883a 	mov	r4,r17
 1005e1c:	1005ee80 	call	1005ee8 <_malloc_r>
 1005e20:	10001c26 	beq	r2,zero,1005e94 <__smakebuf_r+0xec>
 1005e24:	01004034 	movhi	r4,256
 1005e28:	2113e004 	addi	r4,r4,20352
 1005e2c:	80c0030b 	ldhu	r3,12(r16)
 1005e30:	89000f15 	stw	r4,60(r17)
 1005e34:	80800015 	stw	r2,0(r16)
 1005e38:	80800415 	stw	r2,16(r16)
 1005e3c:	d8800017 	ldw	r2,0(sp)
 1005e40:	d9400117 	ldw	r5,4(sp)
 1005e44:	18c02014 	ori	r3,r3,128
 1005e48:	80c0030d 	sth	r3,12(r16)
 1005e4c:	80800515 	stw	r2,20(r16)
 1005e50:	28001d1e 	bne	r5,zero,1005ec8 <__smakebuf_r+0x120>
 1005e54:	90c6b03a 	or	r3,r18,r3
 1005e58:	80c0030d 	sth	r3,12(r16)
 1005e5c:	003fe006 	br	1005de0 <__smakebuf_r+0x38>
 1005e60:	8140038f 	ldh	r5,14(r16)
 1005e64:	8809883a 	mov	r4,r17
 1005e68:	1009da00 	call	1009da0 <_isatty_r>
 1005e6c:	103fe926 	beq	r2,zero,1005e14 <__smakebuf_r+0x6c>
 1005e70:	8080030b 	ldhu	r2,12(r16)
 1005e74:	80c010c4 	addi	r3,r16,67
 1005e78:	80c00015 	stw	r3,0(r16)
 1005e7c:	10800054 	ori	r2,r2,1
 1005e80:	8080030d 	sth	r2,12(r16)
 1005e84:	00800044 	movi	r2,1
 1005e88:	80c00415 	stw	r3,16(r16)
 1005e8c:	80800515 	stw	r2,20(r16)
 1005e90:	003fe006 	br	1005e14 <__smakebuf_r+0x6c>
 1005e94:	8080030b 	ldhu	r2,12(r16)
 1005e98:	10c0800c 	andi	r3,r2,512
 1005e9c:	183fd01e 	bne	r3,zero,1005de0 <__smakebuf_r+0x38>
 1005ea0:	00ffff04 	movi	r3,-4
 1005ea4:	10c4703a 	and	r2,r2,r3
 1005ea8:	10800094 	ori	r2,r2,2
 1005eac:	80c010c4 	addi	r3,r16,67
 1005eb0:	8080030d 	sth	r2,12(r16)
 1005eb4:	00800044 	movi	r2,1
 1005eb8:	80c00015 	stw	r3,0(r16)
 1005ebc:	80c00415 	stw	r3,16(r16)
 1005ec0:	80800515 	stw	r2,20(r16)
 1005ec4:	003fc606 	br	1005de0 <__smakebuf_r+0x38>
 1005ec8:	8140038f 	ldh	r5,14(r16)
 1005ecc:	8809883a 	mov	r4,r17
 1005ed0:	1009da00 	call	1009da0 <_isatty_r>
 1005ed4:	80c0030b 	ldhu	r3,12(r16)
 1005ed8:	103fde26 	beq	r2,zero,1005e54 <__smakebuf_r+0xac>
 1005edc:	18ffff0c 	andi	r3,r3,65532
 1005ee0:	18c00054 	ori	r3,r3,1
 1005ee4:	003fdb06 	br	1005e54 <__smakebuf_r+0xac>

01005ee8 <_malloc_r>:
 1005ee8:	defff604 	addi	sp,sp,-40
 1005eec:	dc400115 	stw	r17,4(sp)
 1005ef0:	2c4002c4 	addi	r17,r5,11
 1005ef4:	dc800215 	stw	r18,8(sp)
 1005ef8:	dfc00915 	stw	ra,36(sp)
 1005efc:	df000815 	stw	fp,32(sp)
 1005f00:	ddc00715 	stw	r23,28(sp)
 1005f04:	dd800615 	stw	r22,24(sp)
 1005f08:	dd400515 	stw	r21,20(sp)
 1005f0c:	dd000415 	stw	r20,16(sp)
 1005f10:	dcc00315 	stw	r19,12(sp)
 1005f14:	dc000015 	stw	r16,0(sp)
 1005f18:	888005e8 	cmpgeui	r2,r17,23
 1005f1c:	2025883a 	mov	r18,r4
 1005f20:	10001b1e 	bne	r2,zero,1005f90 <_malloc_r+0xa8>
 1005f24:	29400468 	cmpgeui	r5,r5,17
 1005f28:	2800821e 	bne	r5,zero,1006134 <_malloc_r+0x24c>
 1005f2c:	100e1bc0 	call	100e1bc <__malloc_lock>
 1005f30:	04400404 	movi	r17,16
 1005f34:	01c00084 	movi	r7,2
 1005f38:	00800604 	movi	r2,24
 1005f3c:	04c04074 	movhi	r19,257
 1005f40:	9ccbe704 	addi	r19,r19,12188
 1005f44:	9885883a 	add	r2,r19,r2
 1005f48:	14000117 	ldw	r16,4(r2)
 1005f4c:	10fffe04 	addi	r3,r2,-8
 1005f50:	80c08b26 	beq	r16,r3,1006180 <_malloc_r+0x298>
 1005f54:	80800117 	ldw	r2,4(r16)
 1005f58:	81000317 	ldw	r4,12(r16)
 1005f5c:	00ffff04 	movi	r3,-4
 1005f60:	10c4703a 	and	r2,r2,r3
 1005f64:	81400217 	ldw	r5,8(r16)
 1005f68:	8085883a 	add	r2,r16,r2
 1005f6c:	10c00117 	ldw	r3,4(r2)
 1005f70:	29000315 	stw	r4,12(r5)
 1005f74:	21400215 	stw	r5,8(r4)
 1005f78:	18c00054 	ori	r3,r3,1
 1005f7c:	10c00115 	stw	r3,4(r2)
 1005f80:	9009883a 	mov	r4,r18
 1005f84:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1005f88:	80800204 	addi	r2,r16,8
 1005f8c:	00006c06 	br	1006140 <_malloc_r+0x258>
 1005f90:	00bffe04 	movi	r2,-8
 1005f94:	88a2703a 	and	r17,r17,r2
 1005f98:	88006616 	blt	r17,zero,1006134 <_malloc_r+0x24c>
 1005f9c:	89406536 	bltu	r17,r5,1006134 <_malloc_r+0x24c>
 1005fa0:	100e1bc0 	call	100e1bc <__malloc_lock>
 1005fa4:	88807e28 	cmpgeui	r2,r17,504
 1005fa8:	10012226 	beq	r2,zero,1006434 <_malloc_r+0x54c>
 1005fac:	8804d27a 	srli	r2,r17,9
 1005fb0:	10006f26 	beq	r2,zero,1006170 <_malloc_r+0x288>
 1005fb4:	10c00168 	cmpgeui	r3,r2,5
 1005fb8:	1800fe1e 	bne	r3,zero,10063b4 <_malloc_r+0x4cc>
 1005fbc:	8804d1ba 	srli	r2,r17,6
 1005fc0:	11c00e44 	addi	r7,r2,57
 1005fc4:	380890fa 	slli	r4,r7,3
 1005fc8:	12000e04 	addi	r8,r2,56
 1005fcc:	04c04074 	movhi	r19,257
 1005fd0:	9ccbe704 	addi	r19,r19,12188
 1005fd4:	9909883a 	add	r4,r19,r4
 1005fd8:	24000117 	ldw	r16,4(r4)
 1005fdc:	213ffe04 	addi	r4,r4,-8
 1005fe0:	24000b26 	beq	r4,r16,1006010 <_malloc_r+0x128>
 1005fe4:	01bfff04 	movi	r6,-4
 1005fe8:	00000306 	br	1005ff8 <_malloc_r+0x110>
 1005fec:	1800d60e 	bge	r3,zero,1006348 <_malloc_r+0x460>
 1005ff0:	84000317 	ldw	r16,12(r16)
 1005ff4:	24000626 	beq	r4,r16,1006010 <_malloc_r+0x128>
 1005ff8:	80800117 	ldw	r2,4(r16)
 1005ffc:	1184703a 	and	r2,r2,r6
 1006000:	1447c83a 	sub	r3,r2,r17
 1006004:	19400408 	cmpgei	r5,r3,16
 1006008:	283ff826 	beq	r5,zero,1005fec <_malloc_r+0x104>
 100600c:	400f883a 	mov	r7,r8
 1006010:	9c000417 	ldw	r16,16(r19)
 1006014:	02404074 	movhi	r9,257
 1006018:	4a4be904 	addi	r9,r9,12196
 100601c:	82405f26 	beq	r16,r9,100619c <_malloc_r+0x2b4>
 1006020:	80c00117 	ldw	r3,4(r16)
 1006024:	00bfff04 	movi	r2,-4
 1006028:	1884703a 	and	r2,r3,r2
 100602c:	1447c83a 	sub	r3,r2,r17
 1006030:	19000410 	cmplti	r4,r3,16
 1006034:	20010a26 	beq	r4,zero,1006460 <_malloc_r+0x578>
 1006038:	9a400515 	stw	r9,20(r19)
 100603c:	9a400415 	stw	r9,16(r19)
 1006040:	1800ff0e 	bge	r3,zero,1006440 <_malloc_r+0x558>
 1006044:	10c08028 	cmpgeui	r3,r2,512
 1006048:	1800c11e 	bne	r3,zero,1006350 <_malloc_r+0x468>
 100604c:	1006d0fa 	srli	r3,r2,3
 1006050:	1008d17a 	srli	r4,r2,5
 1006054:	00800044 	movi	r2,1
 1006058:	18c00044 	addi	r3,r3,1
 100605c:	180690fa 	slli	r3,r3,3
 1006060:	99400117 	ldw	r5,4(r19)
 1006064:	1104983a 	sll	r2,r2,r4
 1006068:	98c7883a 	add	r3,r19,r3
 100606c:	19000017 	ldw	r4,0(r3)
 1006070:	1144b03a 	or	r2,r2,r5
 1006074:	197ffe04 	addi	r5,r3,-8
 1006078:	81400315 	stw	r5,12(r16)
 100607c:	81000215 	stw	r4,8(r16)
 1006080:	98800115 	stw	r2,4(r19)
 1006084:	1c000015 	stw	r16,0(r3)
 1006088:	24000315 	stw	r16,12(r4)
 100608c:	3807d0ba 	srai	r3,r7,2
 1006090:	01000044 	movi	r4,1
 1006094:	20c8983a 	sll	r4,r4,r3
 1006098:	11004536 	bltu	r2,r4,10061b0 <_malloc_r+0x2c8>
 100609c:	2086703a 	and	r3,r4,r2
 10060a0:	18000a1e 	bne	r3,zero,10060cc <_malloc_r+0x1e4>
 10060a4:	00ffff04 	movi	r3,-4
 10060a8:	2109883a 	add	r4,r4,r4
 10060ac:	38ce703a 	and	r7,r7,r3
 10060b0:	2086703a 	and	r3,r4,r2
 10060b4:	39c00104 	addi	r7,r7,4
 10060b8:	1800041e 	bne	r3,zero,10060cc <_malloc_r+0x1e4>
 10060bc:	2109883a 	add	r4,r4,r4
 10060c0:	2086703a 	and	r3,r4,r2
 10060c4:	39c00104 	addi	r7,r7,4
 10060c8:	183ffc26 	beq	r3,zero,10060bc <_malloc_r+0x1d4>
 10060cc:	02bfff04 	movi	r10,-4
 10060d0:	381690fa 	slli	r11,r7,3
 10060d4:	3819883a 	mov	r12,r7
 10060d8:	9ad7883a 	add	r11,r19,r11
 10060dc:	5811883a 	mov	r8,r11
 10060e0:	40800317 	ldw	r2,12(r8)
 10060e4:	4080bc26 	beq	r8,r2,10063d8 <_malloc_r+0x4f0>
 10060e8:	10c00117 	ldw	r3,4(r2)
 10060ec:	1021883a 	mov	r16,r2
 10060f0:	10800317 	ldw	r2,12(r2)
 10060f4:	1a86703a 	and	r3,r3,r10
 10060f8:	1c4bc83a 	sub	r5,r3,r17
 10060fc:	29800410 	cmplti	r6,r5,16
 1006100:	3000ba26 	beq	r6,zero,10063ec <_malloc_r+0x504>
 1006104:	283ff716 	blt	r5,zero,10060e4 <_malloc_r+0x1fc>
 1006108:	80c7883a 	add	r3,r16,r3
 100610c:	19400117 	ldw	r5,4(r3)
 1006110:	81800217 	ldw	r6,8(r16)
 1006114:	9009883a 	mov	r4,r18
 1006118:	29400054 	ori	r5,r5,1
 100611c:	19400115 	stw	r5,4(r3)
 1006120:	30800315 	stw	r2,12(r6)
 1006124:	11800215 	stw	r6,8(r2)
 1006128:	100e1e00 	call	100e1e0 <__malloc_unlock>
 100612c:	80800204 	addi	r2,r16,8
 1006130:	00000306 	br	1006140 <_malloc_r+0x258>
 1006134:	00800304 	movi	r2,12
 1006138:	90800015 	stw	r2,0(r18)
 100613c:	0005883a 	mov	r2,zero
 1006140:	dfc00917 	ldw	ra,36(sp)
 1006144:	df000817 	ldw	fp,32(sp)
 1006148:	ddc00717 	ldw	r23,28(sp)
 100614c:	dd800617 	ldw	r22,24(sp)
 1006150:	dd400517 	ldw	r21,20(sp)
 1006154:	dd000417 	ldw	r20,16(sp)
 1006158:	dcc00317 	ldw	r19,12(sp)
 100615c:	dc800217 	ldw	r18,8(sp)
 1006160:	dc400117 	ldw	r17,4(sp)
 1006164:	dc000017 	ldw	r16,0(sp)
 1006168:	dec00a04 	addi	sp,sp,40
 100616c:	f800283a 	ret
 1006170:	01008004 	movi	r4,512
 1006174:	01c01004 	movi	r7,64
 1006178:	02000fc4 	movi	r8,63
 100617c:	003f9306 	br	1005fcc <_malloc_r+0xe4>
 1006180:	14000317 	ldw	r16,12(r2)
 1006184:	39c00084 	addi	r7,r7,2
 1006188:	143f721e 	bne	r2,r16,1005f54 <_malloc_r+0x6c>
 100618c:	9c000417 	ldw	r16,16(r19)
 1006190:	02404074 	movhi	r9,257
 1006194:	4a4be904 	addi	r9,r9,12196
 1006198:	827fa11e 	bne	r16,r9,1006020 <_malloc_r+0x138>
 100619c:	3807d0ba 	srai	r3,r7,2
 10061a0:	01000044 	movi	r4,1
 10061a4:	98800117 	ldw	r2,4(r19)
 10061a8:	20c8983a 	sll	r4,r4,r3
 10061ac:	113fbb2e 	bgeu	r2,r4,100609c <_malloc_r+0x1b4>
 10061b0:	9c000217 	ldw	r16,8(r19)
 10061b4:	00bfff04 	movi	r2,-4
 10061b8:	85400117 	ldw	r21,4(r16)
 10061bc:	a8ac703a 	and	r22,r21,r2
 10061c0:	b4400336 	bltu	r22,r17,10061d0 <_malloc_r+0x2e8>
 10061c4:	b445c83a 	sub	r2,r22,r17
 10061c8:	10c00408 	cmpgei	r3,r2,16
 10061cc:	1800541e 	bne	r3,zero,1006320 <_malloc_r+0x438>
 10061d0:	00804074 	movhi	r2,257
 10061d4:	1091d617 	ldw	r2,18264(r2)
 10061d8:	00c04074 	movhi	r3,257
 10061dc:	1d58ee17 	ldw	r21,25528(r3)
 10061e0:	10bfffd8 	cmpnei	r2,r2,-1
 10061e4:	85b9883a 	add	fp,r16,r22
 10061e8:	8d6b883a 	add	r21,r17,r21
 10061ec:	1000d626 	beq	r2,zero,1006548 <_malloc_r+0x660>
 10061f0:	ad4403c4 	addi	r21,r21,4111
 10061f4:	00bc0004 	movi	r2,-4096
 10061f8:	a8aa703a 	and	r21,r21,r2
 10061fc:	a80b883a 	mov	r5,r21
 1006200:	9009883a 	mov	r4,r18
 1006204:	10081540 	call	1008154 <_sbrk_r>
 1006208:	102f883a 	mov	r23,r2
 100620c:	10bfffd8 	cmpnei	r2,r2,-1
 1006210:	1000a826 	beq	r2,zero,10064b4 <_malloc_r+0x5cc>
 1006214:	bf00a636 	bltu	r23,fp,10064b0 <_malloc_r+0x5c8>
 1006218:	00804074 	movhi	r2,257
 100621c:	1518f717 	ldw	r20,25564(r2)
 1006220:	ad29883a 	add	r20,r21,r20
 1006224:	1518f715 	stw	r20,25564(r2)
 1006228:	a007883a 	mov	r3,r20
 100622c:	e5c0ec26 	beq	fp,r23,10065e0 <_malloc_r+0x6f8>
 1006230:	00804074 	movhi	r2,257
 1006234:	1091d617 	ldw	r2,18264(r2)
 1006238:	10bfffd8 	cmpnei	r2,r2,-1
 100623c:	1000ef26 	beq	r2,zero,10065fc <_malloc_r+0x714>
 1006240:	bf39c83a 	sub	fp,r23,fp
 1006244:	e0c7883a 	add	r3,fp,r3
 1006248:	00804074 	movhi	r2,257
 100624c:	10d8f715 	stw	r3,25564(r2)
 1006250:	bf0001cc 	andi	fp,r23,7
 1006254:	e000c526 	beq	fp,zero,100656c <_malloc_r+0x684>
 1006258:	bf2fc83a 	sub	r23,r23,fp
 100625c:	bdc00204 	addi	r23,r23,8
 1006260:	05040204 	movi	r20,4104
 1006264:	a729c83a 	sub	r20,r20,fp
 1006268:	bd6b883a 	add	r21,r23,r21
 100626c:	a569c83a 	sub	r20,r20,r21
 1006270:	a503ffcc 	andi	r20,r20,4095
 1006274:	a00b883a 	mov	r5,r20
 1006278:	9009883a 	mov	r4,r18
 100627c:	10081540 	call	1008154 <_sbrk_r>
 1006280:	10ffffe0 	cmpeqi	r3,r2,-1
 1006284:	1800f31e 	bne	r3,zero,1006654 <_malloc_r+0x76c>
 1006288:	15c5c83a 	sub	r2,r2,r23
 100628c:	152b883a 	add	r21,r2,r20
 1006290:	00804074 	movhi	r2,257
 1006294:	1158f717 	ldw	r5,25564(r2)
 1006298:	9dc00215 	stw	r23,8(r19)
 100629c:	ad400054 	ori	r21,r21,1
 10062a0:	a169883a 	add	r20,r20,r5
 10062a4:	1518f715 	stw	r20,25564(r2)
 10062a8:	bd400115 	stw	r21,4(r23)
 10062ac:	84c0d626 	beq	r16,r19,1006608 <_malloc_r+0x720>
 10062b0:	b0800428 	cmpgeui	r2,r22,16
 10062b4:	1000d626 	beq	r2,zero,1006610 <_malloc_r+0x728>
 10062b8:	80c00117 	ldw	r3,4(r16)
 10062bc:	013ffe04 	movi	r4,-8
 10062c0:	b0bffd04 	addi	r2,r22,-12
 10062c4:	1104703a 	and	r2,r2,r4
 10062c8:	18c0004c 	andi	r3,r3,1
 10062cc:	1886b03a 	or	r3,r3,r2
 10062d0:	80c00115 	stw	r3,4(r16)
 10062d4:	01000144 	movi	r4,5
 10062d8:	8087883a 	add	r3,r16,r2
 10062dc:	19000115 	stw	r4,4(r3)
 10062e0:	19000215 	stw	r4,8(r3)
 10062e4:	10800428 	cmpgeui	r2,r2,16
 10062e8:	1000df1e 	bne	r2,zero,1006668 <_malloc_r+0x780>
 10062ec:	bd400117 	ldw	r21,4(r23)
 10062f0:	b821883a 	mov	r16,r23
 10062f4:	00804074 	movhi	r2,257
 10062f8:	1098ed17 	ldw	r2,25524(r2)
 10062fc:	1500022e 	bgeu	r2,r20,1006308 <_malloc_r+0x420>
 1006300:	00804074 	movhi	r2,257
 1006304:	1518ed15 	stw	r20,25524(r2)
 1006308:	00804074 	movhi	r2,257
 100630c:	1098ec17 	ldw	r2,25520(r2)
 1006310:	15006a2e 	bgeu	r2,r20,10064bc <_malloc_r+0x5d4>
 1006314:	00804074 	movhi	r2,257
 1006318:	1518ec15 	stw	r20,25520(r2)
 100631c:	00006706 	br	10064bc <_malloc_r+0x5d4>
 1006320:	88c00054 	ori	r3,r17,1
 1006324:	80c00115 	stw	r3,4(r16)
 1006328:	8463883a 	add	r17,r16,r17
 100632c:	10800054 	ori	r2,r2,1
 1006330:	9c400215 	stw	r17,8(r19)
 1006334:	88800115 	stw	r2,4(r17)
 1006338:	9009883a 	mov	r4,r18
 100633c:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1006340:	80800204 	addi	r2,r16,8
 1006344:	003f7e06 	br	1006140 <_malloc_r+0x258>
 1006348:	81000317 	ldw	r4,12(r16)
 100634c:	003f0506 	br	1005f64 <_malloc_r+0x7c>
 1006350:	1006d27a 	srli	r3,r2,9
 1006354:	19000168 	cmpgeui	r4,r3,5
 1006358:	20005026 	beq	r4,zero,100649c <_malloc_r+0x5b4>
 100635c:	19000568 	cmpgeui	r4,r3,21
 1006360:	20008c1e 	bne	r4,zero,1006594 <_malloc_r+0x6ac>
 1006364:	19401704 	addi	r5,r3,92
 1006368:	280a90fa 	slli	r5,r5,3
 100636c:	190016c4 	addi	r4,r3,91
 1006370:	994b883a 	add	r5,r19,r5
 1006374:	28c00017 	ldw	r3,0(r5)
 1006378:	297ffe04 	addi	r5,r5,-8
 100637c:	28c07426 	beq	r5,r3,1006550 <_malloc_r+0x668>
 1006380:	01bfff04 	movi	r6,-4
 1006384:	19000117 	ldw	r4,4(r3)
 1006388:	2188703a 	and	r4,r4,r6
 100638c:	1100022e 	bgeu	r2,r4,1006398 <_malloc_r+0x4b0>
 1006390:	18c00217 	ldw	r3,8(r3)
 1006394:	28fffb1e 	bne	r5,r3,1006384 <_malloc_r+0x49c>
 1006398:	19400317 	ldw	r5,12(r3)
 100639c:	98800117 	ldw	r2,4(r19)
 10063a0:	81400315 	stw	r5,12(r16)
 10063a4:	80c00215 	stw	r3,8(r16)
 10063a8:	2c000215 	stw	r16,8(r5)
 10063ac:	1c000315 	stw	r16,12(r3)
 10063b0:	003f3606 	br	100608c <_malloc_r+0x1a4>
 10063b4:	10c00568 	cmpgeui	r3,r2,21
 10063b8:	18004a26 	beq	r3,zero,10064e4 <_malloc_r+0x5fc>
 10063bc:	10c01568 	cmpgeui	r3,r2,85
 10063c0:	18007b1e 	bne	r3,zero,10065b0 <_malloc_r+0x6c8>
 10063c4:	8804d33a 	srli	r2,r17,12
 10063c8:	11c01bc4 	addi	r7,r2,111
 10063cc:	380890fa 	slli	r4,r7,3
 10063d0:	12001b84 	addi	r8,r2,110
 10063d4:	003efd06 	br	1005fcc <_malloc_r+0xe4>
 10063d8:	63000044 	addi	r12,r12,1
 10063dc:	608000cc 	andi	r2,r12,3
 10063e0:	42000204 	addi	r8,r8,8
 10063e4:	103f3e1e 	bne	r2,zero,10060e0 <_malloc_r+0x1f8>
 10063e8:	00004506 	br	1006500 <_malloc_r+0x618>
 10063ec:	81000217 	ldw	r4,8(r16)
 10063f0:	89800054 	ori	r6,r17,1
 10063f4:	81800115 	stw	r6,4(r16)
 10063f8:	20800315 	stw	r2,12(r4)
 10063fc:	11000215 	stw	r4,8(r2)
 1006400:	8463883a 	add	r17,r16,r17
 1006404:	9c400515 	stw	r17,20(r19)
 1006408:	9c400415 	stw	r17,16(r19)
 100640c:	28800054 	ori	r2,r5,1
 1006410:	88800115 	stw	r2,4(r17)
 1006414:	8a400315 	stw	r9,12(r17)
 1006418:	8a400215 	stw	r9,8(r17)
 100641c:	80c7883a 	add	r3,r16,r3
 1006420:	19400015 	stw	r5,0(r3)
 1006424:	9009883a 	mov	r4,r18
 1006428:	100e1e00 	call	100e1e0 <__malloc_unlock>
 100642c:	80800204 	addi	r2,r16,8
 1006430:	003f4306 	br	1006140 <_malloc_r+0x258>
 1006434:	880ed0fa 	srli	r7,r17,3
 1006438:	88800204 	addi	r2,r17,8
 100643c:	003ebf06 	br	1005f3c <_malloc_r+0x54>
 1006440:	8085883a 	add	r2,r16,r2
 1006444:	10c00117 	ldw	r3,4(r2)
 1006448:	9009883a 	mov	r4,r18
 100644c:	18c00054 	ori	r3,r3,1
 1006450:	10c00115 	stw	r3,4(r2)
 1006454:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1006458:	80800204 	addi	r2,r16,8
 100645c:	003f3806 	br	1006140 <_malloc_r+0x258>
 1006460:	89000054 	ori	r4,r17,1
 1006464:	81000115 	stw	r4,4(r16)
 1006468:	8463883a 	add	r17,r16,r17
 100646c:	9c400515 	stw	r17,20(r19)
 1006470:	9c400415 	stw	r17,16(r19)
 1006474:	19000054 	ori	r4,r3,1
 1006478:	89000115 	stw	r4,4(r17)
 100647c:	8085883a 	add	r2,r16,r2
 1006480:	8a400315 	stw	r9,12(r17)
 1006484:	8a400215 	stw	r9,8(r17)
 1006488:	10c00015 	stw	r3,0(r2)
 100648c:	9009883a 	mov	r4,r18
 1006490:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1006494:	80800204 	addi	r2,r16,8
 1006498:	003f2906 	br	1006140 <_malloc_r+0x258>
 100649c:	1006d1ba 	srli	r3,r2,6
 10064a0:	19400e44 	addi	r5,r3,57
 10064a4:	280a90fa 	slli	r5,r5,3
 10064a8:	19000e04 	addi	r4,r3,56
 10064ac:	003fb006 	br	1006370 <_malloc_r+0x488>
 10064b0:	84c04626 	beq	r16,r19,10065cc <_malloc_r+0x6e4>
 10064b4:	9c000217 	ldw	r16,8(r19)
 10064b8:	85400117 	ldw	r21,4(r16)
 10064bc:	00bfff04 	movi	r2,-4
 10064c0:	a8aa703a 	and	r21,r21,r2
 10064c4:	ac45c83a 	sub	r2,r21,r17
 10064c8:	ac400236 	bltu	r21,r17,10064d4 <_malloc_r+0x5ec>
 10064cc:	10c00408 	cmpgei	r3,r2,16
 10064d0:	183f931e 	bne	r3,zero,1006320 <_malloc_r+0x438>
 10064d4:	9009883a 	mov	r4,r18
 10064d8:	100e1e00 	call	100e1e0 <__malloc_unlock>
 10064dc:	0005883a 	mov	r2,zero
 10064e0:	003f1706 	br	1006140 <_malloc_r+0x258>
 10064e4:	11c01704 	addi	r7,r2,92
 10064e8:	380890fa 	slli	r4,r7,3
 10064ec:	120016c4 	addi	r8,r2,91
 10064f0:	003eb606 	br	1005fcc <_malloc_r+0xe4>
 10064f4:	58800217 	ldw	r2,8(r11)
 10064f8:	39ffffc4 	addi	r7,r7,-1
 10064fc:	12c0701e 	bne	r2,r11,10066c0 <_malloc_r+0x7d8>
 1006500:	388000cc 	andi	r2,r7,3
 1006504:	5afffe04 	addi	r11,r11,-8
 1006508:	103ffa1e 	bne	r2,zero,10064f4 <_malloc_r+0x60c>
 100650c:	98c00117 	ldw	r3,4(r19)
 1006510:	0104303a 	nor	r2,zero,r4
 1006514:	10c4703a 	and	r2,r2,r3
 1006518:	98800115 	stw	r2,4(r19)
 100651c:	2109883a 	add	r4,r4,r4
 1006520:	113f2336 	bltu	r2,r4,10061b0 <_malloc_r+0x2c8>
 1006524:	203f2226 	beq	r4,zero,10061b0 <_malloc_r+0x2c8>
 1006528:	2086703a 	and	r3,r4,r2
 100652c:	1800041e 	bne	r3,zero,1006540 <_malloc_r+0x658>
 1006530:	2109883a 	add	r4,r4,r4
 1006534:	2086703a 	and	r3,r4,r2
 1006538:	63000104 	addi	r12,r12,4
 100653c:	183ffc26 	beq	r3,zero,1006530 <_malloc_r+0x648>
 1006540:	600f883a 	mov	r7,r12
 1006544:	003ee206 	br	10060d0 <_malloc_r+0x1e8>
 1006548:	ad400404 	addi	r21,r21,16
 100654c:	003f2b06 	br	10061fc <_malloc_r+0x314>
 1006550:	2009d0ba 	srai	r4,r4,2
 1006554:	00800044 	movi	r2,1
 1006558:	99800117 	ldw	r6,4(r19)
 100655c:	1104983a 	sll	r2,r2,r4
 1006560:	1184b03a 	or	r2,r2,r6
 1006564:	98800115 	stw	r2,4(r19)
 1006568:	003f8d06 	br	10063a0 <_malloc_r+0x4b8>
 100656c:	bd69883a 	add	r20,r23,r21
 1006570:	0529c83a 	sub	r20,zero,r20
 1006574:	a503ffcc 	andi	r20,r20,4095
 1006578:	a00b883a 	mov	r5,r20
 100657c:	9009883a 	mov	r4,r18
 1006580:	10081540 	call	1008154 <_sbrk_r>
 1006584:	10ffffe0 	cmpeqi	r3,r2,-1
 1006588:	183f3f26 	beq	r3,zero,1006288 <_malloc_r+0x3a0>
 100658c:	0029883a 	mov	r20,zero
 1006590:	003f3f06 	br	1006290 <_malloc_r+0x3a8>
 1006594:	19001568 	cmpgeui	r4,r3,85
 1006598:	2000201e 	bne	r4,zero,100661c <_malloc_r+0x734>
 100659c:	1006d33a 	srli	r3,r2,12
 10065a0:	19401bc4 	addi	r5,r3,111
 10065a4:	280a90fa 	slli	r5,r5,3
 10065a8:	19001b84 	addi	r4,r3,110
 10065ac:	003f7006 	br	1006370 <_malloc_r+0x488>
 10065b0:	10c05568 	cmpgeui	r3,r2,341
 10065b4:	1800201e 	bne	r3,zero,1006638 <_malloc_r+0x750>
 10065b8:	8804d3fa 	srli	r2,r17,15
 10065bc:	11c01e04 	addi	r7,r2,120
 10065c0:	380890fa 	slli	r4,r7,3
 10065c4:	12001dc4 	addi	r8,r2,119
 10065c8:	003e8006 	br	1005fcc <_malloc_r+0xe4>
 10065cc:	00804074 	movhi	r2,257
 10065d0:	10d8f717 	ldw	r3,25564(r2)
 10065d4:	a8c7883a 	add	r3,r21,r3
 10065d8:	10d8f715 	stw	r3,25564(r2)
 10065dc:	003f1406 	br	1006230 <_malloc_r+0x348>
 10065e0:	e083ffcc 	andi	r2,fp,4095
 10065e4:	103f121e 	bne	r2,zero,1006230 <_malloc_r+0x348>
 10065e8:	9c000217 	ldw	r16,8(r19)
 10065ec:	b56b883a 	add	r21,r22,r21
 10065f0:	ad400054 	ori	r21,r21,1
 10065f4:	85400115 	stw	r21,4(r16)
 10065f8:	003f3e06 	br	10062f4 <_malloc_r+0x40c>
 10065fc:	00804074 	movhi	r2,257
 1006600:	15d1d615 	stw	r23,18264(r2)
 1006604:	003f1206 	br	1006250 <_malloc_r+0x368>
 1006608:	b821883a 	mov	r16,r23
 100660c:	003f3906 	br	10062f4 <_malloc_r+0x40c>
 1006610:	00800044 	movi	r2,1
 1006614:	b8800115 	stw	r2,4(r23)
 1006618:	003fae06 	br	10064d4 <_malloc_r+0x5ec>
 100661c:	19005568 	cmpgeui	r4,r3,341
 1006620:	2000191e 	bne	r4,zero,1006688 <_malloc_r+0x7a0>
 1006624:	1006d3fa 	srli	r3,r2,15
 1006628:	19401e04 	addi	r5,r3,120
 100662c:	280a90fa 	slli	r5,r5,3
 1006630:	19001dc4 	addi	r4,r3,119
 1006634:	003f4e06 	br	1006370 <_malloc_r+0x488>
 1006638:	10815568 	cmpgeui	r2,r2,1365
 100663c:	1000191e 	bne	r2,zero,10066a4 <_malloc_r+0x7bc>
 1006640:	8804d4ba 	srli	r2,r17,18
 1006644:	11c01f44 	addi	r7,r2,125
 1006648:	380890fa 	slli	r4,r7,3
 100664c:	12001f04 	addi	r8,r2,124
 1006650:	003e5e06 	br	1005fcc <_malloc_r+0xe4>
 1006654:	e73ffe04 	addi	fp,fp,-8
 1006658:	af2b883a 	add	r21,r21,fp
 100665c:	adebc83a 	sub	r21,r21,r23
 1006660:	0029883a 	mov	r20,zero
 1006664:	003f0a06 	br	1006290 <_malloc_r+0x3a8>
 1006668:	81400204 	addi	r5,r16,8
 100666c:	9009883a 	mov	r4,r18
 1006670:	10053e80 	call	10053e8 <_free_r>
 1006674:	9c000217 	ldw	r16,8(r19)
 1006678:	00804074 	movhi	r2,257
 100667c:	1518f717 	ldw	r20,25564(r2)
 1006680:	85400117 	ldw	r21,4(r16)
 1006684:	003f1b06 	br	10062f4 <_malloc_r+0x40c>
 1006688:	18c15568 	cmpgeui	r3,r3,1365
 100668c:	1800091e 	bne	r3,zero,10066b4 <_malloc_r+0x7cc>
 1006690:	1006d4ba 	srli	r3,r2,18
 1006694:	19401f44 	addi	r5,r3,125
 1006698:	280a90fa 	slli	r5,r5,3
 100669c:	19001f04 	addi	r4,r3,124
 10066a0:	003f3306 	br	1006370 <_malloc_r+0x488>
 10066a4:	0100fe04 	movi	r4,1016
 10066a8:	01c01fc4 	movi	r7,127
 10066ac:	02001f84 	movi	r8,126
 10066b0:	003e4606 	br	1005fcc <_malloc_r+0xe4>
 10066b4:	0140fe04 	movi	r5,1016
 10066b8:	01001f84 	movi	r4,126
 10066bc:	003f2c06 	br	1006370 <_malloc_r+0x488>
 10066c0:	98800117 	ldw	r2,4(r19)
 10066c4:	003f9506 	br	100651c <_malloc_r+0x634>

010066c8 <memchr>:
 10066c8:	208000cc 	andi	r2,r4,3
 10066cc:	280f883a 	mov	r7,r5
 10066d0:	10000e26 	beq	r2,zero,100670c <memchr+0x44>
 10066d4:	30bfffc4 	addi	r2,r6,-1
 10066d8:	30001726 	beq	r6,zero,1006738 <memchr+0x70>
 10066dc:	29803fcc 	andi	r6,r5,255
 10066e0:	00000606 	br	10066fc <memchr+0x34>
 10066e4:	21000044 	addi	r4,r4,1
 10066e8:	20c000cc 	andi	r3,r4,3
 10066ec:	18000826 	beq	r3,zero,1006710 <memchr+0x48>
 10066f0:	10bfffc4 	addi	r2,r2,-1
 10066f4:	10ffffe0 	cmpeqi	r3,r2,-1
 10066f8:	18000f1e 	bne	r3,zero,1006738 <memchr+0x70>
 10066fc:	20c00003 	ldbu	r3,0(r4)
 1006700:	19bff81e 	bne	r3,r6,10066e4 <memchr+0x1c>
 1006704:	2005883a 	mov	r2,r4
 1006708:	f800283a 	ret
 100670c:	3005883a 	mov	r2,r6
 1006710:	10c00128 	cmpgeui	r3,r2,4
 1006714:	18000a1e 	bne	r3,zero,1006740 <memchr+0x78>
 1006718:	10001f26 	beq	r2,zero,1006798 <memchr+0xd0>
 100671c:	2087883a 	add	r3,r4,r2
 1006720:	39803fcc 	andi	r6,r7,255
 1006724:	2005883a 	mov	r2,r4
 1006728:	11000003 	ldbu	r4,0(r2)
 100672c:	21bff626 	beq	r4,r6,1006708 <memchr+0x40>
 1006730:	10800044 	addi	r2,r2,1
 1006734:	18bffc1e 	bne	r3,r2,1006728 <memchr+0x60>
 1006738:	0005883a 	mov	r2,zero
 100673c:	f800283a 	ret
 1006740:	2810923a 	slli	r8,r5,8
 1006744:	29403fcc 	andi	r5,r5,255
 1006748:	027fbff4 	movhi	r9,65279
 100674c:	423fffcc 	andi	r8,r8,65535
 1006750:	414ab03a 	or	r5,r8,r5
 1006754:	2810943a 	slli	r8,r5,16
 1006758:	01a02074 	movhi	r6,32897
 100675c:	4a7fbfc4 	addi	r9,r9,-257
 1006760:	4150b03a 	or	r8,r8,r5
 1006764:	31a02004 	addi	r6,r6,-32640
 1006768:	20c00017 	ldw	r3,0(r4)
 100676c:	40c6f03a 	xor	r3,r8,r3
 1006770:	1a4b883a 	add	r5,r3,r9
 1006774:	00c6303a 	nor	r3,zero,r3
 1006778:	28c6703a 	and	r3,r5,r3
 100677c:	1986703a 	and	r3,r3,r6
 1006780:	183fe61e 	bne	r3,zero,100671c <memchr+0x54>
 1006784:	10bfff04 	addi	r2,r2,-4
 1006788:	10c00128 	cmpgeui	r3,r2,4
 100678c:	21000104 	addi	r4,r4,4
 1006790:	183ff51e 	bne	r3,zero,1006768 <memchr+0xa0>
 1006794:	003fe006 	br	1006718 <memchr+0x50>
 1006798:	f800283a 	ret

0100679c <memcpy>:
 100679c:	30c00430 	cmpltui	r3,r6,16
 10067a0:	2005883a 	mov	r2,r4
 10067a4:	18002d1e 	bne	r3,zero,100685c <memcpy+0xc0>
 10067a8:	2906b03a 	or	r3,r5,r4
 10067ac:	18c000cc 	andi	r3,r3,3
 10067b0:	1800351e 	bne	r3,zero,1006888 <memcpy+0xec>
 10067b4:	32fffc04 	addi	r11,r6,-16
 10067b8:	5816d13a 	srli	r11,r11,4
 10067bc:	280f883a 	mov	r7,r5
 10067c0:	2007883a 	mov	r3,r4
 10067c4:	5ac00044 	addi	r11,r11,1
 10067c8:	5816913a 	slli	r11,r11,4
 10067cc:	22d5883a 	add	r10,r4,r11
 10067d0:	39000117 	ldw	r4,4(r7)
 10067d4:	3a400017 	ldw	r9,0(r7)
 10067d8:	3a000217 	ldw	r8,8(r7)
 10067dc:	19000115 	stw	r4,4(r3)
 10067e0:	39000317 	ldw	r4,12(r7)
 10067e4:	1a400015 	stw	r9,0(r3)
 10067e8:	1a000215 	stw	r8,8(r3)
 10067ec:	19000315 	stw	r4,12(r3)
 10067f0:	18c00404 	addi	r3,r3,16
 10067f4:	39c00404 	addi	r7,r7,16
 10067f8:	50fff51e 	bne	r10,r3,10067d0 <memcpy+0x34>
 10067fc:	3100030c 	andi	r4,r6,12
 1006800:	2acb883a 	add	r5,r5,r11
 1006804:	320003cc 	andi	r8,r6,15
 1006808:	20002226 	beq	r4,zero,1006894 <memcpy+0xf8>
 100680c:	280f883a 	mov	r7,r5
 1006810:	1813883a 	mov	r9,r3
 1006814:	39c00104 	addi	r7,r7,4
 1006818:	3abfff17 	ldw	r10,-4(r7)
 100681c:	41c9c83a 	sub	r4,r8,r7
 1006820:	2909883a 	add	r4,r5,r4
 1006824:	4a800015 	stw	r10,0(r9)
 1006828:	21000128 	cmpgeui	r4,r4,4
 100682c:	4a400104 	addi	r9,r9,4
 1006830:	203ff81e 	bne	r4,zero,1006814 <memcpy+0x78>
 1006834:	413fff04 	addi	r4,r8,-4
 1006838:	2008d0ba 	srli	r4,r4,2
 100683c:	318000cc 	andi	r6,r6,3
 1006840:	31ffffc4 	addi	r7,r6,-1
 1006844:	21000044 	addi	r4,r4,1
 1006848:	200890ba 	slli	r4,r4,2
 100684c:	1907883a 	add	r3,r3,r4
 1006850:	290b883a 	add	r5,r5,r4
 1006854:	3000041e 	bne	r6,zero,1006868 <memcpy+0xcc>
 1006858:	f800283a 	ret
 100685c:	2007883a 	mov	r3,r4
 1006860:	31ffffc4 	addi	r7,r6,-1
 1006864:	303ffc26 	beq	r6,zero,1006858 <memcpy+0xbc>
 1006868:	39c00044 	addi	r7,r7,1
 100686c:	19cf883a 	add	r7,r3,r7
 1006870:	29800003 	ldbu	r6,0(r5)
 1006874:	18c00044 	addi	r3,r3,1
 1006878:	29400044 	addi	r5,r5,1
 100687c:	19bfffc5 	stb	r6,-1(r3)
 1006880:	38fffb1e 	bne	r7,r3,1006870 <memcpy+0xd4>
 1006884:	f800283a 	ret
 1006888:	31ffffc4 	addi	r7,r6,-1
 100688c:	2007883a 	mov	r3,r4
 1006890:	003ff506 	br	1006868 <memcpy+0xcc>
 1006894:	400d883a 	mov	r6,r8
 1006898:	003ff106 	br	1006860 <memcpy+0xc4>

0100689c <memmove>:
 100689c:	2005883a 	mov	r2,r4
 10068a0:	29000a2e 	bgeu	r5,r4,10068cc <memmove+0x30>
 10068a4:	2989883a 	add	r4,r5,r6
 10068a8:	1100082e 	bgeu	r2,r4,10068cc <memmove+0x30>
 10068ac:	1187883a 	add	r3,r2,r6
 10068b0:	30003e26 	beq	r6,zero,10069ac <memmove+0x110>
 10068b4:	217fffc3 	ldbu	r5,-1(r4)
 10068b8:	18ffffc4 	addi	r3,r3,-1
 10068bc:	213fffc4 	addi	r4,r4,-1
 10068c0:	19400005 	stb	r5,0(r3)
 10068c4:	10fffb1e 	bne	r2,r3,10068b4 <memmove+0x18>
 10068c8:	f800283a 	ret
 10068cc:	30c00430 	cmpltui	r3,r6,16
 10068d0:	18000b26 	beq	r3,zero,1006900 <memmove+0x64>
 10068d4:	1007883a 	mov	r3,r2
 10068d8:	31ffffc4 	addi	r7,r6,-1
 10068dc:	30003726 	beq	r6,zero,10069bc <memmove+0x120>
 10068e0:	39c00044 	addi	r7,r7,1
 10068e4:	29cf883a 	add	r7,r5,r7
 10068e8:	29800003 	ldbu	r6,0(r5)
 10068ec:	29400044 	addi	r5,r5,1
 10068f0:	18c00044 	addi	r3,r3,1
 10068f4:	19bfffc5 	stb	r6,-1(r3)
 10068f8:	29fffb1e 	bne	r5,r7,10068e8 <memmove+0x4c>
 10068fc:	f800283a 	ret
 1006900:	2886b03a 	or	r3,r5,r2
 1006904:	18c000cc 	andi	r3,r3,3
 1006908:	1800291e 	bne	r3,zero,10069b0 <memmove+0x114>
 100690c:	327ffc04 	addi	r9,r6,-16
 1006910:	4812d13a 	srli	r9,r9,4
 1006914:	280f883a 	mov	r7,r5
 1006918:	1007883a 	mov	r3,r2
 100691c:	4a400044 	addi	r9,r9,1
 1006920:	4812913a 	slli	r9,r9,4
 1006924:	1251883a 	add	r8,r2,r9
 1006928:	39000017 	ldw	r4,0(r7)
 100692c:	39c00404 	addi	r7,r7,16
 1006930:	18c00404 	addi	r3,r3,16
 1006934:	193ffc15 	stw	r4,-16(r3)
 1006938:	393ffd17 	ldw	r4,-12(r7)
 100693c:	193ffd15 	stw	r4,-12(r3)
 1006940:	393ffe17 	ldw	r4,-8(r7)
 1006944:	193ffe15 	stw	r4,-8(r3)
 1006948:	393fff17 	ldw	r4,-4(r7)
 100694c:	193fff15 	stw	r4,-4(r3)
 1006950:	40fff51e 	bne	r8,r3,1006928 <memmove+0x8c>
 1006954:	3100030c 	andi	r4,r6,12
 1006958:	2a4b883a 	add	r5,r5,r9
 100695c:	320003cc 	andi	r8,r6,15
 1006960:	20001726 	beq	r4,zero,10069c0 <memmove+0x124>
 1006964:	2813883a 	mov	r9,r5
 1006968:	180f883a 	mov	r7,r3
 100696c:	4a800017 	ldw	r10,0(r9)
 1006970:	39c00104 	addi	r7,r7,4
 1006974:	41c9c83a 	sub	r4,r8,r7
 1006978:	1909883a 	add	r4,r3,r4
 100697c:	21000128 	cmpgeui	r4,r4,4
 1006980:	3abfff15 	stw	r10,-4(r7)
 1006984:	4a400104 	addi	r9,r9,4
 1006988:	203ff81e 	bne	r4,zero,100696c <memmove+0xd0>
 100698c:	413fff04 	addi	r4,r8,-4
 1006990:	2008d0ba 	srli	r4,r4,2
 1006994:	318000cc 	andi	r6,r6,3
 1006998:	21000044 	addi	r4,r4,1
 100699c:	200890ba 	slli	r4,r4,2
 10069a0:	1907883a 	add	r3,r3,r4
 10069a4:	290b883a 	add	r5,r5,r4
 10069a8:	003fcb06 	br	10068d8 <memmove+0x3c>
 10069ac:	f800283a 	ret
 10069b0:	31ffffc4 	addi	r7,r6,-1
 10069b4:	1007883a 	mov	r3,r2
 10069b8:	003fc906 	br	10068e0 <memmove+0x44>
 10069bc:	f800283a 	ret
 10069c0:	400d883a 	mov	r6,r8
 10069c4:	003fc406 	br	10068d8 <memmove+0x3c>

010069c8 <memset>:
 10069c8:	20c000cc 	andi	r3,r4,3
 10069cc:	2005883a 	mov	r2,r4
 10069d0:	18003626 	beq	r3,zero,1006aac <memset+0xe4>
 10069d4:	31ffffc4 	addi	r7,r6,-1
 10069d8:	30003326 	beq	r6,zero,1006aa8 <memset+0xe0>
 10069dc:	2811883a 	mov	r8,r5
 10069e0:	2007883a 	mov	r3,r4
 10069e4:	00000306 	br	10069f4 <memset+0x2c>
 10069e8:	39ffffc4 	addi	r7,r7,-1
 10069ec:	39bfffe0 	cmpeqi	r6,r7,-1
 10069f0:	30002d1e 	bne	r6,zero,1006aa8 <memset+0xe0>
 10069f4:	18c00044 	addi	r3,r3,1
 10069f8:	198000cc 	andi	r6,r3,3
 10069fc:	1a3fffc5 	stb	r8,-1(r3)
 1006a00:	303ff91e 	bne	r6,zero,10069e8 <memset+0x20>
 1006a04:	39000130 	cmpltui	r4,r7,4
 1006a08:	2000221e 	bne	r4,zero,1006a94 <memset+0xcc>
 1006a0c:	29003fcc 	andi	r4,r5,255
 1006a10:	200c923a 	slli	r6,r4,8
 1006a14:	3a000430 	cmpltui	r8,r7,16
 1006a18:	3108b03a 	or	r4,r6,r4
 1006a1c:	200c943a 	slli	r6,r4,16
 1006a20:	310cb03a 	or	r6,r6,r4
 1006a24:	40000e1e 	bne	r8,zero,1006a60 <memset+0x98>
 1006a28:	393ffc04 	addi	r4,r7,-16
 1006a2c:	2008d13a 	srli	r4,r4,4
 1006a30:	21000044 	addi	r4,r4,1
 1006a34:	2008913a 	slli	r4,r4,4
 1006a38:	1909883a 	add	r4,r3,r4
 1006a3c:	19800015 	stw	r6,0(r3)
 1006a40:	19800115 	stw	r6,4(r3)
 1006a44:	19800215 	stw	r6,8(r3)
 1006a48:	19800315 	stw	r6,12(r3)
 1006a4c:	18c00404 	addi	r3,r3,16
 1006a50:	20fffa1e 	bne	r4,r3,1006a3c <memset+0x74>
 1006a54:	3900030c 	andi	r4,r7,12
 1006a58:	39c003cc 	andi	r7,r7,15
 1006a5c:	20000d26 	beq	r4,zero,1006a94 <memset+0xcc>
 1006a60:	1811883a 	mov	r8,r3
 1006a64:	42000104 	addi	r8,r8,4
 1006a68:	3a09c83a 	sub	r4,r7,r8
 1006a6c:	1909883a 	add	r4,r3,r4
 1006a70:	21000128 	cmpgeui	r4,r4,4
 1006a74:	41bfff15 	stw	r6,-4(r8)
 1006a78:	203ffa1e 	bne	r4,zero,1006a64 <memset+0x9c>
 1006a7c:	393fff04 	addi	r4,r7,-4
 1006a80:	2008d0ba 	srli	r4,r4,2
 1006a84:	39c000cc 	andi	r7,r7,3
 1006a88:	21000044 	addi	r4,r4,1
 1006a8c:	200890ba 	slli	r4,r4,2
 1006a90:	1907883a 	add	r3,r3,r4
 1006a94:	38000426 	beq	r7,zero,1006aa8 <memset+0xe0>
 1006a98:	19cf883a 	add	r7,r3,r7
 1006a9c:	18c00044 	addi	r3,r3,1
 1006aa0:	197fffc5 	stb	r5,-1(r3)
 1006aa4:	38fffd1e 	bne	r7,r3,1006a9c <memset+0xd4>
 1006aa8:	f800283a 	ret
 1006aac:	2007883a 	mov	r3,r4
 1006ab0:	300f883a 	mov	r7,r6
 1006ab4:	003fd306 	br	1006a04 <memset+0x3c>

01006ab8 <_Balloc>:
 1006ab8:	20801317 	ldw	r2,76(r4)
 1006abc:	defffc04 	addi	sp,sp,-16
 1006ac0:	dc400115 	stw	r17,4(sp)
 1006ac4:	dc000015 	stw	r16,0(sp)
 1006ac8:	dfc00315 	stw	ra,12(sp)
 1006acc:	dc800215 	stw	r18,8(sp)
 1006ad0:	2021883a 	mov	r16,r4
 1006ad4:	2823883a 	mov	r17,r5
 1006ad8:	10000e26 	beq	r2,zero,1006b14 <_Balloc+0x5c>
 1006adc:	880690ba 	slli	r3,r17,2
 1006ae0:	10c7883a 	add	r3,r2,r3
 1006ae4:	18800017 	ldw	r2,0(r3)
 1006ae8:	10001126 	beq	r2,zero,1006b30 <_Balloc+0x78>
 1006aec:	11000017 	ldw	r4,0(r2)
 1006af0:	19000015 	stw	r4,0(r3)
 1006af4:	10000415 	stw	zero,16(r2)
 1006af8:	10000315 	stw	zero,12(r2)
 1006afc:	dfc00317 	ldw	ra,12(sp)
 1006b00:	dc800217 	ldw	r18,8(sp)
 1006b04:	dc400117 	ldw	r17,4(sp)
 1006b08:	dc000017 	ldw	r16,0(sp)
 1006b0c:	dec00404 	addi	sp,sp,16
 1006b10:	f800283a 	ret
 1006b14:	01800844 	movi	r6,33
 1006b18:	01400104 	movi	r5,4
 1006b1c:	100991c0 	call	100991c <_calloc_r>
 1006b20:	80801315 	stw	r2,76(r16)
 1006b24:	103fed1e 	bne	r2,zero,1006adc <_Balloc+0x24>
 1006b28:	0005883a 	mov	r2,zero
 1006b2c:	003ff306 	br	1006afc <_Balloc+0x44>
 1006b30:	04800044 	movi	r18,1
 1006b34:	9464983a 	sll	r18,r18,r17
 1006b38:	01400044 	movi	r5,1
 1006b3c:	8009883a 	mov	r4,r16
 1006b40:	91800144 	addi	r6,r18,5
 1006b44:	300c90ba 	slli	r6,r6,2
 1006b48:	100991c0 	call	100991c <_calloc_r>
 1006b4c:	103ff626 	beq	r2,zero,1006b28 <_Balloc+0x70>
 1006b50:	14400115 	stw	r17,4(r2)
 1006b54:	14800215 	stw	r18,8(r2)
 1006b58:	003fe606 	br	1006af4 <_Balloc+0x3c>

01006b5c <_Bfree>:
 1006b5c:	28000726 	beq	r5,zero,1006b7c <_Bfree+0x20>
 1006b60:	28c00117 	ldw	r3,4(r5)
 1006b64:	20801317 	ldw	r2,76(r4)
 1006b68:	180690ba 	slli	r3,r3,2
 1006b6c:	10c5883a 	add	r2,r2,r3
 1006b70:	10c00017 	ldw	r3,0(r2)
 1006b74:	28c00015 	stw	r3,0(r5)
 1006b78:	11400015 	stw	r5,0(r2)
 1006b7c:	f800283a 	ret

01006b80 <__multadd>:
 1006b80:	defff704 	addi	sp,sp,-36
 1006b84:	dc800215 	stw	r18,8(sp)
 1006b88:	2c800417 	ldw	r18,16(r5)
 1006b8c:	ddc00715 	stw	r23,28(sp)
 1006b90:	dd800615 	stw	r22,24(sp)
 1006b94:	dd400515 	stw	r21,20(sp)
 1006b98:	dd000415 	stw	r20,16(sp)
 1006b9c:	dcc00315 	stw	r19,12(sp)
 1006ba0:	dc400115 	stw	r17,4(sp)
 1006ba4:	dfc00815 	stw	ra,32(sp)
 1006ba8:	dc000015 	stw	r16,0(sp)
 1006bac:	2827883a 	mov	r19,r5
 1006bb0:	2029883a 	mov	r20,r4
 1006bb4:	302b883a 	mov	r21,r6
 1006bb8:	3823883a 	mov	r17,r7
 1006bbc:	2d800504 	addi	r22,r5,20
 1006bc0:	002f883a 	mov	r23,zero
 1006bc4:	b4000017 	ldw	r16,0(r22)
 1006bc8:	a80b883a 	mov	r5,r21
 1006bcc:	b5800104 	addi	r22,r22,4
 1006bd0:	813fffcc 	andi	r4,r16,65535
 1006bd4:	1000e300 	call	1000e30 <__mulsi3>
 1006bd8:	8008d43a 	srli	r4,r16,16
 1006bdc:	a80b883a 	mov	r5,r21
 1006be0:	1461883a 	add	r16,r2,r17
 1006be4:	1000e300 	call	1000e30 <__mulsi3>
 1006be8:	800ed43a 	srli	r7,r16,16
 1006bec:	843fffcc 	andi	r16,r16,65535
 1006bf0:	bdc00044 	addi	r23,r23,1
 1006bf4:	11c5883a 	add	r2,r2,r7
 1006bf8:	1006943a 	slli	r3,r2,16
 1006bfc:	1022d43a 	srli	r17,r2,16
 1006c00:	1c21883a 	add	r16,r3,r16
 1006c04:	b43fff15 	stw	r16,-4(r22)
 1006c08:	bcbfee16 	blt	r23,r18,1006bc4 <__multadd+0x44>
 1006c0c:	88000826 	beq	r17,zero,1006c30 <__multadd+0xb0>
 1006c10:	98800217 	ldw	r2,8(r19)
 1006c14:	9080120e 	bge	r18,r2,1006c60 <__multadd+0xe0>
 1006c18:	90800144 	addi	r2,r18,5
 1006c1c:	100490ba 	slli	r2,r2,2
 1006c20:	94800044 	addi	r18,r18,1
 1006c24:	9885883a 	add	r2,r19,r2
 1006c28:	14400015 	stw	r17,0(r2)
 1006c2c:	9c800415 	stw	r18,16(r19)
 1006c30:	9805883a 	mov	r2,r19
 1006c34:	dfc00817 	ldw	ra,32(sp)
 1006c38:	ddc00717 	ldw	r23,28(sp)
 1006c3c:	dd800617 	ldw	r22,24(sp)
 1006c40:	dd400517 	ldw	r21,20(sp)
 1006c44:	dd000417 	ldw	r20,16(sp)
 1006c48:	dcc00317 	ldw	r19,12(sp)
 1006c4c:	dc800217 	ldw	r18,8(sp)
 1006c50:	dc400117 	ldw	r17,4(sp)
 1006c54:	dc000017 	ldw	r16,0(sp)
 1006c58:	dec00904 	addi	sp,sp,36
 1006c5c:	f800283a 	ret
 1006c60:	99400117 	ldw	r5,4(r19)
 1006c64:	a009883a 	mov	r4,r20
 1006c68:	29400044 	addi	r5,r5,1
 1006c6c:	1006ab80 	call	1006ab8 <_Balloc>
 1006c70:	1021883a 	mov	r16,r2
 1006c74:	10001226 	beq	r2,zero,1006cc0 <__multadd+0x140>
 1006c78:	99800417 	ldw	r6,16(r19)
 1006c7c:	99400304 	addi	r5,r19,12
 1006c80:	11000304 	addi	r4,r2,12
 1006c84:	31800084 	addi	r6,r6,2
 1006c88:	300c90ba 	slli	r6,r6,2
 1006c8c:	100679c0 	call	100679c <memcpy>
 1006c90:	98000926 	beq	r19,zero,1006cb8 <__multadd+0x138>
 1006c94:	98c00117 	ldw	r3,4(r19)
 1006c98:	a0801317 	ldw	r2,76(r20)
 1006c9c:	180690ba 	slli	r3,r3,2
 1006ca0:	10c5883a 	add	r2,r2,r3
 1006ca4:	10c00017 	ldw	r3,0(r2)
 1006ca8:	98c00015 	stw	r3,0(r19)
 1006cac:	14c00015 	stw	r19,0(r2)
 1006cb0:	8027883a 	mov	r19,r16
 1006cb4:	003fd806 	br	1006c18 <__multadd+0x98>
 1006cb8:	8027883a 	mov	r19,r16
 1006cbc:	003fd606 	br	1006c18 <__multadd+0x98>
 1006cc0:	01c04074 	movhi	r7,257
 1006cc4:	01004074 	movhi	r4,257
 1006cc8:	39c95b04 	addi	r7,r7,9580
 1006ccc:	000d883a 	mov	r6,zero
 1006cd0:	01402d44 	movi	r5,181
 1006cd4:	21097004 	addi	r4,r4,9664
 1006cd8:	10098a40 	call	10098a4 <__assert_func>

01006cdc <__s2b>:
 1006cdc:	defff904 	addi	sp,sp,-28
 1006ce0:	dc800215 	stw	r18,8(sp)
 1006ce4:	dc000015 	stw	r16,0(sp)
 1006ce8:	2025883a 	mov	r18,r4
 1006cec:	2821883a 	mov	r16,r5
 1006cf0:	39000204 	addi	r4,r7,8
 1006cf4:	01400244 	movi	r5,9
 1006cf8:	dcc00315 	stw	r19,12(sp)
 1006cfc:	dc400115 	stw	r17,4(sp)
 1006d00:	dfc00615 	stw	ra,24(sp)
 1006d04:	3823883a 	mov	r17,r7
 1006d08:	dd400515 	stw	r21,20(sp)
 1006d0c:	dd000415 	stw	r20,16(sp)
 1006d10:	3027883a 	mov	r19,r6
 1006d14:	1000c7c0 	call	1000c7c <__divsi3>
 1006d18:	88c00290 	cmplti	r3,r17,10
 1006d1c:	1800341e 	bne	r3,zero,1006df0 <__s2b+0x114>
 1006d20:	00c00044 	movi	r3,1
 1006d24:	000b883a 	mov	r5,zero
 1006d28:	18c7883a 	add	r3,r3,r3
 1006d2c:	29400044 	addi	r5,r5,1
 1006d30:	18bffd16 	blt	r3,r2,1006d28 <__s2b+0x4c>
 1006d34:	9009883a 	mov	r4,r18
 1006d38:	1006ab80 	call	1006ab8 <_Balloc>
 1006d3c:	100b883a 	mov	r5,r2
 1006d40:	10002d26 	beq	r2,zero,1006df8 <__s2b+0x11c>
 1006d44:	d8800717 	ldw	r2,28(sp)
 1006d48:	28800515 	stw	r2,20(r5)
 1006d4c:	00800044 	movi	r2,1
 1006d50:	28800415 	stw	r2,16(r5)
 1006d54:	98800290 	cmplti	r2,r19,10
 1006d58:	1000221e 	bne	r2,zero,1006de4 <__s2b+0x108>
 1006d5c:	85400244 	addi	r21,r16,9
 1006d60:	a829883a 	mov	r20,r21
 1006d64:	84e1883a 	add	r16,r16,r19
 1006d68:	a1c00007 	ldb	r7,0(r20)
 1006d6c:	01800284 	movi	r6,10
 1006d70:	9009883a 	mov	r4,r18
 1006d74:	39fff404 	addi	r7,r7,-48
 1006d78:	1006b800 	call	1006b80 <__multadd>
 1006d7c:	a5000044 	addi	r20,r20,1
 1006d80:	100b883a 	mov	r5,r2
 1006d84:	a43ff81e 	bne	r20,r16,1006d68 <__s2b+0x8c>
 1006d88:	9c3ffe04 	addi	r16,r19,-8
 1006d8c:	ac21883a 	add	r16,r21,r16
 1006d90:	9c400a0e 	bge	r19,r17,1006dbc <__s2b+0xe0>
 1006d94:	8ce3c83a 	sub	r17,r17,r19
 1006d98:	8463883a 	add	r17,r16,r17
 1006d9c:	81c00007 	ldb	r7,0(r16)
 1006da0:	01800284 	movi	r6,10
 1006da4:	9009883a 	mov	r4,r18
 1006da8:	39fff404 	addi	r7,r7,-48
 1006dac:	1006b800 	call	1006b80 <__multadd>
 1006db0:	84000044 	addi	r16,r16,1
 1006db4:	100b883a 	mov	r5,r2
 1006db8:	8c3ff81e 	bne	r17,r16,1006d9c <__s2b+0xc0>
 1006dbc:	2805883a 	mov	r2,r5
 1006dc0:	dfc00617 	ldw	ra,24(sp)
 1006dc4:	dd400517 	ldw	r21,20(sp)
 1006dc8:	dd000417 	ldw	r20,16(sp)
 1006dcc:	dcc00317 	ldw	r19,12(sp)
 1006dd0:	dc800217 	ldw	r18,8(sp)
 1006dd4:	dc400117 	ldw	r17,4(sp)
 1006dd8:	dc000017 	ldw	r16,0(sp)
 1006ddc:	dec00704 	addi	sp,sp,28
 1006de0:	f800283a 	ret
 1006de4:	84000284 	addi	r16,r16,10
 1006de8:	04c00244 	movi	r19,9
 1006dec:	003fe806 	br	1006d90 <__s2b+0xb4>
 1006df0:	000b883a 	mov	r5,zero
 1006df4:	003fcf06 	br	1006d34 <__s2b+0x58>
 1006df8:	01c04074 	movhi	r7,257
 1006dfc:	01004074 	movhi	r4,257
 1006e00:	39c95b04 	addi	r7,r7,9580
 1006e04:	000d883a 	mov	r6,zero
 1006e08:	01403384 	movi	r5,206
 1006e0c:	21097004 	addi	r4,r4,9664
 1006e10:	10098a40 	call	10098a4 <__assert_func>

01006e14 <__hi0bits>:
 1006e14:	20bfffec 	andhi	r2,r4,65535
 1006e18:	1000131e 	bne	r2,zero,1006e68 <__hi0bits+0x54>
 1006e1c:	2008943a 	slli	r4,r4,16
 1006e20:	00800404 	movi	r2,16
 1006e24:	20ffc02c 	andhi	r3,r4,65280
 1006e28:	1800021e 	bne	r3,zero,1006e34 <__hi0bits+0x20>
 1006e2c:	2008923a 	slli	r4,r4,8
 1006e30:	10800204 	addi	r2,r2,8
 1006e34:	20fc002c 	andhi	r3,r4,61440
 1006e38:	1800021e 	bne	r3,zero,1006e44 <__hi0bits+0x30>
 1006e3c:	2008913a 	slli	r4,r4,4
 1006e40:	10800104 	addi	r2,r2,4
 1006e44:	20f0002c 	andhi	r3,r4,49152
 1006e48:	1800021e 	bne	r3,zero,1006e54 <__hi0bits+0x40>
 1006e4c:	200890ba 	slli	r4,r4,2
 1006e50:	10800084 	addi	r2,r2,2
 1006e54:	20000316 	blt	r4,zero,1006e64 <__hi0bits+0x50>
 1006e58:	2110002c 	andhi	r4,r4,16384
 1006e5c:	10800044 	addi	r2,r2,1
 1006e60:	20000326 	beq	r4,zero,1006e70 <__hi0bits+0x5c>
 1006e64:	f800283a 	ret
 1006e68:	0005883a 	mov	r2,zero
 1006e6c:	003fed06 	br	1006e24 <__hi0bits+0x10>
 1006e70:	00800804 	movi	r2,32
 1006e74:	f800283a 	ret

01006e78 <__lo0bits>:
 1006e78:	20c00017 	ldw	r3,0(r4)
 1006e7c:	188001cc 	andi	r2,r3,7
 1006e80:	10000826 	beq	r2,zero,1006ea4 <__lo0bits+0x2c>
 1006e84:	1880004c 	andi	r2,r3,1
 1006e88:	10001f1e 	bne	r2,zero,1006f08 <__lo0bits+0x90>
 1006e8c:	1880008c 	andi	r2,r3,2
 1006e90:	10002126 	beq	r2,zero,1006f18 <__lo0bits+0xa0>
 1006e94:	1806d07a 	srli	r3,r3,1
 1006e98:	00800044 	movi	r2,1
 1006e9c:	20c00015 	stw	r3,0(r4)
 1006ea0:	f800283a 	ret
 1006ea4:	18bfffcc 	andi	r2,r3,65535
 1006ea8:	10001426 	beq	r2,zero,1006efc <__lo0bits+0x84>
 1006eac:	0005883a 	mov	r2,zero
 1006eb0:	19403fcc 	andi	r5,r3,255
 1006eb4:	2800021e 	bne	r5,zero,1006ec0 <__lo0bits+0x48>
 1006eb8:	1806d23a 	srli	r3,r3,8
 1006ebc:	10800204 	addi	r2,r2,8
 1006ec0:	194003cc 	andi	r5,r3,15
 1006ec4:	2800021e 	bne	r5,zero,1006ed0 <__lo0bits+0x58>
 1006ec8:	1806d13a 	srli	r3,r3,4
 1006ecc:	10800104 	addi	r2,r2,4
 1006ed0:	194000cc 	andi	r5,r3,3
 1006ed4:	2800021e 	bne	r5,zero,1006ee0 <__lo0bits+0x68>
 1006ed8:	1806d0ba 	srli	r3,r3,2
 1006edc:	10800084 	addi	r2,r2,2
 1006ee0:	1940004c 	andi	r5,r3,1
 1006ee4:	2800031e 	bne	r5,zero,1006ef4 <__lo0bits+0x7c>
 1006ee8:	1806d07a 	srli	r3,r3,1
 1006eec:	10800044 	addi	r2,r2,1
 1006ef0:	18000726 	beq	r3,zero,1006f10 <__lo0bits+0x98>
 1006ef4:	20c00015 	stw	r3,0(r4)
 1006ef8:	f800283a 	ret
 1006efc:	1806d43a 	srli	r3,r3,16
 1006f00:	00800404 	movi	r2,16
 1006f04:	003fea06 	br	1006eb0 <__lo0bits+0x38>
 1006f08:	0005883a 	mov	r2,zero
 1006f0c:	f800283a 	ret
 1006f10:	00800804 	movi	r2,32
 1006f14:	f800283a 	ret
 1006f18:	1806d0ba 	srli	r3,r3,2
 1006f1c:	00800084 	movi	r2,2
 1006f20:	20c00015 	stw	r3,0(r4)
 1006f24:	f800283a 	ret

01006f28 <__i2b>:
 1006f28:	defffe04 	addi	sp,sp,-8
 1006f2c:	dc000015 	stw	r16,0(sp)
 1006f30:	2821883a 	mov	r16,r5
 1006f34:	01400044 	movi	r5,1
 1006f38:	dfc00115 	stw	ra,4(sp)
 1006f3c:	1006ab80 	call	1006ab8 <_Balloc>
 1006f40:	10000726 	beq	r2,zero,1006f60 <__i2b+0x38>
 1006f44:	01000044 	movi	r4,1
 1006f48:	14000515 	stw	r16,20(r2)
 1006f4c:	11000415 	stw	r4,16(r2)
 1006f50:	dfc00117 	ldw	ra,4(sp)
 1006f54:	dc000017 	ldw	r16,0(sp)
 1006f58:	dec00204 	addi	sp,sp,8
 1006f5c:	f800283a 	ret
 1006f60:	01c04074 	movhi	r7,257
 1006f64:	01004074 	movhi	r4,257
 1006f68:	39c95b04 	addi	r7,r7,9580
 1006f6c:	000d883a 	mov	r6,zero
 1006f70:	01405004 	movi	r5,320
 1006f74:	21097004 	addi	r4,r4,9664
 1006f78:	10098a40 	call	10098a4 <__assert_func>

01006f7c <__multiply>:
 1006f7c:	defff004 	addi	sp,sp,-64
 1006f80:	dd800c15 	stw	r22,48(sp)
 1006f84:	dc400715 	stw	r17,28(sp)
 1006f88:	2d800417 	ldw	r22,16(r5)
 1006f8c:	34400417 	ldw	r17,16(r6)
 1006f90:	dc800815 	stw	r18,32(sp)
 1006f94:	dc000615 	stw	r16,24(sp)
 1006f98:	dfc00f15 	stw	ra,60(sp)
 1006f9c:	df000e15 	stw	fp,56(sp)
 1006fa0:	ddc00d15 	stw	r23,52(sp)
 1006fa4:	dd400b15 	stw	r21,44(sp)
 1006fa8:	dd000a15 	stw	r20,40(sp)
 1006fac:	dcc00915 	stw	r19,36(sp)
 1006fb0:	2825883a 	mov	r18,r5
 1006fb4:	3021883a 	mov	r16,r6
 1006fb8:	b4400516 	blt	r22,r17,1006fd0 <__multiply+0x54>
 1006fbc:	8807883a 	mov	r3,r17
 1006fc0:	2821883a 	mov	r16,r5
 1006fc4:	b023883a 	mov	r17,r22
 1006fc8:	3025883a 	mov	r18,r6
 1006fcc:	182d883a 	mov	r22,r3
 1006fd0:	80800217 	ldw	r2,8(r16)
 1006fd4:	8d87883a 	add	r3,r17,r22
 1006fd8:	d8c00115 	stw	r3,4(sp)
 1006fdc:	81400117 	ldw	r5,4(r16)
 1006fe0:	10c0010e 	bge	r2,r3,1006fe8 <__multiply+0x6c>
 1006fe4:	29400044 	addi	r5,r5,1
 1006fe8:	1006ab80 	call	1006ab8 <_Balloc>
 1006fec:	d8800515 	stw	r2,20(sp)
 1006ff0:	10008626 	beq	r2,zero,100720c <__multiply+0x290>
 1006ff4:	d8800117 	ldw	r2,4(sp)
 1006ff8:	102690ba 	slli	r19,r2,2
 1006ffc:	d8800517 	ldw	r2,20(sp)
 1007000:	10c00504 	addi	r3,r2,20
 1007004:	d8c00015 	stw	r3,0(sp)
 1007008:	1ce7883a 	add	r19,r3,r19
 100700c:	1805883a 	mov	r2,r3
 1007010:	1cc0032e 	bgeu	r3,r19,1007020 <__multiply+0xa4>
 1007014:	10000015 	stw	zero,0(r2)
 1007018:	10800104 	addi	r2,r2,4
 100701c:	14fffd36 	bltu	r2,r19,1007014 <__multiply+0x98>
 1007020:	b02c90ba 	slli	r22,r22,2
 1007024:	882290ba 	slli	r17,r17,2
 1007028:	94800504 	addi	r18,r18,20
 100702c:	80800504 	addi	r2,r16,20
 1007030:	9587883a 	add	r3,r18,r22
 1007034:	d8800315 	stw	r2,12(sp)
 1007038:	d8c00215 	stw	r3,8(sp)
 100703c:	1463883a 	add	r17,r2,r17
 1007040:	90c0342e 	bgeu	r18,r3,1007114 <__multiply+0x198>
 1007044:	80800544 	addi	r2,r16,21
 1007048:	88804b36 	bltu	r17,r2,1007178 <__multiply+0x1fc>
 100704c:	8c05c83a 	sub	r2,r17,r16
 1007050:	10bffac4 	addi	r2,r2,-21
 1007054:	1004d0ba 	srli	r2,r2,2
 1007058:	10800044 	addi	r2,r2,1
 100705c:	100490ba 	slli	r2,r2,2
 1007060:	d8800415 	stw	r2,16(sp)
 1007064:	00000606 	br	1007080 <__multiply+0x104>
 1007068:	d8800017 	ldw	r2,0(sp)
 100706c:	94800104 	addi	r18,r18,4
 1007070:	10800104 	addi	r2,r2,4
 1007074:	d8800015 	stw	r2,0(sp)
 1007078:	d8800217 	ldw	r2,8(sp)
 100707c:	9080252e 	bgeu	r18,r2,1007114 <__multiply+0x198>
 1007080:	90800017 	ldw	r2,0(r18)
 1007084:	15ffffcc 	andi	r23,r2,65535
 1007088:	b800401e 	bne	r23,zero,100718c <__multiply+0x210>
 100708c:	1028d43a 	srli	r20,r2,16
 1007090:	a03ff526 	beq	r20,zero,1007068 <__multiply+0xec>
 1007094:	dd400017 	ldw	r21,0(sp)
 1007098:	dd800317 	ldw	r22,12(sp)
 100709c:	0039883a 	mov	fp,zero
 10070a0:	adc00017 	ldw	r23,0(r21)
 10070a4:	b821883a 	mov	r16,r23
 10070a8:	b100000b 	ldhu	r4,0(r22)
 10070ac:	a00b883a 	mov	r5,r20
 10070b0:	ad400104 	addi	r21,r21,4
 10070b4:	1000e300 	call	1000e30 <__mulsi3>
 10070b8:	800cd43a 	srli	r6,r16,16
 10070bc:	b8ffffcc 	andi	r3,r23,65535
 10070c0:	b5800104 	addi	r22,r22,4
 10070c4:	118d883a 	add	r6,r2,r6
 10070c8:	3739883a 	add	fp,r6,fp
 10070cc:	e004943a 	slli	r2,fp,16
 10070d0:	ac000017 	ldw	r16,0(r21)
 10070d4:	a00b883a 	mov	r5,r20
 10070d8:	10c6b03a 	or	r3,r2,r3
 10070dc:	a8ffff15 	stw	r3,-4(r21)
 10070e0:	b13fff8b 	ldhu	r4,-2(r22)
 10070e4:	1000e300 	call	1000e30 <__mulsi3>
 10070e8:	e00cd43a 	srli	r6,fp,16
 10070ec:	80ffffcc 	andi	r3,r16,65535
 10070f0:	10c7883a 	add	r3,r2,r3
 10070f4:	19af883a 	add	r23,r3,r6
 10070f8:	b838d43a 	srli	fp,r23,16
 10070fc:	b47fea36 	bltu	r22,r17,10070a8 <__multiply+0x12c>
 1007100:	d8800017 	ldw	r2,0(sp)
 1007104:	d8c00417 	ldw	r3,16(sp)
 1007108:	10c5883a 	add	r2,r2,r3
 100710c:	15c00015 	stw	r23,0(r2)
 1007110:	003fd506 	br	1007068 <__multiply+0xec>
 1007114:	d8800117 	ldw	r2,4(sp)
 1007118:	00800516 	blt	zero,r2,1007130 <__multiply+0x1b4>
 100711c:	00000706 	br	100713c <__multiply+0x1c0>
 1007120:	d8800117 	ldw	r2,4(sp)
 1007124:	10bfffc4 	addi	r2,r2,-1
 1007128:	d8800115 	stw	r2,4(sp)
 100712c:	10000326 	beq	r2,zero,100713c <__multiply+0x1c0>
 1007130:	98bfff17 	ldw	r2,-4(r19)
 1007134:	9cffff04 	addi	r19,r19,-4
 1007138:	103ff926 	beq	r2,zero,1007120 <__multiply+0x1a4>
 100713c:	d8800517 	ldw	r2,20(sp)
 1007140:	d8c00117 	ldw	r3,4(sp)
 1007144:	10c00415 	stw	r3,16(r2)
 1007148:	dfc00f17 	ldw	ra,60(sp)
 100714c:	df000e17 	ldw	fp,56(sp)
 1007150:	ddc00d17 	ldw	r23,52(sp)
 1007154:	dd800c17 	ldw	r22,48(sp)
 1007158:	dd400b17 	ldw	r21,44(sp)
 100715c:	dd000a17 	ldw	r20,40(sp)
 1007160:	dcc00917 	ldw	r19,36(sp)
 1007164:	dc800817 	ldw	r18,32(sp)
 1007168:	dc400717 	ldw	r17,28(sp)
 100716c:	dc000617 	ldw	r16,24(sp)
 1007170:	dec01004 	addi	sp,sp,64
 1007174:	f800283a 	ret
 1007178:	00800104 	movi	r2,4
 100717c:	d8800415 	stw	r2,16(sp)
 1007180:	90800017 	ldw	r2,0(r18)
 1007184:	15ffffcc 	andi	r23,r2,65535
 1007188:	b83fc026 	beq	r23,zero,100708c <__multiply+0x110>
 100718c:	dd800017 	ldw	r22,0(sp)
 1007190:	dd400317 	ldw	r21,12(sp)
 1007194:	0029883a 	mov	r20,zero
 1007198:	af000017 	ldw	fp,0(r21)
 100719c:	b4000017 	ldw	r16,0(r22)
 10071a0:	b80b883a 	mov	r5,r23
 10071a4:	e13fffcc 	andi	r4,fp,65535
 10071a8:	1000e300 	call	1000e30 <__mulsi3>
 10071ac:	e008d43a 	srli	r4,fp,16
 10071b0:	823fffcc 	andi	r8,r16,65535
 10071b4:	1205883a 	add	r2,r2,r8
 10071b8:	b80b883a 	mov	r5,r23
 10071bc:	1529883a 	add	r20,r2,r20
 10071c0:	8020d43a 	srli	r16,r16,16
 10071c4:	1000e300 	call	1000e30 <__mulsi3>
 10071c8:	a008d43a 	srli	r4,r20,16
 10071cc:	1405883a 	add	r2,r2,r16
 10071d0:	a0ffffcc 	andi	r3,r20,65535
 10071d4:	1105883a 	add	r2,r2,r4
 10071d8:	1008943a 	slli	r4,r2,16
 10071dc:	b5800104 	addi	r22,r22,4
 10071e0:	ad400104 	addi	r21,r21,4
 10071e4:	20c6b03a 	or	r3,r4,r3
 10071e8:	b0ffff15 	stw	r3,-4(r22)
 10071ec:	1028d43a 	srli	r20,r2,16
 10071f0:	ac7fe936 	bltu	r21,r17,1007198 <__multiply+0x21c>
 10071f4:	d8800017 	ldw	r2,0(sp)
 10071f8:	d8c00417 	ldw	r3,16(sp)
 10071fc:	10c5883a 	add	r2,r2,r3
 1007200:	15000015 	stw	r20,0(r2)
 1007204:	90800017 	ldw	r2,0(r18)
 1007208:	003fa006 	br	100708c <__multiply+0x110>
 100720c:	01c04074 	movhi	r7,257
 1007210:	01004074 	movhi	r4,257
 1007214:	39c95b04 	addi	r7,r7,9580
 1007218:	000d883a 	mov	r6,zero
 100721c:	01405744 	movi	r5,349
 1007220:	21097004 	addi	r4,r4,9664
 1007224:	10098a40 	call	10098a4 <__assert_func>

01007228 <__pow5mult>:
 1007228:	defffb04 	addi	sp,sp,-20
 100722c:	dcc00315 	stw	r19,12(sp)
 1007230:	dc000015 	stw	r16,0(sp)
 1007234:	dfc00415 	stw	ra,16(sp)
 1007238:	dc800215 	stw	r18,8(sp)
 100723c:	dc400115 	stw	r17,4(sp)
 1007240:	308000cc 	andi	r2,r6,3
 1007244:	3021883a 	mov	r16,r6
 1007248:	2027883a 	mov	r19,r4
 100724c:	10002d1e 	bne	r2,zero,1007304 <__pow5mult+0xdc>
 1007250:	2825883a 	mov	r18,r5
 1007254:	8021d0ba 	srai	r16,r16,2
 1007258:	80001926 	beq	r16,zero,10072c0 <__pow5mult+0x98>
 100725c:	9c401217 	ldw	r17,72(r19)
 1007260:	8800061e 	bne	r17,zero,100727c <__pow5mult+0x54>
 1007264:	00002f06 	br	1007324 <__pow5mult+0xfc>
 1007268:	8021d07a 	srai	r16,r16,1
 100726c:	80001426 	beq	r16,zero,10072c0 <__pow5mult+0x98>
 1007270:	88800017 	ldw	r2,0(r17)
 1007274:	10001a26 	beq	r2,zero,10072e0 <__pow5mult+0xb8>
 1007278:	1023883a 	mov	r17,r2
 100727c:	8080004c 	andi	r2,r16,1
 1007280:	103ff926 	beq	r2,zero,1007268 <__pow5mult+0x40>
 1007284:	880d883a 	mov	r6,r17
 1007288:	900b883a 	mov	r5,r18
 100728c:	9809883a 	mov	r4,r19
 1007290:	1006f7c0 	call	1006f7c <__multiply>
 1007294:	90001926 	beq	r18,zero,10072fc <__pow5mult+0xd4>
 1007298:	91000117 	ldw	r4,4(r18)
 100729c:	98c01317 	ldw	r3,76(r19)
 10072a0:	8021d07a 	srai	r16,r16,1
 10072a4:	200890ba 	slli	r4,r4,2
 10072a8:	1907883a 	add	r3,r3,r4
 10072ac:	19000017 	ldw	r4,0(r3)
 10072b0:	91000015 	stw	r4,0(r18)
 10072b4:	1c800015 	stw	r18,0(r3)
 10072b8:	1025883a 	mov	r18,r2
 10072bc:	803fec1e 	bne	r16,zero,1007270 <__pow5mult+0x48>
 10072c0:	9005883a 	mov	r2,r18
 10072c4:	dfc00417 	ldw	ra,16(sp)
 10072c8:	dcc00317 	ldw	r19,12(sp)
 10072cc:	dc800217 	ldw	r18,8(sp)
 10072d0:	dc400117 	ldw	r17,4(sp)
 10072d4:	dc000017 	ldw	r16,0(sp)
 10072d8:	dec00504 	addi	sp,sp,20
 10072dc:	f800283a 	ret
 10072e0:	880d883a 	mov	r6,r17
 10072e4:	880b883a 	mov	r5,r17
 10072e8:	9809883a 	mov	r4,r19
 10072ec:	1006f7c0 	call	1006f7c <__multiply>
 10072f0:	88800015 	stw	r2,0(r17)
 10072f4:	10000015 	stw	zero,0(r2)
 10072f8:	003fdf06 	br	1007278 <__pow5mult+0x50>
 10072fc:	1025883a 	mov	r18,r2
 1007300:	003fd906 	br	1007268 <__pow5mult+0x40>
 1007304:	100490ba 	slli	r2,r2,2
 1007308:	00c04074 	movhi	r3,257
 100730c:	000f883a 	mov	r7,zero
 1007310:	10c7883a 	add	r3,r2,r3
 1007314:	19897f17 	ldw	r6,9724(r3)
 1007318:	1006b800 	call	1006b80 <__multadd>
 100731c:	1025883a 	mov	r18,r2
 1007320:	003fcc06 	br	1007254 <__pow5mult+0x2c>
 1007324:	01409c44 	movi	r5,625
 1007328:	9809883a 	mov	r4,r19
 100732c:	1006f280 	call	1006f28 <__i2b>
 1007330:	98801215 	stw	r2,72(r19)
 1007334:	1023883a 	mov	r17,r2
 1007338:	10000015 	stw	zero,0(r2)
 100733c:	003fcf06 	br	100727c <__pow5mult+0x54>

01007340 <__lshift>:
 1007340:	defff904 	addi	sp,sp,-28
 1007344:	dd400515 	stw	r21,20(sp)
 1007348:	dc800215 	stw	r18,8(sp)
 100734c:	302bd17a 	srai	r21,r6,5
 1007350:	2c800417 	ldw	r18,16(r5)
 1007354:	28800217 	ldw	r2,8(r5)
 1007358:	dd000415 	stw	r20,16(sp)
 100735c:	aca5883a 	add	r18,r21,r18
 1007360:	dcc00315 	stw	r19,12(sp)
 1007364:	dc400115 	stw	r17,4(sp)
 1007368:	dc000015 	stw	r16,0(sp)
 100736c:	dfc00615 	stw	ra,24(sp)
 1007370:	94400044 	addi	r17,r18,1
 1007374:	2821883a 	mov	r16,r5
 1007378:	3029883a 	mov	r20,r6
 100737c:	29400117 	ldw	r5,4(r5)
 1007380:	2027883a 	mov	r19,r4
 1007384:	1440030e 	bge	r2,r17,1007394 <__lshift+0x54>
 1007388:	1085883a 	add	r2,r2,r2
 100738c:	29400044 	addi	r5,r5,1
 1007390:	147ffd16 	blt	r2,r17,1007388 <__lshift+0x48>
 1007394:	9809883a 	mov	r4,r19
 1007398:	1006ab80 	call	1006ab8 <_Balloc>
 100739c:	10004326 	beq	r2,zero,10074ac <__lshift+0x16c>
 10073a0:	12000504 	addi	r8,r2,20
 10073a4:	0540090e 	bge	zero,r21,10073cc <__lshift+0x8c>
 10073a8:	ad400144 	addi	r21,r21,5
 10073ac:	a82a90ba 	slli	r21,r21,2
 10073b0:	4007883a 	mov	r3,r8
 10073b4:	1549883a 	add	r4,r2,r21
 10073b8:	18c00104 	addi	r3,r3,4
 10073bc:	183fff15 	stw	zero,-4(r3)
 10073c0:	193ffd1e 	bne	r3,r4,10073b8 <__lshift+0x78>
 10073c4:	ad7ffb04 	addi	r21,r21,-20
 10073c8:	4551883a 	add	r8,r8,r21
 10073cc:	82400417 	ldw	r9,16(r16)
 10073d0:	80c00504 	addi	r3,r16,20
 10073d4:	a14007cc 	andi	r5,r20,31
 10073d8:	481290ba 	slli	r9,r9,2
 10073dc:	1a53883a 	add	r9,r3,r9
 10073e0:	28002a26 	beq	r5,zero,100748c <__lshift+0x14c>
 10073e4:	02800804 	movi	r10,32
 10073e8:	5155c83a 	sub	r10,r10,r5
 10073ec:	4009883a 	mov	r4,r8
 10073f0:	000f883a 	mov	r7,zero
 10073f4:	19800017 	ldw	r6,0(r3)
 10073f8:	21000104 	addi	r4,r4,4
 10073fc:	18c00104 	addi	r3,r3,4
 1007400:	314c983a 	sll	r6,r6,r5
 1007404:	31ccb03a 	or	r6,r6,r7
 1007408:	21bfff15 	stw	r6,-4(r4)
 100740c:	19bfff17 	ldw	r6,-4(r3)
 1007410:	328ed83a 	srl	r7,r6,r10
 1007414:	1a7ff736 	bltu	r3,r9,10073f4 <__lshift+0xb4>
 1007418:	80c00544 	addi	r3,r16,21
 100741c:	48c02136 	bltu	r9,r3,10074a4 <__lshift+0x164>
 1007420:	4c07c83a 	sub	r3,r9,r16
 1007424:	18fffac4 	addi	r3,r3,-21
 1007428:	1806d0ba 	srli	r3,r3,2
 100742c:	18c00044 	addi	r3,r3,1
 1007430:	180690ba 	slli	r3,r3,2
 1007434:	40d1883a 	add	r8,r8,r3
 1007438:	41c00015 	stw	r7,0(r8)
 100743c:	38000126 	beq	r7,zero,1007444 <__lshift+0x104>
 1007440:	8825883a 	mov	r18,r17
 1007444:	14800415 	stw	r18,16(r2)
 1007448:	80000726 	beq	r16,zero,1007468 <__lshift+0x128>
 100744c:	81000117 	ldw	r4,4(r16)
 1007450:	98c01317 	ldw	r3,76(r19)
 1007454:	200890ba 	slli	r4,r4,2
 1007458:	1907883a 	add	r3,r3,r4
 100745c:	19000017 	ldw	r4,0(r3)
 1007460:	81000015 	stw	r4,0(r16)
 1007464:	1c000015 	stw	r16,0(r3)
 1007468:	dfc00617 	ldw	ra,24(sp)
 100746c:	dd400517 	ldw	r21,20(sp)
 1007470:	dd000417 	ldw	r20,16(sp)
 1007474:	dcc00317 	ldw	r19,12(sp)
 1007478:	dc800217 	ldw	r18,8(sp)
 100747c:	dc400117 	ldw	r17,4(sp)
 1007480:	dc000017 	ldw	r16,0(sp)
 1007484:	dec00704 	addi	sp,sp,28
 1007488:	f800283a 	ret
 100748c:	19000017 	ldw	r4,0(r3)
 1007490:	18c00104 	addi	r3,r3,4
 1007494:	42000104 	addi	r8,r8,4
 1007498:	413fff15 	stw	r4,-4(r8)
 100749c:	1a7ffb36 	bltu	r3,r9,100748c <__lshift+0x14c>
 10074a0:	003fe806 	br	1007444 <__lshift+0x104>
 10074a4:	00c00104 	movi	r3,4
 10074a8:	003fe206 	br	1007434 <__lshift+0xf4>
 10074ac:	01c04074 	movhi	r7,257
 10074b0:	01004074 	movhi	r4,257
 10074b4:	39c95b04 	addi	r7,r7,9580
 10074b8:	000d883a 	mov	r6,zero
 10074bc:	01407644 	movi	r5,473
 10074c0:	21097004 	addi	r4,r4,9664
 10074c4:	10098a40 	call	10098a4 <__assert_func>

010074c8 <__mcmp>:
 10074c8:	21800417 	ldw	r6,16(r4)
 10074cc:	28c00417 	ldw	r3,16(r5)
 10074d0:	30c5c83a 	sub	r2,r6,r3
 10074d4:	30c00e1e 	bne	r6,r3,1007510 <__mcmp+0x48>
 10074d8:	180690ba 	slli	r3,r3,2
 10074dc:	21c00504 	addi	r7,r4,20
 10074e0:	29400504 	addi	r5,r5,20
 10074e4:	38c9883a 	add	r4,r7,r3
 10074e8:	28c7883a 	add	r3,r5,r3
 10074ec:	00000106 	br	10074f4 <__mcmp+0x2c>
 10074f0:	3900082e 	bgeu	r7,r4,1007514 <__mcmp+0x4c>
 10074f4:	21bfff17 	ldw	r6,-4(r4)
 10074f8:	197fff17 	ldw	r5,-4(r3)
 10074fc:	213fff04 	addi	r4,r4,-4
 1007500:	18ffff04 	addi	r3,r3,-4
 1007504:	317ffa26 	beq	r6,r5,10074f0 <__mcmp+0x28>
 1007508:	3140032e 	bgeu	r6,r5,1007518 <__mcmp+0x50>
 100750c:	00bfffc4 	movi	r2,-1
 1007510:	f800283a 	ret
 1007514:	f800283a 	ret
 1007518:	00800044 	movi	r2,1
 100751c:	f800283a 	ret

01007520 <__mdiff>:
 1007520:	28800417 	ldw	r2,16(r5)
 1007524:	30c00417 	ldw	r3,16(r6)
 1007528:	defffc04 	addi	sp,sp,-16
 100752c:	dc800215 	stw	r18,8(sp)
 1007530:	dc400115 	stw	r17,4(sp)
 1007534:	dc000015 	stw	r16,0(sp)
 1007538:	dfc00315 	stw	ra,12(sp)
 100753c:	2823883a 	mov	r17,r5
 1007540:	3021883a 	mov	r16,r6
 1007544:	10e5c83a 	sub	r18,r2,r3
 1007548:	10c0641e 	bne	r2,r3,10076dc <__mdiff+0x1bc>
 100754c:	180c90ba 	slli	r6,r3,2
 1007550:	29400504 	addi	r5,r5,20
 1007554:	80c00504 	addi	r3,r16,20
 1007558:	2985883a 	add	r2,r5,r6
 100755c:	1987883a 	add	r3,r3,r6
 1007560:	00000106 	br	1007568 <__mdiff+0x48>
 1007564:	2880642e 	bgeu	r5,r2,10076f8 <__mdiff+0x1d8>
 1007568:	11ffff17 	ldw	r7,-4(r2)
 100756c:	19bfff17 	ldw	r6,-4(r3)
 1007570:	10bfff04 	addi	r2,r2,-4
 1007574:	18ffff04 	addi	r3,r3,-4
 1007578:	39bffa26 	beq	r7,r6,1007564 <__mdiff+0x44>
 100757c:	39805236 	bltu	r7,r6,10076c8 <__mdiff+0x1a8>
 1007580:	89400117 	ldw	r5,4(r17)
 1007584:	1006ab80 	call	1006ab8 <_Balloc>
 1007588:	10006226 	beq	r2,zero,1007714 <__mdiff+0x1f4>
 100758c:	8a400417 	ldw	r9,16(r17)
 1007590:	83000417 	ldw	r12,16(r16)
 1007594:	8ac00504 	addi	r11,r17,20
 1007598:	481090ba 	slli	r8,r9,2
 100759c:	601890ba 	slli	r12,r12,2
 10075a0:	81800504 	addi	r6,r16,20
 10075a4:	13400504 	addi	r13,r2,20
 10075a8:	14800315 	stw	r18,12(r2)
 10075ac:	5a11883a 	add	r8,r11,r8
 10075b0:	3319883a 	add	r12,r6,r12
 10075b4:	681d883a 	mov	r14,r13
 10075b8:	5815883a 	mov	r10,r11
 10075bc:	0007883a 	mov	r3,zero
 10075c0:	51000017 	ldw	r4,0(r10)
 10075c4:	31c00017 	ldw	r7,0(r6)
 10075c8:	73800104 	addi	r14,r14,4
 10075cc:	217fffcc 	andi	r5,r4,65535
 10075d0:	28cb883a 	add	r5,r5,r3
 10075d4:	38ffffcc 	andi	r3,r7,65535
 10075d8:	28cbc83a 	sub	r5,r5,r3
 10075dc:	380ed43a 	srli	r7,r7,16
 10075e0:	2006d43a 	srli	r3,r4,16
 10075e4:	2809d43a 	srai	r4,r5,16
 10075e8:	297fffcc 	andi	r5,r5,65535
 10075ec:	19c7c83a 	sub	r3,r3,r7
 10075f0:	1907883a 	add	r3,r3,r4
 10075f4:	1808943a 	slli	r4,r3,16
 10075f8:	31800104 	addi	r6,r6,4
 10075fc:	1807d43a 	srai	r3,r3,16
 1007600:	214ab03a 	or	r5,r4,r5
 1007604:	717fff15 	stw	r5,-4(r14)
 1007608:	52800104 	addi	r10,r10,4
 100760c:	333fec36 	bltu	r6,r12,10075c0 <__mdiff+0xa0>
 1007610:	640fc83a 	sub	r7,r12,r16
 1007614:	39fffac4 	addi	r7,r7,-21
 1007618:	84000544 	addi	r16,r16,21
 100761c:	380ed0ba 	srli	r7,r7,2
 1007620:	64003336 	bltu	r12,r16,10076f0 <__mdiff+0x1d0>
 1007624:	380890ba 	slli	r4,r7,2
 1007628:	6909883a 	add	r4,r13,r4
 100762c:	64002e36 	bltu	r12,r16,10076e8 <__mdiff+0x1c8>
 1007630:	39800044 	addi	r6,r7,1
 1007634:	300c90ba 	slli	r6,r6,2
 1007638:	5997883a 	add	r11,r11,r6
 100763c:	699b883a 	add	r13,r13,r6
 1007640:	5a00152e 	bgeu	r11,r8,1007698 <__mdiff+0x178>
 1007644:	680f883a 	mov	r7,r13
 1007648:	580d883a 	mov	r6,r11
 100764c:	31000017 	ldw	r4,0(r6)
 1007650:	39c00104 	addi	r7,r7,4
 1007654:	31800104 	addi	r6,r6,4
 1007658:	217fffcc 	andi	r5,r4,65535
 100765c:	28cb883a 	add	r5,r5,r3
 1007660:	2815d43a 	srai	r10,r5,16
 1007664:	2006d43a 	srli	r3,r4,16
 1007668:	297fffcc 	andi	r5,r5,65535
 100766c:	1a87883a 	add	r3,r3,r10
 1007670:	1814943a 	slli	r10,r3,16
 1007674:	1807d43a 	srai	r3,r3,16
 1007678:	514ab03a 	or	r5,r10,r5
 100767c:	397fff15 	stw	r5,-4(r7)
 1007680:	323ff236 	bltu	r6,r8,100764c <__mdiff+0x12c>
 1007684:	413fffc4 	addi	r4,r8,-1
 1007688:	22c9c83a 	sub	r4,r4,r11
 100768c:	2008d0ba 	srli	r4,r4,2
 1007690:	200890ba 	slli	r4,r4,2
 1007694:	6909883a 	add	r4,r13,r4
 1007698:	2800041e 	bne	r5,zero,10076ac <__mdiff+0x18c>
 100769c:	20ffff17 	ldw	r3,-4(r4)
 10076a0:	4a7fffc4 	addi	r9,r9,-1
 10076a4:	213fff04 	addi	r4,r4,-4
 10076a8:	183ffc26 	beq	r3,zero,100769c <__mdiff+0x17c>
 10076ac:	12400415 	stw	r9,16(r2)
 10076b0:	dfc00317 	ldw	ra,12(sp)
 10076b4:	dc800217 	ldw	r18,8(sp)
 10076b8:	dc400117 	ldw	r17,4(sp)
 10076bc:	dc000017 	ldw	r16,0(sp)
 10076c0:	dec00404 	addi	sp,sp,16
 10076c4:	f800283a 	ret
 10076c8:	8805883a 	mov	r2,r17
 10076cc:	04800044 	movi	r18,1
 10076d0:	8023883a 	mov	r17,r16
 10076d4:	1021883a 	mov	r16,r2
 10076d8:	003fa906 	br	1007580 <__mdiff+0x60>
 10076dc:	903ffa16 	blt	r18,zero,10076c8 <__mdiff+0x1a8>
 10076e0:	0025883a 	mov	r18,zero
 10076e4:	003fa606 	br	1007580 <__mdiff+0x60>
 10076e8:	01800104 	movi	r6,4
 10076ec:	003fd206 	br	1007638 <__mdiff+0x118>
 10076f0:	0009883a 	mov	r4,zero
 10076f4:	003fcc06 	br	1007628 <__mdiff+0x108>
 10076f8:	000b883a 	mov	r5,zero
 10076fc:	1006ab80 	call	1006ab8 <_Balloc>
 1007700:	10000b26 	beq	r2,zero,1007730 <__mdiff+0x210>
 1007704:	00c00044 	movi	r3,1
 1007708:	10c00415 	stw	r3,16(r2)
 100770c:	10000515 	stw	zero,20(r2)
 1007710:	003fe706 	br	10076b0 <__mdiff+0x190>
 1007714:	01c04074 	movhi	r7,257
 1007718:	01004074 	movhi	r4,257
 100771c:	39c95b04 	addi	r7,r7,9580
 1007720:	000d883a 	mov	r6,zero
 1007724:	01409004 	movi	r5,576
 1007728:	21097004 	addi	r4,r4,9664
 100772c:	10098a40 	call	10098a4 <__assert_func>
 1007730:	01c04074 	movhi	r7,257
 1007734:	01004074 	movhi	r4,257
 1007738:	39c95b04 	addi	r7,r7,9580
 100773c:	000d883a 	mov	r6,zero
 1007740:	01408c84 	movi	r5,562
 1007744:	21097004 	addi	r4,r4,9664
 1007748:	10098a40 	call	10098a4 <__assert_func>

0100774c <__ulp>:
 100774c:	28dffc2c 	andhi	r3,r5,32752
 1007750:	017f3034 	movhi	r5,64704
 1007754:	1947883a 	add	r3,r3,r5
 1007758:	00c0020e 	bge	zero,r3,1007764 <__ulp+0x18>
 100775c:	0005883a 	mov	r2,zero
 1007760:	f800283a 	ret
 1007764:	00c7c83a 	sub	r3,zero,r3
 1007768:	1807d53a 	srai	r3,r3,20
 100776c:	18800508 	cmpgei	r2,r3,20
 1007770:	1000041e 	bne	r2,zero,1007784 <__ulp+0x38>
 1007774:	00800234 	movhi	r2,8
 1007778:	10c7d83a 	sra	r3,r2,r3
 100777c:	0005883a 	mov	r2,zero
 1007780:	f800283a 	ret
 1007784:	193ffb04 	addi	r4,r3,-20
 1007788:	208007c8 	cmpgei	r2,r4,31
 100778c:	0007883a 	mov	r3,zero
 1007790:	1000031e 	bne	r2,zero,10077a0 <__ulp+0x54>
 1007794:	00a00034 	movhi	r2,32768
 1007798:	1104d83a 	srl	r2,r2,r4
 100779c:	f800283a 	ret
 10077a0:	00800044 	movi	r2,1
 10077a4:	f800283a 	ret

010077a8 <__b2d>:
 10077a8:	defffa04 	addi	sp,sp,-24
 10077ac:	dc400115 	stw	r17,4(sp)
 10077b0:	24400417 	ldw	r17,16(r4)
 10077b4:	dc000015 	stw	r16,0(sp)
 10077b8:	24000504 	addi	r16,r4,20
 10077bc:	882290ba 	slli	r17,r17,2
 10077c0:	dc800215 	stw	r18,8(sp)
 10077c4:	dd000415 	stw	r20,16(sp)
 10077c8:	8463883a 	add	r17,r16,r17
 10077cc:	8cbfff17 	ldw	r18,-4(r17)
 10077d0:	dcc00315 	stw	r19,12(sp)
 10077d4:	dfc00515 	stw	ra,20(sp)
 10077d8:	9009883a 	mov	r4,r18
 10077dc:	2827883a 	mov	r19,r5
 10077e0:	1006e140 	call	1006e14 <__hi0bits>
 10077e4:	01000804 	movi	r4,32
 10077e8:	2087c83a 	sub	r3,r4,r2
 10077ec:	98c00015 	stw	r3,0(r19)
 10077f0:	10c002c8 	cmpgei	r3,r2,11
 10077f4:	8d3fff04 	addi	r20,r17,-4
 10077f8:	18001f26 	beq	r3,zero,1007878 <__b2d+0xd0>
 10077fc:	10fffd44 	addi	r3,r2,-11
 1007800:	85000e2e 	bgeu	r16,r20,100783c <__b2d+0x94>
 1007804:	88bffe17 	ldw	r2,-8(r17)
 1007808:	18001226 	beq	r3,zero,1007854 <__b2d+0xac>
 100780c:	20c9c83a 	sub	r4,r4,r3
 1007810:	110cd83a 	srl	r6,r2,r4
 1007814:	90e4983a 	sll	r18,r18,r3
 1007818:	10c4983a 	sll	r2,r2,r3
 100781c:	897ffe04 	addi	r5,r17,-8
 1007820:	9186b03a 	or	r3,r18,r6
 1007824:	18cffc34 	orhi	r3,r3,16368
 1007828:	81400b2e 	bgeu	r16,r5,1007858 <__b2d+0xb0>
 100782c:	897ffd17 	ldw	r5,-12(r17)
 1007830:	2908d83a 	srl	r4,r5,r4
 1007834:	1104b03a 	or	r2,r2,r4
 1007838:	00000706 	br	1007858 <__b2d+0xb0>
 100783c:	18000426 	beq	r3,zero,1007850 <__b2d+0xa8>
 1007840:	90c6983a 	sll	r3,r18,r3
 1007844:	0005883a 	mov	r2,zero
 1007848:	18cffc34 	orhi	r3,r3,16368
 100784c:	00000206 	br	1007858 <__b2d+0xb0>
 1007850:	0005883a 	mov	r2,zero
 1007854:	90cffc34 	orhi	r3,r18,16368
 1007858:	dfc00517 	ldw	ra,20(sp)
 100785c:	dd000417 	ldw	r20,16(sp)
 1007860:	dcc00317 	ldw	r19,12(sp)
 1007864:	dc800217 	ldw	r18,8(sp)
 1007868:	dc400117 	ldw	r17,4(sp)
 100786c:	dc000017 	ldw	r16,0(sp)
 1007870:	dec00604 	addi	sp,sp,24
 1007874:	f800283a 	ret
 1007878:	014002c4 	movi	r5,11
 100787c:	2889c83a 	sub	r4,r5,r2
 1007880:	9106d83a 	srl	r3,r18,r4
 1007884:	18cffc34 	orhi	r3,r3,16368
 1007888:	85000536 	bltu	r16,r20,10078a0 <__b2d+0xf8>
 100788c:	000b883a 	mov	r5,zero
 1007890:	10800544 	addi	r2,r2,21
 1007894:	9084983a 	sll	r2,r18,r2
 1007898:	1144b03a 	or	r2,r2,r5
 100789c:	003fee06 	br	1007858 <__b2d+0xb0>
 10078a0:	897ffe17 	ldw	r5,-8(r17)
 10078a4:	290ad83a 	srl	r5,r5,r4
 10078a8:	003ff906 	br	1007890 <__b2d+0xe8>

010078ac <__d2b>:
 10078ac:	defff804 	addi	sp,sp,-32
 10078b0:	dd000615 	stw	r20,24(sp)
 10078b4:	2829883a 	mov	r20,r5
 10078b8:	01400044 	movi	r5,1
 10078bc:	dcc00515 	stw	r19,20(sp)
 10078c0:	dc000215 	stw	r16,8(sp)
 10078c4:	dfc00715 	stw	ra,28(sp)
 10078c8:	dc800415 	stw	r18,16(sp)
 10078cc:	dc400315 	stw	r17,12(sp)
 10078d0:	3021883a 	mov	r16,r6
 10078d4:	3827883a 	mov	r19,r7
 10078d8:	1006ab80 	call	1006ab8 <_Balloc>
 10078dc:	10004526 	beq	r2,zero,10079f4 <__d2b+0x148>
 10078e0:	8024d53a 	srli	r18,r16,20
 10078e4:	01800434 	movhi	r6,16
 10078e8:	31bfffc4 	addi	r6,r6,-1
 10078ec:	9481ffcc 	andi	r18,r18,2047
 10078f0:	1023883a 	mov	r17,r2
 10078f4:	81a0703a 	and	r16,r16,r6
 10078f8:	90000126 	beq	r18,zero,1007900 <__d2b+0x54>
 10078fc:	84000434 	orhi	r16,r16,16
 1007900:	dc000115 	stw	r16,4(sp)
 1007904:	a0002226 	beq	r20,zero,1007990 <__d2b+0xe4>
 1007908:	d809883a 	mov	r4,sp
 100790c:	dd000015 	stw	r20,0(sp)
 1007910:	1006e780 	call	1006e78 <__lo0bits>
 1007914:	d8c00117 	ldw	r3,4(sp)
 1007918:	10003326 	beq	r2,zero,10079e8 <__d2b+0x13c>
 100791c:	01000804 	movi	r4,32
 1007920:	2089c83a 	sub	r4,r4,r2
 1007924:	1908983a 	sll	r4,r3,r4
 1007928:	d9400017 	ldw	r5,0(sp)
 100792c:	1886d83a 	srl	r3,r3,r2
 1007930:	2148b03a 	or	r4,r4,r5
 1007934:	89000515 	stw	r4,20(r17)
 1007938:	d8c00115 	stw	r3,4(sp)
 100793c:	88c00615 	stw	r3,24(r17)
 1007940:	1800271e 	bne	r3,zero,10079e0 <__d2b+0x134>
 1007944:	04000044 	movi	r16,1
 1007948:	8c000415 	stw	r16,16(r17)
 100794c:	90001926 	beq	r18,zero,10079b4 <__d2b+0x108>
 1007950:	00c00d44 	movi	r3,53
 1007954:	94bef344 	addi	r18,r18,-1075
 1007958:	90a5883a 	add	r18,r18,r2
 100795c:	1885c83a 	sub	r2,r3,r2
 1007960:	d8c00817 	ldw	r3,32(sp)
 1007964:	9c800015 	stw	r18,0(r19)
 1007968:	18800015 	stw	r2,0(r3)
 100796c:	8805883a 	mov	r2,r17
 1007970:	dfc00717 	ldw	ra,28(sp)
 1007974:	dd000617 	ldw	r20,24(sp)
 1007978:	dcc00517 	ldw	r19,20(sp)
 100797c:	dc800417 	ldw	r18,16(sp)
 1007980:	dc400317 	ldw	r17,12(sp)
 1007984:	dc000217 	ldw	r16,8(sp)
 1007988:	dec00804 	addi	sp,sp,32
 100798c:	f800283a 	ret
 1007990:	d9000104 	addi	r4,sp,4
 1007994:	1006e780 	call	1006e78 <__lo0bits>
 1007998:	00c00044 	movi	r3,1
 100799c:	88c00415 	stw	r3,16(r17)
 10079a0:	d8c00117 	ldw	r3,4(sp)
 10079a4:	10800804 	addi	r2,r2,32
 10079a8:	04000044 	movi	r16,1
 10079ac:	88c00515 	stw	r3,20(r17)
 10079b0:	903fe71e 	bne	r18,zero,1007950 <__d2b+0xa4>
 10079b4:	800690ba 	slli	r3,r16,2
 10079b8:	10bef384 	addi	r2,r2,-1074
 10079bc:	98800015 	stw	r2,0(r19)
 10079c0:	88c5883a 	add	r2,r17,r3
 10079c4:	11000417 	ldw	r4,16(r2)
 10079c8:	8020917a 	slli	r16,r16,5
 10079cc:	1006e140 	call	1006e14 <__hi0bits>
 10079d0:	80a1c83a 	sub	r16,r16,r2
 10079d4:	d8800817 	ldw	r2,32(sp)
 10079d8:	14000015 	stw	r16,0(r2)
 10079dc:	003fe306 	br	100796c <__d2b+0xc0>
 10079e0:	04000084 	movi	r16,2
 10079e4:	003fd806 	br	1007948 <__d2b+0x9c>
 10079e8:	d9000017 	ldw	r4,0(sp)
 10079ec:	89000515 	stw	r4,20(r17)
 10079f0:	003fd206 	br	100793c <__d2b+0x90>
 10079f4:	01c04074 	movhi	r7,257
 10079f8:	01004074 	movhi	r4,257
 10079fc:	39c95b04 	addi	r7,r7,9580
 1007a00:	000d883a 	mov	r6,zero
 1007a04:	0140c284 	movi	r5,778
 1007a08:	21097004 	addi	r4,r4,9664
 1007a0c:	10098a40 	call	10098a4 <__assert_func>

01007a10 <__ratio>:
 1007a10:	defff904 	addi	sp,sp,-28
 1007a14:	dc400315 	stw	r17,12(sp)
 1007a18:	2823883a 	mov	r17,r5
 1007a1c:	d80b883a 	mov	r5,sp
 1007a20:	dfc00615 	stw	ra,24(sp)
 1007a24:	dcc00515 	stw	r19,20(sp)
 1007a28:	dc800415 	stw	r18,16(sp)
 1007a2c:	2027883a 	mov	r19,r4
 1007a30:	dc000215 	stw	r16,8(sp)
 1007a34:	10077a80 	call	10077a8 <__b2d>
 1007a38:	d9400104 	addi	r5,sp,4
 1007a3c:	8809883a 	mov	r4,r17
 1007a40:	1025883a 	mov	r18,r2
 1007a44:	1821883a 	mov	r16,r3
 1007a48:	10077a80 	call	10077a8 <__b2d>
 1007a4c:	89400417 	ldw	r5,16(r17)
 1007a50:	99000417 	ldw	r4,16(r19)
 1007a54:	d9800117 	ldw	r6,4(sp)
 1007a58:	180f883a 	mov	r7,r3
 1007a5c:	2149c83a 	sub	r4,r4,r5
 1007a60:	d9400017 	ldw	r5,0(sp)
 1007a64:	2008917a 	slli	r4,r4,5
 1007a68:	298bc83a 	sub	r5,r5,r6
 1007a6c:	2149883a 	add	r4,r4,r5
 1007a70:	100d883a 	mov	r6,r2
 1007a74:	01000c0e 	bge	zero,r4,1007aa8 <__ratio+0x98>
 1007a78:	2008953a 	slli	r4,r4,20
 1007a7c:	2421883a 	add	r16,r4,r16
 1007a80:	9009883a 	mov	r4,r18
 1007a84:	800b883a 	mov	r5,r16
 1007a88:	100bb7c0 	call	100bb7c <__divdf3>
 1007a8c:	dfc00617 	ldw	ra,24(sp)
 1007a90:	dcc00517 	ldw	r19,20(sp)
 1007a94:	dc800417 	ldw	r18,16(sp)
 1007a98:	dc400317 	ldw	r17,12(sp)
 1007a9c:	dc000217 	ldw	r16,8(sp)
 1007aa0:	dec00704 	addi	sp,sp,28
 1007aa4:	f800283a 	ret
 1007aa8:	2008953a 	slli	r4,r4,20
 1007aac:	190fc83a 	sub	r7,r3,r4
 1007ab0:	003ff306 	br	1007a80 <__ratio+0x70>

01007ab4 <_mprec_log10>:
 1007ab4:	defffe04 	addi	sp,sp,-8
 1007ab8:	dc000015 	stw	r16,0(sp)
 1007abc:	dfc00115 	stw	ra,4(sp)
 1007ac0:	20800608 	cmpgei	r2,r4,24
 1007ac4:	2021883a 	mov	r16,r4
 1007ac8:	10000f26 	beq	r2,zero,1007b08 <_mprec_log10+0x54>
 1007acc:	0009883a 	mov	r4,zero
 1007ad0:	014ffc34 	movhi	r5,16368
 1007ad4:	000d883a 	mov	r6,zero
 1007ad8:	01d00934 	movhi	r7,16420
 1007adc:	100c7100 	call	100c710 <__muldf3>
 1007ae0:	843fffc4 	addi	r16,r16,-1
 1007ae4:	1009883a 	mov	r4,r2
 1007ae8:	180b883a 	mov	r5,r3
 1007aec:	803ff91e 	bne	r16,zero,1007ad4 <_mprec_log10+0x20>
 1007af0:	2005883a 	mov	r2,r4
 1007af4:	2807883a 	mov	r3,r5
 1007af8:	dfc00117 	ldw	ra,4(sp)
 1007afc:	dc000017 	ldw	r16,0(sp)
 1007b00:	dec00204 	addi	sp,sp,8
 1007b04:	f800283a 	ret
 1007b08:	202090fa 	slli	r16,r4,3
 1007b0c:	00804074 	movhi	r2,257
 1007b10:	10899704 	addi	r2,r2,9820
 1007b14:	1421883a 	add	r16,r2,r16
 1007b18:	81000017 	ldw	r4,0(r16)
 1007b1c:	81400117 	ldw	r5,4(r16)
 1007b20:	003ff306 	br	1007af0 <_mprec_log10+0x3c>

01007b24 <__copybits>:
 1007b24:	297fffc4 	addi	r5,r5,-1
 1007b28:	280fd17a 	srai	r7,r5,5
 1007b2c:	31400417 	ldw	r5,16(r6)
 1007b30:	30800504 	addi	r2,r6,20
 1007b34:	39c00044 	addi	r7,r7,1
 1007b38:	280a90ba 	slli	r5,r5,2
 1007b3c:	380e90ba 	slli	r7,r7,2
 1007b40:	114b883a 	add	r5,r2,r5
 1007b44:	21cf883a 	add	r7,r4,r7
 1007b48:	11400c2e 	bgeu	r2,r5,1007b7c <__copybits+0x58>
 1007b4c:	2007883a 	mov	r3,r4
 1007b50:	12000017 	ldw	r8,0(r2)
 1007b54:	10800104 	addi	r2,r2,4
 1007b58:	18c00104 	addi	r3,r3,4
 1007b5c:	1a3fff15 	stw	r8,-4(r3)
 1007b60:	117ffb36 	bltu	r2,r5,1007b50 <__copybits+0x2c>
 1007b64:	2985c83a 	sub	r2,r5,r6
 1007b68:	10bffac4 	addi	r2,r2,-21
 1007b6c:	1004d0ba 	srli	r2,r2,2
 1007b70:	10800044 	addi	r2,r2,1
 1007b74:	100490ba 	slli	r2,r2,2
 1007b78:	2089883a 	add	r4,r4,r2
 1007b7c:	21c0032e 	bgeu	r4,r7,1007b8c <__copybits+0x68>
 1007b80:	21000104 	addi	r4,r4,4
 1007b84:	203fff15 	stw	zero,-4(r4)
 1007b88:	21fffd36 	bltu	r4,r7,1007b80 <__copybits+0x5c>
 1007b8c:	f800283a 	ret

01007b90 <__any_on>:
 1007b90:	20c00417 	ldw	r3,16(r4)
 1007b94:	280dd17a 	srai	r6,r5,5
 1007b98:	21000504 	addi	r4,r4,20
 1007b9c:	1980080e 	bge	r3,r6,1007bc0 <__any_on+0x30>
 1007ba0:	180490ba 	slli	r2,r3,2
 1007ba4:	2085883a 	add	r2,r4,r2
 1007ba8:	20800f2e 	bgeu	r4,r2,1007be8 <__any_on+0x58>
 1007bac:	10ffff17 	ldw	r3,-4(r2)
 1007bb0:	10bfff04 	addi	r2,r2,-4
 1007bb4:	183ffc26 	beq	r3,zero,1007ba8 <__any_on+0x18>
 1007bb8:	00800044 	movi	r2,1
 1007bbc:	f800283a 	ret
 1007bc0:	300490ba 	slli	r2,r6,2
 1007bc4:	2085883a 	add	r2,r4,r2
 1007bc8:	30fff70e 	bge	r6,r3,1007ba8 <__any_on+0x18>
 1007bcc:	294007cc 	andi	r5,r5,31
 1007bd0:	283ff526 	beq	r5,zero,1007ba8 <__any_on+0x18>
 1007bd4:	11800017 	ldw	r6,0(r2)
 1007bd8:	3146d83a 	srl	r3,r6,r5
 1007bdc:	194a983a 	sll	r5,r3,r5
 1007be0:	317ff51e 	bne	r6,r5,1007bb8 <__any_on+0x28>
 1007be4:	003ff006 	br	1007ba8 <__any_on+0x18>
 1007be8:	0005883a 	mov	r2,zero
 1007bec:	f800283a 	ret

01007bf0 <_realloc_r>:
 1007bf0:	defff504 	addi	sp,sp,-44
 1007bf4:	dc800315 	stw	r18,12(sp)
 1007bf8:	dfc00a15 	stw	ra,40(sp)
 1007bfc:	df000915 	stw	fp,36(sp)
 1007c00:	ddc00815 	stw	r23,32(sp)
 1007c04:	dd800715 	stw	r22,28(sp)
 1007c08:	dd400615 	stw	r21,24(sp)
 1007c0c:	dd000515 	stw	r20,20(sp)
 1007c10:	dcc00415 	stw	r19,16(sp)
 1007c14:	dc400215 	stw	r17,8(sp)
 1007c18:	dc000115 	stw	r16,4(sp)
 1007c1c:	3025883a 	mov	r18,r6
 1007c20:	28008b26 	beq	r5,zero,1007e50 <_realloc_r+0x260>
 1007c24:	2821883a 	mov	r16,r5
 1007c28:	2027883a 	mov	r19,r4
 1007c2c:	944002c4 	addi	r17,r18,11
 1007c30:	100e1bc0 	call	100e1bc <__malloc_lock>
 1007c34:	888005f0 	cmpltui	r2,r17,23
 1007c38:	1000521e 	bne	r2,zero,1007d84 <_realloc_r+0x194>
 1007c3c:	017ffe04 	movi	r5,-8
 1007c40:	8962703a 	and	r17,r17,r5
 1007c44:	8807883a 	mov	r3,r17
 1007c48:	88005116 	blt	r17,zero,1007d90 <_realloc_r+0x1a0>
 1007c4c:	8c805036 	bltu	r17,r18,1007d90 <_realloc_r+0x1a0>
 1007c50:	80bfff17 	ldw	r2,-4(r16)
 1007c54:	017fff04 	movi	r5,-4
 1007c58:	857ffe04 	addi	r21,r16,-8
 1007c5c:	1168703a 	and	r20,r2,r5
 1007c60:	ad2d883a 	add	r22,r21,r20
 1007c64:	a0c0390e 	bge	r20,r3,1007d4c <_realloc_r+0x15c>
 1007c68:	07004074 	movhi	fp,257
 1007c6c:	e70be704 	addi	fp,fp,12188
 1007c70:	e2000217 	ldw	r8,8(fp)
 1007c74:	b1000117 	ldw	r4,4(r22)
 1007c78:	45808e26 	beq	r8,r22,1007eb4 <_realloc_r+0x2c4>
 1007c7c:	01bfff84 	movi	r6,-2
 1007c80:	218c703a 	and	r6,r4,r6
 1007c84:	b18d883a 	add	r6,r22,r6
 1007c88:	31800117 	ldw	r6,4(r6)
 1007c8c:	3180004c 	andi	r6,r6,1
 1007c90:	30004f1e 	bne	r6,zero,1007dd0 <_realloc_r+0x1e0>
 1007c94:	2148703a 	and	r4,r4,r5
 1007c98:	a10b883a 	add	r5,r20,r4
 1007c9c:	28c0bf0e 	bge	r5,r3,1007f9c <_realloc_r+0x3ac>
 1007ca0:	1080004c 	andi	r2,r2,1
 1007ca4:	10004c1e 	bne	r2,zero,1007dd8 <_realloc_r+0x1e8>
 1007ca8:	81fffe17 	ldw	r7,-8(r16)
 1007cac:	00bfff04 	movi	r2,-4
 1007cb0:	a9cfc83a 	sub	r7,r21,r7
 1007cb4:	39400117 	ldw	r5,4(r7)
 1007cb8:	288a703a 	and	r5,r5,r2
 1007cbc:	b0000426 	beq	r22,zero,1007cd0 <_realloc_r+0xe0>
 1007cc0:	a16f883a 	add	r23,r20,r5
 1007cc4:	b92f883a 	add	r23,r23,r4
 1007cc8:	4580bf26 	beq	r8,r22,1007fc8 <_realloc_r+0x3d8>
 1007ccc:	b8c0930e 	bge	r23,r3,1007f1c <_realloc_r+0x32c>
 1007cd0:	38004126 	beq	r7,zero,1007dd8 <_realloc_r+0x1e8>
 1007cd4:	a16f883a 	add	r23,r20,r5
 1007cd8:	b8c03f16 	blt	r23,r3,1007dd8 <_realloc_r+0x1e8>
 1007cdc:	38800317 	ldw	r2,12(r7)
 1007ce0:	38c00217 	ldw	r3,8(r7)
 1007ce4:	a1bfff04 	addi	r6,r20,-4
 1007ce8:	31400968 	cmpgeui	r5,r6,37
 1007cec:	18800315 	stw	r2,12(r3)
 1007cf0:	10c00215 	stw	r3,8(r2)
 1007cf4:	39000204 	addi	r4,r7,8
 1007cf8:	3ded883a 	add	r22,r7,r23
 1007cfc:	2800941e 	bne	r5,zero,1007f50 <_realloc_r+0x360>
 1007d00:	30800530 	cmpltui	r2,r6,20
 1007d04:	80c00017 	ldw	r3,0(r16)
 1007d08:	1000df1e 	bne	r2,zero,1008088 <_realloc_r+0x498>
 1007d0c:	38c00215 	stw	r3,8(r7)
 1007d10:	80c00117 	ldw	r3,4(r16)
 1007d14:	30800728 	cmpgeui	r2,r6,28
 1007d18:	38c00315 	stw	r3,12(r7)
 1007d1c:	1000dc1e 	bne	r2,zero,1008090 <_realloc_r+0x4a0>
 1007d20:	80c00217 	ldw	r3,8(r16)
 1007d24:	38800404 	addi	r2,r7,16
 1007d28:	84000204 	addi	r16,r16,8
 1007d2c:	10c00015 	stw	r3,0(r2)
 1007d30:	80c00117 	ldw	r3,4(r16)
 1007d34:	b829883a 	mov	r20,r23
 1007d38:	382b883a 	mov	r21,r7
 1007d3c:	10c00115 	stw	r3,4(r2)
 1007d40:	80c00217 	ldw	r3,8(r16)
 1007d44:	2021883a 	mov	r16,r4
 1007d48:	10c00215 	stw	r3,8(r2)
 1007d4c:	a9800117 	ldw	r6,4(r21)
 1007d50:	a445c83a 	sub	r2,r20,r17
 1007d54:	10c00430 	cmpltui	r3,r2,16
 1007d58:	3180004c 	andi	r6,r6,1
 1007d5c:	18004926 	beq	r3,zero,1007e84 <_realloc_r+0x294>
 1007d60:	a18cb03a 	or	r6,r20,r6
 1007d64:	a9800115 	stw	r6,4(r21)
 1007d68:	b0800117 	ldw	r2,4(r22)
 1007d6c:	10800054 	ori	r2,r2,1
 1007d70:	b0800115 	stw	r2,4(r22)
 1007d74:	9809883a 	mov	r4,r19
 1007d78:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1007d7c:	8025883a 	mov	r18,r16
 1007d80:	00000606 	br	1007d9c <_realloc_r+0x1ac>
 1007d84:	04400404 	movi	r17,16
 1007d88:	00c00404 	movi	r3,16
 1007d8c:	8cbfb02e 	bgeu	r17,r18,1007c50 <_realloc_r+0x60>
 1007d90:	00800304 	movi	r2,12
 1007d94:	98800015 	stw	r2,0(r19)
 1007d98:	0025883a 	mov	r18,zero
 1007d9c:	9005883a 	mov	r2,r18
 1007da0:	dfc00a17 	ldw	ra,40(sp)
 1007da4:	df000917 	ldw	fp,36(sp)
 1007da8:	ddc00817 	ldw	r23,32(sp)
 1007dac:	dd800717 	ldw	r22,28(sp)
 1007db0:	dd400617 	ldw	r21,24(sp)
 1007db4:	dd000517 	ldw	r20,20(sp)
 1007db8:	dcc00417 	ldw	r19,16(sp)
 1007dbc:	dc800317 	ldw	r18,12(sp)
 1007dc0:	dc400217 	ldw	r17,8(sp)
 1007dc4:	dc000117 	ldw	r16,4(sp)
 1007dc8:	dec00b04 	addi	sp,sp,44
 1007dcc:	f800283a 	ret
 1007dd0:	1080004c 	andi	r2,r2,1
 1007dd4:	10006c26 	beq	r2,zero,1007f88 <_realloc_r+0x398>
 1007dd8:	900b883a 	mov	r5,r18
 1007ddc:	9809883a 	mov	r4,r19
 1007de0:	1005ee80 	call	1005ee8 <_malloc_r>
 1007de4:	1025883a 	mov	r18,r2
 1007de8:	10001626 	beq	r2,zero,1007e44 <_realloc_r+0x254>
 1007dec:	80bfff17 	ldw	r2,-4(r16)
 1007df0:	013fff84 	movi	r4,-2
 1007df4:	90fffe04 	addi	r3,r18,-8
 1007df8:	1104703a 	and	r2,r2,r4
 1007dfc:	a885883a 	add	r2,r21,r2
 1007e00:	10c05b26 	beq	r2,r3,1007f70 <_realloc_r+0x380>
 1007e04:	a1bfff04 	addi	r6,r20,-4
 1007e08:	30800968 	cmpgeui	r2,r6,37
 1007e0c:	10006a1e 	bne	r2,zero,1007fb8 <_realloc_r+0x3c8>
 1007e10:	30800530 	cmpltui	r2,r6,20
 1007e14:	81000017 	ldw	r4,0(r16)
 1007e18:	10003726 	beq	r2,zero,1007ef8 <_realloc_r+0x308>
 1007e1c:	9005883a 	mov	r2,r18
 1007e20:	8007883a 	mov	r3,r16
 1007e24:	11000015 	stw	r4,0(r2)
 1007e28:	19000117 	ldw	r4,4(r3)
 1007e2c:	11000115 	stw	r4,4(r2)
 1007e30:	18c00217 	ldw	r3,8(r3)
 1007e34:	10c00215 	stw	r3,8(r2)
 1007e38:	800b883a 	mov	r5,r16
 1007e3c:	9809883a 	mov	r4,r19
 1007e40:	10053e80 	call	10053e8 <_free_r>
 1007e44:	9809883a 	mov	r4,r19
 1007e48:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1007e4c:	003fd306 	br	1007d9c <_realloc_r+0x1ac>
 1007e50:	300b883a 	mov	r5,r6
 1007e54:	dfc00a17 	ldw	ra,40(sp)
 1007e58:	df000917 	ldw	fp,36(sp)
 1007e5c:	ddc00817 	ldw	r23,32(sp)
 1007e60:	dd800717 	ldw	r22,28(sp)
 1007e64:	dd400617 	ldw	r21,24(sp)
 1007e68:	dd000517 	ldw	r20,20(sp)
 1007e6c:	dcc00417 	ldw	r19,16(sp)
 1007e70:	dc800317 	ldw	r18,12(sp)
 1007e74:	dc400217 	ldw	r17,8(sp)
 1007e78:	dc000117 	ldw	r16,4(sp)
 1007e7c:	dec00b04 	addi	sp,sp,44
 1007e80:	1005ee81 	jmpi	1005ee8 <_malloc_r>
 1007e84:	344cb03a 	or	r6,r6,r17
 1007e88:	a9800115 	stw	r6,4(r21)
 1007e8c:	ac4b883a 	add	r5,r21,r17
 1007e90:	10800054 	ori	r2,r2,1
 1007e94:	28800115 	stw	r2,4(r5)
 1007e98:	b0800117 	ldw	r2,4(r22)
 1007e9c:	29400204 	addi	r5,r5,8
 1007ea0:	9809883a 	mov	r4,r19
 1007ea4:	10800054 	ori	r2,r2,1
 1007ea8:	b0800115 	stw	r2,4(r22)
 1007eac:	10053e80 	call	10053e8 <_free_r>
 1007eb0:	003fb006 	br	1007d74 <_realloc_r+0x184>
 1007eb4:	2148703a 	and	r4,r4,r5
 1007eb8:	a10b883a 	add	r5,r20,r4
 1007ebc:	89800404 	addi	r6,r17,16
 1007ec0:	29bf7716 	blt	r5,r6,1007ca0 <_realloc_r+0xb0>
 1007ec4:	ac6b883a 	add	r21,r21,r17
 1007ec8:	2c45c83a 	sub	r2,r5,r17
 1007ecc:	e5400215 	stw	r21,8(fp)
 1007ed0:	10800054 	ori	r2,r2,1
 1007ed4:	a8800115 	stw	r2,4(r21)
 1007ed8:	80bfff17 	ldw	r2,-4(r16)
 1007edc:	9809883a 	mov	r4,r19
 1007ee0:	8025883a 	mov	r18,r16
 1007ee4:	1080004c 	andi	r2,r2,1
 1007ee8:	1462b03a 	or	r17,r2,r17
 1007eec:	847fff15 	stw	r17,-4(r16)
 1007ef0:	100e1e00 	call	100e1e0 <__malloc_unlock>
 1007ef4:	003fa906 	br	1007d9c <_realloc_r+0x1ac>
 1007ef8:	91000015 	stw	r4,0(r18)
 1007efc:	80c00117 	ldw	r3,4(r16)
 1007f00:	30800728 	cmpgeui	r2,r6,28
 1007f04:	90c00115 	stw	r3,4(r18)
 1007f08:	1000551e 	bne	r2,zero,1008060 <_realloc_r+0x470>
 1007f0c:	81000217 	ldw	r4,8(r16)
 1007f10:	80c00204 	addi	r3,r16,8
 1007f14:	90800204 	addi	r2,r18,8
 1007f18:	003fc206 	br	1007e24 <_realloc_r+0x234>
 1007f1c:	b0800317 	ldw	r2,12(r22)
 1007f20:	b0c00217 	ldw	r3,8(r22)
 1007f24:	a1bfff04 	addi	r6,r20,-4
 1007f28:	31400968 	cmpgeui	r5,r6,37
 1007f2c:	18800315 	stw	r2,12(r3)
 1007f30:	10c00215 	stw	r3,8(r2)
 1007f34:	38c00217 	ldw	r3,8(r7)
 1007f38:	38800317 	ldw	r2,12(r7)
 1007f3c:	39000204 	addi	r4,r7,8
 1007f40:	3ded883a 	add	r22,r7,r23
 1007f44:	18800315 	stw	r2,12(r3)
 1007f48:	10c00215 	stw	r3,8(r2)
 1007f4c:	283f6c26 	beq	r5,zero,1007d00 <_realloc_r+0x110>
 1007f50:	800b883a 	mov	r5,r16
 1007f54:	d9c00015 	stw	r7,0(sp)
 1007f58:	100689c0 	call	100689c <memmove>
 1007f5c:	d9c00017 	ldw	r7,0(sp)
 1007f60:	1021883a 	mov	r16,r2
 1007f64:	b829883a 	mov	r20,r23
 1007f68:	382b883a 	mov	r21,r7
 1007f6c:	003f7706 	br	1007d4c <_realloc_r+0x15c>
 1007f70:	90bfff17 	ldw	r2,-4(r18)
 1007f74:	00ffff04 	movi	r3,-4
 1007f78:	10c4703a 	and	r2,r2,r3
 1007f7c:	a0a9883a 	add	r20,r20,r2
 1007f80:	ad2d883a 	add	r22,r21,r20
 1007f84:	003f7106 	br	1007d4c <_realloc_r+0x15c>
 1007f88:	81fffe17 	ldw	r7,-8(r16)
 1007f8c:	a9cfc83a 	sub	r7,r21,r7
 1007f90:	39000117 	ldw	r4,4(r7)
 1007f94:	214a703a 	and	r5,r4,r5
 1007f98:	003f4d06 	br	1007cd0 <_realloc_r+0xe0>
 1007f9c:	b0800317 	ldw	r2,12(r22)
 1007fa0:	b0c00217 	ldw	r3,8(r22)
 1007fa4:	2829883a 	mov	r20,r5
 1007fa8:	a96d883a 	add	r22,r21,r5
 1007fac:	18800315 	stw	r2,12(r3)
 1007fb0:	10c00215 	stw	r3,8(r2)
 1007fb4:	003f6506 	br	1007d4c <_realloc_r+0x15c>
 1007fb8:	800b883a 	mov	r5,r16
 1007fbc:	9009883a 	mov	r4,r18
 1007fc0:	100689c0 	call	100689c <memmove>
 1007fc4:	003f9c06 	br	1007e38 <_realloc_r+0x248>
 1007fc8:	88800404 	addi	r2,r17,16
 1007fcc:	b8bf4016 	blt	r23,r2,1007cd0 <_realloc_r+0xe0>
 1007fd0:	38800317 	ldw	r2,12(r7)
 1007fd4:	38c00217 	ldw	r3,8(r7)
 1007fd8:	a1bfff04 	addi	r6,r20,-4
 1007fdc:	31000968 	cmpgeui	r4,r6,37
 1007fe0:	18800315 	stw	r2,12(r3)
 1007fe4:	10c00215 	stw	r3,8(r2)
 1007fe8:	3c800204 	addi	r18,r7,8
 1007fec:	20003b1e 	bne	r4,zero,10080dc <_realloc_r+0x4ec>
 1007ff0:	30800530 	cmpltui	r2,r6,20
 1007ff4:	80c00017 	ldw	r3,0(r16)
 1007ff8:	1000361e 	bne	r2,zero,10080d4 <_realloc_r+0x4e4>
 1007ffc:	38c00215 	stw	r3,8(r7)
 1008000:	80c00117 	ldw	r3,4(r16)
 1008004:	30800728 	cmpgeui	r2,r6,28
 1008008:	38c00315 	stw	r3,12(r7)
 100800c:	1000401e 	bne	r2,zero,1008110 <_realloc_r+0x520>
 1008010:	80c00217 	ldw	r3,8(r16)
 1008014:	38800404 	addi	r2,r7,16
 1008018:	84000204 	addi	r16,r16,8
 100801c:	10c00015 	stw	r3,0(r2)
 1008020:	80c00117 	ldw	r3,4(r16)
 1008024:	10c00115 	stw	r3,4(r2)
 1008028:	80c00217 	ldw	r3,8(r16)
 100802c:	10c00215 	stw	r3,8(r2)
 1008030:	3c47883a 	add	r3,r7,r17
 1008034:	bc45c83a 	sub	r2,r23,r17
 1008038:	e0c00215 	stw	r3,8(fp)
 100803c:	10800054 	ori	r2,r2,1
 1008040:	18800115 	stw	r2,4(r3)
 1008044:	38800117 	ldw	r2,4(r7)
 1008048:	9809883a 	mov	r4,r19
 100804c:	1080004c 	andi	r2,r2,1
 1008050:	1462b03a 	or	r17,r2,r17
 1008054:	3c400115 	stw	r17,4(r7)
 1008058:	100e1e00 	call	100e1e0 <__malloc_unlock>
 100805c:	003f4f06 	br	1007d9c <_realloc_r+0x1ac>
 1008060:	80800217 	ldw	r2,8(r16)
 1008064:	31800920 	cmpeqi	r6,r6,36
 1008068:	90800215 	stw	r2,8(r18)
 100806c:	80800317 	ldw	r2,12(r16)
 1008070:	90800315 	stw	r2,12(r18)
 1008074:	81000417 	ldw	r4,16(r16)
 1008078:	30000f1e 	bne	r6,zero,10080b8 <_realloc_r+0x4c8>
 100807c:	80c00404 	addi	r3,r16,16
 1008080:	90800404 	addi	r2,r18,16
 1008084:	003f6706 	br	1007e24 <_realloc_r+0x234>
 1008088:	2005883a 	mov	r2,r4
 100808c:	003f2706 	br	1007d2c <_realloc_r+0x13c>
 1008090:	80800217 	ldw	r2,8(r16)
 1008094:	31800920 	cmpeqi	r6,r6,36
 1008098:	38800415 	stw	r2,16(r7)
 100809c:	80800317 	ldw	r2,12(r16)
 10080a0:	38800515 	stw	r2,20(r7)
 10080a4:	80c00417 	ldw	r3,16(r16)
 10080a8:	3000121e 	bne	r6,zero,10080f4 <_realloc_r+0x504>
 10080ac:	38800604 	addi	r2,r7,24
 10080b0:	84000404 	addi	r16,r16,16
 10080b4:	003f1d06 	br	1007d2c <_realloc_r+0x13c>
 10080b8:	91000415 	stw	r4,16(r18)
 10080bc:	81000517 	ldw	r4,20(r16)
 10080c0:	80c00604 	addi	r3,r16,24
 10080c4:	90800604 	addi	r2,r18,24
 10080c8:	91000515 	stw	r4,20(r18)
 10080cc:	81000617 	ldw	r4,24(r16)
 10080d0:	003f5406 	br	1007e24 <_realloc_r+0x234>
 10080d4:	9005883a 	mov	r2,r18
 10080d8:	003fd006 	br	100801c <_realloc_r+0x42c>
 10080dc:	800b883a 	mov	r5,r16
 10080e0:	9009883a 	mov	r4,r18
 10080e4:	d9c00015 	stw	r7,0(sp)
 10080e8:	100689c0 	call	100689c <memmove>
 10080ec:	d9c00017 	ldw	r7,0(sp)
 10080f0:	003fcf06 	br	1008030 <_realloc_r+0x440>
 10080f4:	84000604 	addi	r16,r16,24
 10080f8:	38c00615 	stw	r3,24(r7)
 10080fc:	80ffff17 	ldw	r3,-4(r16)
 1008100:	38800804 	addi	r2,r7,32
 1008104:	38c00715 	stw	r3,28(r7)
 1008108:	80c00017 	ldw	r3,0(r16)
 100810c:	003f0706 	br	1007d2c <_realloc_r+0x13c>
 1008110:	80800217 	ldw	r2,8(r16)
 1008114:	31800920 	cmpeqi	r6,r6,36
 1008118:	38800415 	stw	r2,16(r7)
 100811c:	80800317 	ldw	r2,12(r16)
 1008120:	38800515 	stw	r2,20(r7)
 1008124:	80c00417 	ldw	r3,16(r16)
 1008128:	3000031e 	bne	r6,zero,1008138 <_realloc_r+0x548>
 100812c:	38800604 	addi	r2,r7,24
 1008130:	84000404 	addi	r16,r16,16
 1008134:	003fb906 	br	100801c <_realloc_r+0x42c>
 1008138:	84000604 	addi	r16,r16,24
 100813c:	38c00615 	stw	r3,24(r7)
 1008140:	80ffff17 	ldw	r3,-4(r16)
 1008144:	38800804 	addi	r2,r7,32
 1008148:	38c00715 	stw	r3,28(r7)
 100814c:	80c00017 	ldw	r3,0(r16)
 1008150:	003fb206 	br	100801c <_realloc_r+0x42c>

01008154 <_sbrk_r>:
 1008154:	defffe04 	addi	sp,sp,-8
 1008158:	dc000015 	stw	r16,0(sp)
 100815c:	00804074 	movhi	r2,257
 1008160:	2021883a 	mov	r16,r4
 1008164:	2809883a 	mov	r4,r5
 1008168:	dfc00115 	stw	ra,4(sp)
 100816c:	1018ef15 	stw	zero,25532(r2)
 1008170:	100e3b80 	call	100e3b8 <sbrk>
 1008174:	10ffffd8 	cmpnei	r3,r2,-1
 1008178:	18000426 	beq	r3,zero,100818c <_sbrk_r+0x38>
 100817c:	dfc00117 	ldw	ra,4(sp)
 1008180:	dc000017 	ldw	r16,0(sp)
 1008184:	dec00204 	addi	sp,sp,8
 1008188:	f800283a 	ret
 100818c:	00c04074 	movhi	r3,257
 1008190:	18d8ef17 	ldw	r3,25532(r3)
 1008194:	183ff926 	beq	r3,zero,100817c <_sbrk_r+0x28>
 1008198:	80c00015 	stw	r3,0(r16)
 100819c:	dfc00117 	ldw	ra,4(sp)
 10081a0:	dc000017 	ldw	r16,0(sp)
 10081a4:	dec00204 	addi	sp,sp,8
 10081a8:	f800283a 	ret

010081ac <__sread>:
 10081ac:	defffe04 	addi	sp,sp,-8
 10081b0:	dc000015 	stw	r16,0(sp)
 10081b4:	2821883a 	mov	r16,r5
 10081b8:	2940038f 	ldh	r5,14(r5)
 10081bc:	dfc00115 	stw	ra,4(sp)
 10081c0:	1009f440 	call	1009f44 <_read_r>
 10081c4:	10000716 	blt	r2,zero,10081e4 <__sread+0x38>
 10081c8:	80c01417 	ldw	r3,80(r16)
 10081cc:	1887883a 	add	r3,r3,r2
 10081d0:	80c01415 	stw	r3,80(r16)
 10081d4:	dfc00117 	ldw	ra,4(sp)
 10081d8:	dc000017 	ldw	r16,0(sp)
 10081dc:	dec00204 	addi	sp,sp,8
 10081e0:	f800283a 	ret
 10081e4:	80c0030b 	ldhu	r3,12(r16)
 10081e8:	18fbffcc 	andi	r3,r3,61439
 10081ec:	80c0030d 	sth	r3,12(r16)
 10081f0:	dfc00117 	ldw	ra,4(sp)
 10081f4:	dc000017 	ldw	r16,0(sp)
 10081f8:	dec00204 	addi	sp,sp,8
 10081fc:	f800283a 	ret

01008200 <__seofread>:
 1008200:	0005883a 	mov	r2,zero
 1008204:	f800283a 	ret

01008208 <__swrite>:
 1008208:	2880030b 	ldhu	r2,12(r5)
 100820c:	defffb04 	addi	sp,sp,-20
 1008210:	dcc00315 	stw	r19,12(sp)
 1008214:	dc800215 	stw	r18,8(sp)
 1008218:	dc400115 	stw	r17,4(sp)
 100821c:	dc000015 	stw	r16,0(sp)
 1008220:	dfc00415 	stw	ra,16(sp)
 1008224:	10c0400c 	andi	r3,r2,256
 1008228:	2821883a 	mov	r16,r5
 100822c:	2023883a 	mov	r17,r4
 1008230:	2940038f 	ldh	r5,14(r5)
 1008234:	3025883a 	mov	r18,r6
 1008238:	3827883a 	mov	r19,r7
 100823c:	18000c1e 	bne	r3,zero,1008270 <__swrite+0x68>
 1008240:	10bbffcc 	andi	r2,r2,61439
 1008244:	980f883a 	mov	r7,r19
 1008248:	900d883a 	mov	r6,r18
 100824c:	8809883a 	mov	r4,r17
 1008250:	8080030d 	sth	r2,12(r16)
 1008254:	dfc00417 	ldw	ra,16(sp)
 1008258:	dcc00317 	ldw	r19,12(sp)
 100825c:	dc800217 	ldw	r18,8(sp)
 1008260:	dc400117 	ldw	r17,4(sp)
 1008264:	dc000017 	ldw	r16,0(sp)
 1008268:	dec00504 	addi	sp,sp,20
 100826c:	10097e81 	jmpi	10097e8 <_write_r>
 1008270:	01c00084 	movi	r7,2
 1008274:	000d883a 	mov	r6,zero
 1008278:	1009e900 	call	1009e90 <_lseek_r>
 100827c:	8080030b 	ldhu	r2,12(r16)
 1008280:	8140038f 	ldh	r5,14(r16)
 1008284:	003fee06 	br	1008240 <__swrite+0x38>

01008288 <__sseek>:
 1008288:	defffe04 	addi	sp,sp,-8
 100828c:	dc000015 	stw	r16,0(sp)
 1008290:	2821883a 	mov	r16,r5
 1008294:	2940038f 	ldh	r5,14(r5)
 1008298:	dfc00115 	stw	ra,4(sp)
 100829c:	1009e900 	call	1009e90 <_lseek_r>
 10082a0:	10ffffd8 	cmpnei	r3,r2,-1
 10082a4:	18000826 	beq	r3,zero,10082c8 <__sseek+0x40>
 10082a8:	80c0030b 	ldhu	r3,12(r16)
 10082ac:	80801415 	stw	r2,80(r16)
 10082b0:	18c40014 	ori	r3,r3,4096
 10082b4:	80c0030d 	sth	r3,12(r16)
 10082b8:	dfc00117 	ldw	ra,4(sp)
 10082bc:	dc000017 	ldw	r16,0(sp)
 10082c0:	dec00204 	addi	sp,sp,8
 10082c4:	f800283a 	ret
 10082c8:	80c0030b 	ldhu	r3,12(r16)
 10082cc:	18fbffcc 	andi	r3,r3,61439
 10082d0:	80c0030d 	sth	r3,12(r16)
 10082d4:	dfc00117 	ldw	ra,4(sp)
 10082d8:	dc000017 	ldw	r16,0(sp)
 10082dc:	dec00204 	addi	sp,sp,8
 10082e0:	f800283a 	ret

010082e4 <__sclose>:
 10082e4:	2940038f 	ldh	r5,14(r5)
 10082e8:	100984c1 	jmpi	100984c <_close_r>

010082ec <__sprint_r.part.0>:
 10082ec:	28801917 	ldw	r2,100(r5)
 10082f0:	defff604 	addi	sp,sp,-40
 10082f4:	dcc00315 	stw	r19,12(sp)
 10082f8:	dfc00915 	stw	ra,36(sp)
 10082fc:	df000815 	stw	fp,32(sp)
 1008300:	ddc00715 	stw	r23,28(sp)
 1008304:	dd800615 	stw	r22,24(sp)
 1008308:	dd400515 	stw	r21,20(sp)
 100830c:	dd000415 	stw	r20,16(sp)
 1008310:	dc800215 	stw	r18,8(sp)
 1008314:	dc400115 	stw	r17,4(sp)
 1008318:	dc000015 	stw	r16,0(sp)
 100831c:	1088000c 	andi	r2,r2,8192
 1008320:	3027883a 	mov	r19,r6
 1008324:	10002c26 	beq	r2,zero,10083d8 <__sprint_r.part.0+0xec>
 1008328:	30800217 	ldw	r2,8(r6)
 100832c:	35000017 	ldw	r20,0(r6)
 1008330:	2821883a 	mov	r16,r5
 1008334:	2023883a 	mov	r17,r4
 1008338:	05bfff04 	movi	r22,-4
 100833c:	10002426 	beq	r2,zero,10083d0 <__sprint_r.part.0+0xe4>
 1008340:	a5400117 	ldw	r21,4(r20)
 1008344:	a5c00017 	ldw	r23,0(r20)
 1008348:	a824d0ba 	srli	r18,r21,2
 100834c:	90001b26 	beq	r18,zero,10083bc <__sprint_r.part.0+0xd0>
 1008350:	0039883a 	mov	fp,zero
 1008354:	00000206 	br	1008360 <__sprint_r.part.0+0x74>
 1008358:	bdc00104 	addi	r23,r23,4
 100835c:	97001626 	beq	r18,fp,10083b8 <__sprint_r.part.0+0xcc>
 1008360:	b9400017 	ldw	r5,0(r23)
 1008364:	800d883a 	mov	r6,r16
 1008368:	8809883a 	mov	r4,r17
 100836c:	1009ca40 	call	1009ca4 <_fputwc_r>
 1008370:	10bfffe0 	cmpeqi	r2,r2,-1
 1008374:	e7000044 	addi	fp,fp,1
 1008378:	103ff726 	beq	r2,zero,1008358 <__sprint_r.part.0+0x6c>
 100837c:	00bfffc4 	movi	r2,-1
 1008380:	98000215 	stw	zero,8(r19)
 1008384:	98000115 	stw	zero,4(r19)
 1008388:	dfc00917 	ldw	ra,36(sp)
 100838c:	df000817 	ldw	fp,32(sp)
 1008390:	ddc00717 	ldw	r23,28(sp)
 1008394:	dd800617 	ldw	r22,24(sp)
 1008398:	dd400517 	ldw	r21,20(sp)
 100839c:	dd000417 	ldw	r20,16(sp)
 10083a0:	dcc00317 	ldw	r19,12(sp)
 10083a4:	dc800217 	ldw	r18,8(sp)
 10083a8:	dc400117 	ldw	r17,4(sp)
 10083ac:	dc000017 	ldw	r16,0(sp)
 10083b0:	dec00a04 	addi	sp,sp,40
 10083b4:	f800283a 	ret
 10083b8:	98800217 	ldw	r2,8(r19)
 10083bc:	adaa703a 	and	r21,r21,r22
 10083c0:	1545c83a 	sub	r2,r2,r21
 10083c4:	98800215 	stw	r2,8(r19)
 10083c8:	a5000204 	addi	r20,r20,8
 10083cc:	103fdc1e 	bne	r2,zero,1008340 <__sprint_r.part.0+0x54>
 10083d0:	0005883a 	mov	r2,zero
 10083d4:	003fea06 	br	1008380 <__sprint_r.part.0+0x94>
 10083d8:	10056e40 	call	10056e4 <__sfvwrite_r>
 10083dc:	003fe806 	br	1008380 <__sprint_r.part.0+0x94>

010083e0 <__sprint_r>:
 10083e0:	30c00217 	ldw	r3,8(r6)
 10083e4:	18000126 	beq	r3,zero,10083ec <__sprint_r+0xc>
 10083e8:	10082ec1 	jmpi	10082ec <__sprint_r.part.0>
 10083ec:	30000115 	stw	zero,4(r6)
 10083f0:	0005883a 	mov	r2,zero
 10083f4:	f800283a 	ret

010083f8 <___vfiprintf_internal_r>:
 10083f8:	deffcf04 	addi	sp,sp,-196
 10083fc:	dd802d15 	stw	r22,180(sp)
 1008400:	dd402c15 	stw	r21,176(sp)
 1008404:	dd002b15 	stw	r20,172(sp)
 1008408:	dfc03015 	stw	ra,192(sp)
 100840c:	df002f15 	stw	fp,188(sp)
 1008410:	ddc02e15 	stw	r23,184(sp)
 1008414:	dcc02a15 	stw	r19,168(sp)
 1008418:	dc802915 	stw	r18,164(sp)
 100841c:	dc402815 	stw	r17,160(sp)
 1008420:	dc002715 	stw	r16,156(sp)
 1008424:	d9c00415 	stw	r7,16(sp)
 1008428:	202d883a 	mov	r22,r4
 100842c:	282b883a 	mov	r21,r5
 1008430:	3029883a 	mov	r20,r6
 1008434:	20000226 	beq	r4,zero,1008440 <___vfiprintf_internal_r+0x48>
 1008438:	20800e17 	ldw	r2,56(r4)
 100843c:	1001b426 	beq	r2,zero,1008b10 <___vfiprintf_internal_r+0x718>
 1008440:	a880030b 	ldhu	r2,12(r21)
 1008444:	10c8000c 	andi	r3,r2,8192
 1008448:	1800061e 	bne	r3,zero,1008464 <___vfiprintf_internal_r+0x6c>
 100844c:	a8c01917 	ldw	r3,100(r21)
 1008450:	0137ffc4 	movi	r4,-8193
 1008454:	10880014 	ori	r2,r2,8192
 1008458:	1906703a 	and	r3,r3,r4
 100845c:	a880030d 	sth	r2,12(r21)
 1008460:	a8c01915 	stw	r3,100(r21)
 1008464:	10c0020c 	andi	r3,r2,8
 1008468:	18010826 	beq	r3,zero,100888c <___vfiprintf_internal_r+0x494>
 100846c:	a8c00417 	ldw	r3,16(r21)
 1008470:	18010626 	beq	r3,zero,100888c <___vfiprintf_internal_r+0x494>
 1008474:	1080068c 	andi	r2,r2,26
 1008478:	10800298 	cmpnei	r2,r2,10
 100847c:	10010b26 	beq	r2,zero,10088ac <___vfiprintf_internal_r+0x4b4>
 1008480:	dc801704 	addi	r18,sp,92
 1008484:	dc800a15 	stw	r18,40(sp)
 1008488:	d8000c15 	stw	zero,48(sp)
 100848c:	d8000b15 	stw	zero,44(sp)
 1008490:	9021883a 	mov	r16,r18
 1008494:	d8000515 	stw	zero,20(sp)
 1008498:	d8000115 	stw	zero,4(sp)
 100849c:	a0c00007 	ldb	r3,0(r20)
 10084a0:	1800e826 	beq	r3,zero,1008844 <___vfiprintf_internal_r+0x44c>
 10084a4:	a023883a 	mov	r17,r20
 10084a8:	00000306 	br	10084b8 <___vfiprintf_internal_r+0xc0>
 10084ac:	88c00047 	ldb	r3,1(r17)
 10084b0:	8c400044 	addi	r17,r17,1
 10084b4:	18012a26 	beq	r3,zero,1008960 <___vfiprintf_internal_r+0x568>
 10084b8:	18c00958 	cmpnei	r3,r3,37
 10084bc:	183ffb1e 	bne	r3,zero,10084ac <___vfiprintf_internal_r+0xb4>
 10084c0:	8d27c83a 	sub	r19,r17,r20
 10084c4:	8d01281e 	bne	r17,r20,1008968 <___vfiprintf_internal_r+0x570>
 10084c8:	88800003 	ldbu	r2,0(r17)
 10084cc:	10803fcc 	andi	r2,r2,255
 10084d0:	1080201c 	xori	r2,r2,128
 10084d4:	10bfe004 	addi	r2,r2,-128
 10084d8:	1000da26 	beq	r2,zero,1008844 <___vfiprintf_internal_r+0x44c>
 10084dc:	88800047 	ldb	r2,1(r17)
 10084e0:	8d000044 	addi	r20,r17,1
 10084e4:	d8000945 	stb	zero,37(sp)
 10084e8:	000b883a 	mov	r5,zero
 10084ec:	000d883a 	mov	r6,zero
 10084f0:	023fffc4 	movi	r8,-1
 10084f4:	0023883a 	mov	r17,zero
 10084f8:	001b883a 	mov	r13,zero
 10084fc:	a5000044 	addi	r20,r20,1
 1008500:	10fff804 	addi	r3,r2,-32
 1008504:	19001668 	cmpgeui	r4,r3,89
 1008508:	20006c1e 	bne	r4,zero,10086bc <___vfiprintf_internal_r+0x2c4>
 100850c:	180690ba 	slli	r3,r3,2
 1008510:	01004074 	movhi	r4,257
 1008514:	1909883a 	add	r4,r3,r4
 1008518:	20e14817 	ldw	r3,-31456(r4)
 100851c:	1800683a 	jmp	r3
 1008520:	01008e20 	cmpeqi	r4,zero,568
 1008524:	010086bc 	xorhi	r4,zero,538
 1008528:	010086bc 	xorhi	r4,zero,538
 100852c:	01008e14 	movui	r4,568
 1008530:	010086bc 	xorhi	r4,zero,538
 1008534:	010086bc 	xorhi	r4,zero,538
 1008538:	010086bc 	xorhi	r4,zero,538
 100853c:	010086bc 	xorhi	r4,zero,538
 1008540:	010086bc 	xorhi	r4,zero,538
 1008544:	010086bc 	xorhi	r4,zero,538
 1008548:	01008dec 	andhi	r4,zero,567
 100854c:	01008ddc 	xori	r4,zero,567
 1008550:	010086bc 	xorhi	r4,zero,538
 1008554:	01008dc4 	movi	r4,567
 1008558:	01008d78 	rdprs	r4,zero,565
 100855c:	010086bc 	xorhi	r4,zero,538
 1008560:	01008d6c 	andhi	r4,zero,565
 1008564:	01008684 	movi	r4,538
 1008568:	01008684 	movi	r4,538
 100856c:	01008684 	movi	r4,538
 1008570:	01008684 	movi	r4,538
 1008574:	01008684 	movi	r4,538
 1008578:	01008684 	movi	r4,538
 100857c:	01008684 	movi	r4,538
 1008580:	01008684 	movi	r4,538
 1008584:	01008684 	movi	r4,538
 1008588:	010086bc 	xorhi	r4,zero,538
 100858c:	010086bc 	xorhi	r4,zero,538
 1008590:	010086bc 	xorhi	r4,zero,538
 1008594:	010086bc 	xorhi	r4,zero,538
 1008598:	010086bc 	xorhi	r4,zero,538
 100859c:	010086bc 	xorhi	r4,zero,538
 10085a0:	010086bc 	xorhi	r4,zero,538
 10085a4:	010086bc 	xorhi	r4,zero,538
 10085a8:	010086bc 	xorhi	r4,zero,538
 10085ac:	010086bc 	xorhi	r4,zero,538
 10085b0:	01008c88 	cmpgei	r4,zero,562
 10085b4:	010086bc 	xorhi	r4,zero,538
 10085b8:	010086bc 	xorhi	r4,zero,538
 10085bc:	010086bc 	xorhi	r4,zero,538
 10085c0:	010086bc 	xorhi	r4,zero,538
 10085c4:	010086bc 	xorhi	r4,zero,538
 10085c8:	010086bc 	xorhi	r4,zero,538
 10085cc:	010086bc 	xorhi	r4,zero,538
 10085d0:	010086bc 	xorhi	r4,zero,538
 10085d4:	010086bc 	xorhi	r4,zero,538
 10085d8:	010086bc 	xorhi	r4,zero,538
 10085dc:	010088f8 	rdprs	r4,zero,547
 10085e0:	010086bc 	xorhi	r4,zero,538
 10085e4:	010086bc 	xorhi	r4,zero,538
 10085e8:	010086bc 	xorhi	r4,zero,538
 10085ec:	010086bc 	xorhi	r4,zero,538
 10085f0:	010086bc 	xorhi	r4,zero,538
 10085f4:	010088d0 	cmplti	r4,zero,547
 10085f8:	010086bc 	xorhi	r4,zero,538
 10085fc:	010086bc 	xorhi	r4,zero,538
 1008600:	01008c40 	call	1008c4 <__ram_exceptions_end+0x100710>
 1008604:	010086bc 	xorhi	r4,zero,538
 1008608:	010086bc 	xorhi	r4,zero,538
 100860c:	010086bc 	xorhi	r4,zero,538
 1008610:	010086bc 	xorhi	r4,zero,538
 1008614:	010086bc 	xorhi	r4,zero,538
 1008618:	010086bc 	xorhi	r4,zero,538
 100861c:	010086bc 	xorhi	r4,zero,538
 1008620:	010086bc 	xorhi	r4,zero,538
 1008624:	010086bc 	xorhi	r4,zero,538
 1008628:	010086bc 	xorhi	r4,zero,538
 100862c:	01008c18 	cmpnei	r4,zero,560
 1008630:	01008b18 	cmpnei	r4,zero,556
 1008634:	010086bc 	xorhi	r4,zero,538
 1008638:	010086bc 	xorhi	r4,zero,538
 100863c:	010086bc 	xorhi	r4,zero,538
 1008640:	01008bbc 	xorhi	r4,zero,558
 1008644:	01008b18 	cmpnei	r4,zero,556
 1008648:	010086bc 	xorhi	r4,zero,538
 100864c:	010086bc 	xorhi	r4,zero,538
 1008650:	01008c04 	movi	r4,560
 1008654:	010086bc 	xorhi	r4,zero,538
 1008658:	01008bc8 	cmpgei	r4,zero,559
 100865c:	010088fc 	xorhi	r4,zero,547
 1008660:	01008ef8 	rdprs	r4,zero,571
 1008664:	01008eec 	andhi	r4,zero,571
 1008668:	010086bc 	xorhi	r4,zero,538
 100866c:	01008e94 	movui	r4,570
 1008670:	010086bc 	xorhi	r4,zero,538
 1008674:	010088d4 	movui	r4,547
 1008678:	010086bc 	xorhi	r4,zero,538
 100867c:	010086bc 	xorhi	r4,zero,538
 1008680:	01008e4c 	andi	r4,zero,569
 1008684:	0023883a 	mov	r17,zero
 1008688:	113ff404 	addi	r4,r2,-48
 100868c:	880690ba 	slli	r3,r17,2
 1008690:	a0800007 	ldb	r2,0(r20)
 1008694:	a5000044 	addi	r20,r20,1
 1008698:	1c63883a 	add	r17,r3,r17
 100869c:	8c63883a 	add	r17,r17,r17
 10086a0:	2463883a 	add	r17,r4,r17
 10086a4:	113ff404 	addi	r4,r2,-48
 10086a8:	20c002b0 	cmpltui	r3,r4,10
 10086ac:	183ff71e 	bne	r3,zero,100868c <___vfiprintf_internal_r+0x294>
 10086b0:	10fff804 	addi	r3,r2,-32
 10086b4:	19001668 	cmpgeui	r4,r3,89
 10086b8:	203f9426 	beq	r4,zero,100850c <___vfiprintf_internal_r+0x114>
 10086bc:	29403fcc 	andi	r5,r5,255
 10086c0:	2803e31e 	bne	r5,zero,1009650 <___vfiprintf_internal_r+0x1258>
 10086c4:	10005f26 	beq	r2,zero,1008844 <___vfiprintf_internal_r+0x44c>
 10086c8:	d8800d05 	stb	r2,52(sp)
 10086cc:	d8000945 	stb	zero,37(sp)
 10086d0:	05c00044 	movi	r23,1
 10086d4:	07000044 	movi	fp,1
 10086d8:	dcc00d04 	addi	r19,sp,52
 10086dc:	db400015 	stw	r13,0(sp)
 10086e0:	0011883a 	mov	r8,zero
 10086e4:	d8800017 	ldw	r2,0(sp)
 10086e8:	1380008c 	andi	r14,r2,2
 10086ec:	70000126 	beq	r14,zero,10086f4 <___vfiprintf_internal_r+0x2fc>
 10086f0:	bdc00084 	addi	r23,r23,2
 10086f4:	d8800017 	ldw	r2,0(sp)
 10086f8:	d9000b17 	ldw	r4,44(sp)
 10086fc:	1340210c 	andi	r13,r2,132
 1008700:	21800044 	addi	r6,r4,1
 1008704:	d8800c17 	ldw	r2,48(sp)
 1008708:	300b883a 	mov	r5,r6
 100870c:	6800021e 	bne	r13,zero,1008718 <___vfiprintf_internal_r+0x320>
 1008710:	8dc7c83a 	sub	r3,r17,r23
 1008714:	00c2d716 	blt	zero,r3,1009274 <___vfiprintf_internal_r+0xe7c>
 1008718:	d8c00947 	ldb	r3,37(sp)
 100871c:	81800204 	addi	r6,r16,8
 1008720:	18000d26 	beq	r3,zero,1008758 <___vfiprintf_internal_r+0x360>
 1008724:	d8c00944 	addi	r3,sp,37
 1008728:	10800044 	addi	r2,r2,1
 100872c:	80c00015 	stw	r3,0(r16)
 1008730:	00c00044 	movi	r3,1
 1008734:	80c00115 	stw	r3,4(r16)
 1008738:	d8800c15 	stw	r2,48(sp)
 100873c:	d9400b15 	stw	r5,44(sp)
 1008740:	28c00208 	cmpgei	r3,r5,8
 1008744:	1802ac1e 	bne	r3,zero,10091f8 <___vfiprintf_internal_r+0xe00>
 1008748:	2809883a 	mov	r4,r5
 100874c:	3021883a 	mov	r16,r6
 1008750:	29400044 	addi	r5,r5,1
 1008754:	31800204 	addi	r6,r6,8
 1008758:	70001826 	beq	r14,zero,10087bc <___vfiprintf_internal_r+0x3c4>
 100875c:	d8c00984 	addi	r3,sp,38
 1008760:	10800084 	addi	r2,r2,2
 1008764:	80c00015 	stw	r3,0(r16)
 1008768:	00c00084 	movi	r3,2
 100876c:	80c00115 	stw	r3,4(r16)
 1008770:	d8800c15 	stw	r2,48(sp)
 1008774:	d9400b15 	stw	r5,44(sp)
 1008778:	28c00208 	cmpgei	r3,r5,8
 100877c:	1802b626 	beq	r3,zero,1009258 <___vfiprintf_internal_r+0xe60>
 1008780:	10031226 	beq	r2,zero,10093cc <___vfiprintf_internal_r+0xfd4>
 1008784:	d9800a04 	addi	r6,sp,40
 1008788:	a80b883a 	mov	r5,r21
 100878c:	b009883a 	mov	r4,r22
 1008790:	da000315 	stw	r8,12(sp)
 1008794:	db400215 	stw	r13,8(sp)
 1008798:	10082ec0 	call	10082ec <__sprint_r.part.0>
 100879c:	10002b1e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 10087a0:	d9000b17 	ldw	r4,44(sp)
 10087a4:	d8800c17 	ldw	r2,48(sp)
 10087a8:	da000317 	ldw	r8,12(sp)
 10087ac:	db400217 	ldw	r13,8(sp)
 10087b0:	d9801904 	addi	r6,sp,100
 10087b4:	21400044 	addi	r5,r4,1
 10087b8:	9021883a 	mov	r16,r18
 10087bc:	6b402018 	cmpnei	r13,r13,128
 10087c0:	68020c26 	beq	r13,zero,1008ff4 <___vfiprintf_internal_r+0xbfc>
 10087c4:	4711c83a 	sub	r8,r8,fp
 10087c8:	02024b16 	blt	zero,r8,10090f8 <___vfiprintf_internal_r+0xd00>
 10087cc:	e085883a 	add	r2,fp,r2
 10087d0:	d9400b15 	stw	r5,44(sp)
 10087d4:	84c00015 	stw	r19,0(r16)
 10087d8:	87000115 	stw	fp,4(r16)
 10087dc:	d8800c15 	stw	r2,48(sp)
 10087e0:	29400210 	cmplti	r5,r5,8
 10087e4:	2800081e 	bne	r5,zero,1008808 <___vfiprintf_internal_r+0x410>
 10087e8:	10008f26 	beq	r2,zero,1008a28 <___vfiprintf_internal_r+0x630>
 10087ec:	d9800a04 	addi	r6,sp,40
 10087f0:	a80b883a 	mov	r5,r21
 10087f4:	b009883a 	mov	r4,r22
 10087f8:	10082ec0 	call	10082ec <__sprint_r.part.0>
 10087fc:	1000131e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1008800:	d8800c17 	ldw	r2,48(sp)
 1008804:	900d883a 	mov	r6,r18
 1008808:	d8c00017 	ldw	r3,0(sp)
 100880c:	1cc0010c 	andi	r19,r3,4
 1008810:	98000226 	beq	r19,zero,100881c <___vfiprintf_internal_r+0x424>
 1008814:	8de1c83a 	sub	r16,r17,r23
 1008818:	04008a16 	blt	zero,r16,1008a44 <___vfiprintf_internal_r+0x64c>
 100881c:	8dc0010e 	bge	r17,r23,1008824 <___vfiprintf_internal_r+0x42c>
 1008820:	b823883a 	mov	r17,r23
 1008824:	d8c00117 	ldw	r3,4(sp)
 1008828:	1c47883a 	add	r3,r3,r17
 100882c:	d8c00115 	stw	r3,4(sp)
 1008830:	1002671e 	bne	r2,zero,10091d0 <___vfiprintf_internal_r+0xdd8>
 1008834:	a0c00007 	ldb	r3,0(r20)
 1008838:	d8000b15 	stw	zero,44(sp)
 100883c:	9021883a 	mov	r16,r18
 1008840:	183f181e 	bne	r3,zero,10084a4 <___vfiprintf_internal_r+0xac>
 1008844:	d8800c17 	ldw	r2,48(sp)
 1008848:	1003831e 	bne	r2,zero,1009658 <___vfiprintf_internal_r+0x1260>
 100884c:	a880030b 	ldhu	r2,12(r21)
 1008850:	1080100c 	andi	r2,r2,64
 1008854:	10039e1e 	bne	r2,zero,10096d0 <___vfiprintf_internal_r+0x12d8>
 1008858:	d8800117 	ldw	r2,4(sp)
 100885c:	dfc03017 	ldw	ra,192(sp)
 1008860:	df002f17 	ldw	fp,188(sp)
 1008864:	ddc02e17 	ldw	r23,184(sp)
 1008868:	dd802d17 	ldw	r22,180(sp)
 100886c:	dd402c17 	ldw	r21,176(sp)
 1008870:	dd002b17 	ldw	r20,172(sp)
 1008874:	dcc02a17 	ldw	r19,168(sp)
 1008878:	dc802917 	ldw	r18,164(sp)
 100887c:	dc402817 	ldw	r17,160(sp)
 1008880:	dc002717 	ldw	r16,156(sp)
 1008884:	dec03104 	addi	sp,sp,196
 1008888:	f800283a 	ret
 100888c:	a80b883a 	mov	r5,r21
 1008890:	b009883a 	mov	r4,r22
 1008894:	10031fc0 	call	10031fc <__swsetup_r>
 1008898:	10038d1e 	bne	r2,zero,10096d0 <___vfiprintf_internal_r+0x12d8>
 100889c:	a880030b 	ldhu	r2,12(r21)
 10088a0:	1080068c 	andi	r2,r2,26
 10088a4:	10800298 	cmpnei	r2,r2,10
 10088a8:	103ef51e 	bne	r2,zero,1008480 <___vfiprintf_internal_r+0x88>
 10088ac:	a880038f 	ldh	r2,14(r21)
 10088b0:	103ef316 	blt	r2,zero,1008480 <___vfiprintf_internal_r+0x88>
 10088b4:	d9c00417 	ldw	r7,16(sp)
 10088b8:	a00d883a 	mov	r6,r20
 10088bc:	a80b883a 	mov	r5,r21
 10088c0:	b009883a 	mov	r4,r22
 10088c4:	10097280 	call	1009728 <__sbprintf>
 10088c8:	d8800115 	stw	r2,4(sp)
 10088cc:	003fe206 	br	1008858 <___vfiprintf_internal_r+0x460>
 10088d0:	6b400414 	ori	r13,r13,16
 10088d4:	6880080c 	andi	r2,r13,32
 10088d8:	10004726 	beq	r2,zero,10089f8 <___vfiprintf_internal_r+0x600>
 10088dc:	d8c00417 	ldw	r3,16(sp)
 10088e0:	00800044 	movi	r2,1
 10088e4:	1dc00017 	ldw	r23,0(r3)
 10088e8:	1f000117 	ldw	fp,4(r3)
 10088ec:	18c00204 	addi	r3,r3,8
 10088f0:	d8c00415 	stw	r3,16(sp)
 10088f4:	00000906 	br	100891c <___vfiprintf_internal_r+0x524>
 10088f8:	6b400414 	ori	r13,r13,16
 10088fc:	6880080c 	andi	r2,r13,32
 1008900:	10003126 	beq	r2,zero,10089c8 <___vfiprintf_internal_r+0x5d0>
 1008904:	d8c00417 	ldw	r3,16(sp)
 1008908:	0005883a 	mov	r2,zero
 100890c:	1dc00017 	ldw	r23,0(r3)
 1008910:	1f000117 	ldw	fp,4(r3)
 1008914:	18c00204 	addi	r3,r3,8
 1008918:	d8c00415 	stw	r3,16(sp)
 100891c:	d8000945 	stb	zero,37(sp)
 1008920:	40ffffe0 	cmpeqi	r3,r8,-1
 1008924:	001d883a 	mov	r14,zero
 1008928:	1800f21e 	bne	r3,zero,1008cf4 <___vfiprintf_internal_r+0x8fc>
 100892c:	04ffdfc4 	movi	r19,-129
 1008930:	6cc8703a 	and	r4,r13,r19
 1008934:	bf06b03a 	or	r3,r23,fp
 1008938:	d9000015 	stw	r4,0(sp)
 100893c:	18024b1e 	bne	r3,zero,100926c <___vfiprintf_internal_r+0xe74>
 1008940:	4003091e 	bne	r8,zero,1009568 <___vfiprintf_internal_r+0x1170>
 1008944:	1002a61e 	bne	r2,zero,10093e0 <___vfiprintf_internal_r+0xfe8>
 1008948:	6f00004c 	andi	fp,r13,1
 100894c:	e002b826 	beq	fp,zero,1009430 <___vfiprintf_internal_r+0x1038>
 1008950:	00800c04 	movi	r2,48
 1008954:	d88016c5 	stb	r2,91(sp)
 1008958:	dcc016c4 	addi	r19,sp,91
 100895c:	00008e06 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1008960:	8d27c83a 	sub	r19,r17,r20
 1008964:	8d3fb726 	beq	r17,r20,1008844 <___vfiprintf_internal_r+0x44c>
 1008968:	d8c00c17 	ldw	r3,48(sp)
 100896c:	d8800b17 	ldw	r2,44(sp)
 1008970:	85000015 	stw	r20,0(r16)
 1008974:	98c7883a 	add	r3,r19,r3
 1008978:	10800044 	addi	r2,r2,1
 100897c:	d8800b15 	stw	r2,44(sp)
 1008980:	84c00115 	stw	r19,4(r16)
 1008984:	d8c00c15 	stw	r3,48(sp)
 1008988:	10800208 	cmpgei	r2,r2,8
 100898c:	1000061e 	bne	r2,zero,10089a8 <___vfiprintf_internal_r+0x5b0>
 1008990:	84000204 	addi	r16,r16,8
 1008994:	d8c00117 	ldw	r3,4(sp)
 1008998:	88800003 	ldbu	r2,0(r17)
 100899c:	1cc7883a 	add	r3,r3,r19
 10089a0:	d8c00115 	stw	r3,4(sp)
 10089a4:	003ec906 	br	10084cc <___vfiprintf_internal_r+0xd4>
 10089a8:	18027f26 	beq	r3,zero,10093a8 <___vfiprintf_internal_r+0xfb0>
 10089ac:	d9800a04 	addi	r6,sp,40
 10089b0:	a80b883a 	mov	r5,r21
 10089b4:	b009883a 	mov	r4,r22
 10089b8:	10082ec0 	call	10082ec <__sprint_r.part.0>
 10089bc:	103fa31e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 10089c0:	9021883a 	mov	r16,r18
 10089c4:	003ff306 	br	1008994 <___vfiprintf_internal_r+0x59c>
 10089c8:	d9000417 	ldw	r4,16(sp)
 10089cc:	6880040c 	andi	r2,r13,16
 10089d0:	20c00104 	addi	r3,r4,4
 10089d4:	1002a31e 	bne	r2,zero,1009464 <___vfiprintf_internal_r+0x106c>
 10089d8:	6880100c 	andi	r2,r13,64
 10089dc:	1002f626 	beq	r2,zero,10095b8 <___vfiprintf_internal_r+0x11c0>
 10089e0:	d8800417 	ldw	r2,16(sp)
 10089e4:	0039883a 	mov	fp,zero
 10089e8:	d8c00415 	stw	r3,16(sp)
 10089ec:	15c0000b 	ldhu	r23,0(r2)
 10089f0:	0005883a 	mov	r2,zero
 10089f4:	003fc906 	br	100891c <___vfiprintf_internal_r+0x524>
 10089f8:	d9000417 	ldw	r4,16(sp)
 10089fc:	6880040c 	andi	r2,r13,16
 1008a00:	20c00104 	addi	r3,r4,4
 1008a04:	1002ab1e 	bne	r2,zero,10094b4 <___vfiprintf_internal_r+0x10bc>
 1008a08:	6880100c 	andi	r2,r13,64
 1008a0c:	1002f026 	beq	r2,zero,10095d0 <___vfiprintf_internal_r+0x11d8>
 1008a10:	d8800417 	ldw	r2,16(sp)
 1008a14:	0039883a 	mov	fp,zero
 1008a18:	d8c00415 	stw	r3,16(sp)
 1008a1c:	15c0000b 	ldhu	r23,0(r2)
 1008a20:	00800044 	movi	r2,1
 1008a24:	003fbd06 	br	100891c <___vfiprintf_internal_r+0x524>
 1008a28:	d8c00017 	ldw	r3,0(sp)
 1008a2c:	d8000b15 	stw	zero,44(sp)
 1008a30:	1cc0010c 	andi	r19,r3,4
 1008a34:	98024a26 	beq	r19,zero,1009360 <___vfiprintf_internal_r+0xf68>
 1008a38:	8de1c83a 	sub	r16,r17,r23
 1008a3c:	0402480e 	bge	zero,r16,1009360 <___vfiprintf_internal_r+0xf68>
 1008a40:	900d883a 	mov	r6,r18
 1008a44:	80c00450 	cmplti	r3,r16,17
 1008a48:	d9000b17 	ldw	r4,44(sp)
 1008a4c:	01c04074 	movhi	r7,257
 1008a50:	1803171e 	bne	r3,zero,10096b0 <___vfiprintf_internal_r+0x12b8>
 1008a54:	39c9cd04 	addi	r7,r7,10036
 1008a58:	04c00404 	movi	r19,16
 1008a5c:	00000606 	br	1008a78 <___vfiprintf_internal_r+0x680>
 1008a60:	21400084 	addi	r5,r4,2
 1008a64:	31800204 	addi	r6,r6,8
 1008a68:	1809883a 	mov	r4,r3
 1008a6c:	843ffc04 	addi	r16,r16,-16
 1008a70:	80c00448 	cmpgei	r3,r16,17
 1008a74:	18001726 	beq	r3,zero,1008ad4 <___vfiprintf_internal_r+0x6dc>
 1008a78:	20c00044 	addi	r3,r4,1
 1008a7c:	10800404 	addi	r2,r2,16
 1008a80:	31c00015 	stw	r7,0(r6)
 1008a84:	34c00115 	stw	r19,4(r6)
 1008a88:	d8800c15 	stw	r2,48(sp)
 1008a8c:	d8c00b15 	stw	r3,44(sp)
 1008a90:	19400208 	cmpgei	r5,r3,8
 1008a94:	283ff226 	beq	r5,zero,1008a60 <___vfiprintf_internal_r+0x668>
 1008a98:	d9800a04 	addi	r6,sp,40
 1008a9c:	a80b883a 	mov	r5,r21
 1008aa0:	b009883a 	mov	r4,r22
 1008aa4:	10014f26 	beq	r2,zero,1008fe4 <___vfiprintf_internal_r+0xbec>
 1008aa8:	d9c00015 	stw	r7,0(sp)
 1008aac:	10082ec0 	call	10082ec <__sprint_r.part.0>
 1008ab0:	103f661e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1008ab4:	d9000b17 	ldw	r4,44(sp)
 1008ab8:	843ffc04 	addi	r16,r16,-16
 1008abc:	80c00448 	cmpgei	r3,r16,17
 1008ac0:	d8800c17 	ldw	r2,48(sp)
 1008ac4:	d9c00017 	ldw	r7,0(sp)
 1008ac8:	900d883a 	mov	r6,r18
 1008acc:	21400044 	addi	r5,r4,1
 1008ad0:	183fe91e 	bne	r3,zero,1008a78 <___vfiprintf_internal_r+0x680>
 1008ad4:	1405883a 	add	r2,r2,r16
 1008ad8:	d9400b15 	stw	r5,44(sp)
 1008adc:	31c00015 	stw	r7,0(r6)
 1008ae0:	34000115 	stw	r16,4(r6)
 1008ae4:	d8800c15 	stw	r2,48(sp)
 1008ae8:	29400210 	cmplti	r5,r5,8
 1008aec:	283f4b1e 	bne	r5,zero,100881c <___vfiprintf_internal_r+0x424>
 1008af0:	10021b26 	beq	r2,zero,1009360 <___vfiprintf_internal_r+0xf68>
 1008af4:	d9800a04 	addi	r6,sp,40
 1008af8:	a80b883a 	mov	r5,r21
 1008afc:	b009883a 	mov	r4,r22
 1008b00:	10082ec0 	call	10082ec <__sprint_r.part.0>
 1008b04:	103f511e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1008b08:	d8800c17 	ldw	r2,48(sp)
 1008b0c:	003f4306 	br	100881c <___vfiprintf_internal_r+0x424>
 1008b10:	10052840 	call	1005284 <__sinit>
 1008b14:	003e4a06 	br	1008440 <___vfiprintf_internal_r+0x48>
 1008b18:	29403fcc 	andi	r5,r5,255
 1008b1c:	2802e01e 	bne	r5,zero,10096a0 <___vfiprintf_internal_r+0x12a8>
 1008b20:	6880080c 	andi	r2,r13,32
 1008b24:	10005d26 	beq	r2,zero,1008c9c <___vfiprintf_internal_r+0x8a4>
 1008b28:	d8c00417 	ldw	r3,16(sp)
 1008b2c:	18800117 	ldw	r2,4(r3)
 1008b30:	1dc00017 	ldw	r23,0(r3)
 1008b34:	18c00204 	addi	r3,r3,8
 1008b38:	d8c00415 	stw	r3,16(sp)
 1008b3c:	1039883a 	mov	fp,r2
 1008b40:	10006216 	blt	r2,zero,1008ccc <___vfiprintf_internal_r+0x8d4>
 1008b44:	40bfffd8 	cmpnei	r2,r8,-1
 1008b48:	10000a26 	beq	r2,zero,1008b74 <___vfiprintf_internal_r+0x77c>
 1008b4c:	00ffdfc4 	movi	r3,-129
 1008b50:	bf04b03a 	or	r2,r23,fp
 1008b54:	db800943 	ldbu	r14,37(sp)
 1008b58:	68da703a 	and	r13,r13,r3
 1008b5c:	1000061e 	bne	r2,zero,1008b78 <___vfiprintf_internal_r+0x780>
 1008b60:	4000081e 	bne	r8,zero,1008b84 <___vfiprintf_internal_r+0x78c>
 1008b64:	0039883a 	mov	fp,zero
 1008b68:	db400015 	stw	r13,0(sp)
 1008b6c:	9027883a 	mov	r19,r18
 1008b70:	00000906 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1008b74:	db800943 	ldbu	r14,37(sp)
 1008b78:	e000ee1e 	bne	fp,zero,1008f34 <___vfiprintf_internal_r+0xb3c>
 1008b7c:	b88002a8 	cmpgeui	r2,r23,10
 1008b80:	1000ec1e 	bne	r2,zero,1008f34 <___vfiprintf_internal_r+0xb3c>
 1008b84:	bdc00c04 	addi	r23,r23,48
 1008b88:	ddc016c5 	stb	r23,91(sp)
 1008b8c:	db400015 	stw	r13,0(sp)
 1008b90:	07000044 	movi	fp,1
 1008b94:	dcc016c4 	addi	r19,sp,91
 1008b98:	402f883a 	mov	r23,r8
 1008b9c:	4700010e 	bge	r8,fp,1008ba4 <___vfiprintf_internal_r+0x7ac>
 1008ba0:	e02f883a 	mov	r23,fp
 1008ba4:	73803fcc 	andi	r14,r14,255
 1008ba8:	7380201c 	xori	r14,r14,128
 1008bac:	73bfe004 	addi	r14,r14,-128
 1008bb0:	703ecc26 	beq	r14,zero,10086e4 <___vfiprintf_internal_r+0x2ec>
 1008bb4:	bdc00044 	addi	r23,r23,1
 1008bb8:	003eca06 	br	10086e4 <___vfiprintf_internal_r+0x2ec>
 1008bbc:	a0800007 	ldb	r2,0(r20)
 1008bc0:	6b401014 	ori	r13,r13,64
 1008bc4:	003e4d06 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008bc8:	29403fcc 	andi	r5,r5,255
 1008bcc:	2802b21e 	bne	r5,zero,1009698 <___vfiprintf_internal_r+0x12a0>
 1008bd0:	d9000417 	ldw	r4,16(sp)
 1008bd4:	6880080c 	andi	r2,r13,32
 1008bd8:	20c00017 	ldw	r3,0(r4)
 1008bdc:	21000104 	addi	r4,r4,4
 1008be0:	1002251e 	bne	r2,zero,1009478 <___vfiprintf_internal_r+0x1080>
 1008be4:	6880040c 	andi	r2,r13,16
 1008be8:	1002531e 	bne	r2,zero,1009538 <___vfiprintf_internal_r+0x1140>
 1008bec:	6b40100c 	andi	r13,r13,64
 1008bf0:	68025126 	beq	r13,zero,1009538 <___vfiprintf_internal_r+0x1140>
 1008bf4:	d8800117 	ldw	r2,4(sp)
 1008bf8:	d9000415 	stw	r4,16(sp)
 1008bfc:	1880000d 	sth	r2,0(r3)
 1008c00:	003e2606 	br	100849c <___vfiprintf_internal_r+0xa4>
 1008c04:	a0800007 	ldb	r2,0(r20)
 1008c08:	10c01b18 	cmpnei	r3,r2,108
 1008c0c:	18025a26 	beq	r3,zero,1009578 <___vfiprintf_internal_r+0x1180>
 1008c10:	6b400414 	ori	r13,r13,16
 1008c14:	003e3906 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008c18:	d8c00417 	ldw	r3,16(sp)
 1008c1c:	d8000945 	stb	zero,37(sp)
 1008c20:	05c00044 	movi	r23,1
 1008c24:	18800017 	ldw	r2,0(r3)
 1008c28:	18c00104 	addi	r3,r3,4
 1008c2c:	d8c00415 	stw	r3,16(sp)
 1008c30:	d8800d05 	stb	r2,52(sp)
 1008c34:	07000044 	movi	fp,1
 1008c38:	dcc00d04 	addi	r19,sp,52
 1008c3c:	003ea706 	br	10086dc <___vfiprintf_internal_r+0x2e4>
 1008c40:	29403fcc 	andi	r5,r5,255
 1008c44:	2802981e 	bne	r5,zero,10096a8 <___vfiprintf_internal_r+0x12b0>
 1008c48:	00c04074 	movhi	r3,257
 1008c4c:	18c94204 	addi	r3,r3,9480
 1008c50:	d8c00515 	stw	r3,20(sp)
 1008c54:	68c0080c 	andi	r3,r13,32
 1008c58:	18008326 	beq	r3,zero,1008e68 <___vfiprintf_internal_r+0xa70>
 1008c5c:	d8c00417 	ldw	r3,16(sp)
 1008c60:	1dc00017 	ldw	r23,0(r3)
 1008c64:	1f000117 	ldw	fp,4(r3)
 1008c68:	18c00204 	addi	r3,r3,8
 1008c6c:	d8c00415 	stw	r3,16(sp)
 1008c70:	68c0004c 	andi	r3,r13,1
 1008c74:	18000226 	beq	r3,zero,1008c80 <___vfiprintf_internal_r+0x888>
 1008c78:	bf06b03a 	or	r3,r23,fp
 1008c7c:	1801f31e 	bne	r3,zero,100944c <___vfiprintf_internal_r+0x1054>
 1008c80:	00800084 	movi	r2,2
 1008c84:	003f2506 	br	100891c <___vfiprintf_internal_r+0x524>
 1008c88:	29403fcc 	andi	r5,r5,255
 1008c8c:	2802801e 	bne	r5,zero,1009690 <___vfiprintf_internal_r+0x1298>
 1008c90:	6b400414 	ori	r13,r13,16
 1008c94:	6880080c 	andi	r2,r13,32
 1008c98:	103fa31e 	bne	r2,zero,1008b28 <___vfiprintf_internal_r+0x730>
 1008c9c:	d9000417 	ldw	r4,16(sp)
 1008ca0:	6880040c 	andi	r2,r13,16
 1008ca4:	20c00104 	addi	r3,r4,4
 1008ca8:	1001f91e 	bne	r2,zero,1009490 <___vfiprintf_internal_r+0x1098>
 1008cac:	6880100c 	andi	r2,r13,64
 1008cb0:	10025226 	beq	r2,zero,10095fc <___vfiprintf_internal_r+0x1204>
 1008cb4:	d8800417 	ldw	r2,16(sp)
 1008cb8:	d8c00415 	stw	r3,16(sp)
 1008cbc:	15c0000f 	ldh	r23,0(r2)
 1008cc0:	b839d7fa 	srai	fp,r23,31
 1008cc4:	e005883a 	mov	r2,fp
 1008cc8:	103f9e0e 	bge	r2,zero,1008b44 <___vfiprintf_internal_r+0x74c>
 1008ccc:	b804c03a 	cmpne	r2,r23,zero
 1008cd0:	0739c83a 	sub	fp,zero,fp
 1008cd4:	e0b9c83a 	sub	fp,fp,r2
 1008cd8:	00800b44 	movi	r2,45
 1008cdc:	d8800945 	stb	r2,37(sp)
 1008ce0:	40ffffe0 	cmpeqi	r3,r8,-1
 1008ce4:	05efc83a 	sub	r23,zero,r23
 1008ce8:	03800b44 	movi	r14,45
 1008cec:	00800044 	movi	r2,1
 1008cf0:	183f0e26 	beq	r3,zero,100892c <___vfiprintf_internal_r+0x534>
 1008cf4:	10c00060 	cmpeqi	r3,r2,1
 1008cf8:	183f9f1e 	bne	r3,zero,1008b78 <___vfiprintf_internal_r+0x780>
 1008cfc:	108000a0 	cmpeqi	r2,r2,2
 1008d00:	9027883a 	mov	r19,r18
 1008d04:	1000a81e 	bne	r2,zero,1008fa8 <___vfiprintf_internal_r+0xbb0>
 1008d08:	e006977a 	slli	r3,fp,29
 1008d0c:	b804d0fa 	srli	r2,r23,3
 1008d10:	e038d0fa 	srli	fp,fp,3
 1008d14:	b90001cc 	andi	r4,r23,7
 1008d18:	21000c04 	addi	r4,r4,48
 1008d1c:	18aeb03a 	or	r23,r3,r2
 1008d20:	993fffc5 	stb	r4,-1(r19)
 1008d24:	bf04b03a 	or	r2,r23,fp
 1008d28:	980b883a 	mov	r5,r19
 1008d2c:	9cffffc4 	addi	r19,r19,-1
 1008d30:	103ff51e 	bne	r2,zero,1008d08 <___vfiprintf_internal_r+0x910>
 1008d34:	6880004c 	andi	r2,r13,1
 1008d38:	1000a726 	beq	r2,zero,1008fd8 <___vfiprintf_internal_r+0xbe0>
 1008d3c:	21003fcc 	andi	r4,r4,255
 1008d40:	2100201c 	xori	r4,r4,128
 1008d44:	213fe004 	addi	r4,r4,-128
 1008d48:	20800c18 	cmpnei	r2,r4,48
 1008d4c:	1000a226 	beq	r2,zero,1008fd8 <___vfiprintf_internal_r+0xbe0>
 1008d50:	297fff84 	addi	r5,r5,-2
 1008d54:	00800c04 	movi	r2,48
 1008d58:	98bfffc5 	stb	r2,-1(r19)
 1008d5c:	9179c83a 	sub	fp,r18,r5
 1008d60:	db400015 	stw	r13,0(sp)
 1008d64:	2827883a 	mov	r19,r5
 1008d68:	003f8b06 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1008d6c:	a0800007 	ldb	r2,0(r20)
 1008d70:	6b402014 	ori	r13,r13,128
 1008d74:	003de106 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008d78:	a0800007 	ldb	r2,0(r20)
 1008d7c:	a0c00044 	addi	r3,r20,1
 1008d80:	11000aa0 	cmpeqi	r4,r2,42
 1008d84:	2002551e 	bne	r4,zero,10096dc <___vfiprintf_internal_r+0x12e4>
 1008d88:	113ff404 	addi	r4,r2,-48
 1008d8c:	21c002b0 	cmpltui	r7,r4,10
 1008d90:	1829883a 	mov	r20,r3
 1008d94:	0011883a 	mov	r8,zero
 1008d98:	383dd926 	beq	r7,zero,1008500 <___vfiprintf_internal_r+0x108>
 1008d9c:	400690ba 	slli	r3,r8,2
 1008da0:	a0800007 	ldb	r2,0(r20)
 1008da4:	a5000044 	addi	r20,r20,1
 1008da8:	1a11883a 	add	r8,r3,r8
 1008dac:	4211883a 	add	r8,r8,r8
 1008db0:	4111883a 	add	r8,r8,r4
 1008db4:	113ff404 	addi	r4,r2,-48
 1008db8:	20c002b0 	cmpltui	r3,r4,10
 1008dbc:	183ff71e 	bne	r3,zero,1008d9c <___vfiprintf_internal_r+0x9a4>
 1008dc0:	003dcf06 	br	1008500 <___vfiprintf_internal_r+0x108>
 1008dc4:	a0800003 	ldbu	r2,0(r20)
 1008dc8:	10803fcc 	andi	r2,r2,255
 1008dcc:	1080201c 	xori	r2,r2,128
 1008dd0:	6b400114 	ori	r13,r13,4
 1008dd4:	10bfe004 	addi	r2,r2,-128
 1008dd8:	003dc806 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008ddc:	a0800007 	ldb	r2,0(r20)
 1008de0:	01400044 	movi	r5,1
 1008de4:	01800ac4 	movi	r6,43
 1008de8:	003dc406 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008dec:	d8c00417 	ldw	r3,16(sp)
 1008df0:	a0800003 	ldbu	r2,0(r20)
 1008df4:	1c400017 	ldw	r17,0(r3)
 1008df8:	18c00104 	addi	r3,r3,4
 1008dfc:	8801b916 	blt	r17,zero,10094e4 <___vfiprintf_internal_r+0x10ec>
 1008e00:	d8c00415 	stw	r3,16(sp)
 1008e04:	10803fcc 	andi	r2,r2,255
 1008e08:	1080201c 	xori	r2,r2,128
 1008e0c:	10bfe004 	addi	r2,r2,-128
 1008e10:	003dba06 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008e14:	a0800007 	ldb	r2,0(r20)
 1008e18:	6b400054 	ori	r13,r13,1
 1008e1c:	003db706 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008e20:	30c03fcc 	andi	r3,r6,255
 1008e24:	18c0201c 	xori	r3,r3,128
 1008e28:	18ffe004 	addi	r3,r3,-128
 1008e2c:	a0800003 	ldbu	r2,0(r20)
 1008e30:	183ff41e 	bne	r3,zero,1008e04 <___vfiprintf_internal_r+0xa0c>
 1008e34:	10803fcc 	andi	r2,r2,255
 1008e38:	1080201c 	xori	r2,r2,128
 1008e3c:	01400044 	movi	r5,1
 1008e40:	01800804 	movi	r6,32
 1008e44:	10bfe004 	addi	r2,r2,-128
 1008e48:	003dac06 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008e4c:	29403fcc 	andi	r5,r5,255
 1008e50:	28020a1e 	bne	r5,zero,100967c <___vfiprintf_internal_r+0x1284>
 1008e54:	00c04074 	movhi	r3,257
 1008e58:	18c94704 	addi	r3,r3,9500
 1008e5c:	d8c00515 	stw	r3,20(sp)
 1008e60:	68c0080c 	andi	r3,r13,32
 1008e64:	183f7d1e 	bne	r3,zero,1008c5c <___vfiprintf_internal_r+0x864>
 1008e68:	d9400417 	ldw	r5,16(sp)
 1008e6c:	68c0040c 	andi	r3,r13,16
 1008e70:	29000104 	addi	r4,r5,4
 1008e74:	18018b1e 	bne	r3,zero,10094a4 <___vfiprintf_internal_r+0x10ac>
 1008e78:	68c0100c 	andi	r3,r13,64
 1008e7c:	1801da26 	beq	r3,zero,10095e8 <___vfiprintf_internal_r+0x11f0>
 1008e80:	d8c00417 	ldw	r3,16(sp)
 1008e84:	0039883a 	mov	fp,zero
 1008e88:	d9000415 	stw	r4,16(sp)
 1008e8c:	1dc0000b 	ldhu	r23,0(r3)
 1008e90:	003f7706 	br	1008c70 <___vfiprintf_internal_r+0x878>
 1008e94:	d8800417 	ldw	r2,16(sp)
 1008e98:	d8000945 	stb	zero,37(sp)
 1008e9c:	14c00017 	ldw	r19,0(r2)
 1008ea0:	10c00104 	addi	r3,r2,4
 1008ea4:	9801bb26 	beq	r19,zero,1009594 <___vfiprintf_internal_r+0x119c>
 1008ea8:	40bfffe0 	cmpeqi	r2,r8,-1
 1008eac:	1001901e 	bne	r2,zero,10094f0 <___vfiprintf_internal_r+0x10f8>
 1008eb0:	400d883a 	mov	r6,r8
 1008eb4:	000b883a 	mov	r5,zero
 1008eb8:	9809883a 	mov	r4,r19
 1008ebc:	d8c00315 	stw	r3,12(sp)
 1008ec0:	db400215 	stw	r13,8(sp)
 1008ec4:	da000015 	stw	r8,0(sp)
 1008ec8:	10066c80 	call	10066c8 <memchr>
 1008ecc:	da000017 	ldw	r8,0(sp)
 1008ed0:	db400217 	ldw	r13,8(sp)
 1008ed4:	d8c00317 	ldw	r3,12(sp)
 1008ed8:	1001e426 	beq	r2,zero,100966c <___vfiprintf_internal_r+0x1274>
 1008edc:	14f9c83a 	sub	fp,r2,r19
 1008ee0:	e02f883a 	mov	r23,fp
 1008ee4:	d8c00415 	stw	r3,16(sp)
 1008ee8:	003dfc06 	br	10086dc <___vfiprintf_internal_r+0x2e4>
 1008eec:	a0800007 	ldb	r2,0(r20)
 1008ef0:	6b400814 	ori	r13,r13,32
 1008ef4:	003d8106 	br	10084fc <___vfiprintf_internal_r+0x104>
 1008ef8:	d8c00417 	ldw	r3,16(sp)
 1008efc:	00800c04 	movi	r2,48
 1008f00:	d8800985 	stb	r2,38(sp)
 1008f04:	00801e04 	movi	r2,120
 1008f08:	01004074 	movhi	r4,257
 1008f0c:	d88009c5 	stb	r2,39(sp)
 1008f10:	18800104 	addi	r2,r3,4
 1008f14:	d8800415 	stw	r2,16(sp)
 1008f18:	20894704 	addi	r2,r4,9500
 1008f1c:	d8800515 	stw	r2,20(sp)
 1008f20:	1dc00017 	ldw	r23,0(r3)
 1008f24:	0039883a 	mov	fp,zero
 1008f28:	6b400094 	ori	r13,r13,2
 1008f2c:	00800084 	movi	r2,2
 1008f30:	003e7a06 	br	100891c <___vfiprintf_internal_r+0x524>
 1008f34:	9027883a 	mov	r19,r18
 1008f38:	b809883a 	mov	r4,r23
 1008f3c:	e00b883a 	mov	r5,fp
 1008f40:	01800284 	movi	r6,10
 1008f44:	000f883a 	mov	r7,zero
 1008f48:	db800315 	stw	r14,12(sp)
 1008f4c:	da000215 	stw	r8,8(sp)
 1008f50:	db400015 	stw	r13,0(sp)
 1008f54:	100ac400 	call	100ac40 <__umoddi3>
 1008f58:	10800c04 	addi	r2,r2,48
 1008f5c:	b809883a 	mov	r4,r23
 1008f60:	e00b883a 	mov	r5,fp
 1008f64:	98bfffc5 	stb	r2,-1(r19)
 1008f68:	01800284 	movi	r6,10
 1008f6c:	000f883a 	mov	r7,zero
 1008f70:	100a6240 	call	100a624 <__udivdi3>
 1008f74:	e009883a 	mov	r4,fp
 1008f78:	b80b883a 	mov	r5,r23
 1008f7c:	db400017 	ldw	r13,0(sp)
 1008f80:	da000217 	ldw	r8,8(sp)
 1008f84:	db800317 	ldw	r14,12(sp)
 1008f88:	9cffffc4 	addi	r19,r19,-1
 1008f8c:	102f883a 	mov	r23,r2
 1008f90:	1839883a 	mov	fp,r3
 1008f94:	203fe81e 	bne	r4,zero,1008f38 <___vfiprintf_internal_r+0xb40>
 1008f98:	294002a8 	cmpgeui	r5,r5,10
 1008f9c:	283fe61e 	bne	r5,zero,1008f38 <___vfiprintf_internal_r+0xb40>
 1008fa0:	94f9c83a 	sub	fp,r18,r19
 1008fa4:	003efc06 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1008fa8:	d9000517 	ldw	r4,20(sp)
 1008fac:	b88003cc 	andi	r2,r23,15
 1008fb0:	e006973a 	slli	r3,fp,28
 1008fb4:	b82ed13a 	srli	r23,r23,4
 1008fb8:	2085883a 	add	r2,r4,r2
 1008fbc:	10800003 	ldbu	r2,0(r2)
 1008fc0:	e038d13a 	srli	fp,fp,4
 1008fc4:	1deeb03a 	or	r23,r3,r23
 1008fc8:	98bfffc5 	stb	r2,-1(r19)
 1008fcc:	bf04b03a 	or	r2,r23,fp
 1008fd0:	9cffffc4 	addi	r19,r19,-1
 1008fd4:	103ff41e 	bne	r2,zero,1008fa8 <___vfiprintf_internal_r+0xbb0>
 1008fd8:	94f9c83a 	sub	fp,r18,r19
 1008fdc:	db400015 	stw	r13,0(sp)
 1008fe0:	003eed06 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1008fe4:	01400044 	movi	r5,1
 1008fe8:	0009883a 	mov	r4,zero
 1008fec:	900d883a 	mov	r6,r18
 1008ff0:	003e9e06 	br	1008a6c <___vfiprintf_internal_r+0x674>
 1008ff4:	8dc7c83a 	sub	r3,r17,r23
 1008ff8:	00fdf20e 	bge	zero,r3,10087c4 <___vfiprintf_internal_r+0x3cc>
 1008ffc:	19c00450 	cmplti	r7,r3,17
 1009000:	3801ae1e 	bne	r7,zero,10096bc <___vfiprintf_internal_r+0x12c4>
 1009004:	01c04074 	movhi	r7,257
 1009008:	39c9c904 	addi	r7,r7,10020
 100900c:	03400404 	movi	r13,16
 1009010:	00000606 	br	100902c <___vfiprintf_internal_r+0xc34>
 1009014:	23800084 	addi	r14,r4,2
 1009018:	84000204 	addi	r16,r16,8
 100901c:	2809883a 	mov	r4,r5
 1009020:	18fffc04 	addi	r3,r3,-16
 1009024:	19400448 	cmpgei	r5,r3,17
 1009028:	28001c26 	beq	r5,zero,100909c <___vfiprintf_internal_r+0xca4>
 100902c:	21400044 	addi	r5,r4,1
 1009030:	10800404 	addi	r2,r2,16
 1009034:	81c00015 	stw	r7,0(r16)
 1009038:	83400115 	stw	r13,4(r16)
 100903c:	d8800c15 	stw	r2,48(sp)
 1009040:	d9400b15 	stw	r5,44(sp)
 1009044:	29800208 	cmpgei	r6,r5,8
 1009048:	303ff226 	beq	r6,zero,1009014 <___vfiprintf_internal_r+0xc1c>
 100904c:	d9800a04 	addi	r6,sp,40
 1009050:	a80b883a 	mov	r5,r21
 1009054:	b009883a 	mov	r4,r22
 1009058:	10006326 	beq	r2,zero,10091e8 <___vfiprintf_internal_r+0xdf0>
 100905c:	d9c00615 	stw	r7,24(sp)
 1009060:	d8c00315 	stw	r3,12(sp)
 1009064:	da000215 	stw	r8,8(sp)
 1009068:	10082ec0 	call	10082ec <__sprint_r.part.0>
 100906c:	103df71e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1009070:	d8c00317 	ldw	r3,12(sp)
 1009074:	d9000b17 	ldw	r4,44(sp)
 1009078:	d8800c17 	ldw	r2,48(sp)
 100907c:	18fffc04 	addi	r3,r3,-16
 1009080:	19400448 	cmpgei	r5,r3,17
 1009084:	d9c00617 	ldw	r7,24(sp)
 1009088:	da000217 	ldw	r8,8(sp)
 100908c:	9021883a 	mov	r16,r18
 1009090:	23800044 	addi	r14,r4,1
 1009094:	03400404 	movi	r13,16
 1009098:	283fe41e 	bne	r5,zero,100902c <___vfiprintf_internal_r+0xc34>
 100909c:	83400204 	addi	r13,r16,8
 10090a0:	10c5883a 	add	r2,r2,r3
 10090a4:	80c00115 	stw	r3,4(r16)
 10090a8:	81c00015 	stw	r7,0(r16)
 10090ac:	d8800c15 	stw	r2,48(sp)
 10090b0:	db800b15 	stw	r14,44(sp)
 10090b4:	70c00208 	cmpgei	r3,r14,8
 10090b8:	1800df26 	beq	r3,zero,1009438 <___vfiprintf_internal_r+0x1040>
 10090bc:	10015826 	beq	r2,zero,1009620 <___vfiprintf_internal_r+0x1228>
 10090c0:	d9800a04 	addi	r6,sp,40
 10090c4:	a80b883a 	mov	r5,r21
 10090c8:	b009883a 	mov	r4,r22
 10090cc:	da000215 	stw	r8,8(sp)
 10090d0:	10082ec0 	call	10082ec <__sprint_r.part.0>
 10090d4:	103ddd1e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 10090d8:	da000217 	ldw	r8,8(sp)
 10090dc:	d9000b17 	ldw	r4,44(sp)
 10090e0:	d8800c17 	ldw	r2,48(sp)
 10090e4:	4711c83a 	sub	r8,r8,fp
 10090e8:	d9801904 	addi	r6,sp,100
 10090ec:	21400044 	addi	r5,r4,1
 10090f0:	9021883a 	mov	r16,r18
 10090f4:	023db50e 	bge	zero,r8,10087cc <___vfiprintf_internal_r+0x3d4>
 10090f8:	40c00450 	cmplti	r3,r8,17
 10090fc:	01c04074 	movhi	r7,257
 1009100:	1801441e 	bne	r3,zero,1009614 <___vfiprintf_internal_r+0x121c>
 1009104:	39c9c904 	addi	r7,r7,10020
 1009108:	03400404 	movi	r13,16
 100910c:	00000606 	br	1009128 <___vfiprintf_internal_r+0xd30>
 1009110:	21400084 	addi	r5,r4,2
 1009114:	84000204 	addi	r16,r16,8
 1009118:	1809883a 	mov	r4,r3
 100911c:	423ffc04 	addi	r8,r8,-16
 1009120:	40c00448 	cmpgei	r3,r8,17
 1009124:	18001a26 	beq	r3,zero,1009190 <___vfiprintf_internal_r+0xd98>
 1009128:	20c00044 	addi	r3,r4,1
 100912c:	10800404 	addi	r2,r2,16
 1009130:	81c00015 	stw	r7,0(r16)
 1009134:	83400115 	stw	r13,4(r16)
 1009138:	d8800c15 	stw	r2,48(sp)
 100913c:	d8c00b15 	stw	r3,44(sp)
 1009140:	19400208 	cmpgei	r5,r3,8
 1009144:	283ff226 	beq	r5,zero,1009110 <___vfiprintf_internal_r+0xd18>
 1009148:	d9800a04 	addi	r6,sp,40
 100914c:	a80b883a 	mov	r5,r21
 1009150:	b009883a 	mov	r4,r22
 1009154:	10001a26 	beq	r2,zero,10091c0 <___vfiprintf_internal_r+0xdc8>
 1009158:	d9c00315 	stw	r7,12(sp)
 100915c:	da000215 	stw	r8,8(sp)
 1009160:	10082ec0 	call	10082ec <__sprint_r.part.0>
 1009164:	103db91e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1009168:	da000217 	ldw	r8,8(sp)
 100916c:	d9000b17 	ldw	r4,44(sp)
 1009170:	d8800c17 	ldw	r2,48(sp)
 1009174:	423ffc04 	addi	r8,r8,-16
 1009178:	40c00448 	cmpgei	r3,r8,17
 100917c:	d9c00317 	ldw	r7,12(sp)
 1009180:	9021883a 	mov	r16,r18
 1009184:	21400044 	addi	r5,r4,1
 1009188:	03400404 	movi	r13,16
 100918c:	183fe61e 	bne	r3,zero,1009128 <___vfiprintf_internal_r+0xd30>
 1009190:	81000204 	addi	r4,r16,8
 1009194:	1205883a 	add	r2,r2,r8
 1009198:	81c00015 	stw	r7,0(r16)
 100919c:	82000115 	stw	r8,4(r16)
 10091a0:	d8800c15 	stw	r2,48(sp)
 10091a4:	d9400b15 	stw	r5,44(sp)
 10091a8:	28c00208 	cmpgei	r3,r5,8
 10091ac:	1800721e 	bne	r3,zero,1009378 <___vfiprintf_internal_r+0xf80>
 10091b0:	29400044 	addi	r5,r5,1
 10091b4:	21800204 	addi	r6,r4,8
 10091b8:	2021883a 	mov	r16,r4
 10091bc:	003d8306 	br	10087cc <___vfiprintf_internal_r+0x3d4>
 10091c0:	01400044 	movi	r5,1
 10091c4:	0009883a 	mov	r4,zero
 10091c8:	9021883a 	mov	r16,r18
 10091cc:	003fd306 	br	100911c <___vfiprintf_internal_r+0xd24>
 10091d0:	d9800a04 	addi	r6,sp,40
 10091d4:	a80b883a 	mov	r5,r21
 10091d8:	b009883a 	mov	r4,r22
 10091dc:	10082ec0 	call	10082ec <__sprint_r.part.0>
 10091e0:	103d9426 	beq	r2,zero,1008834 <___vfiprintf_internal_r+0x43c>
 10091e4:	003d9906 	br	100884c <___vfiprintf_internal_r+0x454>
 10091e8:	03800044 	movi	r14,1
 10091ec:	0009883a 	mov	r4,zero
 10091f0:	9021883a 	mov	r16,r18
 10091f4:	003f8a06 	br	1009020 <___vfiprintf_internal_r+0xc28>
 10091f8:	10006e26 	beq	r2,zero,10093b4 <___vfiprintf_internal_r+0xfbc>
 10091fc:	d9800a04 	addi	r6,sp,40
 1009200:	a80b883a 	mov	r5,r21
 1009204:	b009883a 	mov	r4,r22
 1009208:	da000615 	stw	r8,24(sp)
 100920c:	db400315 	stw	r13,12(sp)
 1009210:	db800215 	stw	r14,8(sp)
 1009214:	10082ec0 	call	10082ec <__sprint_r.part.0>
 1009218:	103d8c1e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 100921c:	d9000b17 	ldw	r4,44(sp)
 1009220:	d8800c17 	ldw	r2,48(sp)
 1009224:	da000617 	ldw	r8,24(sp)
 1009228:	db400317 	ldw	r13,12(sp)
 100922c:	db800217 	ldw	r14,8(sp)
 1009230:	d9801904 	addi	r6,sp,100
 1009234:	21400044 	addi	r5,r4,1
 1009238:	9021883a 	mov	r16,r18
 100923c:	003d4606 	br	1008758 <___vfiprintf_internal_r+0x360>
 1009240:	d8800984 	addi	r2,sp,38
 1009244:	d8801715 	stw	r2,92(sp)
 1009248:	00800084 	movi	r2,2
 100924c:	d8801815 	stw	r2,96(sp)
 1009250:	d9801904 	addi	r6,sp,100
 1009254:	01400044 	movi	r5,1
 1009258:	3021883a 	mov	r16,r6
 100925c:	2809883a 	mov	r4,r5
 1009260:	21400044 	addi	r5,r4,1
 1009264:	81800204 	addi	r6,r16,8
 1009268:	003d5406 	br	10087bc <___vfiprintf_internal_r+0x3c4>
 100926c:	db400017 	ldw	r13,0(sp)
 1009270:	003ea006 	br	1008cf4 <___vfiprintf_internal_r+0x8fc>
 1009274:	19400450 	cmplti	r5,r3,17
 1009278:	01c04074 	movhi	r7,257
 100927c:	2801011e 	bne	r5,zero,1009684 <___vfiprintf_internal_r+0x128c>
 1009280:	39c9cd04 	addi	r7,r7,10036
 1009284:	03c00404 	movi	r15,16
 1009288:	00000706 	br	10092a8 <___vfiprintf_internal_r+0xeb0>
 100928c:	27c00084 	addi	ra,r4,2
 1009290:	84000204 	addi	r16,r16,8
 1009294:	3009883a 	mov	r4,r6
 1009298:	18fffc04 	addi	r3,r3,-16
 100929c:	19400448 	cmpgei	r5,r3,17
 10092a0:	28002026 	beq	r5,zero,1009324 <___vfiprintf_internal_r+0xf2c>
 10092a4:	21800044 	addi	r6,r4,1
 10092a8:	10800404 	addi	r2,r2,16
 10092ac:	81c00015 	stw	r7,0(r16)
 10092b0:	83c00115 	stw	r15,4(r16)
 10092b4:	d8800c15 	stw	r2,48(sp)
 10092b8:	d9800b15 	stw	r6,44(sp)
 10092bc:	31400208 	cmpgei	r5,r6,8
 10092c0:	283ff226 	beq	r5,zero,100928c <___vfiprintf_internal_r+0xe94>
 10092c4:	d9800a04 	addi	r6,sp,40
 10092c8:	a80b883a 	mov	r5,r21
 10092cc:	b009883a 	mov	r4,r22
 10092d0:	10001f26 	beq	r2,zero,1009350 <___vfiprintf_internal_r+0xf58>
 10092d4:	d9c00815 	stw	r7,32(sp)
 10092d8:	d8c00715 	stw	r3,28(sp)
 10092dc:	da000615 	stw	r8,24(sp)
 10092e0:	db400315 	stw	r13,12(sp)
 10092e4:	db800215 	stw	r14,8(sp)
 10092e8:	10082ec0 	call	10082ec <__sprint_r.part.0>
 10092ec:	103d571e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 10092f0:	d8c00717 	ldw	r3,28(sp)
 10092f4:	d9000b17 	ldw	r4,44(sp)
 10092f8:	d8800c17 	ldw	r2,48(sp)
 10092fc:	18fffc04 	addi	r3,r3,-16
 1009300:	19400448 	cmpgei	r5,r3,17
 1009304:	d9c00817 	ldw	r7,32(sp)
 1009308:	da000617 	ldw	r8,24(sp)
 100930c:	db400317 	ldw	r13,12(sp)
 1009310:	db800217 	ldw	r14,8(sp)
 1009314:	9021883a 	mov	r16,r18
 1009318:	27c00044 	addi	ra,r4,1
 100931c:	03c00404 	movi	r15,16
 1009320:	283fe01e 	bne	r5,zero,10092a4 <___vfiprintf_internal_r+0xeac>
 1009324:	10c5883a 	add	r2,r2,r3
 1009328:	80c00115 	stw	r3,4(r16)
 100932c:	81c00015 	stw	r7,0(r16)
 1009330:	d8800c15 	stw	r2,48(sp)
 1009334:	dfc00b15 	stw	ra,44(sp)
 1009338:	f8c00208 	cmpgei	r3,ra,8
 100933c:	18002b1e 	bne	r3,zero,10093ec <___vfiprintf_internal_r+0xff4>
 1009340:	84000204 	addi	r16,r16,8
 1009344:	f9400044 	addi	r5,ra,1
 1009348:	f809883a 	mov	r4,ra
 100934c:	003cf206 	br	1008718 <___vfiprintf_internal_r+0x320>
 1009350:	0009883a 	mov	r4,zero
 1009354:	07c00044 	movi	ra,1
 1009358:	9021883a 	mov	r16,r18
 100935c:	003fce06 	br	1009298 <___vfiprintf_internal_r+0xea0>
 1009360:	8dc0010e 	bge	r17,r23,1009368 <___vfiprintf_internal_r+0xf70>
 1009364:	b823883a 	mov	r17,r23
 1009368:	d8800117 	ldw	r2,4(sp)
 100936c:	1445883a 	add	r2,r2,r17
 1009370:	d8800115 	stw	r2,4(sp)
 1009374:	003d2f06 	br	1008834 <___vfiprintf_internal_r+0x43c>
 1009378:	10007326 	beq	r2,zero,1009548 <___vfiprintf_internal_r+0x1150>
 100937c:	d9800a04 	addi	r6,sp,40
 1009380:	a80b883a 	mov	r5,r21
 1009384:	b009883a 	mov	r4,r22
 1009388:	10082ec0 	call	10082ec <__sprint_r.part.0>
 100938c:	103d2f1e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1009390:	d9400b17 	ldw	r5,44(sp)
 1009394:	d8800c17 	ldw	r2,48(sp)
 1009398:	d9801904 	addi	r6,sp,100
 100939c:	29400044 	addi	r5,r5,1
 10093a0:	9021883a 	mov	r16,r18
 10093a4:	003d0906 	br	10087cc <___vfiprintf_internal_r+0x3d4>
 10093a8:	d8000b15 	stw	zero,44(sp)
 10093ac:	9021883a 	mov	r16,r18
 10093b0:	003d7806 	br	1008994 <___vfiprintf_internal_r+0x59c>
 10093b4:	7000441e 	bne	r14,zero,10094c8 <___vfiprintf_internal_r+0x10d0>
 10093b8:	0009883a 	mov	r4,zero
 10093bc:	d9801904 	addi	r6,sp,100
 10093c0:	01400044 	movi	r5,1
 10093c4:	9021883a 	mov	r16,r18
 10093c8:	003cfc06 	br	10087bc <___vfiprintf_internal_r+0x3c4>
 10093cc:	d9801904 	addi	r6,sp,100
 10093d0:	01400044 	movi	r5,1
 10093d4:	0009883a 	mov	r4,zero
 10093d8:	9021883a 	mov	r16,r18
 10093dc:	003cf706 	br	10087bc <___vfiprintf_internal_r+0x3c4>
 10093e0:	0039883a 	mov	fp,zero
 10093e4:	9027883a 	mov	r19,r18
 10093e8:	003deb06 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 10093ec:	10004a26 	beq	r2,zero,1009518 <___vfiprintf_internal_r+0x1120>
 10093f0:	d9800a04 	addi	r6,sp,40
 10093f4:	a80b883a 	mov	r5,r21
 10093f8:	b009883a 	mov	r4,r22
 10093fc:	da000615 	stw	r8,24(sp)
 1009400:	db400315 	stw	r13,12(sp)
 1009404:	db800215 	stw	r14,8(sp)
 1009408:	10082ec0 	call	10082ec <__sprint_r.part.0>
 100940c:	103d0f1e 	bne	r2,zero,100884c <___vfiprintf_internal_r+0x454>
 1009410:	d9000b17 	ldw	r4,44(sp)
 1009414:	d8800c17 	ldw	r2,48(sp)
 1009418:	da000617 	ldw	r8,24(sp)
 100941c:	db400317 	ldw	r13,12(sp)
 1009420:	db800217 	ldw	r14,8(sp)
 1009424:	9021883a 	mov	r16,r18
 1009428:	21400044 	addi	r5,r4,1
 100942c:	003cba06 	br	1008718 <___vfiprintf_internal_r+0x320>
 1009430:	9027883a 	mov	r19,r18
 1009434:	003dd806 	br	1008b98 <___vfiprintf_internal_r+0x7a0>
 1009438:	71400044 	addi	r5,r14,1
 100943c:	69800204 	addi	r6,r13,8
 1009440:	7009883a 	mov	r4,r14
 1009444:	6821883a 	mov	r16,r13
 1009448:	003cde06 	br	10087c4 <___vfiprintf_internal_r+0x3cc>
 100944c:	00c00c04 	movi	r3,48
 1009450:	d88009c5 	stb	r2,39(sp)
 1009454:	d8c00985 	stb	r3,38(sp)
 1009458:	6b400094 	ori	r13,r13,2
 100945c:	00800084 	movi	r2,2
 1009460:	003d2e06 	br	100891c <___vfiprintf_internal_r+0x524>
 1009464:	25c00017 	ldw	r23,0(r4)
 1009468:	0039883a 	mov	fp,zero
 100946c:	d8c00415 	stw	r3,16(sp)
 1009470:	0005883a 	mov	r2,zero
 1009474:	003d2906 	br	100891c <___vfiprintf_internal_r+0x524>
 1009478:	d9400117 	ldw	r5,4(sp)
 100947c:	d9000415 	stw	r4,16(sp)
 1009480:	2805d7fa 	srai	r2,r5,31
 1009484:	19400015 	stw	r5,0(r3)
 1009488:	18800115 	stw	r2,4(r3)
 100948c:	003c0306 	br	100849c <___vfiprintf_internal_r+0xa4>
 1009490:	25c00017 	ldw	r23,0(r4)
 1009494:	d8c00415 	stw	r3,16(sp)
 1009498:	b839d7fa 	srai	fp,r23,31
 100949c:	e005883a 	mov	r2,fp
 10094a0:	003da706 	br	1008b40 <___vfiprintf_internal_r+0x748>
 10094a4:	2dc00017 	ldw	r23,0(r5)
 10094a8:	0039883a 	mov	fp,zero
 10094ac:	d9000415 	stw	r4,16(sp)
 10094b0:	003def06 	br	1008c70 <___vfiprintf_internal_r+0x878>
 10094b4:	25c00017 	ldw	r23,0(r4)
 10094b8:	0039883a 	mov	fp,zero
 10094bc:	d8c00415 	stw	r3,16(sp)
 10094c0:	00800044 	movi	r2,1
 10094c4:	003d1506 	br	100891c <___vfiprintf_internal_r+0x524>
 10094c8:	d8800984 	addi	r2,sp,38
 10094cc:	d8801715 	stw	r2,92(sp)
 10094d0:	00800084 	movi	r2,2
 10094d4:	d8801815 	stw	r2,96(sp)
 10094d8:	dc001904 	addi	r16,sp,100
 10094dc:	01000044 	movi	r4,1
 10094e0:	003f5f06 	br	1009260 <___vfiprintf_internal_r+0xe68>
 10094e4:	0463c83a 	sub	r17,zero,r17
 10094e8:	d8c00415 	stw	r3,16(sp)
 10094ec:	003e3606 	br	1008dc8 <___vfiprintf_internal_r+0x9d0>
 10094f0:	9809883a 	mov	r4,r19
 10094f4:	d8c00215 	stw	r3,8(sp)
 10094f8:	db400015 	stw	r13,0(sp)
 10094fc:	1000f9c0 	call	1000f9c <strlen>
 1009500:	d8c00217 	ldw	r3,8(sp)
 1009504:	db400017 	ldw	r13,0(sp)
 1009508:	1039883a 	mov	fp,r2
 100950c:	102f883a 	mov	r23,r2
 1009510:	d8c00415 	stw	r3,16(sp)
 1009514:	003c7106 	br	10086dc <___vfiprintf_internal_r+0x2e4>
 1009518:	d8c00947 	ldb	r3,37(sp)
 100951c:	1800451e 	bne	r3,zero,1009634 <___vfiprintf_internal_r+0x123c>
 1009520:	703f471e 	bne	r14,zero,1009240 <___vfiprintf_internal_r+0xe48>
 1009524:	0009883a 	mov	r4,zero
 1009528:	d9801904 	addi	r6,sp,100
 100952c:	01400044 	movi	r5,1
 1009530:	9021883a 	mov	r16,r18
 1009534:	003ca306 	br	10087c4 <___vfiprintf_internal_r+0x3cc>
 1009538:	d8800117 	ldw	r2,4(sp)
 100953c:	18800015 	stw	r2,0(r3)
 1009540:	d9000415 	stw	r4,16(sp)
 1009544:	003bd506 	br	100849c <___vfiprintf_internal_r+0xa4>
 1009548:	00c00044 	movi	r3,1
 100954c:	e005883a 	mov	r2,fp
 1009550:	dcc01715 	stw	r19,92(sp)
 1009554:	df001815 	stw	fp,96(sp)
 1009558:	df000c15 	stw	fp,48(sp)
 100955c:	d8c00b15 	stw	r3,44(sp)
 1009560:	d9801904 	addi	r6,sp,100
 1009564:	003ca806 	br	1008808 <___vfiprintf_internal_r+0x410>
 1009568:	10c00060 	cmpeqi	r3,r2,1
 100956c:	db400017 	ldw	r13,0(sp)
 1009570:	183de226 	beq	r3,zero,1008cfc <___vfiprintf_internal_r+0x904>
 1009574:	003d8306 	br	1008b84 <___vfiprintf_internal_r+0x78c>
 1009578:	a0800043 	ldbu	r2,1(r20)
 100957c:	6b400814 	ori	r13,r13,32
 1009580:	a5000044 	addi	r20,r20,1
 1009584:	10803fcc 	andi	r2,r2,255
 1009588:	1080201c 	xori	r2,r2,128
 100958c:	10bfe004 	addi	r2,r2,-128
 1009590:	003bda06 	br	10084fc <___vfiprintf_internal_r+0x104>
 1009594:	408001f0 	cmpltui	r2,r8,7
 1009598:	4039883a 	mov	fp,r8
 100959c:	1000011e 	bne	r2,zero,10095a4 <___vfiprintf_internal_r+0x11ac>
 10095a0:	07000184 	movi	fp,6
 10095a4:	04c04074 	movhi	r19,257
 10095a8:	e02f883a 	mov	r23,fp
 10095ac:	d8c00415 	stw	r3,16(sp)
 10095b0:	9cc94c04 	addi	r19,r19,9520
 10095b4:	003c4906 	br	10086dc <___vfiprintf_internal_r+0x2e4>
 10095b8:	d8800417 	ldw	r2,16(sp)
 10095bc:	0039883a 	mov	fp,zero
 10095c0:	d8c00415 	stw	r3,16(sp)
 10095c4:	15c00017 	ldw	r23,0(r2)
 10095c8:	0005883a 	mov	r2,zero
 10095cc:	003cd306 	br	100891c <___vfiprintf_internal_r+0x524>
 10095d0:	d8800417 	ldw	r2,16(sp)
 10095d4:	0039883a 	mov	fp,zero
 10095d8:	d8c00415 	stw	r3,16(sp)
 10095dc:	15c00017 	ldw	r23,0(r2)
 10095e0:	00800044 	movi	r2,1
 10095e4:	003ccd06 	br	100891c <___vfiprintf_internal_r+0x524>
 10095e8:	d8c00417 	ldw	r3,16(sp)
 10095ec:	0039883a 	mov	fp,zero
 10095f0:	d9000415 	stw	r4,16(sp)
 10095f4:	1dc00017 	ldw	r23,0(r3)
 10095f8:	003d9d06 	br	1008c70 <___vfiprintf_internal_r+0x878>
 10095fc:	d8800417 	ldw	r2,16(sp)
 1009600:	d8c00415 	stw	r3,16(sp)
 1009604:	15c00017 	ldw	r23,0(r2)
 1009608:	b839d7fa 	srai	fp,r23,31
 100960c:	e005883a 	mov	r2,fp
 1009610:	003d4b06 	br	1008b40 <___vfiprintf_internal_r+0x748>
 1009614:	3009883a 	mov	r4,r6
 1009618:	39c9c904 	addi	r7,r7,10020
 100961c:	003edd06 	br	1009194 <___vfiprintf_internal_r+0xd9c>
 1009620:	d9801904 	addi	r6,sp,100
 1009624:	01400044 	movi	r5,1
 1009628:	0009883a 	mov	r4,zero
 100962c:	9021883a 	mov	r16,r18
 1009630:	003c6406 	br	10087c4 <___vfiprintf_internal_r+0x3cc>
 1009634:	d8800944 	addi	r2,sp,37
 1009638:	d8801715 	stw	r2,92(sp)
 100963c:	00800044 	movi	r2,1
 1009640:	d8801815 	stw	r2,96(sp)
 1009644:	d9801904 	addi	r6,sp,100
 1009648:	01400044 	movi	r5,1
 100964c:	003c3e06 	br	1008748 <___vfiprintf_internal_r+0x350>
 1009650:	d9800945 	stb	r6,37(sp)
 1009654:	003c1b06 	br	10086c4 <___vfiprintf_internal_r+0x2cc>
 1009658:	d9800a04 	addi	r6,sp,40
 100965c:	a80b883a 	mov	r5,r21
 1009660:	b009883a 	mov	r4,r22
 1009664:	10082ec0 	call	10082ec <__sprint_r.part.0>
 1009668:	003c7806 	br	100884c <___vfiprintf_internal_r+0x454>
 100966c:	402f883a 	mov	r23,r8
 1009670:	d8c00415 	stw	r3,16(sp)
 1009674:	4039883a 	mov	fp,r8
 1009678:	003c1806 	br	10086dc <___vfiprintf_internal_r+0x2e4>
 100967c:	d9800945 	stb	r6,37(sp)
 1009680:	003df406 	br	1008e54 <___vfiprintf_internal_r+0xa5c>
 1009684:	303f883a 	mov	ra,r6
 1009688:	39c9cd04 	addi	r7,r7,10036
 100968c:	003f2506 	br	1009324 <___vfiprintf_internal_r+0xf2c>
 1009690:	d9800945 	stb	r6,37(sp)
 1009694:	003d7e06 	br	1008c90 <___vfiprintf_internal_r+0x898>
 1009698:	d9800945 	stb	r6,37(sp)
 100969c:	003d4c06 	br	1008bd0 <___vfiprintf_internal_r+0x7d8>
 10096a0:	d9800945 	stb	r6,37(sp)
 10096a4:	003d1e06 	br	1008b20 <___vfiprintf_internal_r+0x728>
 10096a8:	d9800945 	stb	r6,37(sp)
 10096ac:	003d6606 	br	1008c48 <___vfiprintf_internal_r+0x850>
 10096b0:	21400044 	addi	r5,r4,1
 10096b4:	39c9cd04 	addi	r7,r7,10036
 10096b8:	003d0606 	br	1008ad4 <___vfiprintf_internal_r+0x6dc>
 10096bc:	01c04074 	movhi	r7,257
 10096c0:	301b883a 	mov	r13,r6
 10096c4:	281d883a 	mov	r14,r5
 10096c8:	39c9c904 	addi	r7,r7,10020
 10096cc:	003e7406 	br	10090a0 <___vfiprintf_internal_r+0xca8>
 10096d0:	00bfffc4 	movi	r2,-1
 10096d4:	d8800115 	stw	r2,4(sp)
 10096d8:	003c5f06 	br	1008858 <___vfiprintf_internal_r+0x460>
 10096dc:	d8800417 	ldw	r2,16(sp)
 10096e0:	12000017 	ldw	r8,0(r2)
 10096e4:	11000104 	addi	r4,r2,4
 10096e8:	4000010e 	bge	r8,zero,10096f0 <___vfiprintf_internal_r+0x12f8>
 10096ec:	023fffc4 	movi	r8,-1
 10096f0:	a0800043 	ldbu	r2,1(r20)
 10096f4:	d9000415 	stw	r4,16(sp)
 10096f8:	1829883a 	mov	r20,r3
 10096fc:	10803fcc 	andi	r2,r2,255
 1009700:	1080201c 	xori	r2,r2,128
 1009704:	10bfe004 	addi	r2,r2,-128
 1009708:	003b7c06 	br	10084fc <___vfiprintf_internal_r+0x104>

0100970c <__vfiprintf_internal>:
 100970c:	00c04074 	movhi	r3,257
 1009710:	2005883a 	mov	r2,r4
 1009714:	1911d517 	ldw	r4,18260(r3)
 1009718:	300f883a 	mov	r7,r6
 100971c:	280d883a 	mov	r6,r5
 1009720:	100b883a 	mov	r5,r2
 1009724:	10083f81 	jmpi	10083f8 <___vfiprintf_internal_r>

01009728 <__sbprintf>:
 1009728:	2880030b 	ldhu	r2,12(r5)
 100972c:	2b001917 	ldw	r12,100(r5)
 1009730:	2ac0038b 	ldhu	r11,14(r5)
 1009734:	2a800717 	ldw	r10,28(r5)
 1009738:	2a400917 	ldw	r9,36(r5)
 100973c:	defee204 	addi	sp,sp,-1144
 1009740:	da001a04 	addi	r8,sp,104
 1009744:	00c10004 	movi	r3,1024
 1009748:	dc011a15 	stw	r16,1128(sp)
 100974c:	10bfff4c 	andi	r2,r2,65533
 1009750:	2821883a 	mov	r16,r5
 1009754:	d80b883a 	mov	r5,sp
 1009758:	dc811c15 	stw	r18,1136(sp)
 100975c:	dc411b15 	stw	r17,1132(sp)
 1009760:	dfc11d15 	stw	ra,1140(sp)
 1009764:	2025883a 	mov	r18,r4
 1009768:	d880030d 	sth	r2,12(sp)
 100976c:	db001915 	stw	r12,100(sp)
 1009770:	dac0038d 	sth	r11,14(sp)
 1009774:	da800715 	stw	r10,28(sp)
 1009778:	da400915 	stw	r9,36(sp)
 100977c:	da000015 	stw	r8,0(sp)
 1009780:	da000415 	stw	r8,16(sp)
 1009784:	d8c00215 	stw	r3,8(sp)
 1009788:	d8c00515 	stw	r3,20(sp)
 100978c:	d8000615 	stw	zero,24(sp)
 1009790:	10083f80 	call	10083f8 <___vfiprintf_internal_r>
 1009794:	1023883a 	mov	r17,r2
 1009798:	10000d0e 	bge	r2,zero,10097d0 <__sbprintf+0xa8>
 100979c:	d880030b 	ldhu	r2,12(sp)
 10097a0:	1080100c 	andi	r2,r2,64
 10097a4:	10000326 	beq	r2,zero,10097b4 <__sbprintf+0x8c>
 10097a8:	8080030b 	ldhu	r2,12(r16)
 10097ac:	10801014 	ori	r2,r2,64
 10097b0:	8080030d 	sth	r2,12(r16)
 10097b4:	8805883a 	mov	r2,r17
 10097b8:	dfc11d17 	ldw	ra,1140(sp)
 10097bc:	dc811c17 	ldw	r18,1136(sp)
 10097c0:	dc411b17 	ldw	r17,1132(sp)
 10097c4:	dc011a17 	ldw	r16,1128(sp)
 10097c8:	dec11e04 	addi	sp,sp,1144
 10097cc:	f800283a 	ret
 10097d0:	d80b883a 	mov	r5,sp
 10097d4:	9009883a 	mov	r4,r18
 10097d8:	1004ef00 	call	1004ef0 <_fflush_r>
 10097dc:	103fef26 	beq	r2,zero,100979c <__sbprintf+0x74>
 10097e0:	047fffc4 	movi	r17,-1
 10097e4:	003fed06 	br	100979c <__sbprintf+0x74>

010097e8 <_write_r>:
 10097e8:	2807883a 	mov	r3,r5
 10097ec:	defffe04 	addi	sp,sp,-8
 10097f0:	dc000015 	stw	r16,0(sp)
 10097f4:	300b883a 	mov	r5,r6
 10097f8:	00804074 	movhi	r2,257
 10097fc:	380d883a 	mov	r6,r7
 1009800:	2021883a 	mov	r16,r4
 1009804:	1809883a 	mov	r4,r3
 1009808:	dfc00115 	stw	ra,4(sp)
 100980c:	1018ef15 	stw	zero,25532(r2)
 1009810:	100e6580 	call	100e658 <write>
 1009814:	10ffffd8 	cmpnei	r3,r2,-1
 1009818:	18000426 	beq	r3,zero,100982c <_write_r+0x44>
 100981c:	dfc00117 	ldw	ra,4(sp)
 1009820:	dc000017 	ldw	r16,0(sp)
 1009824:	dec00204 	addi	sp,sp,8
 1009828:	f800283a 	ret
 100982c:	00c04074 	movhi	r3,257
 1009830:	18d8ef17 	ldw	r3,25532(r3)
 1009834:	183ff926 	beq	r3,zero,100981c <_write_r+0x34>
 1009838:	80c00015 	stw	r3,0(r16)
 100983c:	dfc00117 	ldw	ra,4(sp)
 1009840:	dc000017 	ldw	r16,0(sp)
 1009844:	dec00204 	addi	sp,sp,8
 1009848:	f800283a 	ret

0100984c <_close_r>:
 100984c:	defffe04 	addi	sp,sp,-8
 1009850:	dc000015 	stw	r16,0(sp)
 1009854:	00804074 	movhi	r2,257
 1009858:	2021883a 	mov	r16,r4
 100985c:	2809883a 	mov	r4,r5
 1009860:	dfc00115 	stw	ra,4(sp)
 1009864:	1018ef15 	stw	zero,25532(r2)
 1009868:	100da9c0 	call	100da9c <close>
 100986c:	10ffffd8 	cmpnei	r3,r2,-1
 1009870:	18000426 	beq	r3,zero,1009884 <_close_r+0x38>
 1009874:	dfc00117 	ldw	ra,4(sp)
 1009878:	dc000017 	ldw	r16,0(sp)
 100987c:	dec00204 	addi	sp,sp,8
 1009880:	f800283a 	ret
 1009884:	00c04074 	movhi	r3,257
 1009888:	18d8ef17 	ldw	r3,25532(r3)
 100988c:	183ff926 	beq	r3,zero,1009874 <_close_r+0x28>
 1009890:	80c00015 	stw	r3,0(r16)
 1009894:	dfc00117 	ldw	ra,4(sp)
 1009898:	dc000017 	ldw	r16,0(sp)
 100989c:	dec00204 	addi	sp,sp,8
 10098a0:	f800283a 	ret

010098a4 <__assert_func>:
 10098a4:	00804074 	movhi	r2,257
 10098a8:	1211d517 	ldw	r8,18260(r2)
 10098ac:	defffc04 	addi	sp,sp,-16
 10098b0:	3807883a 	mov	r3,r7
 10098b4:	3005883a 	mov	r2,r6
 10098b8:	dfc00315 	stw	ra,12(sp)
 10098bc:	42400317 	ldw	r9,12(r8)
 10098c0:	200f883a 	mov	r7,r4
 10098c4:	2811883a 	mov	r8,r5
 10098c8:	180d883a 	mov	r6,r3
 10098cc:	10000a26 	beq	r2,zero,10098f8 <__assert_func+0x54>
 10098d0:	00c04074 	movhi	r3,257
 10098d4:	18c9d104 	addi	r3,r3,10052
 10098d8:	01404074 	movhi	r5,257
 10098dc:	2949d504 	addi	r5,r5,10068
 10098e0:	4809883a 	mov	r4,r9
 10098e4:	d8c00115 	stw	r3,4(sp)
 10098e8:	da000015 	stw	r8,0(sp)
 10098ec:	d8800215 	stw	r2,8(sp)
 10098f0:	1009b080 	call	1009b08 <fiprintf>
 10098f4:	100a2f40 	call	100a2f4 <abort>
 10098f8:	00c04074 	movhi	r3,257
 10098fc:	18c9d404 	addi	r3,r3,10064
 1009900:	1805883a 	mov	r2,r3
 1009904:	003ff406 	br	10098d8 <__assert_func+0x34>

01009908 <__assert>:
 1009908:	deffff04 	addi	sp,sp,-4
 100990c:	300f883a 	mov	r7,r6
 1009910:	000d883a 	mov	r6,zero
 1009914:	dfc00015 	stw	ra,0(sp)
 1009918:	10098a40 	call	10098a4 <__assert_func>

0100991c <_calloc_r>:
 100991c:	defffe04 	addi	sp,sp,-8
 1009920:	dc000015 	stw	r16,0(sp)
 1009924:	2021883a 	mov	r16,r4
 1009928:	2809883a 	mov	r4,r5
 100992c:	300b883a 	mov	r5,r6
 1009930:	dfc00115 	stw	ra,4(sp)
 1009934:	1000e300 	call	1000e30 <__mulsi3>
 1009938:	8009883a 	mov	r4,r16
 100993c:	100b883a 	mov	r5,r2
 1009940:	1005ee80 	call	1005ee8 <_malloc_r>
 1009944:	1009883a 	mov	r4,r2
 1009948:	10000c26 	beq	r2,zero,100997c <_calloc_r+0x60>
 100994c:	11bfff17 	ldw	r6,-4(r2)
 1009950:	00bfff04 	movi	r2,-4
 1009954:	308c703a 	and	r6,r6,r2
 1009958:	31bfff04 	addi	r6,r6,-4
 100995c:	30800968 	cmpgeui	r2,r6,37
 1009960:	1000151e 	bne	r2,zero,10099b8 <_calloc_r+0x9c>
 1009964:	30800530 	cmpltui	r2,r6,20
 1009968:	10000926 	beq	r2,zero,1009990 <_calloc_r+0x74>
 100996c:	2005883a 	mov	r2,r4
 1009970:	10000015 	stw	zero,0(r2)
 1009974:	10000115 	stw	zero,4(r2)
 1009978:	10000215 	stw	zero,8(r2)
 100997c:	2005883a 	mov	r2,r4
 1009980:	dfc00117 	ldw	ra,4(sp)
 1009984:	dc000017 	ldw	r16,0(sp)
 1009988:	dec00204 	addi	sp,sp,8
 100998c:	f800283a 	ret
 1009990:	20000015 	stw	zero,0(r4)
 1009994:	20000115 	stw	zero,4(r4)
 1009998:	30800728 	cmpgeui	r2,r6,28
 100999c:	10000a26 	beq	r2,zero,10099c8 <_calloc_r+0xac>
 10099a0:	20000215 	stw	zero,8(r4)
 10099a4:	20000315 	stw	zero,12(r4)
 10099a8:	31800920 	cmpeqi	r6,r6,36
 10099ac:	3000081e 	bne	r6,zero,10099d0 <_calloc_r+0xb4>
 10099b0:	20800404 	addi	r2,r4,16
 10099b4:	003fee06 	br	1009970 <_calloc_r+0x54>
 10099b8:	000b883a 	mov	r5,zero
 10099bc:	10069c80 	call	10069c8 <memset>
 10099c0:	1009883a 	mov	r4,r2
 10099c4:	003fed06 	br	100997c <_calloc_r+0x60>
 10099c8:	20800204 	addi	r2,r4,8
 10099cc:	003fe806 	br	1009970 <_calloc_r+0x54>
 10099d0:	20000415 	stw	zero,16(r4)
 10099d4:	20800604 	addi	r2,r4,24
 10099d8:	20000515 	stw	zero,20(r4)
 10099dc:	003fe406 	br	1009970 <_calloc_r+0x54>

010099e0 <_fclose_r>:
 10099e0:	defffc04 	addi	sp,sp,-16
 10099e4:	dfc00315 	stw	ra,12(sp)
 10099e8:	dc800215 	stw	r18,8(sp)
 10099ec:	dc400115 	stw	r17,4(sp)
 10099f0:	dc000015 	stw	r16,0(sp)
 10099f4:	28000726 	beq	r5,zero,1009a14 <_fclose_r+0x34>
 10099f8:	2821883a 	mov	r16,r5
 10099fc:	2023883a 	mov	r17,r4
 1009a00:	20000226 	beq	r4,zero,1009a0c <_fclose_r+0x2c>
 1009a04:	20800e17 	ldw	r2,56(r4)
 1009a08:	10002726 	beq	r2,zero,1009aa8 <_fclose_r+0xc8>
 1009a0c:	8080030f 	ldh	r2,12(r16)
 1009a10:	1000081e 	bne	r2,zero,1009a34 <_fclose_r+0x54>
 1009a14:	0025883a 	mov	r18,zero
 1009a18:	9005883a 	mov	r2,r18
 1009a1c:	dfc00317 	ldw	ra,12(sp)
 1009a20:	dc800217 	ldw	r18,8(sp)
 1009a24:	dc400117 	ldw	r17,4(sp)
 1009a28:	dc000017 	ldw	r16,0(sp)
 1009a2c:	dec00404 	addi	sp,sp,16
 1009a30:	f800283a 	ret
 1009a34:	800b883a 	mov	r5,r16
 1009a38:	8809883a 	mov	r4,r17
 1009a3c:	1004cc80 	call	1004cc8 <__sflush_r>
 1009a40:	80c00b17 	ldw	r3,44(r16)
 1009a44:	1025883a 	mov	r18,r2
 1009a48:	18000426 	beq	r3,zero,1009a5c <_fclose_r+0x7c>
 1009a4c:	81400717 	ldw	r5,28(r16)
 1009a50:	8809883a 	mov	r4,r17
 1009a54:	183ee83a 	callr	r3
 1009a58:	10001716 	blt	r2,zero,1009ab8 <_fclose_r+0xd8>
 1009a5c:	8080030b 	ldhu	r2,12(r16)
 1009a60:	1080200c 	andi	r2,r2,128
 1009a64:	1000181e 	bne	r2,zero,1009ac8 <_fclose_r+0xe8>
 1009a68:	81400c17 	ldw	r5,48(r16)
 1009a6c:	28000526 	beq	r5,zero,1009a84 <_fclose_r+0xa4>
 1009a70:	80801004 	addi	r2,r16,64
 1009a74:	28800226 	beq	r5,r2,1009a80 <_fclose_r+0xa0>
 1009a78:	8809883a 	mov	r4,r17
 1009a7c:	10053e80 	call	10053e8 <_free_r>
 1009a80:	80000c15 	stw	zero,48(r16)
 1009a84:	81401117 	ldw	r5,68(r16)
 1009a88:	28000326 	beq	r5,zero,1009a98 <_fclose_r+0xb8>
 1009a8c:	8809883a 	mov	r4,r17
 1009a90:	10053e80 	call	10053e8 <_free_r>
 1009a94:	80001115 	stw	zero,68(r16)
 1009a98:	10052940 	call	1005294 <__sfp_lock_acquire>
 1009a9c:	8000030d 	sth	zero,12(r16)
 1009aa0:	10052980 	call	1005298 <__sfp_lock_release>
 1009aa4:	003fdc06 	br	1009a18 <_fclose_r+0x38>
 1009aa8:	10052840 	call	1005284 <__sinit>
 1009aac:	8080030f 	ldh	r2,12(r16)
 1009ab0:	103fd826 	beq	r2,zero,1009a14 <_fclose_r+0x34>
 1009ab4:	003fdf06 	br	1009a34 <_fclose_r+0x54>
 1009ab8:	8080030b 	ldhu	r2,12(r16)
 1009abc:	04bfffc4 	movi	r18,-1
 1009ac0:	1080200c 	andi	r2,r2,128
 1009ac4:	103fe826 	beq	r2,zero,1009a68 <_fclose_r+0x88>
 1009ac8:	81400417 	ldw	r5,16(r16)
 1009acc:	8809883a 	mov	r4,r17
 1009ad0:	10053e80 	call	10053e8 <_free_r>
 1009ad4:	003fe406 	br	1009a68 <_fclose_r+0x88>

01009ad8 <fclose>:
 1009ad8:	00804074 	movhi	r2,257
 1009adc:	200b883a 	mov	r5,r4
 1009ae0:	1111d517 	ldw	r4,18260(r2)
 1009ae4:	10099e01 	jmpi	10099e0 <_fclose_r>

01009ae8 <_fiprintf_r>:
 1009ae8:	defffe04 	addi	sp,sp,-8
 1009aec:	dfc00015 	stw	ra,0(sp)
 1009af0:	d9c00115 	stw	r7,4(sp)
 1009af4:	d9c00104 	addi	r7,sp,4
 1009af8:	100a0600 	call	100a060 <_vfiprintf_r>
 1009afc:	dfc00017 	ldw	ra,0(sp)
 1009b00:	dec00204 	addi	sp,sp,8
 1009b04:	f800283a 	ret

01009b08 <fiprintf>:
 1009b08:	defffd04 	addi	sp,sp,-12
 1009b0c:	2005883a 	mov	r2,r4
 1009b10:	dfc00015 	stw	ra,0(sp)
 1009b14:	d9800115 	stw	r6,4(sp)
 1009b18:	d9c00215 	stw	r7,8(sp)
 1009b1c:	00c04074 	movhi	r3,257
 1009b20:	1911d517 	ldw	r4,18260(r3)
 1009b24:	280d883a 	mov	r6,r5
 1009b28:	d9c00104 	addi	r7,sp,4
 1009b2c:	100b883a 	mov	r5,r2
 1009b30:	100a0600 	call	100a060 <_vfiprintf_r>
 1009b34:	dfc00017 	ldw	ra,0(sp)
 1009b38:	dec00304 	addi	sp,sp,12
 1009b3c:	f800283a 	ret

01009b40 <__fputwc>:
 1009b40:	defff904 	addi	sp,sp,-28
 1009b44:	dcc00415 	stw	r19,16(sp)
 1009b48:	dc800315 	stw	r18,12(sp)
 1009b4c:	dc000115 	stw	r16,4(sp)
 1009b50:	dfc00615 	stw	ra,24(sp)
 1009b54:	dd000515 	stw	r20,20(sp)
 1009b58:	dc400215 	stw	r17,8(sp)
 1009b5c:	2025883a 	mov	r18,r4
 1009b60:	2827883a 	mov	r19,r5
 1009b64:	3021883a 	mov	r16,r6
 1009b68:	1009e6c0 	call	1009e6c <__locale_mb_cur_max>
 1009b6c:	10800058 	cmpnei	r2,r2,1
 1009b70:	1000071e 	bne	r2,zero,1009b90 <__fputwc+0x50>
 1009b74:	98bfffc4 	addi	r2,r19,-1
 1009b78:	10803fe8 	cmpgeui	r2,r2,255
 1009b7c:	1000041e 	bne	r2,zero,1009b90 <__fputwc+0x50>
 1009b80:	980b883a 	mov	r5,r19
 1009b84:	dcc000c5 	stb	r19,3(sp)
 1009b88:	05000044 	movi	r20,1
 1009b8c:	00000a06 	br	1009bb8 <__fputwc+0x78>
 1009b90:	81c01704 	addi	r7,r16,92
 1009b94:	980d883a 	mov	r6,r19
 1009b98:	d94000c4 	addi	r5,sp,3
 1009b9c:	9009883a 	mov	r4,r18
 1009ba0:	100a1c40 	call	100a1c4 <_wcrtomb_r>
 1009ba4:	1029883a 	mov	r20,r2
 1009ba8:	10bfffd8 	cmpnei	r2,r2,-1
 1009bac:	10003926 	beq	r2,zero,1009c94 <__fputwc+0x154>
 1009bb0:	a0001f26 	beq	r20,zero,1009c30 <__fputwc+0xf0>
 1009bb4:	d94000c3 	ldbu	r5,3(sp)
 1009bb8:	0023883a 	mov	r17,zero
 1009bbc:	00000a06 	br	1009be8 <__fputwc+0xa8>
 1009bc0:	80800017 	ldw	r2,0(r16)
 1009bc4:	11400005 	stb	r5,0(r2)
 1009bc8:	80c00017 	ldw	r3,0(r16)
 1009bcc:	18c00044 	addi	r3,r3,1
 1009bd0:	80c00015 	stw	r3,0(r16)
 1009bd4:	8c400044 	addi	r17,r17,1
 1009bd8:	d88000c4 	addi	r2,sp,3
 1009bdc:	1447883a 	add	r3,r2,r17
 1009be0:	8d00132e 	bgeu	r17,r20,1009c30 <__fputwc+0xf0>
 1009be4:	19400003 	ldbu	r5,0(r3)
 1009be8:	80c00217 	ldw	r3,8(r16)
 1009bec:	18ffffc4 	addi	r3,r3,-1
 1009bf0:	80c00215 	stw	r3,8(r16)
 1009bf4:	183ff20e 	bge	r3,zero,1009bc0 <__fputwc+0x80>
 1009bf8:	80800617 	ldw	r2,24(r16)
 1009bfc:	18801616 	blt	r3,r2,1009c58 <__fputwc+0x118>
 1009c00:	80800017 	ldw	r2,0(r16)
 1009c04:	11400005 	stb	r5,0(r2)
 1009c08:	80800017 	ldw	r2,0(r16)
 1009c0c:	10c00003 	ldbu	r3,0(r2)
 1009c10:	10800044 	addi	r2,r2,1
 1009c14:	18c002a0 	cmpeqi	r3,r3,10
 1009c18:	1800181e 	bne	r3,zero,1009c7c <__fputwc+0x13c>
 1009c1c:	80800015 	stw	r2,0(r16)
 1009c20:	8c400044 	addi	r17,r17,1
 1009c24:	d88000c4 	addi	r2,sp,3
 1009c28:	1447883a 	add	r3,r2,r17
 1009c2c:	8d3fed36 	bltu	r17,r20,1009be4 <__fputwc+0xa4>
 1009c30:	9829883a 	mov	r20,r19
 1009c34:	a005883a 	mov	r2,r20
 1009c38:	dfc00617 	ldw	ra,24(sp)
 1009c3c:	dd000517 	ldw	r20,20(sp)
 1009c40:	dcc00417 	ldw	r19,16(sp)
 1009c44:	dc800317 	ldw	r18,12(sp)
 1009c48:	dc400217 	ldw	r17,8(sp)
 1009c4c:	dc000117 	ldw	r16,4(sp)
 1009c50:	dec00704 	addi	sp,sp,28
 1009c54:	f800283a 	ret
 1009c58:	29403fcc 	andi	r5,r5,255
 1009c5c:	800d883a 	mov	r6,r16
 1009c60:	9009883a 	mov	r4,r18
 1009c64:	100a0640 	call	100a064 <__swbuf_r>
 1009c68:	10ffffe0 	cmpeqi	r3,r2,-1
 1009c6c:	18c03fcc 	andi	r3,r3,255
 1009c70:	183fd826 	beq	r3,zero,1009bd4 <__fputwc+0x94>
 1009c74:	053fffc4 	movi	r20,-1
 1009c78:	003fee06 	br	1009c34 <__fputwc+0xf4>
 1009c7c:	800d883a 	mov	r6,r16
 1009c80:	01400284 	movi	r5,10
 1009c84:	9009883a 	mov	r4,r18
 1009c88:	100a0640 	call	100a064 <__swbuf_r>
 1009c8c:	10ffffe0 	cmpeqi	r3,r2,-1
 1009c90:	003ff606 	br	1009c6c <__fputwc+0x12c>
 1009c94:	8080030b 	ldhu	r2,12(r16)
 1009c98:	10801014 	ori	r2,r2,64
 1009c9c:	8080030d 	sth	r2,12(r16)
 1009ca0:	003fe406 	br	1009c34 <__fputwc+0xf4>

01009ca4 <_fputwc_r>:
 1009ca4:	3080030b 	ldhu	r2,12(r6)
 1009ca8:	10c8000c 	andi	r3,r2,8192
 1009cac:	1800051e 	bne	r3,zero,1009cc4 <_fputwc_r+0x20>
 1009cb0:	30c01917 	ldw	r3,100(r6)
 1009cb4:	10880014 	ori	r2,r2,8192
 1009cb8:	3080030d 	sth	r2,12(r6)
 1009cbc:	18880014 	ori	r2,r3,8192
 1009cc0:	30801915 	stw	r2,100(r6)
 1009cc4:	1009b401 	jmpi	1009b40 <__fputwc>

01009cc8 <fputwc>:
 1009cc8:	defffc04 	addi	sp,sp,-16
 1009ccc:	00804074 	movhi	r2,257
 1009cd0:	dc000215 	stw	r16,8(sp)
 1009cd4:	1411d517 	ldw	r16,18260(r2)
 1009cd8:	dfc00315 	stw	ra,12(sp)
 1009cdc:	280d883a 	mov	r6,r5
 1009ce0:	200b883a 	mov	r5,r4
 1009ce4:	80000226 	beq	r16,zero,1009cf0 <fputwc+0x28>
 1009ce8:	80800e17 	ldw	r2,56(r16)
 1009cec:	10000d26 	beq	r2,zero,1009d24 <fputwc+0x5c>
 1009cf0:	3080030b 	ldhu	r2,12(r6)
 1009cf4:	10c8000c 	andi	r3,r2,8192
 1009cf8:	1800051e 	bne	r3,zero,1009d10 <fputwc+0x48>
 1009cfc:	30c01917 	ldw	r3,100(r6)
 1009d00:	10880014 	ori	r2,r2,8192
 1009d04:	3080030d 	sth	r2,12(r6)
 1009d08:	18880014 	ori	r2,r3,8192
 1009d0c:	30801915 	stw	r2,100(r6)
 1009d10:	8009883a 	mov	r4,r16
 1009d14:	dfc00317 	ldw	ra,12(sp)
 1009d18:	dc000217 	ldw	r16,8(sp)
 1009d1c:	dec00404 	addi	sp,sp,16
 1009d20:	1009b401 	jmpi	1009b40 <__fputwc>
 1009d24:	d9000015 	stw	r4,0(sp)
 1009d28:	8009883a 	mov	r4,r16
 1009d2c:	d9800115 	stw	r6,4(sp)
 1009d30:	10052840 	call	1005284 <__sinit>
 1009d34:	d9800117 	ldw	r6,4(sp)
 1009d38:	d9400017 	ldw	r5,0(sp)
 1009d3c:	003fec06 	br	1009cf0 <fputwc+0x28>

01009d40 <_fstat_r>:
 1009d40:	2807883a 	mov	r3,r5
 1009d44:	defffe04 	addi	sp,sp,-8
 1009d48:	dc000015 	stw	r16,0(sp)
 1009d4c:	00804074 	movhi	r2,257
 1009d50:	300b883a 	mov	r5,r6
 1009d54:	2021883a 	mov	r16,r4
 1009d58:	1809883a 	mov	r4,r3
 1009d5c:	dfc00115 	stw	ra,4(sp)
 1009d60:	1018ef15 	stw	zero,25532(r2)
 1009d64:	100dc180 	call	100dc18 <fstat>
 1009d68:	10ffffd8 	cmpnei	r3,r2,-1
 1009d6c:	18000426 	beq	r3,zero,1009d80 <_fstat_r+0x40>
 1009d70:	dfc00117 	ldw	ra,4(sp)
 1009d74:	dc000017 	ldw	r16,0(sp)
 1009d78:	dec00204 	addi	sp,sp,8
 1009d7c:	f800283a 	ret
 1009d80:	00c04074 	movhi	r3,257
 1009d84:	18d8ef17 	ldw	r3,25532(r3)
 1009d88:	183ff926 	beq	r3,zero,1009d70 <_fstat_r+0x30>
 1009d8c:	80c00015 	stw	r3,0(r16)
 1009d90:	dfc00117 	ldw	ra,4(sp)
 1009d94:	dc000017 	ldw	r16,0(sp)
 1009d98:	dec00204 	addi	sp,sp,8
 1009d9c:	f800283a 	ret

01009da0 <_isatty_r>:
 1009da0:	defffe04 	addi	sp,sp,-8
 1009da4:	dc000015 	stw	r16,0(sp)
 1009da8:	00804074 	movhi	r2,257
 1009dac:	2021883a 	mov	r16,r4
 1009db0:	2809883a 	mov	r4,r5
 1009db4:	dfc00115 	stw	ra,4(sp)
 1009db8:	1018ef15 	stw	zero,25532(r2)
 1009dbc:	100dd300 	call	100dd30 <isatty>
 1009dc0:	10ffffd8 	cmpnei	r3,r2,-1
 1009dc4:	18000426 	beq	r3,zero,1009dd8 <_isatty_r+0x38>
 1009dc8:	dfc00117 	ldw	ra,4(sp)
 1009dcc:	dc000017 	ldw	r16,0(sp)
 1009dd0:	dec00204 	addi	sp,sp,8
 1009dd4:	f800283a 	ret
 1009dd8:	00c04074 	movhi	r3,257
 1009ddc:	18d8ef17 	ldw	r3,25532(r3)
 1009de0:	183ff926 	beq	r3,zero,1009dc8 <_isatty_r+0x28>
 1009de4:	80c00015 	stw	r3,0(r16)
 1009de8:	dfc00117 	ldw	ra,4(sp)
 1009dec:	dc000017 	ldw	r16,0(sp)
 1009df0:	dec00204 	addi	sp,sp,8
 1009df4:	f800283a 	ret

01009df8 <_setlocale_r>:
 1009df8:	30001626 	beq	r6,zero,1009e54 <_setlocale_r+0x5c>
 1009dfc:	01404074 	movhi	r5,257
 1009e00:	defffe04 	addi	sp,sp,-8
 1009e04:	2949e204 	addi	r5,r5,10120
 1009e08:	3009883a 	mov	r4,r6
 1009e0c:	dc000015 	stw	r16,0(sp)
 1009e10:	dfc00115 	stw	ra,4(sp)
 1009e14:	3021883a 	mov	r16,r6
 1009e18:	1009fa80 	call	1009fa8 <strcmp>
 1009e1c:	1000061e 	bne	r2,zero,1009e38 <_setlocale_r+0x40>
 1009e20:	00804074 	movhi	r2,257
 1009e24:	1089e104 	addi	r2,r2,10116
 1009e28:	dfc00117 	ldw	ra,4(sp)
 1009e2c:	dc000017 	ldw	r16,0(sp)
 1009e30:	dec00204 	addi	sp,sp,8
 1009e34:	f800283a 	ret
 1009e38:	80800003 	ldbu	r2,0(r16)
 1009e3c:	10bfef44 	addi	r2,r2,-67
 1009e40:	10000726 	beq	r2,zero,1009e60 <_setlocale_r+0x68>
 1009e44:	80800003 	ldbu	r2,0(r16)
 1009e48:	103ff526 	beq	r2,zero,1009e20 <_setlocale_r+0x28>
 1009e4c:	0005883a 	mov	r2,zero
 1009e50:	003ff506 	br	1009e28 <_setlocale_r+0x30>
 1009e54:	00804074 	movhi	r2,257
 1009e58:	1089e104 	addi	r2,r2,10116
 1009e5c:	f800283a 	ret
 1009e60:	80800043 	ldbu	r2,1(r16)
 1009e64:	103fee26 	beq	r2,zero,1009e20 <_setlocale_r+0x28>
 1009e68:	003ff606 	br	1009e44 <_setlocale_r+0x4c>

01009e6c <__locale_mb_cur_max>:
 1009e6c:	00804074 	movhi	r2,257
 1009e70:	108d3307 	ldb	r2,13516(r2)
 1009e74:	f800283a 	ret

01009e78 <setlocale>:
 1009e78:	00c04074 	movhi	r3,257
 1009e7c:	2005883a 	mov	r2,r4
 1009e80:	1911d517 	ldw	r4,18260(r3)
 1009e84:	280d883a 	mov	r6,r5
 1009e88:	100b883a 	mov	r5,r2
 1009e8c:	1009df81 	jmpi	1009df8 <_setlocale_r>

01009e90 <_lseek_r>:
 1009e90:	2807883a 	mov	r3,r5
 1009e94:	defffe04 	addi	sp,sp,-8
 1009e98:	dc000015 	stw	r16,0(sp)
 1009e9c:	300b883a 	mov	r5,r6
 1009ea0:	00804074 	movhi	r2,257
 1009ea4:	380d883a 	mov	r6,r7
 1009ea8:	2021883a 	mov	r16,r4
 1009eac:	1809883a 	mov	r4,r3
 1009eb0:	dfc00115 	stw	ra,4(sp)
 1009eb4:	1018ef15 	stw	zero,25532(r2)
 1009eb8:	100e0700 	call	100e070 <lseek>
 1009ebc:	10ffffd8 	cmpnei	r3,r2,-1
 1009ec0:	18000426 	beq	r3,zero,1009ed4 <_lseek_r+0x44>
 1009ec4:	dfc00117 	ldw	ra,4(sp)
 1009ec8:	dc000017 	ldw	r16,0(sp)
 1009ecc:	dec00204 	addi	sp,sp,8
 1009ed0:	f800283a 	ret
 1009ed4:	00c04074 	movhi	r3,257
 1009ed8:	18d8ef17 	ldw	r3,25532(r3)
 1009edc:	183ff926 	beq	r3,zero,1009ec4 <_lseek_r+0x34>
 1009ee0:	80c00015 	stw	r3,0(r16)
 1009ee4:	dfc00117 	ldw	ra,4(sp)
 1009ee8:	dc000017 	ldw	r16,0(sp)
 1009eec:	dec00204 	addi	sp,sp,8
 1009ef0:	f800283a 	ret

01009ef4 <_mbtowc_r>:
 1009ef4:	00804074 	movhi	r2,257
 1009ef8:	108d2217 	ldw	r2,13448(r2)
 1009efc:	1000683a 	jmp	r2

01009f00 <__ascii_mbtowc>:
 1009f00:	deffff04 	addi	sp,sp,-4
 1009f04:	28000826 	beq	r5,zero,1009f28 <__ascii_mbtowc+0x28>
 1009f08:	30000926 	beq	r6,zero,1009f30 <__ascii_mbtowc+0x30>
 1009f0c:	38000b26 	beq	r7,zero,1009f3c <__ascii_mbtowc+0x3c>
 1009f10:	30800003 	ldbu	r2,0(r6)
 1009f14:	28800015 	stw	r2,0(r5)
 1009f18:	30800003 	ldbu	r2,0(r6)
 1009f1c:	1004c03a 	cmpne	r2,r2,zero
 1009f20:	dec00104 	addi	sp,sp,4
 1009f24:	f800283a 	ret
 1009f28:	d80b883a 	mov	r5,sp
 1009f2c:	303ff71e 	bne	r6,zero,1009f0c <__ascii_mbtowc+0xc>
 1009f30:	0005883a 	mov	r2,zero
 1009f34:	dec00104 	addi	sp,sp,4
 1009f38:	f800283a 	ret
 1009f3c:	00bfff84 	movi	r2,-2
 1009f40:	003ff706 	br	1009f20 <__ascii_mbtowc+0x20>

01009f44 <_read_r>:
 1009f44:	2807883a 	mov	r3,r5
 1009f48:	defffe04 	addi	sp,sp,-8
 1009f4c:	dc000015 	stw	r16,0(sp)
 1009f50:	300b883a 	mov	r5,r6
 1009f54:	00804074 	movhi	r2,257
 1009f58:	380d883a 	mov	r6,r7
 1009f5c:	2021883a 	mov	r16,r4
 1009f60:	1809883a 	mov	r4,r3
 1009f64:	dfc00115 	stw	ra,4(sp)
 1009f68:	1018ef15 	stw	zero,25532(r2)
 1009f6c:	100e2400 	call	100e240 <read>
 1009f70:	10ffffd8 	cmpnei	r3,r2,-1
 1009f74:	18000426 	beq	r3,zero,1009f88 <_read_r+0x44>
 1009f78:	dfc00117 	ldw	ra,4(sp)
 1009f7c:	dc000017 	ldw	r16,0(sp)
 1009f80:	dec00204 	addi	sp,sp,8
 1009f84:	f800283a 	ret
 1009f88:	00c04074 	movhi	r3,257
 1009f8c:	18d8ef17 	ldw	r3,25532(r3)
 1009f90:	183ff926 	beq	r3,zero,1009f78 <_read_r+0x34>
 1009f94:	80c00015 	stw	r3,0(r16)
 1009f98:	dfc00117 	ldw	ra,4(sp)
 1009f9c:	dc000017 	ldw	r16,0(sp)
 1009fa0:	dec00204 	addi	sp,sp,8
 1009fa4:	f800283a 	ret

01009fa8 <strcmp>:
 1009fa8:	2144b03a 	or	r2,r4,r5
 1009fac:	108000cc 	andi	r2,r2,3
 1009fb0:	1000141e 	bne	r2,zero,100a004 <strcmp+0x5c>
 1009fb4:	20800017 	ldw	r2,0(r4)
 1009fb8:	28c00017 	ldw	r3,0(r5)
 1009fbc:	10c0111e 	bne	r2,r3,100a004 <strcmp+0x5c>
 1009fc0:	01ffbff4 	movhi	r7,65279
 1009fc4:	01a02074 	movhi	r6,32897
 1009fc8:	39ffbfc4 	addi	r7,r7,-257
 1009fcc:	31a02004 	addi	r6,r6,-32640
 1009fd0:	00000306 	br	1009fe0 <strcmp+0x38>
 1009fd4:	20800017 	ldw	r2,0(r4)
 1009fd8:	28c00017 	ldw	r3,0(r5)
 1009fdc:	10c0091e 	bne	r2,r3,100a004 <strcmp+0x5c>
 1009fe0:	11c7883a 	add	r3,r2,r7
 1009fe4:	0084303a 	nor	r2,zero,r2
 1009fe8:	1884703a 	and	r2,r3,r2
 1009fec:	1184703a 	and	r2,r2,r6
 1009ff0:	21000104 	addi	r4,r4,4
 1009ff4:	29400104 	addi	r5,r5,4
 1009ff8:	103ff626 	beq	r2,zero,1009fd4 <strcmp+0x2c>
 1009ffc:	0005883a 	mov	r2,zero
 100a000:	f800283a 	ret
 100a004:	20c00003 	ldbu	r3,0(r4)
 100a008:	18803fcc 	andi	r2,r3,255
 100a00c:	1080201c 	xori	r2,r2,128
 100a010:	10bfe004 	addi	r2,r2,-128
 100a014:	1000071e 	bne	r2,zero,100a034 <strcmp+0x8c>
 100a018:	00000a06 	br	100a044 <strcmp+0x9c>
 100a01c:	20c00003 	ldbu	r3,0(r4)
 100a020:	29400044 	addi	r5,r5,1
 100a024:	18803fcc 	andi	r2,r3,255
 100a028:	1080201c 	xori	r2,r2,128
 100a02c:	10bfe004 	addi	r2,r2,-128
 100a030:	10000726 	beq	r2,zero,100a050 <strcmp+0xa8>
 100a034:	29800007 	ldb	r6,0(r5)
 100a038:	21000044 	addi	r4,r4,1
 100a03c:	30bff726 	beq	r6,r2,100a01c <strcmp+0x74>
 100a040:	18803fcc 	andi	r2,r3,255
 100a044:	28c00003 	ldbu	r3,0(r5)
 100a048:	10c5c83a 	sub	r2,r2,r3
 100a04c:	f800283a 	ret
 100a050:	28c00003 	ldbu	r3,0(r5)
 100a054:	0005883a 	mov	r2,zero
 100a058:	10c5c83a 	sub	r2,r2,r3
 100a05c:	f800283a 	ret

0100a060 <_vfiprintf_r>:
 100a060:	10083f81 	jmpi	10083f8 <___vfiprintf_internal_r>

0100a064 <__swbuf_r>:
 100a064:	defffb04 	addi	sp,sp,-20
 100a068:	dcc00315 	stw	r19,12(sp)
 100a06c:	dc400115 	stw	r17,4(sp)
 100a070:	dc000015 	stw	r16,0(sp)
 100a074:	dfc00415 	stw	ra,16(sp)
 100a078:	dc800215 	stw	r18,8(sp)
 100a07c:	2027883a 	mov	r19,r4
 100a080:	2823883a 	mov	r17,r5
 100a084:	3021883a 	mov	r16,r6
 100a088:	20000226 	beq	r4,zero,100a094 <__swbuf_r+0x30>
 100a08c:	20800e17 	ldw	r2,56(r4)
 100a090:	10003e26 	beq	r2,zero,100a18c <__swbuf_r+0x128>
 100a094:	80800617 	ldw	r2,24(r16)
 100a098:	80c0030b 	ldhu	r3,12(r16)
 100a09c:	80800215 	stw	r2,8(r16)
 100a0a0:	1880020c 	andi	r2,r3,8
 100a0a4:	10001f26 	beq	r2,zero,100a124 <__swbuf_r+0xc0>
 100a0a8:	80800417 	ldw	r2,16(r16)
 100a0ac:	10001d26 	beq	r2,zero,100a124 <__swbuf_r+0xc0>
 100a0b0:	1948000c 	andi	r5,r3,8192
 100a0b4:	8c803fcc 	andi	r18,r17,255
 100a0b8:	28002326 	beq	r5,zero,100a148 <__swbuf_r+0xe4>
 100a0bc:	80c00017 	ldw	r3,0(r16)
 100a0c0:	81000517 	ldw	r4,20(r16)
 100a0c4:	1885c83a 	sub	r2,r3,r2
 100a0c8:	1100290e 	bge	r2,r4,100a170 <__swbuf_r+0x10c>
 100a0cc:	10800044 	addi	r2,r2,1
 100a0d0:	81400217 	ldw	r5,8(r16)
 100a0d4:	19000044 	addi	r4,r3,1
 100a0d8:	81000015 	stw	r4,0(r16)
 100a0dc:	297fffc4 	addi	r5,r5,-1
 100a0e0:	81400215 	stw	r5,8(r16)
 100a0e4:	1c400005 	stb	r17,0(r3)
 100a0e8:	80c00517 	ldw	r3,20(r16)
 100a0ec:	18802926 	beq	r3,r2,100a194 <__swbuf_r+0x130>
 100a0f0:	8080030b 	ldhu	r2,12(r16)
 100a0f4:	1080004c 	andi	r2,r2,1
 100a0f8:	10000226 	beq	r2,zero,100a104 <__swbuf_r+0xa0>
 100a0fc:	90800298 	cmpnei	r2,r18,10
 100a100:	10002426 	beq	r2,zero,100a194 <__swbuf_r+0x130>
 100a104:	9005883a 	mov	r2,r18
 100a108:	dfc00417 	ldw	ra,16(sp)
 100a10c:	dcc00317 	ldw	r19,12(sp)
 100a110:	dc800217 	ldw	r18,8(sp)
 100a114:	dc400117 	ldw	r17,4(sp)
 100a118:	dc000017 	ldw	r16,0(sp)
 100a11c:	dec00504 	addi	sp,sp,20
 100a120:	f800283a 	ret
 100a124:	800b883a 	mov	r5,r16
 100a128:	9809883a 	mov	r4,r19
 100a12c:	10031fc0 	call	10031fc <__swsetup_r>
 100a130:	10001c1e 	bne	r2,zero,100a1a4 <__swbuf_r+0x140>
 100a134:	80c0030b 	ldhu	r3,12(r16)
 100a138:	80800417 	ldw	r2,16(r16)
 100a13c:	8c803fcc 	andi	r18,r17,255
 100a140:	1948000c 	andi	r5,r3,8192
 100a144:	283fdd1e 	bne	r5,zero,100a0bc <__swbuf_r+0x58>
 100a148:	81001917 	ldw	r4,100(r16)
 100a14c:	18c80014 	ori	r3,r3,8192
 100a150:	0177ffc4 	movi	r5,-8193
 100a154:	2148703a 	and	r4,r4,r5
 100a158:	80c0030d 	sth	r3,12(r16)
 100a15c:	80c00017 	ldw	r3,0(r16)
 100a160:	81001915 	stw	r4,100(r16)
 100a164:	81000517 	ldw	r4,20(r16)
 100a168:	1885c83a 	sub	r2,r3,r2
 100a16c:	113fd716 	blt	r2,r4,100a0cc <__swbuf_r+0x68>
 100a170:	800b883a 	mov	r5,r16
 100a174:	9809883a 	mov	r4,r19
 100a178:	1004ef00 	call	1004ef0 <_fflush_r>
 100a17c:	1000091e 	bne	r2,zero,100a1a4 <__swbuf_r+0x140>
 100a180:	80c00017 	ldw	r3,0(r16)
 100a184:	00800044 	movi	r2,1
 100a188:	003fd106 	br	100a0d0 <__swbuf_r+0x6c>
 100a18c:	10052840 	call	1005284 <__sinit>
 100a190:	003fc006 	br	100a094 <__swbuf_r+0x30>
 100a194:	800b883a 	mov	r5,r16
 100a198:	9809883a 	mov	r4,r19
 100a19c:	1004ef00 	call	1004ef0 <_fflush_r>
 100a1a0:	103fd826 	beq	r2,zero,100a104 <__swbuf_r+0xa0>
 100a1a4:	04bfffc4 	movi	r18,-1
 100a1a8:	003fd606 	br	100a104 <__swbuf_r+0xa0>

0100a1ac <__swbuf>:
 100a1ac:	00c04074 	movhi	r3,257
 100a1b0:	2005883a 	mov	r2,r4
 100a1b4:	1911d517 	ldw	r4,18260(r3)
 100a1b8:	280d883a 	mov	r6,r5
 100a1bc:	100b883a 	mov	r5,r2
 100a1c0:	100a0641 	jmpi	100a064 <__swbuf_r>

0100a1c4 <_wcrtomb_r>:
 100a1c4:	defffa04 	addi	sp,sp,-24
 100a1c8:	dc400415 	stw	r17,16(sp)
 100a1cc:	dc000315 	stw	r16,12(sp)
 100a1d0:	00804074 	movhi	r2,257
 100a1d4:	dfc00515 	stw	ra,20(sp)
 100a1d8:	108d2117 	ldw	r2,13444(r2)
 100a1dc:	2023883a 	mov	r17,r4
 100a1e0:	3821883a 	mov	r16,r7
 100a1e4:	28000826 	beq	r5,zero,100a208 <_wcrtomb_r+0x44>
 100a1e8:	103ee83a 	callr	r2
 100a1ec:	10ffffd8 	cmpnei	r3,r2,-1
 100a1f0:	18000a26 	beq	r3,zero,100a21c <_wcrtomb_r+0x58>
 100a1f4:	dfc00517 	ldw	ra,20(sp)
 100a1f8:	dc400417 	ldw	r17,16(sp)
 100a1fc:	dc000317 	ldw	r16,12(sp)
 100a200:	dec00604 	addi	sp,sp,24
 100a204:	f800283a 	ret
 100a208:	000d883a 	mov	r6,zero
 100a20c:	d9400084 	addi	r5,sp,2
 100a210:	103ee83a 	callr	r2
 100a214:	10ffffd8 	cmpnei	r3,r2,-1
 100a218:	183ff61e 	bne	r3,zero,100a1f4 <_wcrtomb_r+0x30>
 100a21c:	00802284 	movi	r2,138
 100a220:	80000015 	stw	zero,0(r16)
 100a224:	88800015 	stw	r2,0(r17)
 100a228:	00bfffc4 	movi	r2,-1
 100a22c:	003ff106 	br	100a1f4 <_wcrtomb_r+0x30>

0100a230 <wcrtomb>:
 100a230:	defffa04 	addi	sp,sp,-24
 100a234:	00c04074 	movhi	r3,257
 100a238:	dc400415 	stw	r17,16(sp)
 100a23c:	dc000315 	stw	r16,12(sp)
 100a240:	1c51d517 	ldw	r17,18260(r3)
 100a244:	dfc00515 	stw	ra,20(sp)
 100a248:	00c04074 	movhi	r3,257
 100a24c:	18cd2117 	ldw	r3,13444(r3)
 100a250:	3021883a 	mov	r16,r6
 100a254:	20000c26 	beq	r4,zero,100a288 <wcrtomb+0x58>
 100a258:	280d883a 	mov	r6,r5
 100a25c:	800f883a 	mov	r7,r16
 100a260:	200b883a 	mov	r5,r4
 100a264:	8809883a 	mov	r4,r17
 100a268:	183ee83a 	callr	r3
 100a26c:	10ffffd8 	cmpnei	r3,r2,-1
 100a270:	18000c26 	beq	r3,zero,100a2a4 <wcrtomb+0x74>
 100a274:	dfc00517 	ldw	ra,20(sp)
 100a278:	dc400417 	ldw	r17,16(sp)
 100a27c:	dc000317 	ldw	r16,12(sp)
 100a280:	dec00604 	addi	sp,sp,24
 100a284:	f800283a 	ret
 100a288:	300f883a 	mov	r7,r6
 100a28c:	d9400084 	addi	r5,sp,2
 100a290:	000d883a 	mov	r6,zero
 100a294:	8809883a 	mov	r4,r17
 100a298:	183ee83a 	callr	r3
 100a29c:	10ffffd8 	cmpnei	r3,r2,-1
 100a2a0:	183ff41e 	bne	r3,zero,100a274 <wcrtomb+0x44>
 100a2a4:	00802284 	movi	r2,138
 100a2a8:	80000015 	stw	zero,0(r16)
 100a2ac:	88800015 	stw	r2,0(r17)
 100a2b0:	00bfffc4 	movi	r2,-1
 100a2b4:	003fef06 	br	100a274 <wcrtomb+0x44>

0100a2b8 <_wctomb_r>:
 100a2b8:	00804074 	movhi	r2,257
 100a2bc:	108d2117 	ldw	r2,13444(r2)
 100a2c0:	1000683a 	jmp	r2

0100a2c4 <__ascii_wctomb>:
 100a2c4:	28000926 	beq	r5,zero,100a2ec <__ascii_wctomb+0x28>
 100a2c8:	30804030 	cmpltui	r2,r6,256
 100a2cc:	10000326 	beq	r2,zero,100a2dc <__ascii_wctomb+0x18>
 100a2d0:	29800005 	stb	r6,0(r5)
 100a2d4:	00800044 	movi	r2,1
 100a2d8:	f800283a 	ret
 100a2dc:	00802284 	movi	r2,138
 100a2e0:	20800015 	stw	r2,0(r4)
 100a2e4:	00bfffc4 	movi	r2,-1
 100a2e8:	f800283a 	ret
 100a2ec:	0005883a 	mov	r2,zero
 100a2f0:	f800283a 	ret

0100a2f4 <abort>:
 100a2f4:	deffff04 	addi	sp,sp,-4
 100a2f8:	01000184 	movi	r4,6
 100a2fc:	dfc00015 	stw	ra,0(sp)
 100a300:	100a56c0 	call	100a56c <raise>
 100a304:	01000044 	movi	r4,1
 100a308:	100dba40 	call	100dba4 <_exit>

0100a30c <_init_signal_r.part.0>:
 100a30c:	defffe04 	addi	sp,sp,-8
 100a310:	01402004 	movi	r5,128
 100a314:	dc000015 	stw	r16,0(sp)
 100a318:	dfc00115 	stw	ra,4(sp)
 100a31c:	2021883a 	mov	r16,r4
 100a320:	1005ee80 	call	1005ee8 <_malloc_r>
 100a324:	8080b715 	stw	r2,732(r16)
 100a328:	10000926 	beq	r2,zero,100a350 <_init_signal_r.part.0+0x44>
 100a32c:	10c02004 	addi	r3,r2,128
 100a330:	10000015 	stw	zero,0(r2)
 100a334:	10800104 	addi	r2,r2,4
 100a338:	10fffd1e 	bne	r2,r3,100a330 <_init_signal_r.part.0+0x24>
 100a33c:	0005883a 	mov	r2,zero
 100a340:	dfc00117 	ldw	ra,4(sp)
 100a344:	dc000017 	ldw	r16,0(sp)
 100a348:	dec00204 	addi	sp,sp,8
 100a34c:	f800283a 	ret
 100a350:	00bfffc4 	movi	r2,-1
 100a354:	003ffa06 	br	100a340 <_init_signal_r.part.0+0x34>

0100a358 <_init_signal_r>:
 100a358:	2080b717 	ldw	r2,732(r4)
 100a35c:	10000226 	beq	r2,zero,100a368 <_init_signal_r+0x10>
 100a360:	0005883a 	mov	r2,zero
 100a364:	f800283a 	ret
 100a368:	100a30c1 	jmpi	100a30c <_init_signal_r.part.0>

0100a36c <_signal_r>:
 100a36c:	defffc04 	addi	sp,sp,-16
 100a370:	dc000215 	stw	r16,8(sp)
 100a374:	dfc00315 	stw	ra,12(sp)
 100a378:	28800830 	cmpltui	r2,r5,32
 100a37c:	2021883a 	mov	r16,r4
 100a380:	10000a26 	beq	r2,zero,100a3ac <_signal_r+0x40>
 100a384:	2080b717 	ldw	r2,732(r4)
 100a388:	10000f26 	beq	r2,zero,100a3c8 <_signal_r+0x5c>
 100a38c:	280a90ba 	slli	r5,r5,2
 100a390:	114b883a 	add	r5,r2,r5
 100a394:	28800017 	ldw	r2,0(r5)
 100a398:	29800015 	stw	r6,0(r5)
 100a39c:	dfc00317 	ldw	ra,12(sp)
 100a3a0:	dc000217 	ldw	r16,8(sp)
 100a3a4:	dec00404 	addi	sp,sp,16
 100a3a8:	f800283a 	ret
 100a3ac:	00800584 	movi	r2,22
 100a3b0:	20800015 	stw	r2,0(r4)
 100a3b4:	00bfffc4 	movi	r2,-1
 100a3b8:	dfc00317 	ldw	ra,12(sp)
 100a3bc:	dc000217 	ldw	r16,8(sp)
 100a3c0:	dec00404 	addi	sp,sp,16
 100a3c4:	f800283a 	ret
 100a3c8:	d9800115 	stw	r6,4(sp)
 100a3cc:	d9400015 	stw	r5,0(sp)
 100a3d0:	100a30c0 	call	100a30c <_init_signal_r.part.0>
 100a3d4:	1000041e 	bne	r2,zero,100a3e8 <_signal_r+0x7c>
 100a3d8:	8080b717 	ldw	r2,732(r16)
 100a3dc:	d9800117 	ldw	r6,4(sp)
 100a3e0:	d9400017 	ldw	r5,0(sp)
 100a3e4:	003fe906 	br	100a38c <_signal_r+0x20>
 100a3e8:	00bfffc4 	movi	r2,-1
 100a3ec:	003feb06 	br	100a39c <_signal_r+0x30>

0100a3f0 <_raise_r>:
 100a3f0:	28800830 	cmpltui	r2,r5,32
 100a3f4:	10002b26 	beq	r2,zero,100a4a4 <_raise_r+0xb4>
 100a3f8:	2080b717 	ldw	r2,732(r4)
 100a3fc:	defffd04 	addi	sp,sp,-12
 100a400:	dc000115 	stw	r16,4(sp)
 100a404:	dfc00215 	stw	ra,8(sp)
 100a408:	2821883a 	mov	r16,r5
 100a40c:	10001026 	beq	r2,zero,100a450 <_raise_r+0x60>
 100a410:	280690ba 	slli	r3,r5,2
 100a414:	10c5883a 	add	r2,r2,r3
 100a418:	10c00017 	ldw	r3,0(r2)
 100a41c:	18000c26 	beq	r3,zero,100a450 <_raise_r+0x60>
 100a420:	19400060 	cmpeqi	r5,r3,1
 100a424:	28001a1e 	bne	r5,zero,100a490 <_raise_r+0xa0>
 100a428:	197fffd8 	cmpnei	r5,r3,-1
 100a42c:	28001126 	beq	r5,zero,100a474 <_raise_r+0x84>
 100a430:	10000015 	stw	zero,0(r2)
 100a434:	8009883a 	mov	r4,r16
 100a438:	183ee83a 	callr	r3
 100a43c:	0005883a 	mov	r2,zero
 100a440:	dfc00217 	ldw	ra,8(sp)
 100a444:	dc000117 	ldw	r16,4(sp)
 100a448:	dec00304 	addi	sp,sp,12
 100a44c:	f800283a 	ret
 100a450:	d9000015 	stw	r4,0(sp)
 100a454:	100a6200 	call	100a620 <_getpid_r>
 100a458:	d9000017 	ldw	r4,0(sp)
 100a45c:	800d883a 	mov	r6,r16
 100a460:	100b883a 	mov	r5,r2
 100a464:	dfc00217 	ldw	ra,8(sp)
 100a468:	dc000117 	ldw	r16,4(sp)
 100a46c:	dec00304 	addi	sp,sp,12
 100a470:	100a5c01 	jmpi	100a5c0 <_kill_r>
 100a474:	00800584 	movi	r2,22
 100a478:	20800015 	stw	r2,0(r4)
 100a47c:	00800044 	movi	r2,1
 100a480:	dfc00217 	ldw	ra,8(sp)
 100a484:	dc000117 	ldw	r16,4(sp)
 100a488:	dec00304 	addi	sp,sp,12
 100a48c:	f800283a 	ret
 100a490:	0005883a 	mov	r2,zero
 100a494:	dfc00217 	ldw	ra,8(sp)
 100a498:	dc000117 	ldw	r16,4(sp)
 100a49c:	dec00304 	addi	sp,sp,12
 100a4a0:	f800283a 	ret
 100a4a4:	00800584 	movi	r2,22
 100a4a8:	20800015 	stw	r2,0(r4)
 100a4ac:	00bfffc4 	movi	r2,-1
 100a4b0:	f800283a 	ret

0100a4b4 <__sigtramp_r>:
 100a4b4:	28800830 	cmpltui	r2,r5,32
 100a4b8:	10002a26 	beq	r2,zero,100a564 <__sigtramp_r+0xb0>
 100a4bc:	2080b717 	ldw	r2,732(r4)
 100a4c0:	defffd04 	addi	sp,sp,-12
 100a4c4:	dc400115 	stw	r17,4(sp)
 100a4c8:	dfc00215 	stw	ra,8(sp)
 100a4cc:	2023883a 	mov	r17,r4
 100a4d0:	10001526 	beq	r2,zero,100a528 <__sigtramp_r+0x74>
 100a4d4:	280690ba 	slli	r3,r5,2
 100a4d8:	10c5883a 	add	r2,r2,r3
 100a4dc:	10c00017 	ldw	r3,0(r2)
 100a4e0:	18000c26 	beq	r3,zero,100a514 <__sigtramp_r+0x60>
 100a4e4:	193fffe0 	cmpeqi	r4,r3,-1
 100a4e8:	20001a1e 	bne	r4,zero,100a554 <__sigtramp_r+0xa0>
 100a4ec:	19000060 	cmpeqi	r4,r3,1
 100a4f0:	2000131e 	bne	r4,zero,100a540 <__sigtramp_r+0x8c>
 100a4f4:	10000015 	stw	zero,0(r2)
 100a4f8:	2809883a 	mov	r4,r5
 100a4fc:	183ee83a 	callr	r3
 100a500:	0005883a 	mov	r2,zero
 100a504:	dfc00217 	ldw	ra,8(sp)
 100a508:	dc400117 	ldw	r17,4(sp)
 100a50c:	dec00304 	addi	sp,sp,12
 100a510:	f800283a 	ret
 100a514:	00800044 	movi	r2,1
 100a518:	dfc00217 	ldw	ra,8(sp)
 100a51c:	dc400117 	ldw	r17,4(sp)
 100a520:	dec00304 	addi	sp,sp,12
 100a524:	f800283a 	ret
 100a528:	d9400015 	stw	r5,0(sp)
 100a52c:	100a30c0 	call	100a30c <_init_signal_r.part.0>
 100a530:	10000a1e 	bne	r2,zero,100a55c <__sigtramp_r+0xa8>
 100a534:	8880b717 	ldw	r2,732(r17)
 100a538:	d9400017 	ldw	r5,0(sp)
 100a53c:	003fe506 	br	100a4d4 <__sigtramp_r+0x20>
 100a540:	008000c4 	movi	r2,3
 100a544:	dfc00217 	ldw	ra,8(sp)
 100a548:	dc400117 	ldw	r17,4(sp)
 100a54c:	dec00304 	addi	sp,sp,12
 100a550:	f800283a 	ret
 100a554:	00800084 	movi	r2,2
 100a558:	003fea06 	br	100a504 <__sigtramp_r+0x50>
 100a55c:	00bfffc4 	movi	r2,-1
 100a560:	003fe806 	br	100a504 <__sigtramp_r+0x50>
 100a564:	00bfffc4 	movi	r2,-1
 100a568:	f800283a 	ret

0100a56c <raise>:
 100a56c:	00804074 	movhi	r2,257
 100a570:	200b883a 	mov	r5,r4
 100a574:	1111d517 	ldw	r4,18260(r2)
 100a578:	100a3f01 	jmpi	100a3f0 <_raise_r>

0100a57c <signal>:
 100a57c:	00c04074 	movhi	r3,257
 100a580:	2005883a 	mov	r2,r4
 100a584:	1911d517 	ldw	r4,18260(r3)
 100a588:	280d883a 	mov	r6,r5
 100a58c:	100b883a 	mov	r5,r2
 100a590:	100a36c1 	jmpi	100a36c <_signal_r>

0100a594 <_init_signal>:
 100a594:	00804074 	movhi	r2,257
 100a598:	1111d517 	ldw	r4,18260(r2)
 100a59c:	2080b717 	ldw	r2,732(r4)
 100a5a0:	10000226 	beq	r2,zero,100a5ac <_init_signal+0x18>
 100a5a4:	0005883a 	mov	r2,zero
 100a5a8:	f800283a 	ret
 100a5ac:	100a30c1 	jmpi	100a30c <_init_signal_r.part.0>

0100a5b0 <__sigtramp>:
 100a5b0:	00804074 	movhi	r2,257
 100a5b4:	200b883a 	mov	r5,r4
 100a5b8:	1111d517 	ldw	r4,18260(r2)
 100a5bc:	100a4b41 	jmpi	100a4b4 <__sigtramp_r>

0100a5c0 <_kill_r>:
 100a5c0:	2807883a 	mov	r3,r5
 100a5c4:	defffe04 	addi	sp,sp,-8
 100a5c8:	dc000015 	stw	r16,0(sp)
 100a5cc:	00804074 	movhi	r2,257
 100a5d0:	300b883a 	mov	r5,r6
 100a5d4:	2021883a 	mov	r16,r4
 100a5d8:	1809883a 	mov	r4,r3
 100a5dc:	dfc00115 	stw	ra,4(sp)
 100a5e0:	1018ef15 	stw	zero,25532(r2)
 100a5e4:	100de1c0 	call	100de1c <kill>
 100a5e8:	10ffffd8 	cmpnei	r3,r2,-1
 100a5ec:	18000426 	beq	r3,zero,100a600 <_kill_r+0x40>
 100a5f0:	dfc00117 	ldw	ra,4(sp)
 100a5f4:	dc000017 	ldw	r16,0(sp)
 100a5f8:	dec00204 	addi	sp,sp,8
 100a5fc:	f800283a 	ret
 100a600:	00c04074 	movhi	r3,257
 100a604:	18d8ef17 	ldw	r3,25532(r3)
 100a608:	183ff926 	beq	r3,zero,100a5f0 <_kill_r+0x30>
 100a60c:	80c00015 	stw	r3,0(r16)
 100a610:	dfc00117 	ldw	ra,4(sp)
 100a614:	dc000017 	ldw	r16,0(sp)
 100a618:	dec00204 	addi	sp,sp,8
 100a61c:	f800283a 	ret

0100a620 <_getpid_r>:
 100a620:	100dcd41 	jmpi	100dcd4 <getpid>

0100a624 <__udivdi3>:
 100a624:	defff504 	addi	sp,sp,-44
 100a628:	dd000515 	stw	r20,20(sp)
 100a62c:	dc800315 	stw	r18,12(sp)
 100a630:	dfc00a15 	stw	ra,40(sp)
 100a634:	df000915 	stw	fp,36(sp)
 100a638:	ddc00815 	stw	r23,32(sp)
 100a63c:	dd800715 	stw	r22,28(sp)
 100a640:	dd400615 	stw	r21,24(sp)
 100a644:	dcc00415 	stw	r19,16(sp)
 100a648:	dc400215 	stw	r17,8(sp)
 100a64c:	dc000115 	stw	r16,4(sp)
 100a650:	2029883a 	mov	r20,r4
 100a654:	2825883a 	mov	r18,r5
 100a658:	3800461e 	bne	r7,zero,100a774 <__udivdi3+0x150>
 100a65c:	3823883a 	mov	r17,r7
 100a660:	3021883a 	mov	r16,r6
 100a664:	2027883a 	mov	r19,r4
 100a668:	2980622e 	bgeu	r5,r6,100a7f4 <__udivdi3+0x1d0>
 100a66c:	00bfffd4 	movui	r2,65535
 100a670:	282b883a 	mov	r21,r5
 100a674:	1180aa2e 	bgeu	r2,r6,100a920 <__udivdi3+0x2fc>
 100a678:	00804034 	movhi	r2,256
 100a67c:	30815936 	bltu	r6,r2,100abe4 <__udivdi3+0x5c0>
 100a680:	3006d63a 	srli	r3,r6,24
 100a684:	04400604 	movi	r17,24
 100a688:	00804074 	movhi	r2,257
 100a68c:	1885883a 	add	r2,r3,r2
 100a690:	110a8603 	ldbu	r4,10776(r2)
 100a694:	00800804 	movi	r2,32
 100a698:	2463883a 	add	r17,r4,r17
 100a69c:	1449c83a 	sub	r4,r2,r17
 100a6a0:	14400526 	beq	r2,r17,100a6b8 <__udivdi3+0x94>
 100a6a4:	9106983a 	sll	r3,r18,r4
 100a6a8:	a462d83a 	srl	r17,r20,r17
 100a6ac:	3120983a 	sll	r16,r6,r4
 100a6b0:	a126983a 	sll	r19,r20,r4
 100a6b4:	88eab03a 	or	r21,r17,r3
 100a6b8:	802cd43a 	srli	r22,r16,16
 100a6bc:	a809883a 	mov	r4,r21
 100a6c0:	853fffcc 	andi	r20,r16,65535
 100a6c4:	b00b883a 	mov	r5,r22
 100a6c8:	1000dd40 	call	1000dd4 <__umodsi3>
 100a6cc:	a809883a 	mov	r4,r21
 100a6d0:	b00b883a 	mov	r5,r22
 100a6d4:	1025883a 	mov	r18,r2
 100a6d8:	1000d700 	call	1000d70 <__udivsi3>
 100a6dc:	a009883a 	mov	r4,r20
 100a6e0:	100b883a 	mov	r5,r2
 100a6e4:	102b883a 	mov	r21,r2
 100a6e8:	1000e300 	call	1000e30 <__mulsi3>
 100a6ec:	9024943a 	slli	r18,r18,16
 100a6f0:	9808d43a 	srli	r4,r19,16
 100a6f4:	9108b03a 	or	r4,r18,r4
 100a6f8:	2080052e 	bgeu	r4,r2,100a710 <__udivdi3+0xec>
 100a6fc:	2409883a 	add	r4,r4,r16
 100a700:	a8ffffc4 	addi	r3,r21,-1
 100a704:	24000136 	bltu	r4,r16,100a70c <__udivdi3+0xe8>
 100a708:	20814736 	bltu	r4,r2,100ac28 <__udivdi3+0x604>
 100a70c:	182b883a 	mov	r21,r3
 100a710:	20a3c83a 	sub	r17,r4,r2
 100a714:	8809883a 	mov	r4,r17
 100a718:	b00b883a 	mov	r5,r22
 100a71c:	1000dd40 	call	1000dd4 <__umodsi3>
 100a720:	8809883a 	mov	r4,r17
 100a724:	1023883a 	mov	r17,r2
 100a728:	b00b883a 	mov	r5,r22
 100a72c:	8822943a 	slli	r17,r17,16
 100a730:	1000d700 	call	1000d70 <__udivsi3>
 100a734:	100b883a 	mov	r5,r2
 100a738:	a009883a 	mov	r4,r20
 100a73c:	9cffffcc 	andi	r19,r19,65535
 100a740:	1025883a 	mov	r18,r2
 100a744:	8ce6b03a 	or	r19,r17,r19
 100a748:	1000e300 	call	1000e30 <__mulsi3>
 100a74c:	9880052e 	bgeu	r19,r2,100a764 <__udivdi3+0x140>
 100a750:	84e7883a 	add	r19,r16,r19
 100a754:	90ffffc4 	addi	r3,r18,-1
 100a758:	9c000136 	bltu	r19,r16,100a760 <__udivdi3+0x13c>
 100a75c:	98813036 	bltu	r19,r2,100ac20 <__udivdi3+0x5fc>
 100a760:	1825883a 	mov	r18,r3
 100a764:	a80c943a 	slli	r6,r21,16
 100a768:	0007883a 	mov	r3,zero
 100a76c:	3484b03a 	or	r2,r6,r18
 100a770:	00000306 	br	100a780 <__udivdi3+0x15c>
 100a774:	29c00e2e 	bgeu	r5,r7,100a7b0 <__udivdi3+0x18c>
 100a778:	0007883a 	mov	r3,zero
 100a77c:	0005883a 	mov	r2,zero
 100a780:	dfc00a17 	ldw	ra,40(sp)
 100a784:	df000917 	ldw	fp,36(sp)
 100a788:	ddc00817 	ldw	r23,32(sp)
 100a78c:	dd800717 	ldw	r22,28(sp)
 100a790:	dd400617 	ldw	r21,24(sp)
 100a794:	dd000517 	ldw	r20,20(sp)
 100a798:	dcc00417 	ldw	r19,16(sp)
 100a79c:	dc800317 	ldw	r18,12(sp)
 100a7a0:	dc400217 	ldw	r17,8(sp)
 100a7a4:	dc000117 	ldw	r16,4(sp)
 100a7a8:	dec00b04 	addi	sp,sp,44
 100a7ac:	f800283a 	ret
 100a7b0:	00bfffd4 	movui	r2,65535
 100a7b4:	11c05f2e 	bgeu	r2,r7,100a934 <__udivdi3+0x310>
 100a7b8:	00804034 	movhi	r2,256
 100a7bc:	3880fb36 	bltu	r7,r2,100abac <__udivdi3+0x588>
 100a7c0:	3806d63a 	srli	r3,r7,24
 100a7c4:	01000604 	movi	r4,24
 100a7c8:	00804074 	movhi	r2,257
 100a7cc:	1885883a 	add	r2,r3,r2
 100a7d0:	10ca8603 	ldbu	r3,10776(r2)
 100a7d4:	00800804 	movi	r2,32
 100a7d8:	1907883a 	add	r3,r3,r4
 100a7dc:	10e3c83a 	sub	r17,r2,r3
 100a7e0:	10c0901e 	bne	r2,r3,100aa24 <__udivdi3+0x400>
 100a7e4:	3c80f636 	bltu	r7,r18,100abc0 <__udivdi3+0x59c>
 100a7e8:	a185403a 	cmpgeu	r2,r20,r6
 100a7ec:	0007883a 	mov	r3,zero
 100a7f0:	003fe306 	br	100a780 <__udivdi3+0x15c>
 100a7f4:	3000041e 	bne	r6,zero,100a808 <__udivdi3+0x1e4>
 100a7f8:	000b883a 	mov	r5,zero
 100a7fc:	01000044 	movi	r4,1
 100a800:	1000d700 	call	1000d70 <__udivsi3>
 100a804:	1021883a 	mov	r16,r2
 100a808:	00bfffd4 	movui	r2,65535
 100a80c:	14003f2e 	bgeu	r2,r16,100a90c <__udivdi3+0x2e8>
 100a810:	00804034 	movhi	r2,256
 100a814:	8080f036 	bltu	r16,r2,100abd8 <__udivdi3+0x5b4>
 100a818:	8006d63a 	srli	r3,r16,24
 100a81c:	04400604 	movi	r17,24
 100a820:	00804074 	movhi	r2,257
 100a824:	1885883a 	add	r2,r3,r2
 100a828:	108a8603 	ldbu	r2,10776(r2)
 100a82c:	00c00804 	movi	r3,32
 100a830:	1463883a 	add	r17,r2,r17
 100a834:	1c45c83a 	sub	r2,r3,r17
 100a838:	1c40431e 	bne	r3,r17,100a948 <__udivdi3+0x324>
 100a83c:	802cd43a 	srli	r22,r16,16
 100a840:	9423c83a 	sub	r17,r18,r16
 100a844:	853fffcc 	andi	r20,r16,65535
 100a848:	00c00044 	movi	r3,1
 100a84c:	b00b883a 	mov	r5,r22
 100a850:	8809883a 	mov	r4,r17
 100a854:	d8c00015 	stw	r3,0(sp)
 100a858:	1000dd40 	call	1000dd4 <__umodsi3>
 100a85c:	b00b883a 	mov	r5,r22
 100a860:	8809883a 	mov	r4,r17
 100a864:	1025883a 	mov	r18,r2
 100a868:	1000d700 	call	1000d70 <__udivsi3>
 100a86c:	1009883a 	mov	r4,r2
 100a870:	a00b883a 	mov	r5,r20
 100a874:	102b883a 	mov	r21,r2
 100a878:	1000e300 	call	1000e30 <__mulsi3>
 100a87c:	9024943a 	slli	r18,r18,16
 100a880:	9808d43a 	srli	r4,r19,16
 100a884:	d8c00017 	ldw	r3,0(sp)
 100a888:	9108b03a 	or	r4,r18,r4
 100a88c:	2080052e 	bgeu	r4,r2,100a8a4 <__udivdi3+0x280>
 100a890:	2409883a 	add	r4,r4,r16
 100a894:	a97fffc4 	addi	r5,r21,-1
 100a898:	24000136 	bltu	r4,r16,100a8a0 <__udivdi3+0x27c>
 100a89c:	2080e536 	bltu	r4,r2,100ac34 <__udivdi3+0x610>
 100a8a0:	282b883a 	mov	r21,r5
 100a8a4:	20a3c83a 	sub	r17,r4,r2
 100a8a8:	8809883a 	mov	r4,r17
 100a8ac:	b00b883a 	mov	r5,r22
 100a8b0:	d8c00015 	stw	r3,0(sp)
 100a8b4:	1000dd40 	call	1000dd4 <__umodsi3>
 100a8b8:	8809883a 	mov	r4,r17
 100a8bc:	1023883a 	mov	r17,r2
 100a8c0:	b00b883a 	mov	r5,r22
 100a8c4:	8822943a 	slli	r17,r17,16
 100a8c8:	1000d700 	call	1000d70 <__udivsi3>
 100a8cc:	a00b883a 	mov	r5,r20
 100a8d0:	1009883a 	mov	r4,r2
 100a8d4:	9cffffcc 	andi	r19,r19,65535
 100a8d8:	1025883a 	mov	r18,r2
 100a8dc:	8ce6b03a 	or	r19,r17,r19
 100a8e0:	1000e300 	call	1000e30 <__mulsi3>
 100a8e4:	d8c00017 	ldw	r3,0(sp)
 100a8e8:	9880052e 	bgeu	r19,r2,100a900 <__udivdi3+0x2dc>
 100a8ec:	84e7883a 	add	r19,r16,r19
 100a8f0:	913fffc4 	addi	r4,r18,-1
 100a8f4:	9c000136 	bltu	r19,r16,100a8fc <__udivdi3+0x2d8>
 100a8f8:	9880c736 	bltu	r19,r2,100ac18 <__udivdi3+0x5f4>
 100a8fc:	2025883a 	mov	r18,r4
 100a900:	a80c943a 	slli	r6,r21,16
 100a904:	3484b03a 	or	r2,r6,r18
 100a908:	003f9d06 	br	100a780 <__udivdi3+0x15c>
 100a90c:	80804030 	cmpltui	r2,r16,256
 100a910:	1000b71e 	bne	r2,zero,100abf0 <__udivdi3+0x5cc>
 100a914:	8006d23a 	srli	r3,r16,8
 100a918:	04400204 	movi	r17,8
 100a91c:	003fc006 	br	100a820 <__udivdi3+0x1fc>
 100a920:	30804030 	cmpltui	r2,r6,256
 100a924:	1000a41e 	bne	r2,zero,100abb8 <__udivdi3+0x594>
 100a928:	3006d23a 	srli	r3,r6,8
 100a92c:	04400204 	movi	r17,8
 100a930:	003f5506 	br	100a688 <__udivdi3+0x64>
 100a934:	38804030 	cmpltui	r2,r7,256
 100a938:	1000a41e 	bne	r2,zero,100abcc <__udivdi3+0x5a8>
 100a93c:	3806d23a 	srli	r3,r7,8
 100a940:	01000204 	movi	r4,8
 100a944:	003fa006 	br	100a7c8 <__udivdi3+0x1a4>
 100a948:	80a0983a 	sll	r16,r16,r2
 100a94c:	946ed83a 	srl	r23,r18,r17
 100a950:	9086983a 	sll	r3,r18,r2
 100a954:	802cd43a 	srli	r22,r16,16
 100a958:	a462d83a 	srl	r17,r20,r17
 100a95c:	b809883a 	mov	r4,r23
 100a960:	b00b883a 	mov	r5,r22
 100a964:	88eab03a 	or	r21,r17,r3
 100a968:	a0a6983a 	sll	r19,r20,r2
 100a96c:	1000dd40 	call	1000dd4 <__umodsi3>
 100a970:	b809883a 	mov	r4,r23
 100a974:	b00b883a 	mov	r5,r22
 100a978:	1025883a 	mov	r18,r2
 100a97c:	853fffcc 	andi	r20,r16,65535
 100a980:	1000d700 	call	1000d70 <__udivsi3>
 100a984:	a009883a 	mov	r4,r20
 100a988:	100b883a 	mov	r5,r2
 100a98c:	102f883a 	mov	r23,r2
 100a990:	1000e300 	call	1000e30 <__mulsi3>
 100a994:	9024943a 	slli	r18,r18,16
 100a998:	a808d43a 	srli	r4,r21,16
 100a99c:	9108b03a 	or	r4,r18,r4
 100a9a0:	2080062e 	bgeu	r4,r2,100a9bc <__udivdi3+0x398>
 100a9a4:	2409883a 	add	r4,r4,r16
 100a9a8:	b8ffffc4 	addi	r3,r23,-1
 100a9ac:	24009836 	bltu	r4,r16,100ac10 <__udivdi3+0x5ec>
 100a9b0:	2080972e 	bgeu	r4,r2,100ac10 <__udivdi3+0x5ec>
 100a9b4:	bdffff84 	addi	r23,r23,-2
 100a9b8:	2409883a 	add	r4,r4,r16
 100a9bc:	20a3c83a 	sub	r17,r4,r2
 100a9c0:	8809883a 	mov	r4,r17
 100a9c4:	b00b883a 	mov	r5,r22
 100a9c8:	1000dd40 	call	1000dd4 <__umodsi3>
 100a9cc:	1025883a 	mov	r18,r2
 100a9d0:	8809883a 	mov	r4,r17
 100a9d4:	b00b883a 	mov	r5,r22
 100a9d8:	9024943a 	slli	r18,r18,16
 100a9dc:	1000d700 	call	1000d70 <__udivsi3>
 100a9e0:	100b883a 	mov	r5,r2
 100a9e4:	a009883a 	mov	r4,r20
 100a9e8:	ac7fffcc 	andi	r17,r21,65535
 100a9ec:	1039883a 	mov	fp,r2
 100a9f0:	9462b03a 	or	r17,r18,r17
 100a9f4:	1000e300 	call	1000e30 <__mulsi3>
 100a9f8:	8880062e 	bgeu	r17,r2,100aa14 <__udivdi3+0x3f0>
 100a9fc:	8c23883a 	add	r17,r17,r16
 100aa00:	e0ffffc4 	addi	r3,fp,-1
 100aa04:	8c007e36 	bltu	r17,r16,100ac00 <__udivdi3+0x5dc>
 100aa08:	88807d2e 	bgeu	r17,r2,100ac00 <__udivdi3+0x5dc>
 100aa0c:	e73fff84 	addi	fp,fp,-2
 100aa10:	8c23883a 	add	r17,r17,r16
 100aa14:	b806943a 	slli	r3,r23,16
 100aa18:	88a3c83a 	sub	r17,r17,r2
 100aa1c:	1f06b03a 	or	r3,r3,fp
 100aa20:	003f8a06 	br	100a84c <__udivdi3+0x228>
 100aa24:	30e6d83a 	srl	r19,r6,r3
 100aa28:	3c4e983a 	sll	r7,r7,r17
 100aa2c:	90e0d83a 	srl	r16,r18,r3
 100aa30:	a0c4d83a 	srl	r2,r20,r3
 100aa34:	99e6b03a 	or	r19,r19,r7
 100aa38:	9446983a 	sll	r3,r18,r17
 100aa3c:	9838d43a 	srli	fp,r19,16
 100aa40:	8009883a 	mov	r4,r16
 100aa44:	10eab03a 	or	r21,r2,r3
 100aa48:	e00b883a 	mov	r5,fp
 100aa4c:	346c983a 	sll	r22,r6,r17
 100aa50:	dd400015 	stw	r21,0(sp)
 100aa54:	1000dd40 	call	1000dd4 <__umodsi3>
 100aa58:	8009883a 	mov	r4,r16
 100aa5c:	e00b883a 	mov	r5,fp
 100aa60:	102f883a 	mov	r23,r2
 100aa64:	9cbfffcc 	andi	r18,r19,65535
 100aa68:	1000d700 	call	1000d70 <__udivsi3>
 100aa6c:	9009883a 	mov	r4,r18
 100aa70:	100b883a 	mov	r5,r2
 100aa74:	1021883a 	mov	r16,r2
 100aa78:	1000e300 	call	1000e30 <__mulsi3>
 100aa7c:	b82e943a 	slli	r23,r23,16
 100aa80:	a808d43a 	srli	r4,r21,16
 100aa84:	b908b03a 	or	r4,r23,r4
 100aa88:	2080062e 	bgeu	r4,r2,100aaa4 <__udivdi3+0x480>
 100aa8c:	24c9883a 	add	r4,r4,r19
 100aa90:	817fffc4 	addi	r5,r16,-1
 100aa94:	24c05c36 	bltu	r4,r19,100ac08 <__udivdi3+0x5e4>
 100aa98:	20805b2e 	bgeu	r4,r2,100ac08 <__udivdi3+0x5e4>
 100aa9c:	843fff84 	addi	r16,r16,-2
 100aaa0:	24c9883a 	add	r4,r4,r19
 100aaa4:	20abc83a 	sub	r21,r4,r2
 100aaa8:	a809883a 	mov	r4,r21
 100aaac:	e00b883a 	mov	r5,fp
 100aab0:	1000dd40 	call	1000dd4 <__umodsi3>
 100aab4:	a809883a 	mov	r4,r21
 100aab8:	e00b883a 	mov	r5,fp
 100aabc:	102b883a 	mov	r21,r2
 100aac0:	1000d700 	call	1000d70 <__udivsi3>
 100aac4:	9009883a 	mov	r4,r18
 100aac8:	100b883a 	mov	r5,r2
 100aacc:	102f883a 	mov	r23,r2
 100aad0:	1000e300 	call	1000e30 <__mulsi3>
 100aad4:	d8c00017 	ldw	r3,0(sp)
 100aad8:	a82a943a 	slli	r21,r21,16
 100aadc:	1cbfffcc 	andi	r18,r3,65535
 100aae0:	aca4b03a 	or	r18,r21,r18
 100aae4:	9080062e 	bgeu	r18,r2,100ab00 <__udivdi3+0x4dc>
 100aae8:	94e5883a 	add	r18,r18,r19
 100aaec:	b8ffffc4 	addi	r3,r23,-1
 100aaf0:	94c04136 	bltu	r18,r19,100abf8 <__udivdi3+0x5d4>
 100aaf4:	9080402e 	bgeu	r18,r2,100abf8 <__udivdi3+0x5d4>
 100aaf8:	bdffff84 	addi	r23,r23,-2
 100aafc:	94e5883a 	add	r18,r18,r19
 100ab00:	8020943a 	slli	r16,r16,16
 100ab04:	bd7fffcc 	andi	r21,r23,65535
 100ab08:	b73fffcc 	andi	fp,r22,65535
 100ab0c:	85e0b03a 	or	r16,r16,r23
 100ab10:	8026d43a 	srli	r19,r16,16
 100ab14:	a809883a 	mov	r4,r21
 100ab18:	e00b883a 	mov	r5,fp
 100ab1c:	b02cd43a 	srli	r22,r22,16
 100ab20:	90a5c83a 	sub	r18,r18,r2
 100ab24:	1000e300 	call	1000e30 <__mulsi3>
 100ab28:	9809883a 	mov	r4,r19
 100ab2c:	e00b883a 	mov	r5,fp
 100ab30:	102f883a 	mov	r23,r2
 100ab34:	1000e300 	call	1000e30 <__mulsi3>
 100ab38:	9809883a 	mov	r4,r19
 100ab3c:	b00b883a 	mov	r5,r22
 100ab40:	1027883a 	mov	r19,r2
 100ab44:	1000e300 	call	1000e30 <__mulsi3>
 100ab48:	a809883a 	mov	r4,r21
 100ab4c:	b00b883a 	mov	r5,r22
 100ab50:	102b883a 	mov	r21,r2
 100ab54:	1000e300 	call	1000e30 <__mulsi3>
 100ab58:	b806d43a 	srli	r3,r23,16
 100ab5c:	14c5883a 	add	r2,r2,r19
 100ab60:	1887883a 	add	r3,r3,r2
 100ab64:	1cc0022e 	bgeu	r3,r19,100ab70 <__udivdi3+0x54c>
 100ab68:	00800074 	movhi	r2,1
 100ab6c:	a8ab883a 	add	r21,r21,r2
 100ab70:	1804d43a 	srli	r2,r3,16
 100ab74:	156b883a 	add	r21,r2,r21
 100ab78:	95400936 	bltu	r18,r21,100aba0 <__udivdi3+0x57c>
 100ab7c:	95400326 	beq	r18,r21,100ab8c <__udivdi3+0x568>
 100ab80:	8005883a 	mov	r2,r16
 100ab84:	0007883a 	mov	r3,zero
 100ab88:	003efd06 	br	100a780 <__udivdi3+0x15c>
 100ab8c:	1806943a 	slli	r3,r3,16
 100ab90:	a44c983a 	sll	r6,r20,r17
 100ab94:	bdffffcc 	andi	r23,r23,65535
 100ab98:	1dc7883a 	add	r3,r3,r23
 100ab9c:	30fff82e 	bgeu	r6,r3,100ab80 <__udivdi3+0x55c>
 100aba0:	80bfffc4 	addi	r2,r16,-1
 100aba4:	0007883a 	mov	r3,zero
 100aba8:	003ef506 	br	100a780 <__udivdi3+0x15c>
 100abac:	3806d43a 	srli	r3,r7,16
 100abb0:	01000404 	movi	r4,16
 100abb4:	003f0406 	br	100a7c8 <__udivdi3+0x1a4>
 100abb8:	3007883a 	mov	r3,r6
 100abbc:	003eb206 	br	100a688 <__udivdi3+0x64>
 100abc0:	0007883a 	mov	r3,zero
 100abc4:	00800044 	movi	r2,1
 100abc8:	003eed06 	br	100a780 <__udivdi3+0x15c>
 100abcc:	3807883a 	mov	r3,r7
 100abd0:	0009883a 	mov	r4,zero
 100abd4:	003efc06 	br	100a7c8 <__udivdi3+0x1a4>
 100abd8:	8006d43a 	srli	r3,r16,16
 100abdc:	04400404 	movi	r17,16
 100abe0:	003f0f06 	br	100a820 <__udivdi3+0x1fc>
 100abe4:	3006d43a 	srli	r3,r6,16
 100abe8:	04400404 	movi	r17,16
 100abec:	003ea606 	br	100a688 <__udivdi3+0x64>
 100abf0:	8007883a 	mov	r3,r16
 100abf4:	003f0a06 	br	100a820 <__udivdi3+0x1fc>
 100abf8:	182f883a 	mov	r23,r3
 100abfc:	003fc006 	br	100ab00 <__udivdi3+0x4dc>
 100ac00:	1839883a 	mov	fp,r3
 100ac04:	003f8306 	br	100aa14 <__udivdi3+0x3f0>
 100ac08:	2821883a 	mov	r16,r5
 100ac0c:	003fa506 	br	100aaa4 <__udivdi3+0x480>
 100ac10:	182f883a 	mov	r23,r3
 100ac14:	003f6906 	br	100a9bc <__udivdi3+0x398>
 100ac18:	94bfff84 	addi	r18,r18,-2
 100ac1c:	003f3806 	br	100a900 <__udivdi3+0x2dc>
 100ac20:	94bfff84 	addi	r18,r18,-2
 100ac24:	003ecf06 	br	100a764 <__udivdi3+0x140>
 100ac28:	ad7fff84 	addi	r21,r21,-2
 100ac2c:	2409883a 	add	r4,r4,r16
 100ac30:	003eb706 	br	100a710 <__udivdi3+0xec>
 100ac34:	ad7fff84 	addi	r21,r21,-2
 100ac38:	2409883a 	add	r4,r4,r16
 100ac3c:	003f1906 	br	100a8a4 <__udivdi3+0x280>

0100ac40 <__umoddi3>:
 100ac40:	defff304 	addi	sp,sp,-52
 100ac44:	dc400415 	stw	r17,16(sp)
 100ac48:	dc000315 	stw	r16,12(sp)
 100ac4c:	dfc00c15 	stw	ra,48(sp)
 100ac50:	df000b15 	stw	fp,44(sp)
 100ac54:	ddc00a15 	stw	r23,40(sp)
 100ac58:	dd800915 	stw	r22,36(sp)
 100ac5c:	dd400815 	stw	r21,32(sp)
 100ac60:	dd000715 	stw	r20,28(sp)
 100ac64:	dcc00615 	stw	r19,24(sp)
 100ac68:	dc800515 	stw	r18,20(sp)
 100ac6c:	2823883a 	mov	r17,r5
 100ac70:	2021883a 	mov	r16,r4
 100ac74:	38003b1e 	bne	r7,zero,100ad64 <__umoddi3+0x124>
 100ac78:	3825883a 	mov	r18,r7
 100ac7c:	3029883a 	mov	r20,r6
 100ac80:	2027883a 	mov	r19,r4
 100ac84:	29805b2e 	bgeu	r5,r6,100adf4 <__umoddi3+0x1b4>
 100ac88:	00bfffd4 	movui	r2,65535
 100ac8c:	282d883a 	mov	r22,r5
 100ac90:	11809a2e 	bgeu	r2,r6,100aefc <__umoddi3+0x2bc>
 100ac94:	00804034 	movhi	r2,256
 100ac98:	30814436 	bltu	r6,r2,100b1ac <__umoddi3+0x56c>
 100ac9c:	3006d63a 	srli	r3,r6,24
 100aca0:	04800604 	movi	r18,24
 100aca4:	00804074 	movhi	r2,257
 100aca8:	1885883a 	add	r2,r3,r2
 100acac:	110a8603 	ldbu	r4,10776(r2)
 100acb0:	00800804 	movi	r2,32
 100acb4:	2489883a 	add	r4,r4,r18
 100acb8:	1125c83a 	sub	r18,r2,r4
 100acbc:	11000526 	beq	r2,r4,100acd4 <__umoddi3+0x94>
 100acc0:	8ca2983a 	sll	r17,r17,r18
 100acc4:	8108d83a 	srl	r4,r16,r4
 100acc8:	34a8983a 	sll	r20,r6,r18
 100accc:	84a6983a 	sll	r19,r16,r18
 100acd0:	246cb03a 	or	r22,r4,r17
 100acd4:	a02ed43a 	srli	r23,r20,16
 100acd8:	b009883a 	mov	r4,r22
 100acdc:	a57fffcc 	andi	r21,r20,65535
 100ace0:	b80b883a 	mov	r5,r23
 100ace4:	1000dd40 	call	1000dd4 <__umodsi3>
 100ace8:	b80b883a 	mov	r5,r23
 100acec:	b009883a 	mov	r4,r22
 100acf0:	1023883a 	mov	r17,r2
 100acf4:	1000d700 	call	1000d70 <__udivsi3>
 100acf8:	a809883a 	mov	r4,r21
 100acfc:	100b883a 	mov	r5,r2
 100ad00:	1000e300 	call	1000e30 <__mulsi3>
 100ad04:	8822943a 	slli	r17,r17,16
 100ad08:	9808d43a 	srli	r4,r19,16
 100ad0c:	8908b03a 	or	r4,r17,r4
 100ad10:	2080042e 	bgeu	r4,r2,100ad24 <__umoddi3+0xe4>
 100ad14:	2509883a 	add	r4,r4,r20
 100ad18:	25000236 	bltu	r4,r20,100ad24 <__umoddi3+0xe4>
 100ad1c:	2080012e 	bgeu	r4,r2,100ad24 <__umoddi3+0xe4>
 100ad20:	2509883a 	add	r4,r4,r20
 100ad24:	20a1c83a 	sub	r16,r4,r2
 100ad28:	b80b883a 	mov	r5,r23
 100ad2c:	8009883a 	mov	r4,r16
 100ad30:	1000dd40 	call	1000dd4 <__umodsi3>
 100ad34:	b80b883a 	mov	r5,r23
 100ad38:	8009883a 	mov	r4,r16
 100ad3c:	1023883a 	mov	r17,r2
 100ad40:	1000d700 	call	1000d70 <__udivsi3>
 100ad44:	8822943a 	slli	r17,r17,16
 100ad48:	100b883a 	mov	r5,r2
 100ad4c:	a809883a 	mov	r4,r21
 100ad50:	1000e300 	call	1000e30 <__mulsi3>
 100ad54:	98ffffcc 	andi	r3,r19,65535
 100ad58:	88c6b03a 	or	r3,r17,r3
 100ad5c:	18805e2e 	bgeu	r3,r2,100aed8 <__umoddi3+0x298>
 100ad60:	00005906 	br	100aec8 <__umoddi3+0x288>
 100ad64:	2005883a 	mov	r2,r4
 100ad68:	29c00d2e 	bgeu	r5,r7,100ada0 <__umoddi3+0x160>
 100ad6c:	2807883a 	mov	r3,r5
 100ad70:	dfc00c17 	ldw	ra,48(sp)
 100ad74:	df000b17 	ldw	fp,44(sp)
 100ad78:	ddc00a17 	ldw	r23,40(sp)
 100ad7c:	dd800917 	ldw	r22,36(sp)
 100ad80:	dd400817 	ldw	r21,32(sp)
 100ad84:	dd000717 	ldw	r20,28(sp)
 100ad88:	dcc00617 	ldw	r19,24(sp)
 100ad8c:	dc800517 	ldw	r18,20(sp)
 100ad90:	dc400417 	ldw	r17,16(sp)
 100ad94:	dc000317 	ldw	r16,12(sp)
 100ad98:	dec00d04 	addi	sp,sp,52
 100ad9c:	f800283a 	ret
 100ada0:	013fffd4 	movui	r4,65535
 100ada4:	2807883a 	mov	r3,r5
 100ada8:	21c0592e 	bgeu	r4,r7,100af10 <__umoddi3+0x2d0>
 100adac:	01004034 	movhi	r4,256
 100adb0:	39010336 	bltu	r7,r4,100b1c0 <__umoddi3+0x580>
 100adb4:	3808d63a 	srli	r4,r7,24
 100adb8:	02000604 	movi	r8,24
 100adbc:	01404074 	movhi	r5,257
 100adc0:	214b883a 	add	r5,r4,r5
 100adc4:	2d0a8603 	ldbu	r20,10776(r5)
 100adc8:	01000804 	movi	r4,32
 100adcc:	a229883a 	add	r20,r20,r8
 100add0:	252bc83a 	sub	r21,r4,r20
 100add4:	2500531e 	bne	r4,r20,100af24 <__umoddi3+0x2e4>
 100add8:	3c400136 	bltu	r7,r17,100ade0 <__umoddi3+0x1a0>
 100addc:	81bfe436 	bltu	r16,r6,100ad70 <__umoddi3+0x130>
 100ade0:	8185c83a 	sub	r2,r16,r6
 100ade4:	89cfc83a 	sub	r7,r17,r7
 100ade8:	8087803a 	cmpltu	r3,r16,r2
 100adec:	38c7c83a 	sub	r3,r7,r3
 100adf0:	003fdf06 	br	100ad70 <__umoddi3+0x130>
 100adf4:	3000041e 	bne	r6,zero,100ae08 <__umoddi3+0x1c8>
 100adf8:	000b883a 	mov	r5,zero
 100adfc:	01000044 	movi	r4,1
 100ae00:	1000d700 	call	1000d70 <__udivsi3>
 100ae04:	1029883a 	mov	r20,r2
 100ae08:	00bfffd4 	movui	r2,65535
 100ae0c:	1500362e 	bgeu	r2,r20,100aee8 <__umoddi3+0x2a8>
 100ae10:	00804034 	movhi	r2,256
 100ae14:	a080ed36 	bltu	r20,r2,100b1cc <__umoddi3+0x58c>
 100ae18:	a006d63a 	srli	r3,r20,24
 100ae1c:	04800604 	movi	r18,24
 100ae20:	00804074 	movhi	r2,257
 100ae24:	1885883a 	add	r2,r3,r2
 100ae28:	158a8603 	ldbu	r22,10776(r2)
 100ae2c:	00800804 	movi	r2,32
 100ae30:	b4ad883a 	add	r22,r22,r18
 100ae34:	15a5c83a 	sub	r18,r2,r22
 100ae38:	1580a51e 	bne	r2,r22,100b0d0 <__umoddi3+0x490>
 100ae3c:	a02ed43a 	srli	r23,r20,16
 100ae40:	8d23c83a 	sub	r17,r17,r20
 100ae44:	a57fffcc 	andi	r21,r20,65535
 100ae48:	8809883a 	mov	r4,r17
 100ae4c:	b80b883a 	mov	r5,r23
 100ae50:	1000dd40 	call	1000dd4 <__umodsi3>
 100ae54:	8809883a 	mov	r4,r17
 100ae58:	b80b883a 	mov	r5,r23
 100ae5c:	1023883a 	mov	r17,r2
 100ae60:	1000d700 	call	1000d70 <__udivsi3>
 100ae64:	1009883a 	mov	r4,r2
 100ae68:	a80b883a 	mov	r5,r21
 100ae6c:	1000e300 	call	1000e30 <__mulsi3>
 100ae70:	8822943a 	slli	r17,r17,16
 100ae74:	9808d43a 	srli	r4,r19,16
 100ae78:	8908b03a 	or	r4,r17,r4
 100ae7c:	2080032e 	bgeu	r4,r2,100ae8c <__umoddi3+0x24c>
 100ae80:	2509883a 	add	r4,r4,r20
 100ae84:	25000136 	bltu	r4,r20,100ae8c <__umoddi3+0x24c>
 100ae88:	2080dc36 	bltu	r4,r2,100b1fc <__umoddi3+0x5bc>
 100ae8c:	20a1c83a 	sub	r16,r4,r2
 100ae90:	b80b883a 	mov	r5,r23
 100ae94:	8009883a 	mov	r4,r16
 100ae98:	1000dd40 	call	1000dd4 <__umodsi3>
 100ae9c:	b80b883a 	mov	r5,r23
 100aea0:	8009883a 	mov	r4,r16
 100aea4:	1023883a 	mov	r17,r2
 100aea8:	8822943a 	slli	r17,r17,16
 100aeac:	1000d700 	call	1000d70 <__udivsi3>
 100aeb0:	a80b883a 	mov	r5,r21
 100aeb4:	1009883a 	mov	r4,r2
 100aeb8:	1000e300 	call	1000e30 <__mulsi3>
 100aebc:	9cffffcc 	andi	r19,r19,65535
 100aec0:	8cc6b03a 	or	r3,r17,r19
 100aec4:	1880042e 	bgeu	r3,r2,100aed8 <__umoddi3+0x298>
 100aec8:	1d07883a 	add	r3,r3,r20
 100aecc:	1d000236 	bltu	r3,r20,100aed8 <__umoddi3+0x298>
 100aed0:	1880012e 	bgeu	r3,r2,100aed8 <__umoddi3+0x298>
 100aed4:	1d07883a 	add	r3,r3,r20
 100aed8:	1885c83a 	sub	r2,r3,r2
 100aedc:	1484d83a 	srl	r2,r2,r18
 100aee0:	0007883a 	mov	r3,zero
 100aee4:	003fa206 	br	100ad70 <__umoddi3+0x130>
 100aee8:	a0804030 	cmpltui	r2,r20,256
 100aeec:	1000ba1e 	bne	r2,zero,100b1d8 <__umoddi3+0x598>
 100aef0:	a006d23a 	srli	r3,r20,8
 100aef4:	04800204 	movi	r18,8
 100aef8:	003fc906 	br	100ae20 <__umoddi3+0x1e0>
 100aefc:	30804030 	cmpltui	r2,r6,256
 100af00:	1000ad1e 	bne	r2,zero,100b1b8 <__umoddi3+0x578>
 100af04:	3006d23a 	srli	r3,r6,8
 100af08:	04800204 	movi	r18,8
 100af0c:	003f6506 	br	100aca4 <__umoddi3+0x64>
 100af10:	39004030 	cmpltui	r4,r7,256
 100af14:	2000b21e 	bne	r4,zero,100b1e0 <__umoddi3+0x5a0>
 100af18:	3808d23a 	srli	r4,r7,8
 100af1c:	02000204 	movi	r8,8
 100af20:	003fa606 	br	100adbc <__umoddi3+0x17c>
 100af24:	3d4e983a 	sll	r7,r7,r21
 100af28:	3508d83a 	srl	r4,r6,r20
 100af2c:	8d2cd83a 	srl	r22,r17,r20
 100af30:	8504d83a 	srl	r2,r16,r20
 100af34:	21e4b03a 	or	r18,r4,r7
 100af38:	8d62983a 	sll	r17,r17,r21
 100af3c:	9026d43a 	srli	r19,r18,16
 100af40:	354c983a 	sll	r6,r6,r21
 100af44:	1444b03a 	or	r2,r2,r17
 100af48:	b009883a 	mov	r4,r22
 100af4c:	980b883a 	mov	r5,r19
 100af50:	d9800115 	stw	r6,4(sp)
 100af54:	d8800015 	stw	r2,0(sp)
 100af58:	1000dd40 	call	1000dd4 <__umodsi3>
 100af5c:	980b883a 	mov	r5,r19
 100af60:	b009883a 	mov	r4,r22
 100af64:	102f883a 	mov	r23,r2
 100af68:	947fffcc 	andi	r17,r18,65535
 100af6c:	1000d700 	call	1000d70 <__udivsi3>
 100af70:	8809883a 	mov	r4,r17
 100af74:	100b883a 	mov	r5,r2
 100af78:	1039883a 	mov	fp,r2
 100af7c:	1000e300 	call	1000e30 <__mulsi3>
 100af80:	d8c00017 	ldw	r3,0(sp)
 100af84:	b82e943a 	slli	r23,r23,16
 100af88:	8560983a 	sll	r16,r16,r21
 100af8c:	1808d43a 	srli	r4,r3,16
 100af90:	b908b03a 	or	r4,r23,r4
 100af94:	2080062e 	bgeu	r4,r2,100afb0 <__umoddi3+0x370>
 100af98:	2489883a 	add	r4,r4,r18
 100af9c:	e17fffc4 	addi	r5,fp,-1
 100afa0:	24809436 	bltu	r4,r18,100b1f4 <__umoddi3+0x5b4>
 100afa4:	2080932e 	bgeu	r4,r2,100b1f4 <__umoddi3+0x5b4>
 100afa8:	e73fff84 	addi	fp,fp,-2
 100afac:	2489883a 	add	r4,r4,r18
 100afb0:	20adc83a 	sub	r22,r4,r2
 100afb4:	980b883a 	mov	r5,r19
 100afb8:	b009883a 	mov	r4,r22
 100afbc:	1000dd40 	call	1000dd4 <__umodsi3>
 100afc0:	980b883a 	mov	r5,r19
 100afc4:	b009883a 	mov	r4,r22
 100afc8:	102f883a 	mov	r23,r2
 100afcc:	1000d700 	call	1000d70 <__udivsi3>
 100afd0:	100b883a 	mov	r5,r2
 100afd4:	8809883a 	mov	r4,r17
 100afd8:	d8800215 	stw	r2,8(sp)
 100afdc:	1000e300 	call	1000e30 <__mulsi3>
 100afe0:	d8c00017 	ldw	r3,0(sp)
 100afe4:	b82e943a 	slli	r23,r23,16
 100afe8:	d9400217 	ldw	r5,8(sp)
 100afec:	1c7fffcc 	andi	r17,r3,65535
 100aff0:	bc62b03a 	or	r17,r23,r17
 100aff4:	8880062e 	bgeu	r17,r2,100b010 <__umoddi3+0x3d0>
 100aff8:	8ca3883a 	add	r17,r17,r18
 100affc:	28ffffc4 	addi	r3,r5,-1
 100b000:	8c807a36 	bltu	r17,r18,100b1ec <__umoddi3+0x5ac>
 100b004:	8880792e 	bgeu	r17,r2,100b1ec <__umoddi3+0x5ac>
 100b008:	297fff84 	addi	r5,r5,-2
 100b00c:	8ca3883a 	add	r17,r17,r18
 100b010:	e02c943a 	slli	r22,fp,16
 100b014:	d9c00117 	ldw	r7,4(sp)
 100b018:	29bfffcc 	andi	r6,r5,65535
 100b01c:	b16cb03a 	or	r22,r22,r5
 100b020:	38ffffcc 	andi	r3,r7,65535
 100b024:	b02cd43a 	srli	r22,r22,16
 100b028:	180b883a 	mov	r5,r3
 100b02c:	3009883a 	mov	r4,r6
 100b030:	3838d43a 	srli	fp,r7,16
 100b034:	182f883a 	mov	r23,r3
 100b038:	d9800015 	stw	r6,0(sp)
 100b03c:	88a3c83a 	sub	r17,r17,r2
 100b040:	1000e300 	call	1000e30 <__mulsi3>
 100b044:	b80b883a 	mov	r5,r23
 100b048:	b009883a 	mov	r4,r22
 100b04c:	102f883a 	mov	r23,r2
 100b050:	1000e300 	call	1000e30 <__mulsi3>
 100b054:	e00b883a 	mov	r5,fp
 100b058:	b009883a 	mov	r4,r22
 100b05c:	102d883a 	mov	r22,r2
 100b060:	1000e300 	call	1000e30 <__mulsi3>
 100b064:	d9800017 	ldw	r6,0(sp)
 100b068:	e00b883a 	mov	r5,fp
 100b06c:	1039883a 	mov	fp,r2
 100b070:	3009883a 	mov	r4,r6
 100b074:	1000e300 	call	1000e30 <__mulsi3>
 100b078:	b808d43a 	srli	r4,r23,16
 100b07c:	1585883a 	add	r2,r2,r22
 100b080:	2089883a 	add	r4,r4,r2
 100b084:	2580022e 	bgeu	r4,r22,100b090 <__umoddi3+0x450>
 100b088:	00800074 	movhi	r2,1
 100b08c:	e0b9883a 	add	fp,fp,r2
 100b090:	2006d43a 	srli	r3,r4,16
 100b094:	2008943a 	slli	r4,r4,16
 100b098:	bdffffcc 	andi	r23,r23,65535
 100b09c:	1f07883a 	add	r3,r3,fp
 100b0a0:	25c9883a 	add	r4,r4,r23
 100b0a4:	88c03a36 	bltu	r17,r3,100b190 <__umoddi3+0x550>
 100b0a8:	88c03826 	beq	r17,r3,100b18c <__umoddi3+0x54c>
 100b0ac:	8109c83a 	sub	r4,r16,r4
 100b0b0:	8121803a 	cmpltu	r16,r16,r4
 100b0b4:	88c7c83a 	sub	r3,r17,r3
 100b0b8:	1c07c83a 	sub	r3,r3,r16
 100b0bc:	1d04983a 	sll	r2,r3,r20
 100b0c0:	2548d83a 	srl	r4,r4,r21
 100b0c4:	1d46d83a 	srl	r3,r3,r21
 100b0c8:	1104b03a 	or	r2,r2,r4
 100b0cc:	003f2806 	br	100ad70 <__umoddi3+0x130>
 100b0d0:	a4a8983a 	sll	r20,r20,r18
 100b0d4:	8da6d83a 	srl	r19,r17,r22
 100b0d8:	8ca2983a 	sll	r17,r17,r18
 100b0dc:	a02ed43a 	srli	r23,r20,16
 100b0e0:	9809883a 	mov	r4,r19
 100b0e4:	85acd83a 	srl	r22,r16,r22
 100b0e8:	b80b883a 	mov	r5,r23
 100b0ec:	1000dd40 	call	1000dd4 <__umodsi3>
 100b0f0:	9809883a 	mov	r4,r19
 100b0f4:	b80b883a 	mov	r5,r23
 100b0f8:	b46cb03a 	or	r22,r22,r17
 100b0fc:	a57fffcc 	andi	r21,r20,65535
 100b100:	1023883a 	mov	r17,r2
 100b104:	1000d700 	call	1000d70 <__udivsi3>
 100b108:	a809883a 	mov	r4,r21
 100b10c:	100b883a 	mov	r5,r2
 100b110:	1000e300 	call	1000e30 <__mulsi3>
 100b114:	8822943a 	slli	r17,r17,16
 100b118:	b008d43a 	srli	r4,r22,16
 100b11c:	84a6983a 	sll	r19,r16,r18
 100b120:	8908b03a 	or	r4,r17,r4
 100b124:	2080042e 	bgeu	r4,r2,100b138 <__umoddi3+0x4f8>
 100b128:	2509883a 	add	r4,r4,r20
 100b12c:	25000236 	bltu	r4,r20,100b138 <__umoddi3+0x4f8>
 100b130:	2080012e 	bgeu	r4,r2,100b138 <__umoddi3+0x4f8>
 100b134:	2509883a 	add	r4,r4,r20
 100b138:	20a1c83a 	sub	r16,r4,r2
 100b13c:	8009883a 	mov	r4,r16
 100b140:	b80b883a 	mov	r5,r23
 100b144:	1000dd40 	call	1000dd4 <__umodsi3>
 100b148:	8009883a 	mov	r4,r16
 100b14c:	1021883a 	mov	r16,r2
 100b150:	b80b883a 	mov	r5,r23
 100b154:	8020943a 	slli	r16,r16,16
 100b158:	1000d700 	call	1000d70 <__udivsi3>
 100b15c:	100b883a 	mov	r5,r2
 100b160:	a809883a 	mov	r4,r21
 100b164:	b47fffcc 	andi	r17,r22,65535
 100b168:	1000e300 	call	1000e30 <__mulsi3>
 100b16c:	8462b03a 	or	r17,r16,r17
 100b170:	8880042e 	bgeu	r17,r2,100b184 <__umoddi3+0x544>
 100b174:	8d23883a 	add	r17,r17,r20
 100b178:	8d000236 	bltu	r17,r20,100b184 <__umoddi3+0x544>
 100b17c:	8880012e 	bgeu	r17,r2,100b184 <__umoddi3+0x544>
 100b180:	8d23883a 	add	r17,r17,r20
 100b184:	88a3c83a 	sub	r17,r17,r2
 100b188:	003f2f06 	br	100ae48 <__umoddi3+0x208>
 100b18c:	813fc72e 	bgeu	r16,r4,100b0ac <__umoddi3+0x46c>
 100b190:	d8800117 	ldw	r2,4(sp)
 100b194:	20a7c83a 	sub	r19,r4,r2
 100b198:	24c9803a 	cmpltu	r4,r4,r19
 100b19c:	2489883a 	add	r4,r4,r18
 100b1a0:	1907c83a 	sub	r3,r3,r4
 100b1a4:	9809883a 	mov	r4,r19
 100b1a8:	003fc006 	br	100b0ac <__umoddi3+0x46c>
 100b1ac:	3006d43a 	srli	r3,r6,16
 100b1b0:	04800404 	movi	r18,16
 100b1b4:	003ebb06 	br	100aca4 <__umoddi3+0x64>
 100b1b8:	3007883a 	mov	r3,r6
 100b1bc:	003eb906 	br	100aca4 <__umoddi3+0x64>
 100b1c0:	3808d43a 	srli	r4,r7,16
 100b1c4:	02000404 	movi	r8,16
 100b1c8:	003efc06 	br	100adbc <__umoddi3+0x17c>
 100b1cc:	a006d43a 	srli	r3,r20,16
 100b1d0:	04800404 	movi	r18,16
 100b1d4:	003f1206 	br	100ae20 <__umoddi3+0x1e0>
 100b1d8:	a007883a 	mov	r3,r20
 100b1dc:	003f1006 	br	100ae20 <__umoddi3+0x1e0>
 100b1e0:	3809883a 	mov	r4,r7
 100b1e4:	0011883a 	mov	r8,zero
 100b1e8:	003ef406 	br	100adbc <__umoddi3+0x17c>
 100b1ec:	180b883a 	mov	r5,r3
 100b1f0:	003f8706 	br	100b010 <__umoddi3+0x3d0>
 100b1f4:	2839883a 	mov	fp,r5
 100b1f8:	003f6d06 	br	100afb0 <__umoddi3+0x370>
 100b1fc:	2509883a 	add	r4,r4,r20
 100b200:	003f2206 	br	100ae8c <__umoddi3+0x24c>

0100b204 <__adddf3>:
 100b204:	02000434 	movhi	r8,16
 100b208:	423fffc4 	addi	r8,r8,-1
 100b20c:	3a12703a 	and	r9,r7,r8
 100b210:	2a06703a 	and	r3,r5,r8
 100b214:	2818d53a 	srli	r12,r5,20
 100b218:	3804d53a 	srli	r2,r7,20
 100b21c:	481490fa 	slli	r10,r9,3
 100b220:	280ad7fa 	srli	r5,r5,31
 100b224:	180690fa 	slli	r3,r3,3
 100b228:	2016d77a 	srli	r11,r4,29
 100b22c:	3012d77a 	srli	r9,r6,29
 100b230:	380ed7fa 	srli	r7,r7,31
 100b234:	defffb04 	addi	sp,sp,-20
 100b238:	dc400115 	stw	r17,4(sp)
 100b23c:	dc000015 	stw	r16,0(sp)
 100b240:	dfc00415 	stw	ra,16(sp)
 100b244:	dcc00315 	stw	r19,12(sp)
 100b248:	dc800215 	stw	r18,8(sp)
 100b24c:	201c90fa 	slli	r14,r4,3
 100b250:	301a90fa 	slli	r13,r6,3
 100b254:	6441ffcc 	andi	r17,r12,2047
 100b258:	2821883a 	mov	r16,r5
 100b25c:	58c6b03a 	or	r3,r11,r3
 100b260:	1081ffcc 	andi	r2,r2,2047
 100b264:	4a92b03a 	or	r9,r9,r10
 100b268:	29c06326 	beq	r5,r7,100b3f8 <__adddf3+0x1f4>
 100b26c:	888bc83a 	sub	r5,r17,r2
 100b270:	0140560e 	bge	zero,r5,100b3cc <__adddf3+0x1c8>
 100b274:	10007526 	beq	r2,zero,100b44c <__adddf3+0x248>
 100b278:	8881ffd8 	cmpnei	r2,r17,2047
 100b27c:	10012d26 	beq	r2,zero,100b734 <__adddf3+0x530>
 100b280:	4a402034 	orhi	r9,r9,128
 100b284:	28800e48 	cmpgei	r2,r5,57
 100b288:	1000f41e 	bne	r2,zero,100b65c <__adddf3+0x458>
 100b28c:	28800808 	cmpgei	r2,r5,32
 100b290:	1001471e 	bne	r2,zero,100b7b0 <__adddf3+0x5ac>
 100b294:	00800804 	movi	r2,32
 100b298:	1145c83a 	sub	r2,r2,r5
 100b29c:	6948d83a 	srl	r4,r13,r5
 100b2a0:	48a4983a 	sll	r18,r9,r2
 100b2a4:	6884983a 	sll	r2,r13,r2
 100b2a8:	494ad83a 	srl	r5,r9,r5
 100b2ac:	9124b03a 	or	r18,r18,r4
 100b2b0:	101ac03a 	cmpne	r13,r2,zero
 100b2b4:	9364b03a 	or	r18,r18,r13
 100b2b8:	1947c83a 	sub	r3,r3,r5
 100b2bc:	74a5c83a 	sub	r18,r14,r18
 100b2c0:	7489803a 	cmpltu	r4,r14,r18
 100b2c4:	1909c83a 	sub	r4,r3,r4
 100b2c8:	2080202c 	andhi	r2,r4,128
 100b2cc:	10008626 	beq	r2,zero,100b4e8 <__adddf3+0x2e4>
 100b2d0:	00802034 	movhi	r2,128
 100b2d4:	10bfffc4 	addi	r2,r2,-1
 100b2d8:	20a6703a 	and	r19,r4,r2
 100b2dc:	9800d626 	beq	r19,zero,100b638 <__adddf3+0x434>
 100b2e0:	9809883a 	mov	r4,r19
 100b2e4:	100da0c0 	call	100da0c <__clzsi2>
 100b2e8:	133ffe04 	addi	r12,r2,-8
 100b2ec:	01000804 	movi	r4,32
 100b2f0:	2309c83a 	sub	r4,r4,r12
 100b2f4:	9108d83a 	srl	r4,r18,r4
 100b2f8:	9b04983a 	sll	r2,r19,r12
 100b2fc:	9324983a 	sll	r18,r18,r12
 100b300:	2088b03a 	or	r4,r4,r2
 100b304:	6440c716 	blt	r12,r17,100b624 <__adddf3+0x420>
 100b308:	6459c83a 	sub	r12,r12,r17
 100b30c:	62000044 	addi	r8,r12,1
 100b310:	40800808 	cmpgei	r2,r8,32
 100b314:	1001191e 	bne	r2,zero,100b77c <__adddf3+0x578>
 100b318:	00800804 	movi	r2,32
 100b31c:	1205c83a 	sub	r2,r2,r8
 100b320:	9206d83a 	srl	r3,r18,r8
 100b324:	90a4983a 	sll	r18,r18,r2
 100b328:	2084983a 	sll	r2,r4,r2
 100b32c:	2208d83a 	srl	r4,r4,r8
 100b330:	9024c03a 	cmpne	r18,r18,zero
 100b334:	10c4b03a 	or	r2,r2,r3
 100b338:	14a4b03a 	or	r18,r2,r18
 100b33c:	0023883a 	mov	r17,zero
 100b340:	908001cc 	andi	r2,r18,7
 100b344:	10000726 	beq	r2,zero,100b364 <__adddf3+0x160>
 100b348:	908003cc 	andi	r2,r18,15
 100b34c:	10800120 	cmpeqi	r2,r2,4
 100b350:	1000041e 	bne	r2,zero,100b364 <__adddf3+0x160>
 100b354:	90c00104 	addi	r3,r18,4
 100b358:	1ca5803a 	cmpltu	r18,r3,r18
 100b35c:	2489883a 	add	r4,r4,r18
 100b360:	1825883a 	mov	r18,r3
 100b364:	2080202c 	andhi	r2,r4,128
 100b368:	10006126 	beq	r2,zero,100b4f0 <__adddf3+0x2ec>
 100b36c:	89400044 	addi	r5,r17,1
 100b370:	2881ffe0 	cmpeqi	r2,r5,2047
 100b374:	2941ffcc 	andi	r5,r5,2047
 100b378:	1000731e 	bne	r2,zero,100b548 <__adddf3+0x344>
 100b37c:	023fe034 	movhi	r8,65408
 100b380:	423fffc4 	addi	r8,r8,-1
 100b384:	2210703a 	and	r8,r4,r8
 100b388:	4006927a 	slli	r3,r8,9
 100b38c:	9024d0fa 	srli	r18,r18,3
 100b390:	4004977a 	slli	r2,r8,29
 100b394:	1806d33a 	srli	r3,r3,12
 100b398:	1484b03a 	or	r2,r2,r18
 100b39c:	280a953a 	slli	r5,r5,20
 100b3a0:	84003fcc 	andi	r16,r16,255
 100b3a4:	802097fa 	slli	r16,r16,31
 100b3a8:	28c6b03a 	or	r3,r5,r3
 100b3ac:	1c06b03a 	or	r3,r3,r16
 100b3b0:	dfc00417 	ldw	ra,16(sp)
 100b3b4:	dcc00317 	ldw	r19,12(sp)
 100b3b8:	dc800217 	ldw	r18,8(sp)
 100b3bc:	dc400117 	ldw	r17,4(sp)
 100b3c0:	dc000017 	ldw	r16,0(sp)
 100b3c4:	dec00504 	addi	sp,sp,20
 100b3c8:	f800283a 	ret
 100b3cc:	28002726 	beq	r5,zero,100b46c <__adddf3+0x268>
 100b3d0:	144bc83a 	sub	r5,r2,r17
 100b3d4:	8800be1e 	bne	r17,zero,100b6d0 <__adddf3+0x4cc>
 100b3d8:	1b88b03a 	or	r4,r3,r14
 100b3dc:	20013126 	beq	r4,zero,100b8a4 <__adddf3+0x6a0>
 100b3e0:	293fffc4 	addi	r4,r5,-1
 100b3e4:	20017226 	beq	r4,zero,100b9b0 <__adddf3+0x7ac>
 100b3e8:	2941ffd8 	cmpnei	r5,r5,2047
 100b3ec:	2801c226 	beq	r5,zero,100baf8 <__adddf3+0x8f4>
 100b3f0:	200b883a 	mov	r5,r4
 100b3f4:	0000b906 	br	100b6dc <__adddf3+0x4d8>
 100b3f8:	888bc83a 	sub	r5,r17,r2
 100b3fc:	0140700e 	bge	zero,r5,100b5c0 <__adddf3+0x3bc>
 100b400:	10002a26 	beq	r2,zero,100b4ac <__adddf3+0x2a8>
 100b404:	8881ffd8 	cmpnei	r2,r17,2047
 100b408:	1000ca26 	beq	r2,zero,100b734 <__adddf3+0x530>
 100b40c:	4a402034 	orhi	r9,r9,128
 100b410:	28800e48 	cmpgei	r2,r5,57
 100b414:	1000421e 	bne	r2,zero,100b520 <__adddf3+0x31c>
 100b418:	28800808 	cmpgei	r2,r5,32
 100b41c:	1000ff26 	beq	r2,zero,100b81c <__adddf3+0x618>
 100b420:	2cbff804 	addi	r18,r5,-32
 100b424:	29000820 	cmpeqi	r4,r5,32
 100b428:	4c84d83a 	srl	r2,r9,r18
 100b42c:	2000041e 	bne	r4,zero,100b440 <__adddf3+0x23c>
 100b430:	01001004 	movi	r4,64
 100b434:	214bc83a 	sub	r5,r4,r5
 100b438:	4952983a 	sll	r9,r9,r5
 100b43c:	6a5ab03a 	or	r13,r13,r9
 100b440:	6824c03a 	cmpne	r18,r13,zero
 100b444:	90a4b03a 	or	r18,r18,r2
 100b448:	00003706 	br	100b528 <__adddf3+0x324>
 100b44c:	4b44b03a 	or	r2,r9,r13
 100b450:	1000b126 	beq	r2,zero,100b718 <__adddf3+0x514>
 100b454:	28bfffc4 	addi	r2,r5,-1
 100b458:	10011a26 	beq	r2,zero,100b8c4 <__adddf3+0x6c0>
 100b45c:	2941ffd8 	cmpnei	r5,r5,2047
 100b460:	28012526 	beq	r5,zero,100b8f8 <__adddf3+0x6f4>
 100b464:	100b883a 	mov	r5,r2
 100b468:	003f8606 	br	100b284 <__adddf3+0x80>
 100b46c:	8a800044 	addi	r10,r17,1
 100b470:	5281ff8c 	andi	r10,r10,2046
 100b474:	50008b1e 	bne	r10,zero,100b6a4 <__adddf3+0x4a0>
 100b478:	1b96b03a 	or	r11,r3,r14
 100b47c:	4b44b03a 	or	r2,r9,r13
 100b480:	8801031e 	bne	r17,zero,100b890 <__adddf3+0x68c>
 100b484:	58014126 	beq	r11,zero,100b98c <__adddf3+0x788>
 100b488:	1001571e 	bne	r2,zero,100b9e8 <__adddf3+0x7e4>
 100b48c:	1804977a 	slli	r2,r3,29
 100b490:	01480034 	movhi	r5,8192
 100b494:	297fffc4 	addi	r5,r5,-1
 100b498:	2148703a 	and	r4,r4,r5
 100b49c:	1810d0fa 	srli	r8,r3,3
 100b4a0:	1104b03a 	or	r2,r2,r4
 100b4a4:	500b883a 	mov	r5,r10
 100b4a8:	00001806 	br	100b50c <__adddf3+0x308>
 100b4ac:	4b44b03a 	or	r2,r9,r13
 100b4b0:	10010a26 	beq	r2,zero,100b8dc <__adddf3+0x6d8>
 100b4b4:	28bfffc4 	addi	r2,r5,-1
 100b4b8:	10000426 	beq	r2,zero,100b4cc <__adddf3+0x2c8>
 100b4bc:	2941ffd8 	cmpnei	r5,r5,2047
 100b4c0:	28014226 	beq	r5,zero,100b9cc <__adddf3+0x7c8>
 100b4c4:	100b883a 	mov	r5,r2
 100b4c8:	003fd106 	br	100b410 <__adddf3+0x20c>
 100b4cc:	7365883a 	add	r18,r14,r13
 100b4d0:	1a47883a 	add	r3,r3,r9
 100b4d4:	9389803a 	cmpltu	r4,r18,r14
 100b4d8:	1909883a 	add	r4,r3,r4
 100b4dc:	2080202c 	andhi	r2,r4,128
 100b4e0:	10009b1e 	bne	r2,zero,100b750 <__adddf3+0x54c>
 100b4e4:	04400044 	movi	r17,1
 100b4e8:	908001cc 	andi	r2,r18,7
 100b4ec:	103f961e 	bne	r2,zero,100b348 <__adddf3+0x144>
 100b4f0:	9024d0fa 	srli	r18,r18,3
 100b4f4:	2004977a 	slli	r2,r4,29
 100b4f8:	2010d0fa 	srli	r8,r4,3
 100b4fc:	880b883a 	mov	r5,r17
 100b500:	9084b03a 	or	r2,r18,r2
 100b504:	28c1ffe0 	cmpeqi	r3,r5,2047
 100b508:	1800251e 	bne	r3,zero,100b5a0 <__adddf3+0x39c>
 100b50c:	00c00434 	movhi	r3,16
 100b510:	18ffffc4 	addi	r3,r3,-1
 100b514:	40c6703a 	and	r3,r8,r3
 100b518:	2941ffcc 	andi	r5,r5,2047
 100b51c:	003f9f06 	br	100b39c <__adddf3+0x198>
 100b520:	4b64b03a 	or	r18,r9,r13
 100b524:	9024c03a 	cmpne	r18,r18,zero
 100b528:	93a5883a 	add	r18,r18,r14
 100b52c:	9389803a 	cmpltu	r4,r18,r14
 100b530:	20c9883a 	add	r4,r4,r3
 100b534:	2080202c 	andhi	r2,r4,128
 100b538:	103feb26 	beq	r2,zero,100b4e8 <__adddf3+0x2e4>
 100b53c:	8c400044 	addi	r17,r17,1
 100b540:	8881ffe0 	cmpeqi	r2,r17,2047
 100b544:	10008326 	beq	r2,zero,100b754 <__adddf3+0x550>
 100b548:	0141ffc4 	movi	r5,2047
 100b54c:	0007883a 	mov	r3,zero
 100b550:	0005883a 	mov	r2,zero
 100b554:	003f9106 	br	100b39c <__adddf3+0x198>
 100b558:	4b44b03a 	or	r2,r9,r13
 100b55c:	180a977a 	slli	r5,r3,29
 100b560:	1810d0fa 	srli	r8,r3,3
 100b564:	10016c26 	beq	r2,zero,100bb18 <__adddf3+0x914>
 100b568:	00c80034 	movhi	r3,8192
 100b56c:	18ffffc4 	addi	r3,r3,-1
 100b570:	20c4703a 	and	r2,r4,r3
 100b574:	4100022c 	andhi	r4,r8,8
 100b578:	1144b03a 	or	r2,r2,r5
 100b57c:	20000826 	beq	r4,zero,100b5a0 <__adddf3+0x39c>
 100b580:	4808d0fa 	srli	r4,r9,3
 100b584:	2140022c 	andhi	r5,r4,8
 100b588:	2800051e 	bne	r5,zero,100b5a0 <__adddf3+0x39c>
 100b58c:	4804977a 	slli	r2,r9,29
 100b590:	30cc703a 	and	r6,r6,r3
 100b594:	3821883a 	mov	r16,r7
 100b598:	3084b03a 	or	r2,r6,r2
 100b59c:	2011883a 	mov	r8,r4
 100b5a0:	4086b03a 	or	r3,r8,r2
 100b5a4:	18017126 	beq	r3,zero,100bb6c <__adddf3+0x968>
 100b5a8:	01000434 	movhi	r4,16
 100b5ac:	40c00234 	orhi	r3,r8,8
 100b5b0:	213fffc4 	addi	r4,r4,-1
 100b5b4:	1906703a 	and	r3,r3,r4
 100b5b8:	0141ffc4 	movi	r5,2047
 100b5bc:	003f7706 	br	100b39c <__adddf3+0x198>
 100b5c0:	28002926 	beq	r5,zero,100b668 <__adddf3+0x464>
 100b5c4:	144bc83a 	sub	r5,r2,r17
 100b5c8:	88008c26 	beq	r17,zero,100b7fc <__adddf3+0x5f8>
 100b5cc:	1101ffd8 	cmpnei	r4,r2,2047
 100b5d0:	20011126 	beq	r4,zero,100ba18 <__adddf3+0x814>
 100b5d4:	18c02034 	orhi	r3,r3,128
 100b5d8:	29000e48 	cmpgei	r4,r5,57
 100b5dc:	2000d51e 	bne	r4,zero,100b934 <__adddf3+0x730>
 100b5e0:	29000808 	cmpgei	r4,r5,32
 100b5e4:	2001511e 	bne	r4,zero,100bb2c <__adddf3+0x928>
 100b5e8:	01000804 	movi	r4,32
 100b5ec:	2149c83a 	sub	r4,r4,r5
 100b5f0:	1924983a 	sll	r18,r3,r4
 100b5f4:	714cd83a 	srl	r6,r14,r5
 100b5f8:	7108983a 	sll	r4,r14,r4
 100b5fc:	194ad83a 	srl	r5,r3,r5
 100b600:	91a4b03a 	or	r18,r18,r6
 100b604:	2006c03a 	cmpne	r3,r4,zero
 100b608:	90e4b03a 	or	r18,r18,r3
 100b60c:	4953883a 	add	r9,r9,r5
 100b610:	9365883a 	add	r18,r18,r13
 100b614:	9349803a 	cmpltu	r4,r18,r13
 100b618:	2249883a 	add	r4,r4,r9
 100b61c:	1023883a 	mov	r17,r2
 100b620:	003fc406 	br	100b534 <__adddf3+0x330>
 100b624:	023fe034 	movhi	r8,65408
 100b628:	423fffc4 	addi	r8,r8,-1
 100b62c:	8b23c83a 	sub	r17,r17,r12
 100b630:	2208703a 	and	r4,r4,r8
 100b634:	003f4206 	br	100b340 <__adddf3+0x13c>
 100b638:	9009883a 	mov	r4,r18
 100b63c:	100da0c0 	call	100da0c <__clzsi2>
 100b640:	13000604 	addi	r12,r2,24
 100b644:	60c00808 	cmpgei	r3,r12,32
 100b648:	183f2826 	beq	r3,zero,100b2ec <__adddf3+0xe8>
 100b64c:	113ffe04 	addi	r4,r2,-8
 100b650:	9108983a 	sll	r4,r18,r4
 100b654:	0025883a 	mov	r18,zero
 100b658:	003f2a06 	br	100b304 <__adddf3+0x100>
 100b65c:	4b64b03a 	or	r18,r9,r13
 100b660:	9024c03a 	cmpne	r18,r18,zero
 100b664:	003f1506 	br	100b2bc <__adddf3+0xb8>
 100b668:	8a000044 	addi	r8,r17,1
 100b66c:	4081ff8c 	andi	r2,r8,2046
 100b670:	1000751e 	bne	r2,zero,100b848 <__adddf3+0x644>
 100b674:	1b84b03a 	or	r2,r3,r14
 100b678:	8800bc1e 	bne	r17,zero,100b96c <__adddf3+0x768>
 100b67c:	10010c26 	beq	r2,zero,100bab0 <__adddf3+0x8ac>
 100b680:	4b44b03a 	or	r2,r9,r13
 100b684:	1001111e 	bne	r2,zero,100bacc <__adddf3+0x8c8>
 100b688:	180c977a 	slli	r6,r3,29
 100b68c:	00880034 	movhi	r2,8192
 100b690:	10bfffc4 	addi	r2,r2,-1
 100b694:	2084703a 	and	r2,r4,r2
 100b698:	1810d0fa 	srli	r8,r3,3
 100b69c:	1184b03a 	or	r2,r2,r6
 100b6a0:	003f9a06 	br	100b50c <__adddf3+0x308>
 100b6a4:	7365c83a 	sub	r18,r14,r13
 100b6a8:	1a67c83a 	sub	r19,r3,r9
 100b6ac:	7489803a 	cmpltu	r4,r14,r18
 100b6b0:	9927c83a 	sub	r19,r19,r4
 100b6b4:	9880202c 	andhi	r2,r19,128
 100b6b8:	10006f1e 	bne	r2,zero,100b878 <__adddf3+0x674>
 100b6bc:	94c4b03a 	or	r2,r18,r19
 100b6c0:	103f061e 	bne	r2,zero,100b2dc <__adddf3+0xd8>
 100b6c4:	0011883a 	mov	r8,zero
 100b6c8:	0021883a 	mov	r16,zero
 100b6cc:	003f8f06 	br	100b50c <__adddf3+0x308>
 100b6d0:	1101ffd8 	cmpnei	r4,r2,2047
 100b6d4:	20008f26 	beq	r4,zero,100b914 <__adddf3+0x710>
 100b6d8:	18c02034 	orhi	r3,r3,128
 100b6dc:	29000e48 	cmpgei	r4,r5,57
 100b6e0:	20003e1e 	bne	r4,zero,100b7dc <__adddf3+0x5d8>
 100b6e4:	29000808 	cmpgei	r4,r5,32
 100b6e8:	2000951e 	bne	r4,zero,100b940 <__adddf3+0x73c>
 100b6ec:	01000804 	movi	r4,32
 100b6f0:	2149c83a 	sub	r4,r4,r5
 100b6f4:	1924983a 	sll	r18,r3,r4
 100b6f8:	714cd83a 	srl	r6,r14,r5
 100b6fc:	711c983a 	sll	r14,r14,r4
 100b700:	1946d83a 	srl	r3,r3,r5
 100b704:	91a4b03a 	or	r18,r18,r6
 100b708:	701cc03a 	cmpne	r14,r14,zero
 100b70c:	93a4b03a 	or	r18,r18,r14
 100b710:	48d3c83a 	sub	r9,r9,r3
 100b714:	00003306 	br	100b7e4 <__adddf3+0x5e0>
 100b718:	1824977a 	slli	r18,r3,29
 100b71c:	01880034 	movhi	r6,8192
 100b720:	31bfffc4 	addi	r6,r6,-1
 100b724:	2184703a 	and	r2,r4,r6
 100b728:	1810d0fa 	srli	r8,r3,3
 100b72c:	1484b03a 	or	r2,r2,r18
 100b730:	003f7406 	br	100b504 <__adddf3+0x300>
 100b734:	1804977a 	slli	r2,r3,29
 100b738:	01480034 	movhi	r5,8192
 100b73c:	297fffc4 	addi	r5,r5,-1
 100b740:	2148703a 	and	r4,r4,r5
 100b744:	1810d0fa 	srli	r8,r3,3
 100b748:	1104b03a 	or	r2,r2,r4
 100b74c:	003f9406 	br	100b5a0 <__adddf3+0x39c>
 100b750:	04400084 	movi	r17,2
 100b754:	00bfe034 	movhi	r2,65408
 100b758:	10bfffc4 	addi	r2,r2,-1
 100b75c:	9006d07a 	srli	r3,r18,1
 100b760:	2088703a 	and	r4,r4,r2
 100b764:	200497fa 	slli	r2,r4,31
 100b768:	9480004c 	andi	r18,r18,1
 100b76c:	1ca4b03a 	or	r18,r3,r18
 100b770:	2008d07a 	srli	r4,r4,1
 100b774:	14a4b03a 	or	r18,r2,r18
 100b778:	003ef106 	br	100b340 <__adddf3+0x13c>
 100b77c:	633ff844 	addi	r12,r12,-31
 100b780:	40800820 	cmpeqi	r2,r8,32
 100b784:	2318d83a 	srl	r12,r4,r12
 100b788:	1000041e 	bne	r2,zero,100b79c <__adddf3+0x598>
 100b78c:	00801004 	movi	r2,64
 100b790:	1211c83a 	sub	r8,r2,r8
 100b794:	2208983a 	sll	r4,r4,r8
 100b798:	9124b03a 	or	r18,r18,r4
 100b79c:	9024c03a 	cmpne	r18,r18,zero
 100b7a0:	9324b03a 	or	r18,r18,r12
 100b7a4:	0009883a 	mov	r4,zero
 100b7a8:	0023883a 	mov	r17,zero
 100b7ac:	003f4e06 	br	100b4e8 <__adddf3+0x2e4>
 100b7b0:	2cbff804 	addi	r18,r5,-32
 100b7b4:	29000820 	cmpeqi	r4,r5,32
 100b7b8:	4c84d83a 	srl	r2,r9,r18
 100b7bc:	2000041e 	bne	r4,zero,100b7d0 <__adddf3+0x5cc>
 100b7c0:	01001004 	movi	r4,64
 100b7c4:	214bc83a 	sub	r5,r4,r5
 100b7c8:	4952983a 	sll	r9,r9,r5
 100b7cc:	6a5ab03a 	or	r13,r13,r9
 100b7d0:	6824c03a 	cmpne	r18,r13,zero
 100b7d4:	90a4b03a 	or	r18,r18,r2
 100b7d8:	003eb806 	br	100b2bc <__adddf3+0xb8>
 100b7dc:	1b88b03a 	or	r4,r3,r14
 100b7e0:	2024c03a 	cmpne	r18,r4,zero
 100b7e4:	6ca5c83a 	sub	r18,r13,r18
 100b7e8:	6c89803a 	cmpltu	r4,r13,r18
 100b7ec:	4909c83a 	sub	r4,r9,r4
 100b7f0:	3821883a 	mov	r16,r7
 100b7f4:	1023883a 	mov	r17,r2
 100b7f8:	003eb306 	br	100b2c8 <__adddf3+0xc4>
 100b7fc:	1b88b03a 	or	r4,r3,r14
 100b800:	20008c26 	beq	r4,zero,100ba34 <__adddf3+0x830>
 100b804:	293fffc4 	addi	r4,r5,-1
 100b808:	2000d326 	beq	r4,zero,100bb58 <__adddf3+0x954>
 100b80c:	2941ffd8 	cmpnei	r5,r5,2047
 100b810:	28008126 	beq	r5,zero,100ba18 <__adddf3+0x814>
 100b814:	200b883a 	mov	r5,r4
 100b818:	003f6f06 	br	100b5d8 <__adddf3+0x3d4>
 100b81c:	00800804 	movi	r2,32
 100b820:	1145c83a 	sub	r2,r2,r5
 100b824:	6948d83a 	srl	r4,r13,r5
 100b828:	48a4983a 	sll	r18,r9,r2
 100b82c:	6884983a 	sll	r2,r13,r2
 100b830:	494ad83a 	srl	r5,r9,r5
 100b834:	9124b03a 	or	r18,r18,r4
 100b838:	101ac03a 	cmpne	r13,r2,zero
 100b83c:	9364b03a 	or	r18,r18,r13
 100b840:	1947883a 	add	r3,r3,r5
 100b844:	003f3806 	br	100b528 <__adddf3+0x324>
 100b848:	4081ffe0 	cmpeqi	r2,r8,2047
 100b84c:	103f3e1e 	bne	r2,zero,100b548 <__adddf3+0x344>
 100b850:	7345883a 	add	r2,r14,r13
 100b854:	139d803a 	cmpltu	r14,r2,r14
 100b858:	1a49883a 	add	r4,r3,r9
 100b85c:	2389883a 	add	r4,r4,r14
 100b860:	202497fa 	slli	r18,r4,31
 100b864:	1004d07a 	srli	r2,r2,1
 100b868:	2008d07a 	srli	r4,r4,1
 100b86c:	4023883a 	mov	r17,r8
 100b870:	90a4b03a 	or	r18,r18,r2
 100b874:	003f1c06 	br	100b4e8 <__adddf3+0x2e4>
 100b878:	6ba5c83a 	sub	r18,r13,r14
 100b87c:	48c9c83a 	sub	r4,r9,r3
 100b880:	6c85803a 	cmpltu	r2,r13,r18
 100b884:	20a7c83a 	sub	r19,r4,r2
 100b888:	3821883a 	mov	r16,r7
 100b88c:	003e9306 	br	100b2dc <__adddf3+0xd8>
 100b890:	58006f1e 	bne	r11,zero,100ba50 <__adddf3+0x84c>
 100b894:	10001f1e 	bne	r2,zero,100b914 <__adddf3+0x710>
 100b898:	00bfffc4 	movi	r2,-1
 100b89c:	0021883a 	mov	r16,zero
 100b8a0:	003f4106 	br	100b5a8 <__adddf3+0x3a4>
 100b8a4:	4808977a 	slli	r4,r9,29
 100b8a8:	00c80034 	movhi	r3,8192
 100b8ac:	18ffffc4 	addi	r3,r3,-1
 100b8b0:	30c4703a 	and	r2,r6,r3
 100b8b4:	4810d0fa 	srli	r8,r9,3
 100b8b8:	1104b03a 	or	r2,r2,r4
 100b8bc:	3821883a 	mov	r16,r7
 100b8c0:	003f1006 	br	100b504 <__adddf3+0x300>
 100b8c4:	7365c83a 	sub	r18,r14,r13
 100b8c8:	1a47c83a 	sub	r3,r3,r9
 100b8cc:	7489803a 	cmpltu	r4,r14,r18
 100b8d0:	1909c83a 	sub	r4,r3,r4
 100b8d4:	04400044 	movi	r17,1
 100b8d8:	003e7b06 	br	100b2c8 <__adddf3+0xc4>
 100b8dc:	1824977a 	slli	r18,r3,29
 100b8e0:	01c80034 	movhi	r7,8192
 100b8e4:	39ffffc4 	addi	r7,r7,-1
 100b8e8:	21c4703a 	and	r2,r4,r7
 100b8ec:	1810d0fa 	srli	r8,r3,3
 100b8f0:	1484b03a 	or	r2,r2,r18
 100b8f4:	003f0306 	br	100b504 <__adddf3+0x300>
 100b8f8:	1824977a 	slli	r18,r3,29
 100b8fc:	01480034 	movhi	r5,8192
 100b900:	297fffc4 	addi	r5,r5,-1
 100b904:	2144703a 	and	r2,r4,r5
 100b908:	1810d0fa 	srli	r8,r3,3
 100b90c:	1484b03a 	or	r2,r2,r18
 100b910:	003f2306 	br	100b5a0 <__adddf3+0x39c>
 100b914:	4806977a 	slli	r3,r9,29
 100b918:	00880034 	movhi	r2,8192
 100b91c:	10bfffc4 	addi	r2,r2,-1
 100b920:	3084703a 	and	r2,r6,r2
 100b924:	4810d0fa 	srli	r8,r9,3
 100b928:	10c4b03a 	or	r2,r2,r3
 100b92c:	3821883a 	mov	r16,r7
 100b930:	003f1b06 	br	100b5a0 <__adddf3+0x39c>
 100b934:	1b88b03a 	or	r4,r3,r14
 100b938:	2024c03a 	cmpne	r18,r4,zero
 100b93c:	003f3406 	br	100b610 <__adddf3+0x40c>
 100b940:	2cbff804 	addi	r18,r5,-32
 100b944:	29800820 	cmpeqi	r6,r5,32
 100b948:	1c88d83a 	srl	r4,r3,r18
 100b94c:	3000041e 	bne	r6,zero,100b960 <__adddf3+0x75c>
 100b950:	01801004 	movi	r6,64
 100b954:	314bc83a 	sub	r5,r6,r5
 100b958:	1946983a 	sll	r3,r3,r5
 100b95c:	70dcb03a 	or	r14,r14,r3
 100b960:	7024c03a 	cmpne	r18,r14,zero
 100b964:	9124b03a 	or	r18,r18,r4
 100b968:	003f9e06 	br	100b7e4 <__adddf3+0x5e0>
 100b96c:	103efa1e 	bne	r2,zero,100b558 <__adddf3+0x354>
 100b970:	4804977a 	slli	r2,r9,29
 100b974:	00c80034 	movhi	r3,8192
 100b978:	18ffffc4 	addi	r3,r3,-1
 100b97c:	30cc703a 	and	r6,r6,r3
 100b980:	4810d0fa 	srli	r8,r9,3
 100b984:	1184b03a 	or	r2,r2,r6
 100b988:	003f0506 	br	100b5a0 <__adddf3+0x39c>
 100b98c:	10004426 	beq	r2,zero,100baa0 <__adddf3+0x89c>
 100b990:	4806977a 	slli	r3,r9,29
 100b994:	00880034 	movhi	r2,8192
 100b998:	10bfffc4 	addi	r2,r2,-1
 100b99c:	3084703a 	and	r2,r6,r2
 100b9a0:	4810d0fa 	srli	r8,r9,3
 100b9a4:	10c4b03a 	or	r2,r2,r3
 100b9a8:	3821883a 	mov	r16,r7
 100b9ac:	003ed706 	br	100b50c <__adddf3+0x308>
 100b9b0:	6ba5c83a 	sub	r18,r13,r14
 100b9b4:	48c7c83a 	sub	r3,r9,r3
 100b9b8:	6c85803a 	cmpltu	r2,r13,r18
 100b9bc:	1889c83a 	sub	r4,r3,r2
 100b9c0:	3821883a 	mov	r16,r7
 100b9c4:	04400044 	movi	r17,1
 100b9c8:	003e3f06 	br	100b2c8 <__adddf3+0xc4>
 100b9cc:	180a977a 	slli	r5,r3,29
 100b9d0:	00880034 	movhi	r2,8192
 100b9d4:	10bfffc4 	addi	r2,r2,-1
 100b9d8:	2084703a 	and	r2,r4,r2
 100b9dc:	1810d0fa 	srli	r8,r3,3
 100b9e0:	1144b03a 	or	r2,r2,r5
 100b9e4:	003eee06 	br	100b5a0 <__adddf3+0x39c>
 100b9e8:	7365c83a 	sub	r18,r14,r13
 100b9ec:	7485803a 	cmpltu	r2,r14,r18
 100b9f0:	1a49c83a 	sub	r4,r3,r9
 100b9f4:	2089c83a 	sub	r4,r4,r2
 100b9f8:	2080202c 	andhi	r2,r4,128
 100b9fc:	10002626 	beq	r2,zero,100ba98 <__adddf3+0x894>
 100ba00:	6ba5c83a 	sub	r18,r13,r14
 100ba04:	48c7c83a 	sub	r3,r9,r3
 100ba08:	6c85803a 	cmpltu	r2,r13,r18
 100ba0c:	1889c83a 	sub	r4,r3,r2
 100ba10:	3821883a 	mov	r16,r7
 100ba14:	003e4a06 	br	100b340 <__adddf3+0x13c>
 100ba18:	4806977a 	slli	r3,r9,29
 100ba1c:	00880034 	movhi	r2,8192
 100ba20:	10bfffc4 	addi	r2,r2,-1
 100ba24:	3084703a 	and	r2,r6,r2
 100ba28:	4810d0fa 	srli	r8,r9,3
 100ba2c:	10c4b03a 	or	r2,r2,r3
 100ba30:	003edb06 	br	100b5a0 <__adddf3+0x39c>
 100ba34:	4806977a 	slli	r3,r9,29
 100ba38:	00880034 	movhi	r2,8192
 100ba3c:	10bfffc4 	addi	r2,r2,-1
 100ba40:	3084703a 	and	r2,r6,r2
 100ba44:	4810d0fa 	srli	r8,r9,3
 100ba48:	10c4b03a 	or	r2,r2,r3
 100ba4c:	003ead06 	br	100b504 <__adddf3+0x300>
 100ba50:	180a977a 	slli	r5,r3,29
 100ba54:	1810d0fa 	srli	r8,r3,3
 100ba58:	10002f26 	beq	r2,zero,100bb18 <__adddf3+0x914>
 100ba5c:	00c80034 	movhi	r3,8192
 100ba60:	18ffffc4 	addi	r3,r3,-1
 100ba64:	20c4703a 	and	r2,r4,r3
 100ba68:	4100022c 	andhi	r4,r8,8
 100ba6c:	1144b03a 	or	r2,r2,r5
 100ba70:	203ecb26 	beq	r4,zero,100b5a0 <__adddf3+0x39c>
 100ba74:	4808d0fa 	srli	r4,r9,3
 100ba78:	2140022c 	andhi	r5,r4,8
 100ba7c:	283ec81e 	bne	r5,zero,100b5a0 <__adddf3+0x39c>
 100ba80:	4812977a 	slli	r9,r9,29
 100ba84:	30c4703a 	and	r2,r6,r3
 100ba88:	3821883a 	mov	r16,r7
 100ba8c:	1244b03a 	or	r2,r2,r9
 100ba90:	2011883a 	mov	r8,r4
 100ba94:	003ec206 	br	100b5a0 <__adddf3+0x39c>
 100ba98:	9104b03a 	or	r2,r18,r4
 100ba9c:	103e921e 	bne	r2,zero,100b4e8 <__adddf3+0x2e4>
 100baa0:	0011883a 	mov	r8,zero
 100baa4:	100b883a 	mov	r5,r2
 100baa8:	0021883a 	mov	r16,zero
 100baac:	003e9706 	br	100b50c <__adddf3+0x308>
 100bab0:	4804977a 	slli	r2,r9,29
 100bab4:	00c80034 	movhi	r3,8192
 100bab8:	18ffffc4 	addi	r3,r3,-1
 100babc:	30cc703a 	and	r6,r6,r3
 100bac0:	4810d0fa 	srli	r8,r9,3
 100bac4:	1184b03a 	or	r2,r2,r6
 100bac8:	003e9006 	br	100b50c <__adddf3+0x308>
 100bacc:	7365883a 	add	r18,r14,r13
 100bad0:	1a47883a 	add	r3,r3,r9
 100bad4:	9389803a 	cmpltu	r4,r18,r14
 100bad8:	1909883a 	add	r4,r3,r4
 100badc:	2080202c 	andhi	r2,r4,128
 100bae0:	103e8126 	beq	r2,zero,100b4e8 <__adddf3+0x2e4>
 100bae4:	00bfe034 	movhi	r2,65408
 100bae8:	10bfffc4 	addi	r2,r2,-1
 100baec:	2088703a 	and	r4,r4,r2
 100baf0:	04400044 	movi	r17,1
 100baf4:	003e7c06 	br	100b4e8 <__adddf3+0x2e4>
 100baf8:	4804977a 	slli	r2,r9,29
 100bafc:	00c80034 	movhi	r3,8192
 100bb00:	18ffffc4 	addi	r3,r3,-1
 100bb04:	30cc703a 	and	r6,r6,r3
 100bb08:	4810d0fa 	srli	r8,r9,3
 100bb0c:	1184b03a 	or	r2,r2,r6
 100bb10:	3821883a 	mov	r16,r7
 100bb14:	003ea206 	br	100b5a0 <__adddf3+0x39c>
 100bb18:	00880034 	movhi	r2,8192
 100bb1c:	10bfffc4 	addi	r2,r2,-1
 100bb20:	2084703a 	and	r2,r4,r2
 100bb24:	1144b03a 	or	r2,r2,r5
 100bb28:	003e9d06 	br	100b5a0 <__adddf3+0x39c>
 100bb2c:	293ff804 	addi	r4,r5,-32
 100bb30:	29800820 	cmpeqi	r6,r5,32
 100bb34:	1908d83a 	srl	r4,r3,r4
 100bb38:	3000041e 	bne	r6,zero,100bb4c <__adddf3+0x948>
 100bb3c:	01801004 	movi	r6,64
 100bb40:	314bc83a 	sub	r5,r6,r5
 100bb44:	1946983a 	sll	r3,r3,r5
 100bb48:	70dcb03a 	or	r14,r14,r3
 100bb4c:	7024c03a 	cmpne	r18,r14,zero
 100bb50:	9124b03a 	or	r18,r18,r4
 100bb54:	003eae06 	br	100b610 <__adddf3+0x40c>
 100bb58:	7365883a 	add	r18,r14,r13
 100bb5c:	1a47883a 	add	r3,r3,r9
 100bb60:	9345803a 	cmpltu	r2,r18,r13
 100bb64:	1889883a 	add	r4,r3,r2
 100bb68:	003e5c06 	br	100b4dc <__adddf3+0x2d8>
 100bb6c:	0005883a 	mov	r2,zero
 100bb70:	0141ffc4 	movi	r5,2047
 100bb74:	0007883a 	mov	r3,zero
 100bb78:	003e0806 	br	100b39c <__adddf3+0x198>

0100bb7c <__divdf3>:
 100bb7c:	2810d53a 	srli	r8,r5,20
 100bb80:	defff004 	addi	sp,sp,-64
 100bb84:	dc000615 	stw	r16,24(sp)
 100bb88:	04000434 	movhi	r16,16
 100bb8c:	df000e15 	stw	fp,56(sp)
 100bb90:	ddc00d15 	stw	r23,52(sp)
 100bb94:	dd800c15 	stw	r22,48(sp)
 100bb98:	dd000a15 	stw	r20,40(sp)
 100bb9c:	843fffc4 	addi	r16,r16,-1
 100bba0:	dfc00f15 	stw	ra,60(sp)
 100bba4:	dd400b15 	stw	r21,44(sp)
 100bba8:	dcc00915 	stw	r19,36(sp)
 100bbac:	dc800815 	stw	r18,32(sp)
 100bbb0:	dc400715 	stw	r17,28(sp)
 100bbb4:	4201ffcc 	andi	r8,r8,2047
 100bbb8:	282ed7fa 	srli	r23,r5,31
 100bbbc:	3039883a 	mov	fp,r6
 100bbc0:	382d883a 	mov	r22,r7
 100bbc4:	2029883a 	mov	r20,r4
 100bbc8:	2c20703a 	and	r16,r5,r16
 100bbcc:	40005326 	beq	r8,zero,100bd1c <__divdf3+0x1a0>
 100bbd0:	4081ffe0 	cmpeqi	r2,r8,2047
 100bbd4:	1000641e 	bne	r2,zero,100bd68 <__divdf3+0x1ec>
 100bbd8:	2026d77a 	srli	r19,r4,29
 100bbdc:	800a90fa 	slli	r5,r16,3
 100bbe0:	202890fa 	slli	r20,r4,3
 100bbe4:	44bf0044 	addi	r18,r8,-1023
 100bbe8:	994ab03a 	or	r5,r19,r5
 100bbec:	2cc02034 	orhi	r19,r5,128
 100bbf0:	0021883a 	mov	r16,zero
 100bbf4:	0023883a 	mov	r17,zero
 100bbf8:	b010d53a 	srli	r8,r22,20
 100bbfc:	00c00434 	movhi	r3,16
 100bc00:	18ffffc4 	addi	r3,r3,-1
 100bc04:	4201ffcc 	andi	r8,r8,2047
 100bc08:	b02ad7fa 	srli	r21,r22,31
 100bc0c:	b0ec703a 	and	r22,r22,r3
 100bc10:	40005c26 	beq	r8,zero,100bd84 <__divdf3+0x208>
 100bc14:	4081ffe0 	cmpeqi	r2,r8,2047
 100bc18:	1000201e 	bne	r2,zero,100bc9c <__divdf3+0x120>
 100bc1c:	b00690fa 	slli	r3,r22,3
 100bc20:	e004d77a 	srli	r2,fp,29
 100bc24:	e01490fa 	slli	r10,fp,3
 100bc28:	423f0044 	addi	r8,r8,-1023
 100bc2c:	10c6b03a 	or	r3,r2,r3
 100bc30:	1d802034 	orhi	r22,r3,128
 100bc34:	9225c83a 	sub	r18,r18,r8
 100bc38:	0007883a 	mov	r3,zero
 100bc3c:	80800428 	cmpgeui	r2,r16,16
 100bc40:	bd52f03a 	xor	r9,r23,r21
 100bc44:	1000a81e 	bne	r2,zero,100bee8 <__divdf3+0x36c>
 100bc48:	800c90ba 	slli	r6,r16,2
 100bc4c:	00804074 	movhi	r2,257
 100bc50:	3085883a 	add	r2,r6,r2
 100bc54:	10af1717 	ldw	r2,-17316(r2)
 100bc58:	1000683a 	jmp	r2
 100bc5c:	0100bee8 	cmpgeui	r4,zero,763
 100bc60:	0100bd0c 	andi	r4,zero,756
 100bc64:	0100bcb8 	rdprs	r4,zero,754
 100bc68:	0100be30 	cmpltui	r4,zero,760
 100bc6c:	0100bcb8 	rdprs	r4,zero,754
 100bc70:	0100be8c 	andi	r4,zero,762
 100bc74:	0100bcb8 	rdprs	r4,zero,754
 100bc78:	0100be30 	cmpltui	r4,zero,760
 100bc7c:	0100bd0c 	andi	r4,zero,756
 100bc80:	0100bd0c 	andi	r4,zero,756
 100bc84:	0100be8c 	andi	r4,zero,762
 100bc88:	0100be30 	cmpltui	r4,zero,760
 100bc8c:	0100bdc8 	cmpgei	r4,zero,759
 100bc90:	0100bdc8 	cmpgei	r4,zero,759
 100bc94:	0100bdc8 	cmpgei	r4,zero,759
 100bc98:	0100bea4 	muli	r4,zero,762
 100bc9c:	b714b03a 	or	r10,r22,fp
 100bca0:	94be0044 	addi	r18,r18,-2047
 100bca4:	5000671e 	bne	r10,zero,100be44 <__divdf3+0x2c8>
 100bca8:	84000094 	ori	r16,r16,2
 100bcac:	002d883a 	mov	r22,zero
 100bcb0:	00c00084 	movi	r3,2
 100bcb4:	003fe106 	br	100bc3c <__divdf3+0xc0>
 100bcb8:	0007883a 	mov	r3,zero
 100bcbc:	000b883a 	mov	r5,zero
 100bcc0:	0029883a 	mov	r20,zero
 100bcc4:	1806953a 	slli	r3,r3,20
 100bcc8:	4a403fcc 	andi	r9,r9,255
 100bccc:	481297fa 	slli	r9,r9,31
 100bcd0:	1946b03a 	or	r3,r3,r5
 100bcd4:	a005883a 	mov	r2,r20
 100bcd8:	1a46b03a 	or	r3,r3,r9
 100bcdc:	dfc00f17 	ldw	ra,60(sp)
 100bce0:	df000e17 	ldw	fp,56(sp)
 100bce4:	ddc00d17 	ldw	r23,52(sp)
 100bce8:	dd800c17 	ldw	r22,48(sp)
 100bcec:	dd400b17 	ldw	r21,44(sp)
 100bcf0:	dd000a17 	ldw	r20,40(sp)
 100bcf4:	dcc00917 	ldw	r19,36(sp)
 100bcf8:	dc800817 	ldw	r18,32(sp)
 100bcfc:	dc400717 	ldw	r17,28(sp)
 100bd00:	dc000617 	ldw	r16,24(sp)
 100bd04:	dec01004 	addi	sp,sp,64
 100bd08:	f800283a 	ret
 100bd0c:	00c1ffc4 	movi	r3,2047
 100bd10:	000b883a 	mov	r5,zero
 100bd14:	0029883a 	mov	r20,zero
 100bd18:	003fea06 	br	100bcc4 <__divdf3+0x148>
 100bd1c:	2426b03a 	or	r19,r4,r16
 100bd20:	2023883a 	mov	r17,r4
 100bd24:	98004f26 	beq	r19,zero,100be64 <__divdf3+0x2e8>
 100bd28:	80017b26 	beq	r16,zero,100c318 <__divdf3+0x79c>
 100bd2c:	8009883a 	mov	r4,r16
 100bd30:	100da0c0 	call	100da0c <__clzsi2>
 100bd34:	113ffd44 	addi	r4,r2,-11
 100bd38:	00c00744 	movi	r3,29
 100bd3c:	14fffe04 	addi	r19,r2,-8
 100bd40:	1907c83a 	sub	r3,r3,r4
 100bd44:	84ca983a 	sll	r5,r16,r19
 100bd48:	88c6d83a 	srl	r3,r17,r3
 100bd4c:	8ce8983a 	sll	r20,r17,r19
 100bd50:	1966b03a 	or	r19,r3,r5
 100bd54:	023f0344 	movi	r8,-1011
 100bd58:	40a5c83a 	sub	r18,r8,r2
 100bd5c:	0021883a 	mov	r16,zero
 100bd60:	0023883a 	mov	r17,zero
 100bd64:	003fa406 	br	100bbf8 <__divdf3+0x7c>
 100bd68:	2426b03a 	or	r19,r4,r16
 100bd6c:	9800421e 	bne	r19,zero,100be78 <__divdf3+0x2fc>
 100bd70:	0029883a 	mov	r20,zero
 100bd74:	04000204 	movi	r16,8
 100bd78:	0481ffc4 	movi	r18,2047
 100bd7c:	04400084 	movi	r17,2
 100bd80:	003f9d06 	br	100bbf8 <__divdf3+0x7c>
 100bd84:	b714b03a 	or	r10,r22,fp
 100bd88:	50003226 	beq	r10,zero,100be54 <__divdf3+0x2d8>
 100bd8c:	b0016c26 	beq	r22,zero,100c340 <__divdf3+0x7c4>
 100bd90:	b009883a 	mov	r4,r22
 100bd94:	100da0c0 	call	100da0c <__clzsi2>
 100bd98:	117ffd44 	addi	r5,r2,-11
 100bd9c:	01000744 	movi	r4,29
 100bda0:	12bffe04 	addi	r10,r2,-8
 100bda4:	2149c83a 	sub	r4,r4,r5
 100bda8:	b286983a 	sll	r3,r22,r10
 100bdac:	e108d83a 	srl	r4,fp,r4
 100bdb0:	e294983a 	sll	r10,fp,r10
 100bdb4:	20ecb03a 	or	r22,r4,r3
 100bdb8:	1491883a 	add	r8,r2,r18
 100bdbc:	4480fcc4 	addi	r18,r8,1011
 100bdc0:	0007883a 	mov	r3,zero
 100bdc4:	003f9d06 	br	100bc3c <__divdf3+0xc0>
 100bdc8:	b813883a 	mov	r9,r23
 100bdcc:	888000a0 	cmpeqi	r2,r17,2
 100bdd0:	103fce1e 	bne	r2,zero,100bd0c <__divdf3+0x190>
 100bdd4:	888000e0 	cmpeqi	r2,r17,3
 100bdd8:	1001ac1e 	bne	r2,zero,100c48c <__divdf3+0x910>
 100bddc:	88800060 	cmpeqi	r2,r17,1
 100bde0:	103fb51e 	bne	r2,zero,100bcb8 <__divdf3+0x13c>
 100bde4:	9440ffc4 	addi	r17,r18,1023
 100bde8:	04411c0e 	bge	zero,r17,100c25c <__divdf3+0x6e0>
 100bdec:	a08001cc 	andi	r2,r20,7
 100bdf0:	1001831e 	bne	r2,zero,100c400 <__divdf3+0x884>
 100bdf4:	a008d0fa 	srli	r4,r20,3
 100bdf8:	9880402c 	andhi	r2,r19,256
 100bdfc:	10000426 	beq	r2,zero,100be10 <__divdf3+0x294>
 100be00:	00bfc034 	movhi	r2,65280
 100be04:	10bfffc4 	addi	r2,r2,-1
 100be08:	98a6703a 	and	r19,r19,r2
 100be0c:	94410004 	addi	r17,r18,1024
 100be10:	8881ffc8 	cmpgei	r2,r17,2047
 100be14:	103fbd1e 	bne	r2,zero,100bd0c <__divdf3+0x190>
 100be18:	9828977a 	slli	r20,r19,29
 100be1c:	980a927a 	slli	r5,r19,9
 100be20:	88c1ffcc 	andi	r3,r17,2047
 100be24:	a128b03a 	or	r20,r20,r4
 100be28:	280ad33a 	srli	r5,r5,12
 100be2c:	003fa506 	br	100bcc4 <__divdf3+0x148>
 100be30:	a813883a 	mov	r9,r21
 100be34:	b027883a 	mov	r19,r22
 100be38:	5029883a 	mov	r20,r10
 100be3c:	1823883a 	mov	r17,r3
 100be40:	003fe206 	br	100bdcc <__divdf3+0x250>
 100be44:	840000d4 	ori	r16,r16,3
 100be48:	e015883a 	mov	r10,fp
 100be4c:	00c000c4 	movi	r3,3
 100be50:	003f7a06 	br	100bc3c <__divdf3+0xc0>
 100be54:	84000054 	ori	r16,r16,1
 100be58:	002d883a 	mov	r22,zero
 100be5c:	00c00044 	movi	r3,1
 100be60:	003f7606 	br	100bc3c <__divdf3+0xc0>
 100be64:	0029883a 	mov	r20,zero
 100be68:	04000104 	movi	r16,4
 100be6c:	0025883a 	mov	r18,zero
 100be70:	04400044 	movi	r17,1
 100be74:	003f6006 	br	100bbf8 <__divdf3+0x7c>
 100be78:	8027883a 	mov	r19,r16
 100be7c:	0481ffc4 	movi	r18,2047
 100be80:	04000304 	movi	r16,12
 100be84:	044000c4 	movi	r17,3
 100be88:	003f5b06 	br	100bbf8 <__divdf3+0x7c>
 100be8c:	01400434 	movhi	r5,16
 100be90:	0013883a 	mov	r9,zero
 100be94:	297fffc4 	addi	r5,r5,-1
 100be98:	053fffc4 	movi	r20,-1
 100be9c:	00c1ffc4 	movi	r3,2047
 100bea0:	003f8806 	br	100bcc4 <__divdf3+0x148>
 100bea4:	9880022c 	andhi	r2,r19,8
 100bea8:	10000926 	beq	r2,zero,100bed0 <__divdf3+0x354>
 100beac:	b080022c 	andhi	r2,r22,8
 100beb0:	1000071e 	bne	r2,zero,100bed0 <__divdf3+0x354>
 100beb4:	00800434 	movhi	r2,16
 100beb8:	b1400234 	orhi	r5,r22,8
 100bebc:	10bfffc4 	addi	r2,r2,-1
 100bec0:	288a703a 	and	r5,r5,r2
 100bec4:	a813883a 	mov	r9,r21
 100bec8:	5029883a 	mov	r20,r10
 100becc:	003ff306 	br	100be9c <__divdf3+0x320>
 100bed0:	00800434 	movhi	r2,16
 100bed4:	99400234 	orhi	r5,r19,8
 100bed8:	10bfffc4 	addi	r2,r2,-1
 100bedc:	288a703a 	and	r5,r5,r2
 100bee0:	b813883a 	mov	r9,r23
 100bee4:	003fed06 	br	100be9c <__divdf3+0x320>
 100bee8:	b4c10536 	bltu	r22,r19,100c300 <__divdf3+0x784>
 100beec:	b4c10326 	beq	r22,r19,100c2fc <__divdf3+0x780>
 100bef0:	94bfffc4 	addi	r18,r18,-1
 100bef4:	a039883a 	mov	fp,r20
 100bef8:	9821883a 	mov	r16,r19
 100befc:	0023883a 	mov	r17,zero
 100bf00:	b006923a 	slli	r3,r22,8
 100bf04:	502cd63a 	srli	r22,r10,24
 100bf08:	8009883a 	mov	r4,r16
 100bf0c:	182ed43a 	srli	r23,r3,16
 100bf10:	b0ecb03a 	or	r22,r22,r3
 100bf14:	da400015 	stw	r9,0(sp)
 100bf18:	b80b883a 	mov	r5,r23
 100bf1c:	502a923a 	slli	r21,r10,8
 100bf20:	b53fffcc 	andi	r20,r22,65535
 100bf24:	1000d700 	call	1000d70 <__udivsi3>
 100bf28:	100b883a 	mov	r5,r2
 100bf2c:	a009883a 	mov	r4,r20
 100bf30:	1027883a 	mov	r19,r2
 100bf34:	1000e300 	call	1000e30 <__mulsi3>
 100bf38:	8009883a 	mov	r4,r16
 100bf3c:	b80b883a 	mov	r5,r23
 100bf40:	1021883a 	mov	r16,r2
 100bf44:	1000dd40 	call	1000dd4 <__umodsi3>
 100bf48:	1004943a 	slli	r2,r2,16
 100bf4c:	e008d43a 	srli	r4,fp,16
 100bf50:	da400017 	ldw	r9,0(sp)
 100bf54:	2088b03a 	or	r4,r4,r2
 100bf58:	2400042e 	bgeu	r4,r16,100bf6c <__divdf3+0x3f0>
 100bf5c:	2589883a 	add	r4,r4,r22
 100bf60:	98bfffc4 	addi	r2,r19,-1
 100bf64:	2581082e 	bgeu	r4,r22,100c388 <__divdf3+0x80c>
 100bf68:	1027883a 	mov	r19,r2
 100bf6c:	2421c83a 	sub	r16,r4,r16
 100bf70:	b80b883a 	mov	r5,r23
 100bf74:	8009883a 	mov	r4,r16
 100bf78:	da400215 	stw	r9,8(sp)
 100bf7c:	1000d700 	call	1000d70 <__udivsi3>
 100bf80:	100b883a 	mov	r5,r2
 100bf84:	a009883a 	mov	r4,r20
 100bf88:	d8800115 	stw	r2,4(sp)
 100bf8c:	1000e300 	call	1000e30 <__mulsi3>
 100bf90:	b80b883a 	mov	r5,r23
 100bf94:	8009883a 	mov	r4,r16
 100bf98:	d8800015 	stw	r2,0(sp)
 100bf9c:	1000dd40 	call	1000dd4 <__umodsi3>
 100bfa0:	100c943a 	slli	r6,r2,16
 100bfa4:	d8c00017 	ldw	r3,0(sp)
 100bfa8:	e73fffcc 	andi	fp,fp,65535
 100bfac:	e18cb03a 	or	r6,fp,r6
 100bfb0:	d9c00117 	ldw	r7,4(sp)
 100bfb4:	da400217 	ldw	r9,8(sp)
 100bfb8:	30c0042e 	bgeu	r6,r3,100bfcc <__divdf3+0x450>
 100bfbc:	358d883a 	add	r6,r6,r22
 100bfc0:	38bfffc4 	addi	r2,r7,-1
 100bfc4:	3580ec2e 	bgeu	r6,r22,100c378 <__divdf3+0x7fc>
 100bfc8:	100f883a 	mov	r7,r2
 100bfcc:	9826943a 	slli	r19,r19,16
 100bfd0:	af3fffcc 	andi	fp,r21,65535
 100bfd4:	30c7c83a 	sub	r3,r6,r3
 100bfd8:	99e6b03a 	or	r19,r19,r7
 100bfdc:	980ed43a 	srli	r7,r19,16
 100bfe0:	9abfffcc 	andi	r10,r19,65535
 100bfe4:	5009883a 	mov	r4,r10
 100bfe8:	e00b883a 	mov	r5,fp
 100bfec:	da400515 	stw	r9,20(sp)
 100bff0:	d8c00315 	stw	r3,12(sp)
 100bff4:	da800415 	stw	r10,16(sp)
 100bff8:	d9c00015 	stw	r7,0(sp)
 100bffc:	1000e300 	call	1000e30 <__mulsi3>
 100c000:	d9c00017 	ldw	r7,0(sp)
 100c004:	e00b883a 	mov	r5,fp
 100c008:	d8800215 	stw	r2,8(sp)
 100c00c:	3809883a 	mov	r4,r7
 100c010:	1000e300 	call	1000e30 <__mulsi3>
 100c014:	d9c00017 	ldw	r7,0(sp)
 100c018:	a820d43a 	srli	r16,r21,16
 100c01c:	d8800115 	stw	r2,4(sp)
 100c020:	3809883a 	mov	r4,r7
 100c024:	800b883a 	mov	r5,r16
 100c028:	1000e300 	call	1000e30 <__mulsi3>
 100c02c:	da800417 	ldw	r10,16(sp)
 100c030:	8009883a 	mov	r4,r16
 100c034:	d8800015 	stw	r2,0(sp)
 100c038:	500b883a 	mov	r5,r10
 100c03c:	1000e300 	call	1000e30 <__mulsi3>
 100c040:	d9800217 	ldw	r6,8(sp)
 100c044:	d9c00117 	ldw	r7,4(sp)
 100c048:	da000017 	ldw	r8,0(sp)
 100c04c:	3008d43a 	srli	r4,r6,16
 100c050:	11c5883a 	add	r2,r2,r7
 100c054:	d8c00317 	ldw	r3,12(sp)
 100c058:	2089883a 	add	r4,r4,r2
 100c05c:	da400517 	ldw	r9,20(sp)
 100c060:	21c0022e 	bgeu	r4,r7,100c06c <__divdf3+0x4f0>
 100c064:	00800074 	movhi	r2,1
 100c068:	4091883a 	add	r8,r8,r2
 100c06c:	200ad43a 	srli	r5,r4,16
 100c070:	2008943a 	slli	r4,r4,16
 100c074:	31bfffcc 	andi	r6,r6,65535
 100c078:	2a0b883a 	add	r5,r5,r8
 100c07c:	218d883a 	add	r6,r4,r6
 100c080:	19409436 	bltu	r3,r5,100c2d4 <__divdf3+0x758>
 100c084:	19409226 	beq	r3,r5,100c2d0 <__divdf3+0x754>
 100c088:	898dc83a 	sub	r6,r17,r6
 100c08c:	89a3803a 	cmpltu	r17,r17,r6
 100c090:	1947c83a 	sub	r3,r3,r5
 100c094:	1c47c83a 	sub	r3,r3,r17
 100c098:	9440ffc4 	addi	r17,r18,1023
 100c09c:	b0c0d326 	beq	r22,r3,100c3ec <__divdf3+0x870>
 100c0a0:	1809883a 	mov	r4,r3
 100c0a4:	b80b883a 	mov	r5,r23
 100c0a8:	d9800315 	stw	r6,12(sp)
 100c0ac:	da400215 	stw	r9,8(sp)
 100c0b0:	d8c00015 	stw	r3,0(sp)
 100c0b4:	1000d700 	call	1000d70 <__udivsi3>
 100c0b8:	100b883a 	mov	r5,r2
 100c0bc:	a009883a 	mov	r4,r20
 100c0c0:	d8800115 	stw	r2,4(sp)
 100c0c4:	1000e300 	call	1000e30 <__mulsi3>
 100c0c8:	d8c00017 	ldw	r3,0(sp)
 100c0cc:	b80b883a 	mov	r5,r23
 100c0d0:	d8800015 	stw	r2,0(sp)
 100c0d4:	1809883a 	mov	r4,r3
 100c0d8:	1000dd40 	call	1000dd4 <__umodsi3>
 100c0dc:	d9800317 	ldw	r6,12(sp)
 100c0e0:	1006943a 	slli	r3,r2,16
 100c0e4:	da000017 	ldw	r8,0(sp)
 100c0e8:	3008d43a 	srli	r4,r6,16
 100c0ec:	d9c00117 	ldw	r7,4(sp)
 100c0f0:	da400217 	ldw	r9,8(sp)
 100c0f4:	20c6b03a 	or	r3,r4,r3
 100c0f8:	1a00062e 	bgeu	r3,r8,100c114 <__divdf3+0x598>
 100c0fc:	1d87883a 	add	r3,r3,r22
 100c100:	38bfffc4 	addi	r2,r7,-1
 100c104:	1d80c836 	bltu	r3,r22,100c428 <__divdf3+0x8ac>
 100c108:	1a00c72e 	bgeu	r3,r8,100c428 <__divdf3+0x8ac>
 100c10c:	39ffff84 	addi	r7,r7,-2
 100c110:	1d87883a 	add	r3,r3,r22
 100c114:	1a07c83a 	sub	r3,r3,r8
 100c118:	1809883a 	mov	r4,r3
 100c11c:	b80b883a 	mov	r5,r23
 100c120:	d9800415 	stw	r6,16(sp)
 100c124:	da400315 	stw	r9,12(sp)
 100c128:	d9c00215 	stw	r7,8(sp)
 100c12c:	d8c00115 	stw	r3,4(sp)
 100c130:	1000d700 	call	1000d70 <__udivsi3>
 100c134:	100b883a 	mov	r5,r2
 100c138:	a009883a 	mov	r4,r20
 100c13c:	d8800015 	stw	r2,0(sp)
 100c140:	1000e300 	call	1000e30 <__mulsi3>
 100c144:	d8c00117 	ldw	r3,4(sp)
 100c148:	b80b883a 	mov	r5,r23
 100c14c:	102f883a 	mov	r23,r2
 100c150:	1809883a 	mov	r4,r3
 100c154:	1000dd40 	call	1000dd4 <__umodsi3>
 100c158:	d9800417 	ldw	r6,16(sp)
 100c15c:	1004943a 	slli	r2,r2,16
 100c160:	da000017 	ldw	r8,0(sp)
 100c164:	31bfffcc 	andi	r6,r6,65535
 100c168:	308cb03a 	or	r6,r6,r2
 100c16c:	d9c00217 	ldw	r7,8(sp)
 100c170:	da400317 	ldw	r9,12(sp)
 100c174:	35c0062e 	bgeu	r6,r23,100c190 <__divdf3+0x614>
 100c178:	358d883a 	add	r6,r6,r22
 100c17c:	40bfffc4 	addi	r2,r8,-1
 100c180:	3580a736 	bltu	r6,r22,100c420 <__divdf3+0x8a4>
 100c184:	35c0a62e 	bgeu	r6,r23,100c420 <__divdf3+0x8a4>
 100c188:	423fff84 	addi	r8,r8,-2
 100c18c:	358d883a 	add	r6,r6,r22
 100c190:	3828943a 	slli	r20,r7,16
 100c194:	35d5c83a 	sub	r10,r6,r23
 100c198:	e009883a 	mov	r4,fp
 100c19c:	a228b03a 	or	r20,r20,r8
 100c1a0:	a1ffffcc 	andi	r7,r20,65535
 100c1a4:	a02ed43a 	srli	r23,r20,16
 100c1a8:	380b883a 	mov	r5,r7
 100c1ac:	da400315 	stw	r9,12(sp)
 100c1b0:	da800215 	stw	r10,8(sp)
 100c1b4:	d9c00115 	stw	r7,4(sp)
 100c1b8:	1000e300 	call	1000e30 <__mulsi3>
 100c1bc:	e00b883a 	mov	r5,fp
 100c1c0:	b809883a 	mov	r4,r23
 100c1c4:	1039883a 	mov	fp,r2
 100c1c8:	1000e300 	call	1000e30 <__mulsi3>
 100c1cc:	8009883a 	mov	r4,r16
 100c1d0:	b80b883a 	mov	r5,r23
 100c1d4:	d8800015 	stw	r2,0(sp)
 100c1d8:	1000e300 	call	1000e30 <__mulsi3>
 100c1dc:	d9c00117 	ldw	r7,4(sp)
 100c1e0:	8009883a 	mov	r4,r16
 100c1e4:	1021883a 	mov	r16,r2
 100c1e8:	380b883a 	mov	r5,r7
 100c1ec:	1000e300 	call	1000e30 <__mulsi3>
 100c1f0:	d9800017 	ldw	r6,0(sp)
 100c1f4:	e006d43a 	srli	r3,fp,16
 100c1f8:	da800217 	ldw	r10,8(sp)
 100c1fc:	1185883a 	add	r2,r2,r6
 100c200:	1887883a 	add	r3,r3,r2
 100c204:	da400317 	ldw	r9,12(sp)
 100c208:	1980022e 	bgeu	r3,r6,100c214 <__divdf3+0x698>
 100c20c:	00800074 	movhi	r2,1
 100c210:	80a1883a 	add	r16,r16,r2
 100c214:	1808d43a 	srli	r4,r3,16
 100c218:	1806943a 	slli	r3,r3,16
 100c21c:	e73fffcc 	andi	fp,fp,65535
 100c220:	2409883a 	add	r4,r4,r16
 100c224:	1f07883a 	add	r3,r3,fp
 100c228:	51000436 	bltu	r10,r4,100c23c <__divdf3+0x6c0>
 100c22c:	51000226 	beq	r10,r4,100c238 <__divdf3+0x6bc>
 100c230:	a5000054 	ori	r20,r20,1
 100c234:	003eec06 	br	100bde8 <__divdf3+0x26c>
 100c238:	183eeb26 	beq	r3,zero,100bde8 <__divdf3+0x26c>
 100c23c:	b28d883a 	add	r6,r22,r10
 100c240:	a0bfffc4 	addi	r2,r20,-1
 100c244:	35806536 	bltu	r6,r22,100c3dc <__divdf3+0x860>
 100c248:	31008036 	bltu	r6,r4,100c44c <__divdf3+0x8d0>
 100c24c:	31009426 	beq	r6,r4,100c4a0 <__divdf3+0x924>
 100c250:	1029883a 	mov	r20,r2
 100c254:	003ff606 	br	100c230 <__divdf3+0x6b4>
 100c258:	053fffc4 	movi	r20,-1
 100c25c:	01400044 	movi	r5,1
 100c260:	2c4bc83a 	sub	r5,r5,r17
 100c264:	28800e48 	cmpgei	r2,r5,57
 100c268:	103e931e 	bne	r2,zero,100bcb8 <__divdf3+0x13c>
 100c26c:	28800808 	cmpgei	r2,r5,32
 100c270:	1000491e 	bne	r2,zero,100c398 <__divdf3+0x81c>
 100c274:	92010784 	addi	r8,r18,1054
 100c278:	9a04983a 	sll	r2,r19,r8
 100c27c:	a146d83a 	srl	r3,r20,r5
 100c280:	a210983a 	sll	r8,r20,r8
 100c284:	994ad83a 	srl	r5,r19,r5
 100c288:	10e8b03a 	or	r20,r2,r3
 100c28c:	4010c03a 	cmpne	r8,r8,zero
 100c290:	a228b03a 	or	r20,r20,r8
 100c294:	a08001cc 	andi	r2,r20,7
 100c298:	10000726 	beq	r2,zero,100c2b8 <__divdf3+0x73c>
 100c29c:	a08003cc 	andi	r2,r20,15
 100c2a0:	10800120 	cmpeqi	r2,r2,4
 100c2a4:	1000041e 	bne	r2,zero,100c2b8 <__divdf3+0x73c>
 100c2a8:	a0800104 	addi	r2,r20,4
 100c2ac:	1529803a 	cmpltu	r20,r2,r20
 100c2b0:	2d0b883a 	add	r5,r5,r20
 100c2b4:	1029883a 	mov	r20,r2
 100c2b8:	2880202c 	andhi	r2,r5,128
 100c2bc:	10006f26 	beq	r2,zero,100c47c <__divdf3+0x900>
 100c2c0:	00c00044 	movi	r3,1
 100c2c4:	000b883a 	mov	r5,zero
 100c2c8:	0029883a 	mov	r20,zero
 100c2cc:	003e7d06 	br	100bcc4 <__divdf3+0x148>
 100c2d0:	89bf6d2e 	bgeu	r17,r6,100c088 <__divdf3+0x50c>
 100c2d4:	8d63883a 	add	r17,r17,r21
 100c2d8:	8d45803a 	cmpltu	r2,r17,r21
 100c2dc:	1585883a 	add	r2,r2,r22
 100c2e0:	1887883a 	add	r3,r3,r2
 100c2e4:	98bfffc4 	addi	r2,r19,-1
 100c2e8:	b0c0202e 	bgeu	r22,r3,100c36c <__divdf3+0x7f0>
 100c2ec:	19405136 	bltu	r3,r5,100c434 <__divdf3+0x8b8>
 100c2f0:	28c04f26 	beq	r5,r3,100c430 <__divdf3+0x8b4>
 100c2f4:	1027883a 	mov	r19,r2
 100c2f8:	003f6306 	br	100c088 <__divdf3+0x50c>
 100c2fc:	a2befc36 	bltu	r20,r10,100bef0 <__divdf3+0x374>
 100c300:	983897fa 	slli	fp,r19,31
 100c304:	a004d07a 	srli	r2,r20,1
 100c308:	9820d07a 	srli	r16,r19,1
 100c30c:	a02297fa 	slli	r17,r20,31
 100c310:	e0b8b03a 	or	fp,fp,r2
 100c314:	003efa06 	br	100bf00 <__divdf3+0x384>
 100c318:	100da0c0 	call	100da0c <__clzsi2>
 100c31c:	11000544 	addi	r4,r2,21
 100c320:	20c00748 	cmpgei	r3,r4,29
 100c324:	100b883a 	mov	r5,r2
 100c328:	10800804 	addi	r2,r2,32
 100c32c:	183e8226 	beq	r3,zero,100bd38 <__divdf3+0x1bc>
 100c330:	297ffe04 	addi	r5,r5,-8
 100c334:	a166983a 	sll	r19,r20,r5
 100c338:	0029883a 	mov	r20,zero
 100c33c:	003e8506 	br	100bd54 <__divdf3+0x1d8>
 100c340:	e009883a 	mov	r4,fp
 100c344:	100da0c0 	call	100da0c <__clzsi2>
 100c348:	11400544 	addi	r5,r2,21
 100c34c:	29000748 	cmpgei	r4,r5,29
 100c350:	1007883a 	mov	r3,r2
 100c354:	10800804 	addi	r2,r2,32
 100c358:	203e9026 	beq	r4,zero,100bd9c <__divdf3+0x220>
 100c35c:	18fffe04 	addi	r3,r3,-8
 100c360:	e0ec983a 	sll	r22,fp,r3
 100c364:	0015883a 	mov	r10,zero
 100c368:	003e9306 	br	100bdb8 <__divdf3+0x23c>
 100c36c:	b0ffe11e 	bne	r22,r3,100c2f4 <__divdf3+0x778>
 100c370:	8d7fe036 	bltu	r17,r21,100c2f4 <__divdf3+0x778>
 100c374:	003fdd06 	br	100c2ec <__divdf3+0x770>
 100c378:	30ff132e 	bgeu	r6,r3,100bfc8 <__divdf3+0x44c>
 100c37c:	39ffff84 	addi	r7,r7,-2
 100c380:	358d883a 	add	r6,r6,r22
 100c384:	003f1106 	br	100bfcc <__divdf3+0x450>
 100c388:	243ef72e 	bgeu	r4,r16,100bf68 <__divdf3+0x3ec>
 100c38c:	9cffff84 	addi	r19,r19,-2
 100c390:	2589883a 	add	r4,r4,r22
 100c394:	003ef506 	br	100bf6c <__divdf3+0x3f0>
 100c398:	00fff844 	movi	r3,-31
 100c39c:	1c47c83a 	sub	r3,r3,r17
 100c3a0:	29400820 	cmpeqi	r5,r5,32
 100c3a4:	98c6d83a 	srl	r3,r19,r3
 100c3a8:	2800031e 	bne	r5,zero,100c3b8 <__divdf3+0x83c>
 100c3ac:	91410f84 	addi	r5,r18,1086
 100c3b0:	994a983a 	sll	r5,r19,r5
 100c3b4:	a168b03a 	or	r20,r20,r5
 100c3b8:	a028c03a 	cmpne	r20,r20,zero
 100c3bc:	a0e8b03a 	or	r20,r20,r3
 100c3c0:	a4c001cc 	andi	r19,r20,7
 100c3c4:	9800291e 	bne	r19,zero,100c46c <__divdf3+0x8f0>
 100c3c8:	000b883a 	mov	r5,zero
 100c3cc:	a028d0fa 	srli	r20,r20,3
 100c3d0:	0007883a 	mov	r3,zero
 100c3d4:	a4e8b03a 	or	r20,r20,r19
 100c3d8:	003e3a06 	br	100bcc4 <__divdf3+0x148>
 100c3dc:	1029883a 	mov	r20,r2
 100c3e0:	313f931e 	bne	r6,r4,100c230 <__divdf3+0x6b4>
 100c3e4:	1d7f921e 	bne	r3,r21,100c230 <__divdf3+0x6b4>
 100c3e8:	003e7f06 	br	100bde8 <__divdf3+0x26c>
 100c3ec:	047f9a0e 	bge	zero,r17,100c258 <__divdf3+0x6dc>
 100c3f0:	0009883a 	mov	r4,zero
 100c3f4:	05000044 	movi	r20,1
 100c3f8:	9d27883a 	add	r19,r19,r20
 100c3fc:	003e7e06 	br	100bdf8 <__divdf3+0x27c>
 100c400:	a08003cc 	andi	r2,r20,15
 100c404:	10800118 	cmpnei	r2,r2,4
 100c408:	103e7a26 	beq	r2,zero,100bdf4 <__divdf3+0x278>
 100c40c:	a1000104 	addi	r4,r20,4
 100c410:	00bffec4 	movi	r2,-5
 100c414:	2008d0fa 	srli	r4,r4,3
 100c418:	1529803a 	cmpltu	r20,r2,r20
 100c41c:	003ff606 	br	100c3f8 <__divdf3+0x87c>
 100c420:	1011883a 	mov	r8,r2
 100c424:	003f5a06 	br	100c190 <__divdf3+0x614>
 100c428:	100f883a 	mov	r7,r2
 100c42c:	003f3906 	br	100c114 <__divdf3+0x598>
 100c430:	89bfb02e 	bgeu	r17,r6,100c2f4 <__divdf3+0x778>
 100c434:	8d63883a 	add	r17,r17,r21
 100c438:	8d45803a 	cmpltu	r2,r17,r21
 100c43c:	1585883a 	add	r2,r2,r22
 100c440:	9cffff84 	addi	r19,r19,-2
 100c444:	1887883a 	add	r3,r3,r2
 100c448:	003f0f06 	br	100c088 <__divdf3+0x50c>
 100c44c:	ad45883a 	add	r2,r21,r21
 100c450:	156b803a 	cmpltu	r21,r2,r21
 100c454:	adad883a 	add	r22,r21,r22
 100c458:	358d883a 	add	r6,r6,r22
 100c45c:	a53fff84 	addi	r20,r20,-2
 100c460:	102b883a 	mov	r21,r2
 100c464:	313fdf26 	beq	r6,r4,100c3e4 <__divdf3+0x868>
 100c468:	003f7106 	br	100c230 <__divdf3+0x6b4>
 100c46c:	a08003cc 	andi	r2,r20,15
 100c470:	10800118 	cmpnei	r2,r2,4
 100c474:	000b883a 	mov	r5,zero
 100c478:	103f8b1e 	bne	r2,zero,100c2a8 <__divdf3+0x72c>
 100c47c:	2804927a 	slli	r2,r5,9
 100c480:	2826977a 	slli	r19,r5,29
 100c484:	100ad33a 	srli	r5,r2,12
 100c488:	003fd006 	br	100c3cc <__divdf3+0x850>
 100c48c:	00800434 	movhi	r2,16
 100c490:	99400234 	orhi	r5,r19,8
 100c494:	10bfffc4 	addi	r2,r2,-1
 100c498:	288a703a 	and	r5,r5,r2
 100c49c:	003e7f06 	br	100be9c <__divdf3+0x320>
 100c4a0:	a8ffea36 	bltu	r21,r3,100c44c <__divdf3+0x8d0>
 100c4a4:	1029883a 	mov	r20,r2
 100c4a8:	1d7f611e 	bne	r3,r21,100c230 <__divdf3+0x6b4>
 100c4ac:	003e4e06 	br	100bde8 <__divdf3+0x26c>

0100c4b0 <__eqdf2>:
 100c4b0:	2810d53a 	srli	r8,r5,20
 100c4b4:	3806d53a 	srli	r3,r7,20
 100c4b8:	00800434 	movhi	r2,16
 100c4bc:	4201ffcc 	andi	r8,r8,2047
 100c4c0:	10bfffc4 	addi	r2,r2,-1
 100c4c4:	4241ffd8 	cmpnei	r9,r8,2047
 100c4c8:	2814d7fa 	srli	r10,r5,31
 100c4cc:	3816d7fa 	srli	r11,r7,31
 100c4d0:	288a703a 	and	r5,r5,r2
 100c4d4:	388e703a 	and	r7,r7,r2
 100c4d8:	1881ffcc 	andi	r2,r3,2047
 100c4dc:	48000626 	beq	r9,zero,100c4f8 <__eqdf2+0x48>
 100c4e0:	10c1ffe0 	cmpeqi	r3,r2,2047
 100c4e4:	1800021e 	bne	r3,zero,100c4f0 <__eqdf2+0x40>
 100c4e8:	4080011e 	bne	r8,r2,100c4f0 <__eqdf2+0x40>
 100c4ec:	29c00826 	beq	r5,r7,100c510 <__eqdf2+0x60>
 100c4f0:	00800044 	movi	r2,1
 100c4f4:	f800283a 	ret
 100c4f8:	2906b03a 	or	r3,r5,r4
 100c4fc:	183ffc1e 	bne	r3,zero,100c4f0 <__eqdf2+0x40>
 100c500:	1081ffd8 	cmpnei	r2,r2,2047
 100c504:	103ffa1e 	bne	r2,zero,100c4f0 <__eqdf2+0x40>
 100c508:	398eb03a 	or	r7,r7,r6
 100c50c:	383ff81e 	bne	r7,zero,100c4f0 <__eqdf2+0x40>
 100c510:	21bff71e 	bne	r4,r6,100c4f0 <__eqdf2+0x40>
 100c514:	52c00426 	beq	r10,r11,100c528 <__eqdf2+0x78>
 100c518:	403ff51e 	bne	r8,zero,100c4f0 <__eqdf2+0x40>
 100c51c:	290ab03a 	or	r5,r5,r4
 100c520:	2804c03a 	cmpne	r2,r5,zero
 100c524:	f800283a 	ret
 100c528:	0005883a 	mov	r2,zero
 100c52c:	f800283a 	ret

0100c530 <__gedf2>:
 100c530:	2810d53a 	srli	r8,r5,20
 100c534:	3812d53a 	srli	r9,r7,20
 100c538:	00c00434 	movhi	r3,16
 100c53c:	4201ffcc 	andi	r8,r8,2047
 100c540:	18ffffc4 	addi	r3,r3,-1
 100c544:	4281ffd8 	cmpnei	r10,r8,2047
 100c548:	2816d7fa 	srli	r11,r5,31
 100c54c:	3804d7fa 	srli	r2,r7,31
 100c550:	28ca703a 	and	r5,r5,r3
 100c554:	38ce703a 	and	r7,r7,r3
 100c558:	48c1ffcc 	andi	r3,r9,2047
 100c55c:	50000b26 	beq	r10,zero,100c58c <__gedf2+0x5c>
 100c560:	1a41ffd8 	cmpnei	r9,r3,2047
 100c564:	48000d26 	beq	r9,zero,100c59c <__gedf2+0x6c>
 100c568:	4000191e 	bne	r8,zero,100c5d0 <__gedf2+0xa0>
 100c56c:	2914b03a 	or	r10,r5,r4
 100c570:	5013003a 	cmpeq	r9,r10,zero
 100c574:	1800131e 	bne	r3,zero,100c5c4 <__gedf2+0x94>
 100c578:	3998b03a 	or	r12,r7,r6
 100c57c:	6000111e 	bne	r12,zero,100c5c4 <__gedf2+0x94>
 100c580:	50000a1e 	bne	r10,zero,100c5ac <__gedf2+0x7c>
 100c584:	0005883a 	mov	r2,zero
 100c588:	f800283a 	ret
 100c58c:	2912b03a 	or	r9,r5,r4
 100c590:	48001e1e 	bne	r9,zero,100c60c <__gedf2+0xdc>
 100c594:	1a41ffe0 	cmpeqi	r9,r3,2047
 100c598:	48000d26 	beq	r9,zero,100c5d0 <__gedf2+0xa0>
 100c59c:	3992b03a 	or	r9,r7,r6
 100c5a0:	48001a1e 	bne	r9,zero,100c60c <__gedf2+0xdc>
 100c5a4:	40000526 	beq	r8,zero,100c5bc <__gedf2+0x8c>
 100c5a8:	58800d26 	beq	r11,r2,100c5e0 <__gedf2+0xb0>
 100c5ac:	00800044 	movi	r2,1
 100c5b0:	58000626 	beq	r11,zero,100c5cc <__gedf2+0x9c>
 100c5b4:	00bfffc4 	movi	r2,-1
 100c5b8:	f800283a 	ret
 100c5bc:	2912b03a 	or	r9,r5,r4
 100c5c0:	4813003a 	cmpeq	r9,r9,zero
 100c5c4:	483ff826 	beq	r9,zero,100c5a8 <__gedf2+0x78>
 100c5c8:	103ffa26 	beq	r2,zero,100c5b4 <__gedf2+0x84>
 100c5cc:	f800283a 	ret
 100c5d0:	183ff51e 	bne	r3,zero,100c5a8 <__gedf2+0x78>
 100c5d4:	3992b03a 	or	r9,r7,r6
 100c5d8:	483ff31e 	bne	r9,zero,100c5a8 <__gedf2+0x78>
 100c5dc:	003ff306 	br	100c5ac <__gedf2+0x7c>
 100c5e0:	1a000716 	blt	r3,r8,100c600 <__gedf2+0xd0>
 100c5e4:	40fff816 	blt	r8,r3,100c5c8 <__gedf2+0x98>
 100c5e8:	397ff036 	bltu	r7,r5,100c5ac <__gedf2+0x7c>
 100c5ec:	29c00926 	beq	r5,r7,100c614 <__gedf2+0xe4>
 100c5f0:	29ffe42e 	bgeu	r5,r7,100c584 <__gedf2+0x54>
 100c5f4:	583fef26 	beq	r11,zero,100c5b4 <__gedf2+0x84>
 100c5f8:	5805883a 	mov	r2,r11
 100c5fc:	f800283a 	ret
 100c600:	103fec1e 	bne	r2,zero,100c5b4 <__gedf2+0x84>
 100c604:	00800044 	movi	r2,1
 100c608:	f800283a 	ret
 100c60c:	00bfff84 	movi	r2,-2
 100c610:	f800283a 	ret
 100c614:	313fe536 	bltu	r6,r4,100c5ac <__gedf2+0x7c>
 100c618:	21bfda2e 	bgeu	r4,r6,100c584 <__gedf2+0x54>
 100c61c:	003ff506 	br	100c5f4 <__gedf2+0xc4>

0100c620 <__ledf2>:
 100c620:	2810d53a 	srli	r8,r5,20
 100c624:	3812d53a 	srli	r9,r7,20
 100c628:	00c00434 	movhi	r3,16
 100c62c:	4201ffcc 	andi	r8,r8,2047
 100c630:	18ffffc4 	addi	r3,r3,-1
 100c634:	4281ffd8 	cmpnei	r10,r8,2047
 100c638:	2816d7fa 	srli	r11,r5,31
 100c63c:	3804d7fa 	srli	r2,r7,31
 100c640:	28ca703a 	and	r5,r5,r3
 100c644:	38ce703a 	and	r7,r7,r3
 100c648:	48c1ffcc 	andi	r3,r9,2047
 100c64c:	50000b26 	beq	r10,zero,100c67c <__ledf2+0x5c>
 100c650:	1a41ffd8 	cmpnei	r9,r3,2047
 100c654:	48000d26 	beq	r9,zero,100c68c <__ledf2+0x6c>
 100c658:	40001b1e 	bne	r8,zero,100c6c8 <__ledf2+0xa8>
 100c65c:	2914b03a 	or	r10,r5,r4
 100c660:	5013003a 	cmpeq	r9,r10,zero
 100c664:	18000e1e 	bne	r3,zero,100c6a0 <__ledf2+0x80>
 100c668:	3998b03a 	or	r12,r7,r6
 100c66c:	60000c1e 	bne	r12,zero,100c6a0 <__ledf2+0x80>
 100c670:	50000d1e 	bne	r10,zero,100c6a8 <__ledf2+0x88>
 100c674:	0005883a 	mov	r2,zero
 100c678:	f800283a 	ret
 100c67c:	2912b03a 	or	r9,r5,r4
 100c680:	48000d1e 	bne	r9,zero,100c6b8 <__ledf2+0x98>
 100c684:	1a41ffe0 	cmpeqi	r9,r3,2047
 100c688:	48000f26 	beq	r9,zero,100c6c8 <__ledf2+0xa8>
 100c68c:	3992b03a 	or	r9,r7,r6
 100c690:	4800091e 	bne	r9,zero,100c6b8 <__ledf2+0x98>
 100c694:	4000031e 	bne	r8,zero,100c6a4 <__ledf2+0x84>
 100c698:	2912b03a 	or	r9,r5,r4
 100c69c:	4813003a 	cmpeq	r9,r9,zero
 100c6a0:	4800071e 	bne	r9,zero,100c6c0 <__ledf2+0xa0>
 100c6a4:	58800c26 	beq	r11,r2,100c6d8 <__ledf2+0xb8>
 100c6a8:	00800044 	movi	r2,1
 100c6ac:	58000526 	beq	r11,zero,100c6c4 <__ledf2+0xa4>
 100c6b0:	00bfffc4 	movi	r2,-1
 100c6b4:	f800283a 	ret
 100c6b8:	00800084 	movi	r2,2
 100c6bc:	f800283a 	ret
 100c6c0:	103ffb26 	beq	r2,zero,100c6b0 <__ledf2+0x90>
 100c6c4:	f800283a 	ret
 100c6c8:	183ff61e 	bne	r3,zero,100c6a4 <__ledf2+0x84>
 100c6cc:	3992b03a 	or	r9,r7,r6
 100c6d0:	483ff41e 	bne	r9,zero,100c6a4 <__ledf2+0x84>
 100c6d4:	003ff406 	br	100c6a8 <__ledf2+0x88>
 100c6d8:	1a00030e 	bge	r3,r8,100c6e8 <__ledf2+0xc8>
 100c6dc:	103ff41e 	bne	r2,zero,100c6b0 <__ledf2+0x90>
 100c6e0:	00800044 	movi	r2,1
 100c6e4:	f800283a 	ret
 100c6e8:	40fff516 	blt	r8,r3,100c6c0 <__ledf2+0xa0>
 100c6ec:	397fee36 	bltu	r7,r5,100c6a8 <__ledf2+0x88>
 100c6f0:	29c00426 	beq	r5,r7,100c704 <__ledf2+0xe4>
 100c6f4:	29ffdf2e 	bgeu	r5,r7,100c674 <__ledf2+0x54>
 100c6f8:	583fed26 	beq	r11,zero,100c6b0 <__ledf2+0x90>
 100c6fc:	5805883a 	mov	r2,r11
 100c700:	f800283a 	ret
 100c704:	313fe836 	bltu	r6,r4,100c6a8 <__ledf2+0x88>
 100c708:	21bfda2e 	bgeu	r4,r6,100c674 <__ledf2+0x54>
 100c70c:	003ffa06 	br	100c6f8 <__ledf2+0xd8>

0100c710 <__muldf3>:
 100c710:	2810d53a 	srli	r8,r5,20
 100c714:	defff004 	addi	sp,sp,-64
 100c718:	00800434 	movhi	r2,16
 100c71c:	df000e15 	stw	fp,56(sp)
 100c720:	dd000a15 	stw	r20,40(sp)
 100c724:	dcc00915 	stw	r19,36(sp)
 100c728:	dc400715 	stw	r17,28(sp)
 100c72c:	10bfffc4 	addi	r2,r2,-1
 100c730:	dfc00f15 	stw	ra,60(sp)
 100c734:	ddc00d15 	stw	r23,52(sp)
 100c738:	dd800c15 	stw	r22,48(sp)
 100c73c:	dd400b15 	stw	r21,44(sp)
 100c740:	dc800815 	stw	r18,32(sp)
 100c744:	dc000615 	stw	r16,24(sp)
 100c748:	4201ffcc 	andi	r8,r8,2047
 100c74c:	2828d7fa 	srli	r20,r5,31
 100c750:	2023883a 	mov	r17,r4
 100c754:	3039883a 	mov	fp,r6
 100c758:	28a6703a 	and	r19,r5,r2
 100c75c:	40005a26 	beq	r8,zero,100c8c8 <__muldf3+0x1b8>
 100c760:	4081ffe0 	cmpeqi	r2,r8,2047
 100c764:	10006c1e 	bne	r2,zero,100c918 <__muldf3+0x208>
 100c768:	980a90fa 	slli	r5,r19,3
 100c76c:	2026d77a 	srli	r19,r4,29
 100c770:	202490fa 	slli	r18,r4,3
 100c774:	423f0044 	addi	r8,r8,-1023
 100c778:	9966b03a 	or	r19,r19,r5
 100c77c:	9cc02034 	orhi	r19,r19,128
 100c780:	002b883a 	mov	r21,zero
 100c784:	002d883a 	mov	r22,zero
 100c788:	3804d53a 	srli	r2,r7,20
 100c78c:	00c00434 	movhi	r3,16
 100c790:	18ffffc4 	addi	r3,r3,-1
 100c794:	1081ffcc 	andi	r2,r2,2047
 100c798:	382ed7fa 	srli	r23,r7,31
 100c79c:	38e0703a 	and	r16,r7,r3
 100c7a0:	10006426 	beq	r2,zero,100c934 <__muldf3+0x224>
 100c7a4:	10c1ffe0 	cmpeqi	r3,r2,2047
 100c7a8:	1800211e 	bne	r3,zero,100c830 <__muldf3+0x120>
 100c7ac:	e008d77a 	srli	r4,fp,29
 100c7b0:	802090fa 	slli	r16,r16,3
 100c7b4:	e02290fa 	slli	r17,fp,3
 100c7b8:	10bf0044 	addi	r2,r2,-1023
 100c7bc:	2420b03a 	or	r16,r4,r16
 100c7c0:	84002034 	orhi	r16,r16,128
 100c7c4:	4091883a 	add	r8,r8,r2
 100c7c8:	0009883a 	mov	r4,zero
 100c7cc:	a8800428 	cmpgeui	r2,r21,16
 100c7d0:	a5ccf03a 	xor	r6,r20,r23
 100c7d4:	41c00044 	addi	r7,r8,1
 100c7d8:	10006d1e 	bne	r2,zero,100c990 <__muldf3+0x280>
 100c7dc:	a80490ba 	slli	r2,r21,2
 100c7e0:	00c04074 	movhi	r3,257
 100c7e4:	10c7883a 	add	r3,r2,r3
 100c7e8:	18b1fc17 	ldw	r2,-14352(r3)
 100c7ec:	1000683a 	jmp	r2
 100c7f0:	0100c990 	cmplti	r4,zero,806
 100c7f4:	0100c850 	cmplti	r4,zero,801
 100c7f8:	0100c850 	cmplti	r4,zero,801
 100c7fc:	0100c84c 	andi	r4,zero,801
 100c800:	0100c85c 	xori	r4,zero,801
 100c804:	0100c85c 	xori	r4,zero,801
 100c808:	0100cd0c 	andi	r4,zero,820
 100c80c:	0100c84c 	andi	r4,zero,801
 100c810:	0100c85c 	xori	r4,zero,801
 100c814:	0100cd0c 	andi	r4,zero,820
 100c818:	0100c85c 	xori	r4,zero,801
 100c81c:	0100c84c 	andi	r4,zero,801
 100c820:	0100ccbc 	xorhi	r4,zero,818
 100c824:	0100ccbc 	xorhi	r4,zero,818
 100c828:	0100ccbc 	xorhi	r4,zero,818
 100c82c:	0100cd98 	cmpnei	r4,zero,822
 100c830:	e422b03a 	or	r17,fp,r16
 100c834:	4201ffc4 	addi	r8,r8,2047
 100c838:	8801221e 	bne	r17,zero,100ccc4 <__muldf3+0x5b4>
 100c83c:	ad400094 	ori	r21,r21,2
 100c840:	0021883a 	mov	r16,zero
 100c844:	01000084 	movi	r4,2
 100c848:	003fe006 	br	100c7cc <__muldf3+0xbc>
 100c84c:	b80d883a 	mov	r6,r23
 100c850:	8027883a 	mov	r19,r16
 100c854:	8825883a 	mov	r18,r17
 100c858:	202d883a 	mov	r22,r4
 100c85c:	b08000a0 	cmpeqi	r2,r22,2
 100c860:	1000471e 	bne	r2,zero,100c980 <__muldf3+0x270>
 100c864:	b08000e0 	cmpeqi	r2,r22,3
 100c868:	10018e1e 	bne	r2,zero,100cea4 <__muldf3+0x794>
 100c86c:	b0800060 	cmpeqi	r2,r22,1
 100c870:	1000f826 	beq	r2,zero,100cc54 <__muldf3+0x544>
 100c874:	0007883a 	mov	r3,zero
 100c878:	0027883a 	mov	r19,zero
 100c87c:	0025883a 	mov	r18,zero
 100c880:	1806953a 	slli	r3,r3,20
 100c884:	31803fcc 	andi	r6,r6,255
 100c888:	300c97fa 	slli	r6,r6,31
 100c88c:	1cc6b03a 	or	r3,r3,r19
 100c890:	9005883a 	mov	r2,r18
 100c894:	1986b03a 	or	r3,r3,r6
 100c898:	dfc00f17 	ldw	ra,60(sp)
 100c89c:	df000e17 	ldw	fp,56(sp)
 100c8a0:	ddc00d17 	ldw	r23,52(sp)
 100c8a4:	dd800c17 	ldw	r22,48(sp)
 100c8a8:	dd400b17 	ldw	r21,44(sp)
 100c8ac:	dd000a17 	ldw	r20,40(sp)
 100c8b0:	dcc00917 	ldw	r19,36(sp)
 100c8b4:	dc800817 	ldw	r18,32(sp)
 100c8b8:	dc400717 	ldw	r17,28(sp)
 100c8bc:	dc000617 	ldw	r16,24(sp)
 100c8c0:	dec01004 	addi	sp,sp,64
 100c8c4:	f800283a 	ret
 100c8c8:	9924b03a 	or	r18,r19,r4
 100c8cc:	90010a26 	beq	r18,zero,100ccf8 <__muldf3+0x5e8>
 100c8d0:	d9c00015 	stw	r7,0(sp)
 100c8d4:	98014d26 	beq	r19,zero,100ce0c <__muldf3+0x6fc>
 100c8d8:	9809883a 	mov	r4,r19
 100c8dc:	100da0c0 	call	100da0c <__clzsi2>
 100c8e0:	d9c00017 	ldw	r7,0(sp)
 100c8e4:	113ffd44 	addi	r4,r2,-11
 100c8e8:	00c00744 	movi	r3,29
 100c8ec:	14bffe04 	addi	r18,r2,-8
 100c8f0:	1907c83a 	sub	r3,r3,r4
 100c8f4:	9ca6983a 	sll	r19,r19,r18
 100c8f8:	88c6d83a 	srl	r3,r17,r3
 100c8fc:	8ca4983a 	sll	r18,r17,r18
 100c900:	1ce6b03a 	or	r19,r3,r19
 100c904:	023f0344 	movi	r8,-1011
 100c908:	4091c83a 	sub	r8,r8,r2
 100c90c:	002b883a 	mov	r21,zero
 100c910:	002d883a 	mov	r22,zero
 100c914:	003f9c06 	br	100c788 <__muldf3+0x78>
 100c918:	9924b03a 	or	r18,r19,r4
 100c91c:	9000f11e 	bne	r18,zero,100cce4 <__muldf3+0x5d4>
 100c920:	0027883a 	mov	r19,zero
 100c924:	05400204 	movi	r21,8
 100c928:	0201ffc4 	movi	r8,2047
 100c92c:	05800084 	movi	r22,2
 100c930:	003f9506 	br	100c788 <__muldf3+0x78>
 100c934:	e422b03a 	or	r17,fp,r16
 100c938:	8800e626 	beq	r17,zero,100ccd4 <__muldf3+0x5c4>
 100c93c:	da000015 	stw	r8,0(sp)
 100c940:	80012626 	beq	r16,zero,100cddc <__muldf3+0x6cc>
 100c944:	8009883a 	mov	r4,r16
 100c948:	100da0c0 	call	100da0c <__clzsi2>
 100c94c:	da000017 	ldw	r8,0(sp)
 100c950:	117ffd44 	addi	r5,r2,-11
 100c954:	01000744 	movi	r4,29
 100c958:	147ffe04 	addi	r17,r2,-8
 100c95c:	2149c83a 	sub	r4,r4,r5
 100c960:	8460983a 	sll	r16,r16,r17
 100c964:	e108d83a 	srl	r4,fp,r4
 100c968:	e462983a 	sll	r17,fp,r17
 100c96c:	2420b03a 	or	r16,r4,r16
 100c970:	4091c83a 	sub	r8,r8,r2
 100c974:	423f0344 	addi	r8,r8,-1011
 100c978:	0009883a 	mov	r4,zero
 100c97c:	003f9306 	br	100c7cc <__muldf3+0xbc>
 100c980:	00c1ffc4 	movi	r3,2047
 100c984:	0027883a 	mov	r19,zero
 100c988:	0025883a 	mov	r18,zero
 100c98c:	003fbc06 	br	100c880 <__muldf3+0x170>
 100c990:	9028d43a 	srli	r20,r18,16
 100c994:	8f3fffcc 	andi	fp,r17,65535
 100c998:	957fffcc 	andi	r21,r18,65535
 100c99c:	a80b883a 	mov	r5,r21
 100c9a0:	e009883a 	mov	r4,fp
 100c9a4:	d9800315 	stw	r6,12(sp)
 100c9a8:	da000215 	stw	r8,8(sp)
 100c9ac:	d9c00115 	stw	r7,4(sp)
 100c9b0:	8822d43a 	srli	r17,r17,16
 100c9b4:	1000e300 	call	1000e30 <__mulsi3>
 100c9b8:	e00b883a 	mov	r5,fp
 100c9bc:	a009883a 	mov	r4,r20
 100c9c0:	102d883a 	mov	r22,r2
 100c9c4:	1000e300 	call	1000e30 <__mulsi3>
 100c9c8:	880b883a 	mov	r5,r17
 100c9cc:	a009883a 	mov	r4,r20
 100c9d0:	102f883a 	mov	r23,r2
 100c9d4:	1000e300 	call	1000e30 <__mulsi3>
 100c9d8:	a80b883a 	mov	r5,r21
 100c9dc:	8809883a 	mov	r4,r17
 100c9e0:	d8800015 	stw	r2,0(sp)
 100c9e4:	1000e300 	call	1000e30 <__mulsi3>
 100c9e8:	b006d43a 	srli	r3,r22,16
 100c9ec:	15e5883a 	add	r18,r2,r23
 100c9f0:	d9c00117 	ldw	r7,4(sp)
 100c9f4:	1c87883a 	add	r3,r3,r18
 100c9f8:	da000217 	ldw	r8,8(sp)
 100c9fc:	d9800317 	ldw	r6,12(sp)
 100ca00:	1dc0042e 	bgeu	r3,r23,100ca14 <__muldf3+0x304>
 100ca04:	d9000017 	ldw	r4,0(sp)
 100ca08:	00800074 	movhi	r2,1
 100ca0c:	2085883a 	add	r2,r4,r2
 100ca10:	d8800015 	stw	r2,0(sp)
 100ca14:	1804943a 	slli	r2,r3,16
 100ca18:	85ffffcc 	andi	r23,r16,65535
 100ca1c:	b5bfffcc 	andi	r22,r22,65535
 100ca20:	1585883a 	add	r2,r2,r22
 100ca24:	a80b883a 	mov	r5,r21
 100ca28:	b809883a 	mov	r4,r23
 100ca2c:	1824d43a 	srli	r18,r3,16
 100ca30:	d9800515 	stw	r6,20(sp)
 100ca34:	da000415 	stw	r8,16(sp)
 100ca38:	d9c00315 	stw	r7,12(sp)
 100ca3c:	8020d43a 	srli	r16,r16,16
 100ca40:	d8800115 	stw	r2,4(sp)
 100ca44:	1000e300 	call	1000e30 <__mulsi3>
 100ca48:	a009883a 	mov	r4,r20
 100ca4c:	b80b883a 	mov	r5,r23
 100ca50:	d8800215 	stw	r2,8(sp)
 100ca54:	1000e300 	call	1000e30 <__mulsi3>
 100ca58:	a009883a 	mov	r4,r20
 100ca5c:	800b883a 	mov	r5,r16
 100ca60:	102d883a 	mov	r22,r2
 100ca64:	1000e300 	call	1000e30 <__mulsi3>
 100ca68:	a80b883a 	mov	r5,r21
 100ca6c:	8009883a 	mov	r4,r16
 100ca70:	1029883a 	mov	r20,r2
 100ca74:	1000e300 	call	1000e30 <__mulsi3>
 100ca78:	da800217 	ldw	r10,8(sp)
 100ca7c:	1585883a 	add	r2,r2,r22
 100ca80:	d9c00317 	ldw	r7,12(sp)
 100ca84:	5006d43a 	srli	r3,r10,16
 100ca88:	da000417 	ldw	r8,16(sp)
 100ca8c:	d9800517 	ldw	r6,20(sp)
 100ca90:	1887883a 	add	r3,r3,r2
 100ca94:	1d80022e 	bgeu	r3,r22,100caa0 <__muldf3+0x390>
 100ca98:	00800074 	movhi	r2,1
 100ca9c:	a0a9883a 	add	r20,r20,r2
 100caa0:	1804d43a 	srli	r2,r3,16
 100caa4:	1806943a 	slli	r3,r3,16
 100caa8:	982cd43a 	srli	r22,r19,16
 100caac:	9d7fffcc 	andi	r21,r19,65535
 100cab0:	e009883a 	mov	r4,fp
 100cab4:	54ffffcc 	andi	r19,r10,65535
 100cab8:	a80b883a 	mov	r5,r21
 100cabc:	1ce7883a 	add	r19,r3,r19
 100cac0:	d9800515 	stw	r6,20(sp)
 100cac4:	da000415 	stw	r8,16(sp)
 100cac8:	d9c00315 	stw	r7,12(sp)
 100cacc:	1529883a 	add	r20,r2,r20
 100cad0:	1000e300 	call	1000e30 <__mulsi3>
 100cad4:	e00b883a 	mov	r5,fp
 100cad8:	b009883a 	mov	r4,r22
 100cadc:	d8800215 	stw	r2,8(sp)
 100cae0:	1000e300 	call	1000e30 <__mulsi3>
 100cae4:	8809883a 	mov	r4,r17
 100cae8:	b00b883a 	mov	r5,r22
 100caec:	1039883a 	mov	fp,r2
 100caf0:	1000e300 	call	1000e30 <__mulsi3>
 100caf4:	8809883a 	mov	r4,r17
 100caf8:	a80b883a 	mov	r5,r21
 100cafc:	1023883a 	mov	r17,r2
 100cb00:	1000e300 	call	1000e30 <__mulsi3>
 100cb04:	d8c00217 	ldw	r3,8(sp)
 100cb08:	1705883a 	add	r2,r2,fp
 100cb0c:	d9c00317 	ldw	r7,12(sp)
 100cb10:	1808d43a 	srli	r4,r3,16
 100cb14:	da000417 	ldw	r8,16(sp)
 100cb18:	d9800517 	ldw	r6,20(sp)
 100cb1c:	2089883a 	add	r4,r4,r2
 100cb20:	94e5883a 	add	r18,r18,r19
 100cb24:	2700022e 	bgeu	r4,fp,100cb30 <__muldf3+0x420>
 100cb28:	00800074 	movhi	r2,1
 100cb2c:	88a3883a 	add	r17,r17,r2
 100cb30:	2004d43a 	srli	r2,r4,16
 100cb34:	2038943a 	slli	fp,r4,16
 100cb38:	18ffffcc 	andi	r3,r3,65535
 100cb3c:	b809883a 	mov	r4,r23
 100cb40:	a80b883a 	mov	r5,r21
 100cb44:	d9800415 	stw	r6,16(sp)
 100cb48:	da000315 	stw	r8,12(sp)
 100cb4c:	d9c00215 	stw	r7,8(sp)
 100cb50:	e0f9883a 	add	fp,fp,r3
 100cb54:	1463883a 	add	r17,r2,r17
 100cb58:	1000e300 	call	1000e30 <__mulsi3>
 100cb5c:	b80b883a 	mov	r5,r23
 100cb60:	b009883a 	mov	r4,r22
 100cb64:	102f883a 	mov	r23,r2
 100cb68:	1000e300 	call	1000e30 <__mulsi3>
 100cb6c:	b00b883a 	mov	r5,r22
 100cb70:	8009883a 	mov	r4,r16
 100cb74:	102d883a 	mov	r22,r2
 100cb78:	1000e300 	call	1000e30 <__mulsi3>
 100cb7c:	a80b883a 	mov	r5,r21
 100cb80:	8009883a 	mov	r4,r16
 100cb84:	1021883a 	mov	r16,r2
 100cb88:	1000e300 	call	1000e30 <__mulsi3>
 100cb8c:	b80ad43a 	srli	r5,r23,16
 100cb90:	1585883a 	add	r2,r2,r22
 100cb94:	d9c00217 	ldw	r7,8(sp)
 100cb98:	288b883a 	add	r5,r5,r2
 100cb9c:	da000317 	ldw	r8,12(sp)
 100cba0:	d9800417 	ldw	r6,16(sp)
 100cba4:	2d80022e 	bgeu	r5,r22,100cbb0 <__muldf3+0x4a0>
 100cba8:	00800074 	movhi	r2,1
 100cbac:	80a1883a 	add	r16,r16,r2
 100cbb0:	2806943a 	slli	r3,r5,16
 100cbb4:	d8800017 	ldw	r2,0(sp)
 100cbb8:	bdffffcc 	andi	r23,r23,65535
 100cbbc:	1dc7883a 	add	r3,r3,r23
 100cbc0:	90ab883a 	add	r21,r18,r2
 100cbc4:	acd5803a 	cmpltu	r10,r21,r19
 100cbc8:	1d07883a 	add	r3,r3,r20
 100cbcc:	af2b883a 	add	r21,r21,fp
 100cbd0:	1a97883a 	add	r11,r3,r10
 100cbd4:	af09803a 	cmpltu	r4,r21,fp
 100cbd8:	2826d43a 	srli	r19,r5,16
 100cbdc:	5c53883a 	add	r9,r11,r17
 100cbe0:	4905883a 	add	r2,r9,r4
 100cbe4:	1d29803a 	cmpltu	r20,r3,r20
 100cbe8:	5a95803a 	cmpltu	r10,r11,r10
 100cbec:	1109803a 	cmpltu	r4,r2,r4
 100cbf0:	a2a8b03a 	or	r20,r20,r10
 100cbf4:	4c63803a 	cmpltu	r17,r9,r17
 100cbf8:	a4e7883a 	add	r19,r20,r19
 100cbfc:	8908b03a 	or	r4,r17,r4
 100cc00:	a824927a 	slli	r18,r21,9
 100cc04:	d8c00117 	ldw	r3,4(sp)
 100cc08:	9927883a 	add	r19,r19,r4
 100cc0c:	9c27883a 	add	r19,r19,r16
 100cc10:	9826927a 	slli	r19,r19,9
 100cc14:	a82ad5fa 	srli	r21,r21,23
 100cc18:	100ad5fa 	srli	r5,r2,23
 100cc1c:	90e4b03a 	or	r18,r18,r3
 100cc20:	1004927a 	slli	r2,r2,9
 100cc24:	9024c03a 	cmpne	r18,r18,zero
 100cc28:	9564b03a 	or	r18,r18,r21
 100cc2c:	98c0402c 	andhi	r3,r19,256
 100cc30:	90a4b03a 	or	r18,r18,r2
 100cc34:	9966b03a 	or	r19,r19,r5
 100cc38:	18007f26 	beq	r3,zero,100ce38 <__muldf3+0x728>
 100cc3c:	9006d07a 	srli	r3,r18,1
 100cc40:	980497fa 	slli	r2,r19,31
 100cc44:	9480004c 	andi	r18,r18,1
 100cc48:	9826d07a 	srli	r19,r19,1
 100cc4c:	1c86b03a 	or	r3,r3,r18
 100cc50:	18a4b03a 	or	r18,r3,r2
 100cc54:	3900ffc4 	addi	r4,r7,1023
 100cc58:	0100320e 	bge	zero,r4,100cd24 <__muldf3+0x614>
 100cc5c:	908001cc 	andi	r2,r18,7
 100cc60:	10000726 	beq	r2,zero,100cc80 <__muldf3+0x570>
 100cc64:	908003cc 	andi	r2,r18,15
 100cc68:	10800120 	cmpeqi	r2,r2,4
 100cc6c:	1000041e 	bne	r2,zero,100cc80 <__muldf3+0x570>
 100cc70:	90800104 	addi	r2,r18,4
 100cc74:	14a5803a 	cmpltu	r18,r2,r18
 100cc78:	9ca7883a 	add	r19,r19,r18
 100cc7c:	1025883a 	mov	r18,r2
 100cc80:	9880402c 	andhi	r2,r19,256
 100cc84:	10000426 	beq	r2,zero,100cc98 <__muldf3+0x588>
 100cc88:	00bfc034 	movhi	r2,65280
 100cc8c:	10bfffc4 	addi	r2,r2,-1
 100cc90:	98a6703a 	and	r19,r19,r2
 100cc94:	39010004 	addi	r4,r7,1024
 100cc98:	2081ffc8 	cmpgei	r2,r4,2047
 100cc9c:	103f381e 	bne	r2,zero,100c980 <__muldf3+0x270>
 100cca0:	9804977a 	slli	r2,r19,29
 100cca4:	9024d0fa 	srli	r18,r18,3
 100cca8:	9826927a 	slli	r19,r19,9
 100ccac:	20c1ffcc 	andi	r3,r4,2047
 100ccb0:	14a4b03a 	or	r18,r2,r18
 100ccb4:	9826d33a 	srli	r19,r19,12
 100ccb8:	003ef106 	br	100c880 <__muldf3+0x170>
 100ccbc:	a00d883a 	mov	r6,r20
 100ccc0:	003ee606 	br	100c85c <__muldf3+0x14c>
 100ccc4:	ad4000d4 	ori	r21,r21,3
 100ccc8:	e023883a 	mov	r17,fp
 100cccc:	010000c4 	movi	r4,3
 100ccd0:	003ebe06 	br	100c7cc <__muldf3+0xbc>
 100ccd4:	ad400054 	ori	r21,r21,1
 100ccd8:	0021883a 	mov	r16,zero
 100ccdc:	01000044 	movi	r4,1
 100cce0:	003eba06 	br	100c7cc <__muldf3+0xbc>
 100cce4:	2025883a 	mov	r18,r4
 100cce8:	05400304 	movi	r21,12
 100ccec:	0201ffc4 	movi	r8,2047
 100ccf0:	058000c4 	movi	r22,3
 100ccf4:	003ea406 	br	100c788 <__muldf3+0x78>
 100ccf8:	0027883a 	mov	r19,zero
 100ccfc:	05400104 	movi	r21,4
 100cd00:	0011883a 	mov	r8,zero
 100cd04:	05800044 	movi	r22,1
 100cd08:	003e9f06 	br	100c788 <__muldf3+0x78>
 100cd0c:	04c00434 	movhi	r19,16
 100cd10:	000d883a 	mov	r6,zero
 100cd14:	9cffffc4 	addi	r19,r19,-1
 100cd18:	04bfffc4 	movi	r18,-1
 100cd1c:	00c1ffc4 	movi	r3,2047
 100cd20:	003ed706 	br	100c880 <__muldf3+0x170>
 100cd24:	00800044 	movi	r2,1
 100cd28:	1105c83a 	sub	r2,r2,r4
 100cd2c:	10c00e48 	cmpgei	r3,r2,57
 100cd30:	183ed01e 	bne	r3,zero,100c874 <__muldf3+0x164>
 100cd34:	10c00808 	cmpgei	r3,r2,32
 100cd38:	1800411e 	bne	r3,zero,100ce40 <__muldf3+0x730>
 100cd3c:	39c10784 	addi	r7,r7,1054
 100cd40:	99c6983a 	sll	r3,r19,r7
 100cd44:	9088d83a 	srl	r4,r18,r2
 100cd48:	91ce983a 	sll	r7,r18,r7
 100cd4c:	98a6d83a 	srl	r19,r19,r2
 100cd50:	1904b03a 	or	r2,r3,r4
 100cd54:	3824c03a 	cmpne	r18,r7,zero
 100cd58:	1484b03a 	or	r2,r2,r18
 100cd5c:	10c001cc 	andi	r3,r2,7
 100cd60:	18000726 	beq	r3,zero,100cd80 <__muldf3+0x670>
 100cd64:	10c003cc 	andi	r3,r2,15
 100cd68:	18c00120 	cmpeqi	r3,r3,4
 100cd6c:	1800041e 	bne	r3,zero,100cd80 <__muldf3+0x670>
 100cd70:	10c00104 	addi	r3,r2,4
 100cd74:	1885803a 	cmpltu	r2,r3,r2
 100cd78:	98a7883a 	add	r19,r19,r2
 100cd7c:	1805883a 	mov	r2,r3
 100cd80:	98c0202c 	andhi	r3,r19,128
 100cd84:	18004326 	beq	r3,zero,100ce94 <__muldf3+0x784>
 100cd88:	00c00044 	movi	r3,1
 100cd8c:	0027883a 	mov	r19,zero
 100cd90:	0025883a 	mov	r18,zero
 100cd94:	003eba06 	br	100c880 <__muldf3+0x170>
 100cd98:	9880022c 	andhi	r2,r19,8
 100cd9c:	10000926 	beq	r2,zero,100cdc4 <__muldf3+0x6b4>
 100cda0:	8080022c 	andhi	r2,r16,8
 100cda4:	1000071e 	bne	r2,zero,100cdc4 <__muldf3+0x6b4>
 100cda8:	00800434 	movhi	r2,16
 100cdac:	84c00234 	orhi	r19,r16,8
 100cdb0:	10bfffc4 	addi	r2,r2,-1
 100cdb4:	98a6703a 	and	r19,r19,r2
 100cdb8:	b80d883a 	mov	r6,r23
 100cdbc:	8825883a 	mov	r18,r17
 100cdc0:	003fd606 	br	100cd1c <__muldf3+0x60c>
 100cdc4:	00800434 	movhi	r2,16
 100cdc8:	9cc00234 	orhi	r19,r19,8
 100cdcc:	10bfffc4 	addi	r2,r2,-1
 100cdd0:	98a6703a 	and	r19,r19,r2
 100cdd4:	a00d883a 	mov	r6,r20
 100cdd8:	003fd006 	br	100cd1c <__muldf3+0x60c>
 100cddc:	e009883a 	mov	r4,fp
 100cde0:	100da0c0 	call	100da0c <__clzsi2>
 100cde4:	11400544 	addi	r5,r2,21
 100cde8:	29000748 	cmpgei	r4,r5,29
 100cdec:	1007883a 	mov	r3,r2
 100cdf0:	da000017 	ldw	r8,0(sp)
 100cdf4:	10800804 	addi	r2,r2,32
 100cdf8:	203ed626 	beq	r4,zero,100c954 <__muldf3+0x244>
 100cdfc:	1c3ffe04 	addi	r16,r3,-8
 100ce00:	e420983a 	sll	r16,fp,r16
 100ce04:	0023883a 	mov	r17,zero
 100ce08:	003ed906 	br	100c970 <__muldf3+0x260>
 100ce0c:	100da0c0 	call	100da0c <__clzsi2>
 100ce10:	11000544 	addi	r4,r2,21
 100ce14:	21400748 	cmpgei	r5,r4,29
 100ce18:	1007883a 	mov	r3,r2
 100ce1c:	d9c00017 	ldw	r7,0(sp)
 100ce20:	10800804 	addi	r2,r2,32
 100ce24:	283eb026 	beq	r5,zero,100c8e8 <__muldf3+0x1d8>
 100ce28:	1cfffe04 	addi	r19,r3,-8
 100ce2c:	8ce6983a 	sll	r19,r17,r19
 100ce30:	0025883a 	mov	r18,zero
 100ce34:	003eb306 	br	100c904 <__muldf3+0x1f4>
 100ce38:	400f883a 	mov	r7,r8
 100ce3c:	003f8506 	br	100cc54 <__muldf3+0x544>
 100ce40:	00fff844 	movi	r3,-31
 100ce44:	1907c83a 	sub	r3,r3,r4
 100ce48:	10800820 	cmpeqi	r2,r2,32
 100ce4c:	98c6d83a 	srl	r3,r19,r3
 100ce50:	1000031e 	bne	r2,zero,100ce60 <__muldf3+0x750>
 100ce54:	39c10f84 	addi	r7,r7,1086
 100ce58:	99e6983a 	sll	r19,r19,r7
 100ce5c:	94e4b03a 	or	r18,r18,r19
 100ce60:	9024c03a 	cmpne	r18,r18,zero
 100ce64:	90c4b03a 	or	r2,r18,r3
 100ce68:	148001cc 	andi	r18,r2,7
 100ce6c:	9000051e 	bne	r18,zero,100ce84 <__muldf3+0x774>
 100ce70:	0027883a 	mov	r19,zero
 100ce74:	1004d0fa 	srli	r2,r2,3
 100ce78:	0007883a 	mov	r3,zero
 100ce7c:	14a4b03a 	or	r18,r2,r18
 100ce80:	003e7f06 	br	100c880 <__muldf3+0x170>
 100ce84:	10c003cc 	andi	r3,r2,15
 100ce88:	18c00118 	cmpnei	r3,r3,4
 100ce8c:	0027883a 	mov	r19,zero
 100ce90:	183fb71e 	bne	r3,zero,100cd70 <__muldf3+0x660>
 100ce94:	9806927a 	slli	r3,r19,9
 100ce98:	9824977a 	slli	r18,r19,29
 100ce9c:	1826d33a 	srli	r19,r3,12
 100cea0:	003ff406 	br	100ce74 <__muldf3+0x764>
 100cea4:	00800434 	movhi	r2,16
 100cea8:	9cc00234 	orhi	r19,r19,8
 100ceac:	10bfffc4 	addi	r2,r2,-1
 100ceb0:	98a6703a 	and	r19,r19,r2
 100ceb4:	003f9906 	br	100cd1c <__muldf3+0x60c>

0100ceb8 <__subdf3>:
 100ceb8:	00c00434 	movhi	r3,16
 100cebc:	3812d53a 	srli	r9,r7,20
 100cec0:	18ffffc4 	addi	r3,r3,-1
 100cec4:	defffb04 	addi	sp,sp,-20
 100cec8:	28d0703a 	and	r8,r5,r3
 100cecc:	38c6703a 	and	r3,r7,r3
 100ced0:	2804d7fa 	srli	r2,r5,31
 100ced4:	401090fa 	slli	r8,r8,3
 100ced8:	280ad53a 	srli	r5,r5,20
 100cedc:	180690fa 	slli	r3,r3,3
 100cee0:	dcc00315 	stw	r19,12(sp)
 100cee4:	dc400115 	stw	r17,4(sp)
 100cee8:	2026d77a 	srli	r19,r4,29
 100ceec:	3022d77a 	srli	r17,r6,29
 100cef0:	4b41ffcc 	andi	r13,r9,2047
 100cef4:	dc800215 	stw	r18,8(sp)
 100cef8:	dc000015 	stw	r16,0(sp)
 100cefc:	dfc00415 	stw	ra,16(sp)
 100cf00:	6a41ffe0 	cmpeqi	r9,r13,2047
 100cf04:	1025883a 	mov	r18,r2
 100cf08:	201690fa 	slli	r11,r4,3
 100cf0c:	380ed7fa 	srli	r7,r7,31
 100cf10:	301490fa 	slli	r10,r6,3
 100cf14:	2c01ffcc 	andi	r16,r5,2047
 100cf18:	10803fcc 	andi	r2,r2,255
 100cf1c:	9a10b03a 	or	r8,r19,r8
 100cf20:	88c6b03a 	or	r3,r17,r3
 100cf24:	48006e1e 	bne	r9,zero,100d0e0 <__subdf3+0x228>
 100cf28:	3a40005c 	xori	r9,r7,1
 100cf2c:	834bc83a 	sub	r5,r16,r13
 100cf30:	12405726 	beq	r2,r9,100d090 <__subdf3+0x1d8>
 100cf34:	01406f0e 	bge	zero,r5,100d0f4 <__subdf3+0x23c>
 100cf38:	68007a26 	beq	r13,zero,100d124 <__subdf3+0x26c>
 100cf3c:	8081ffd8 	cmpnei	r2,r16,2047
 100cf40:	10019f26 	beq	r2,zero,100d5c0 <__subdf3+0x708>
 100cf44:	18c02034 	orhi	r3,r3,128
 100cf48:	28800e48 	cmpgei	r2,r5,57
 100cf4c:	1000f91e 	bne	r2,zero,100d334 <__subdf3+0x47c>
 100cf50:	28800808 	cmpgei	r2,r5,32
 100cf54:	1001451e 	bne	r2,zero,100d46c <__subdf3+0x5b4>
 100cf58:	00800804 	movi	r2,32
 100cf5c:	1145c83a 	sub	r2,r2,r5
 100cf60:	18a2983a 	sll	r17,r3,r2
 100cf64:	5148d83a 	srl	r4,r10,r5
 100cf68:	5084983a 	sll	r2,r10,r2
 100cf6c:	1946d83a 	srl	r3,r3,r5
 100cf70:	8922b03a 	or	r17,r17,r4
 100cf74:	1004c03a 	cmpne	r2,r2,zero
 100cf78:	88a2b03a 	or	r17,r17,r2
 100cf7c:	40d1c83a 	sub	r8,r8,r3
 100cf80:	5c63c83a 	sub	r17,r11,r17
 100cf84:	5c49803a 	cmpltu	r4,r11,r17
 100cf88:	4109c83a 	sub	r4,r8,r4
 100cf8c:	2080202c 	andhi	r2,r4,128
 100cf90:	1000a526 	beq	r2,zero,100d228 <__subdf3+0x370>
 100cf94:	04c02034 	movhi	r19,128
 100cf98:	9cffffc4 	addi	r19,r19,-1
 100cf9c:	24e6703a 	and	r19,r4,r19
 100cfa0:	9800db26 	beq	r19,zero,100d310 <__subdf3+0x458>
 100cfa4:	9809883a 	mov	r4,r19
 100cfa8:	100da0c0 	call	100da0c <__clzsi2>
 100cfac:	117ffe04 	addi	r5,r2,-8
 100cfb0:	01000804 	movi	r4,32
 100cfb4:	2149c83a 	sub	r4,r4,r5
 100cfb8:	8906d83a 	srl	r3,r17,r4
 100cfbc:	9948983a 	sll	r4,r19,r5
 100cfc0:	8962983a 	sll	r17,r17,r5
 100cfc4:	1908b03a 	or	r4,r3,r4
 100cfc8:	2c00cc16 	blt	r5,r16,100d2fc <__subdf3+0x444>
 100cfcc:	2c0bc83a 	sub	r5,r5,r16
 100cfd0:	28c00044 	addi	r3,r5,1
 100cfd4:	18800808 	cmpgei	r2,r3,32
 100cfd8:	1001171e 	bne	r2,zero,100d438 <__subdf3+0x580>
 100cfdc:	00800804 	movi	r2,32
 100cfe0:	10c5c83a 	sub	r2,r2,r3
 100cfe4:	88cad83a 	srl	r5,r17,r3
 100cfe8:	88a2983a 	sll	r17,r17,r2
 100cfec:	2084983a 	sll	r2,r4,r2
 100cff0:	20c8d83a 	srl	r4,r4,r3
 100cff4:	8822c03a 	cmpne	r17,r17,zero
 100cff8:	1144b03a 	or	r2,r2,r5
 100cffc:	1462b03a 	or	r17,r2,r17
 100d000:	0021883a 	mov	r16,zero
 100d004:	888001cc 	andi	r2,r17,7
 100d008:	10000726 	beq	r2,zero,100d028 <__subdf3+0x170>
 100d00c:	888003cc 	andi	r2,r17,15
 100d010:	10800120 	cmpeqi	r2,r2,4
 100d014:	1000041e 	bne	r2,zero,100d028 <__subdf3+0x170>
 100d018:	88c00104 	addi	r3,r17,4
 100d01c:	1c63803a 	cmpltu	r17,r3,r17
 100d020:	2449883a 	add	r4,r4,r17
 100d024:	1823883a 	mov	r17,r3
 100d028:	2080202c 	andhi	r2,r4,128
 100d02c:	10008026 	beq	r2,zero,100d230 <__subdf3+0x378>
 100d030:	81400044 	addi	r5,r16,1
 100d034:	2881ffe0 	cmpeqi	r2,r5,2047
 100d038:	2941ffcc 	andi	r5,r5,2047
 100d03c:	1000921e 	bne	r2,zero,100d288 <__subdf3+0x3d0>
 100d040:	00bfe034 	movhi	r2,65408
 100d044:	10bfffc4 	addi	r2,r2,-1
 100d048:	2088703a 	and	r4,r4,r2
 100d04c:	2006927a 	slli	r3,r4,9
 100d050:	8822d0fa 	srli	r17,r17,3
 100d054:	2004977a 	slli	r2,r4,29
 100d058:	1806d33a 	srli	r3,r3,12
 100d05c:	1444b03a 	or	r2,r2,r17
 100d060:	280a953a 	slli	r5,r5,20
 100d064:	94803fcc 	andi	r18,r18,255
 100d068:	902497fa 	slli	r18,r18,31
 100d06c:	28c6b03a 	or	r3,r5,r3
 100d070:	1c86b03a 	or	r3,r3,r18
 100d074:	dfc00417 	ldw	ra,16(sp)
 100d078:	dcc00317 	ldw	r19,12(sp)
 100d07c:	dc800217 	ldw	r18,8(sp)
 100d080:	dc400117 	ldw	r17,4(sp)
 100d084:	dc000017 	ldw	r16,0(sp)
 100d088:	dec00504 	addi	sp,sp,20
 100d08c:	f800283a 	ret
 100d090:	01402e0e 	bge	zero,r5,100d14c <__subdf3+0x294>
 100d094:	68005526 	beq	r13,zero,100d1ec <__subdf3+0x334>
 100d098:	8081ffd8 	cmpnei	r2,r16,2047
 100d09c:	10013b26 	beq	r2,zero,100d58c <__subdf3+0x6d4>
 100d0a0:	18c02034 	orhi	r3,r3,128
 100d0a4:	28800e48 	cmpgei	r2,r5,57
 100d0a8:	10006d1e 	bne	r2,zero,100d260 <__subdf3+0x3a8>
 100d0ac:	28800808 	cmpgei	r2,r5,32
 100d0b0:	10010826 	beq	r2,zero,100d4d4 <__subdf3+0x61c>
 100d0b4:	2c7ff804 	addi	r17,r5,-32
 100d0b8:	29000820 	cmpeqi	r4,r5,32
 100d0bc:	1c44d83a 	srl	r2,r3,r17
 100d0c0:	2000041e 	bne	r4,zero,100d0d4 <__subdf3+0x21c>
 100d0c4:	01001004 	movi	r4,64
 100d0c8:	214bc83a 	sub	r5,r4,r5
 100d0cc:	1946983a 	sll	r3,r3,r5
 100d0d0:	50d4b03a 	or	r10,r10,r3
 100d0d4:	5022c03a 	cmpne	r17,r10,zero
 100d0d8:	88a2b03a 	or	r17,r17,r2
 100d0dc:	00006206 	br	100d268 <__subdf3+0x3b0>
 100d0e0:	1a98b03a 	or	r12,r3,r10
 100d0e4:	817e0044 	addi	r5,r16,-2047
 100d0e8:	6000161e 	bne	r12,zero,100d144 <__subdf3+0x28c>
 100d0ec:	3a40005c 	xori	r9,r7,1
 100d0f0:	12401626 	beq	r2,r9,100d14c <__subdf3+0x294>
 100d0f4:	28002e26 	beq	r5,zero,100d1b0 <__subdf3+0x2f8>
 100d0f8:	6c0bc83a 	sub	r5,r13,r16
 100d0fc:	4825883a 	mov	r18,r9
 100d100:	80009e1e 	bne	r16,zero,100d37c <__subdf3+0x4c4>
 100d104:	42c4b03a 	or	r2,r8,r11
 100d108:	10010926 	beq	r2,zero,100d530 <__subdf3+0x678>
 100d10c:	28bfffc4 	addi	r2,r5,-1
 100d110:	10016826 	beq	r2,zero,100d6b4 <__subdf3+0x7fc>
 100d114:	2941ffd8 	cmpnei	r5,r5,2047
 100d118:	28015f26 	beq	r5,zero,100d698 <__subdf3+0x7e0>
 100d11c:	100b883a 	mov	r5,r2
 100d120:	00009906 	br	100d388 <__subdf3+0x4d0>
 100d124:	1a84b03a 	or	r2,r3,r10
 100d128:	1000b126 	beq	r2,zero,100d3f0 <__subdf3+0x538>
 100d12c:	28bfffc4 	addi	r2,r5,-1
 100d130:	10011d26 	beq	r2,zero,100d5a8 <__subdf3+0x6f0>
 100d134:	2941ffd8 	cmpnei	r5,r5,2047
 100d138:	28011426 	beq	r5,zero,100d58c <__subdf3+0x6d4>
 100d13c:	100b883a 	mov	r5,r2
 100d140:	003f8106 	br	100cf48 <__subdf3+0x90>
 100d144:	3a403fcc 	andi	r9,r7,255
 100d148:	11ffea1e 	bne	r2,r7,100d0f4 <__subdf3+0x23c>
 100d14c:	28007c26 	beq	r5,zero,100d340 <__subdf3+0x488>
 100d150:	6c0bc83a 	sub	r5,r13,r16
 100d154:	8000d726 	beq	r16,zero,100d4b4 <__subdf3+0x5fc>
 100d158:	6881ffd8 	cmpnei	r2,r13,2047
 100d15c:	10012626 	beq	r2,zero,100d5f8 <__subdf3+0x740>
 100d160:	42002034 	orhi	r8,r8,128
 100d164:	28800e48 	cmpgei	r2,r5,57
 100d168:	10012a1e 	bne	r2,zero,100d614 <__subdf3+0x75c>
 100d16c:	28800808 	cmpgei	r2,r5,32
 100d170:	1001821e 	bne	r2,zero,100d77c <__subdf3+0x8c4>
 100d174:	00800804 	movi	r2,32
 100d178:	1145c83a 	sub	r2,r2,r5
 100d17c:	40a2983a 	sll	r17,r8,r2
 100d180:	5948d83a 	srl	r4,r11,r5
 100d184:	5884983a 	sll	r2,r11,r2
 100d188:	4150d83a 	srl	r8,r8,r5
 100d18c:	8922b03a 	or	r17,r17,r4
 100d190:	1004c03a 	cmpne	r2,r2,zero
 100d194:	88a2b03a 	or	r17,r17,r2
 100d198:	1a07883a 	add	r3,r3,r8
 100d19c:	8aa3883a 	add	r17,r17,r10
 100d1a0:	8a89803a 	cmpltu	r4,r17,r10
 100d1a4:	20c9883a 	add	r4,r4,r3
 100d1a8:	6821883a 	mov	r16,r13
 100d1ac:	00003106 	br	100d274 <__subdf3+0x3bc>
 100d1b0:	80800044 	addi	r2,r16,1
 100d1b4:	1081ff8c 	andi	r2,r2,2046
 100d1b8:	1000821e 	bne	r2,zero,100d3c4 <__subdf3+0x50c>
 100d1bc:	42ceb03a 	or	r7,r8,r11
 100d1c0:	1a84b03a 	or	r2,r3,r10
 100d1c4:	8000e11e 	bne	r16,zero,100d54c <__subdf3+0x694>
 100d1c8:	38012a26 	beq	r7,zero,100d674 <__subdf3+0x7bc>
 100d1cc:	1001461e 	bne	r2,zero,100d6e8 <__subdf3+0x830>
 100d1d0:	4004977a 	slli	r2,r8,29
 100d1d4:	00c80034 	movhi	r3,8192
 100d1d8:	18ffffc4 	addi	r3,r3,-1
 100d1dc:	20c8703a 	and	r4,r4,r3
 100d1e0:	4010d0fa 	srli	r8,r8,3
 100d1e4:	1104b03a 	or	r2,r2,r4
 100d1e8:	00001806 	br	100d24c <__subdf3+0x394>
 100d1ec:	1a84b03a 	or	r2,r3,r10
 100d1f0:	1000fa26 	beq	r2,zero,100d5dc <__subdf3+0x724>
 100d1f4:	28bfffc4 	addi	r2,r5,-1
 100d1f8:	10000426 	beq	r2,zero,100d20c <__subdf3+0x354>
 100d1fc:	2941ffd8 	cmpnei	r5,r5,2047
 100d200:	28013226 	beq	r5,zero,100d6cc <__subdf3+0x814>
 100d204:	100b883a 	mov	r5,r2
 100d208:	003fa606 	br	100d0a4 <__subdf3+0x1ec>
 100d20c:	5aa3883a 	add	r17,r11,r10
 100d210:	40c9883a 	add	r4,r8,r3
 100d214:	8ad7803a 	cmpltu	r11,r17,r11
 100d218:	22c9883a 	add	r4,r4,r11
 100d21c:	2080202c 	andhi	r2,r4,128
 100d220:	10007a1e 	bne	r2,zero,100d40c <__subdf3+0x554>
 100d224:	04000044 	movi	r16,1
 100d228:	888001cc 	andi	r2,r17,7
 100d22c:	103f771e 	bne	r2,zero,100d00c <__subdf3+0x154>
 100d230:	8822d0fa 	srli	r17,r17,3
 100d234:	2004977a 	slli	r2,r4,29
 100d238:	2010d0fa 	srli	r8,r4,3
 100d23c:	800b883a 	mov	r5,r16
 100d240:	8884b03a 	or	r2,r17,r2
 100d244:	28c1ffe0 	cmpeqi	r3,r5,2047
 100d248:	1800241e 	bne	r3,zero,100d2dc <__subdf3+0x424>
 100d24c:	00c00434 	movhi	r3,16
 100d250:	18ffffc4 	addi	r3,r3,-1
 100d254:	40c6703a 	and	r3,r8,r3
 100d258:	2941ffcc 	andi	r5,r5,2047
 100d25c:	003f8006 	br	100d060 <__subdf3+0x1a8>
 100d260:	1aa2b03a 	or	r17,r3,r10
 100d264:	8822c03a 	cmpne	r17,r17,zero
 100d268:	8ae3883a 	add	r17,r17,r11
 100d26c:	8ac9803a 	cmpltu	r4,r17,r11
 100d270:	2209883a 	add	r4,r4,r8
 100d274:	2080202c 	andhi	r2,r4,128
 100d278:	103feb26 	beq	r2,zero,100d228 <__subdf3+0x370>
 100d27c:	84000044 	addi	r16,r16,1
 100d280:	8081ffe0 	cmpeqi	r2,r16,2047
 100d284:	10006226 	beq	r2,zero,100d410 <__subdf3+0x558>
 100d288:	0141ffc4 	movi	r5,2047
 100d28c:	0007883a 	mov	r3,zero
 100d290:	0005883a 	mov	r2,zero
 100d294:	003f7206 	br	100d060 <__subdf3+0x1a8>
 100d298:	400e977a 	slli	r7,r8,29
 100d29c:	4010d0fa 	srli	r8,r8,3
 100d2a0:	1000ef26 	beq	r2,zero,100d660 <__subdf3+0x7a8>
 100d2a4:	01480034 	movhi	r5,8192
 100d2a8:	297fffc4 	addi	r5,r5,-1
 100d2ac:	2144703a 	and	r2,r4,r5
 100d2b0:	4100022c 	andhi	r4,r8,8
 100d2b4:	11c4b03a 	or	r2,r2,r7
 100d2b8:	20000826 	beq	r4,zero,100d2dc <__subdf3+0x424>
 100d2bc:	1808d0fa 	srli	r4,r3,3
 100d2c0:	21c0022c 	andhi	r7,r4,8
 100d2c4:	3800051e 	bne	r7,zero,100d2dc <__subdf3+0x424>
 100d2c8:	1804977a 	slli	r2,r3,29
 100d2cc:	314c703a 	and	r6,r6,r5
 100d2d0:	4825883a 	mov	r18,r9
 100d2d4:	3084b03a 	or	r2,r6,r2
 100d2d8:	2011883a 	mov	r8,r4
 100d2dc:	1206b03a 	or	r3,r2,r8
 100d2e0:	18013e26 	beq	r3,zero,100d7dc <__subdf3+0x924>
 100d2e4:	01000434 	movhi	r4,16
 100d2e8:	40c00234 	orhi	r3,r8,8
 100d2ec:	213fffc4 	addi	r4,r4,-1
 100d2f0:	1906703a 	and	r3,r3,r4
 100d2f4:	0141ffc4 	movi	r5,2047
 100d2f8:	003f5906 	br	100d060 <__subdf3+0x1a8>
 100d2fc:	00ffe034 	movhi	r3,65408
 100d300:	18ffffc4 	addi	r3,r3,-1
 100d304:	8161c83a 	sub	r16,r16,r5
 100d308:	20c8703a 	and	r4,r4,r3
 100d30c:	003f3d06 	br	100d004 <__subdf3+0x14c>
 100d310:	8809883a 	mov	r4,r17
 100d314:	100da0c0 	call	100da0c <__clzsi2>
 100d318:	11400604 	addi	r5,r2,24
 100d31c:	28c00808 	cmpgei	r3,r5,32
 100d320:	183f2326 	beq	r3,zero,100cfb0 <__subdf3+0xf8>
 100d324:	113ffe04 	addi	r4,r2,-8
 100d328:	8908983a 	sll	r4,r17,r4
 100d32c:	0023883a 	mov	r17,zero
 100d330:	003f2506 	br	100cfc8 <__subdf3+0x110>
 100d334:	1aa2b03a 	or	r17,r3,r10
 100d338:	8822c03a 	cmpne	r17,r17,zero
 100d33c:	003f1006 	br	100cf80 <__subdf3+0xc8>
 100d340:	80800044 	addi	r2,r16,1
 100d344:	11c1ff8c 	andi	r7,r2,2046
 100d348:	38006d1e 	bne	r7,zero,100d500 <__subdf3+0x648>
 100d34c:	42c4b03a 	or	r2,r8,r11
 100d350:	8000be1e 	bne	r16,zero,100d64c <__subdf3+0x794>
 100d354:	1000f726 	beq	r2,zero,100d734 <__subdf3+0x87c>
 100d358:	1a84b03a 	or	r2,r3,r10
 100d35c:	1000fc1e 	bne	r2,zero,100d750 <__subdf3+0x898>
 100d360:	4006977a 	slli	r3,r8,29
 100d364:	00880034 	movhi	r2,8192
 100d368:	10bfffc4 	addi	r2,r2,-1
 100d36c:	2084703a 	and	r2,r4,r2
 100d370:	4010d0fa 	srli	r8,r8,3
 100d374:	10c4b03a 	or	r2,r2,r3
 100d378:	003fb406 	br	100d24c <__subdf3+0x394>
 100d37c:	6881ffd8 	cmpnei	r2,r13,2047
 100d380:	10009d26 	beq	r2,zero,100d5f8 <__subdf3+0x740>
 100d384:	42002034 	orhi	r8,r8,128
 100d388:	28800e48 	cmpgei	r2,r5,57
 100d38c:	1000421e 	bne	r2,zero,100d498 <__subdf3+0x5e0>
 100d390:	28800808 	cmpgei	r2,r5,32
 100d394:	1000a21e 	bne	r2,zero,100d620 <__subdf3+0x768>
 100d398:	00800804 	movi	r2,32
 100d39c:	1145c83a 	sub	r2,r2,r5
 100d3a0:	40a2983a 	sll	r17,r8,r2
 100d3a4:	5948d83a 	srl	r4,r11,r5
 100d3a8:	5896983a 	sll	r11,r11,r2
 100d3ac:	4150d83a 	srl	r8,r8,r5
 100d3b0:	8922b03a 	or	r17,r17,r4
 100d3b4:	5816c03a 	cmpne	r11,r11,zero
 100d3b8:	8ae2b03a 	or	r17,r17,r11
 100d3bc:	1a07c83a 	sub	r3,r3,r8
 100d3c0:	00003706 	br	100d4a0 <__subdf3+0x5e8>
 100d3c4:	5aa3c83a 	sub	r17,r11,r10
 100d3c8:	40e7c83a 	sub	r19,r8,r3
 100d3cc:	5c49803a 	cmpltu	r4,r11,r17
 100d3d0:	9927c83a 	sub	r19,r19,r4
 100d3d4:	9880202c 	andhi	r2,r19,128
 100d3d8:	1000661e 	bne	r2,zero,100d574 <__subdf3+0x6bc>
 100d3dc:	8cc4b03a 	or	r2,r17,r19
 100d3e0:	103eef1e 	bne	r2,zero,100cfa0 <__subdf3+0xe8>
 100d3e4:	0011883a 	mov	r8,zero
 100d3e8:	0025883a 	mov	r18,zero
 100d3ec:	003f9706 	br	100d24c <__subdf3+0x394>
 100d3f0:	4022977a 	slli	r17,r8,29
 100d3f4:	00880034 	movhi	r2,8192
 100d3f8:	10bfffc4 	addi	r2,r2,-1
 100d3fc:	2088703a 	and	r4,r4,r2
 100d400:	4010d0fa 	srli	r8,r8,3
 100d404:	2444b03a 	or	r2,r4,r17
 100d408:	003f8e06 	br	100d244 <__subdf3+0x38c>
 100d40c:	04000084 	movi	r16,2
 100d410:	00bfe034 	movhi	r2,65408
 100d414:	10bfffc4 	addi	r2,r2,-1
 100d418:	8806d07a 	srli	r3,r17,1
 100d41c:	2088703a 	and	r4,r4,r2
 100d420:	200497fa 	slli	r2,r4,31
 100d424:	8c40004c 	andi	r17,r17,1
 100d428:	1c62b03a 	or	r17,r3,r17
 100d42c:	2008d07a 	srli	r4,r4,1
 100d430:	1462b03a 	or	r17,r2,r17
 100d434:	003ef306 	br	100d004 <__subdf3+0x14c>
 100d438:	297ff844 	addi	r5,r5,-31
 100d43c:	18800820 	cmpeqi	r2,r3,32
 100d440:	214ad83a 	srl	r5,r4,r5
 100d444:	1000041e 	bne	r2,zero,100d458 <__subdf3+0x5a0>
 100d448:	00801004 	movi	r2,64
 100d44c:	10c7c83a 	sub	r3,r2,r3
 100d450:	20c8983a 	sll	r4,r4,r3
 100d454:	8922b03a 	or	r17,r17,r4
 100d458:	8822c03a 	cmpne	r17,r17,zero
 100d45c:	8962b03a 	or	r17,r17,r5
 100d460:	0009883a 	mov	r4,zero
 100d464:	0021883a 	mov	r16,zero
 100d468:	003f6f06 	br	100d228 <__subdf3+0x370>
 100d46c:	2c7ff804 	addi	r17,r5,-32
 100d470:	29000820 	cmpeqi	r4,r5,32
 100d474:	1c44d83a 	srl	r2,r3,r17
 100d478:	2000041e 	bne	r4,zero,100d48c <__subdf3+0x5d4>
 100d47c:	01001004 	movi	r4,64
 100d480:	214bc83a 	sub	r5,r4,r5
 100d484:	1946983a 	sll	r3,r3,r5
 100d488:	50d4b03a 	or	r10,r10,r3
 100d48c:	5022c03a 	cmpne	r17,r10,zero
 100d490:	88a2b03a 	or	r17,r17,r2
 100d494:	003eba06 	br	100cf80 <__subdf3+0xc8>
 100d498:	42d0b03a 	or	r8,r8,r11
 100d49c:	4022c03a 	cmpne	r17,r8,zero
 100d4a0:	5463c83a 	sub	r17,r10,r17
 100d4a4:	5449803a 	cmpltu	r4,r10,r17
 100d4a8:	1909c83a 	sub	r4,r3,r4
 100d4ac:	6821883a 	mov	r16,r13
 100d4b0:	003eb606 	br	100cf8c <__subdf3+0xd4>
 100d4b4:	42c4b03a 	or	r2,r8,r11
 100d4b8:	10009726 	beq	r2,zero,100d718 <__subdf3+0x860>
 100d4bc:	28bfffc4 	addi	r2,r5,-1
 100d4c0:	1000b926 	beq	r2,zero,100d7a8 <__subdf3+0x8f0>
 100d4c4:	2941ffd8 	cmpnei	r5,r5,2047
 100d4c8:	28007326 	beq	r5,zero,100d698 <__subdf3+0x7e0>
 100d4cc:	100b883a 	mov	r5,r2
 100d4d0:	003f2406 	br	100d164 <__subdf3+0x2ac>
 100d4d4:	00800804 	movi	r2,32
 100d4d8:	1145c83a 	sub	r2,r2,r5
 100d4dc:	18a2983a 	sll	r17,r3,r2
 100d4e0:	5148d83a 	srl	r4,r10,r5
 100d4e4:	5084983a 	sll	r2,r10,r2
 100d4e8:	1946d83a 	srl	r3,r3,r5
 100d4ec:	8922b03a 	or	r17,r17,r4
 100d4f0:	1004c03a 	cmpne	r2,r2,zero
 100d4f4:	88a2b03a 	or	r17,r17,r2
 100d4f8:	40d1883a 	add	r8,r8,r3
 100d4fc:	003f5a06 	br	100d268 <__subdf3+0x3b0>
 100d500:	1101ffe0 	cmpeqi	r4,r2,2047
 100d504:	203f601e 	bne	r4,zero,100d288 <__subdf3+0x3d0>
 100d508:	5a95883a 	add	r10,r11,r10
 100d50c:	52d7803a 	cmpltu	r11,r10,r11
 100d510:	40c9883a 	add	r4,r8,r3
 100d514:	22c9883a 	add	r4,r4,r11
 100d518:	202297fa 	slli	r17,r4,31
 100d51c:	5014d07a 	srli	r10,r10,1
 100d520:	2008d07a 	srli	r4,r4,1
 100d524:	1021883a 	mov	r16,r2
 100d528:	8aa2b03a 	or	r17,r17,r10
 100d52c:	003f3e06 	br	100d228 <__subdf3+0x370>
 100d530:	1808977a 	slli	r4,r3,29
 100d534:	00880034 	movhi	r2,8192
 100d538:	10bfffc4 	addi	r2,r2,-1
 100d53c:	308c703a 	and	r6,r6,r2
 100d540:	1810d0fa 	srli	r8,r3,3
 100d544:	3104b03a 	or	r2,r6,r4
 100d548:	003f3e06 	br	100d244 <__subdf3+0x38c>
 100d54c:	383f521e 	bne	r7,zero,100d298 <__subdf3+0x3e0>
 100d550:	10009d26 	beq	r2,zero,100d7c8 <__subdf3+0x910>
 100d554:	1808977a 	slli	r4,r3,29
 100d558:	00880034 	movhi	r2,8192
 100d55c:	10bfffc4 	addi	r2,r2,-1
 100d560:	3084703a 	and	r2,r6,r2
 100d564:	1810d0fa 	srli	r8,r3,3
 100d568:	1104b03a 	or	r2,r2,r4
 100d56c:	4825883a 	mov	r18,r9
 100d570:	003f5a06 	br	100d2dc <__subdf3+0x424>
 100d574:	52e3c83a 	sub	r17,r10,r11
 100d578:	1a09c83a 	sub	r4,r3,r8
 100d57c:	5467803a 	cmpltu	r19,r10,r17
 100d580:	24e7c83a 	sub	r19,r4,r19
 100d584:	4825883a 	mov	r18,r9
 100d588:	003e8506 	br	100cfa0 <__subdf3+0xe8>
 100d58c:	4022977a 	slli	r17,r8,29
 100d590:	00880034 	movhi	r2,8192
 100d594:	10bfffc4 	addi	r2,r2,-1
 100d598:	2088703a 	and	r4,r4,r2
 100d59c:	4010d0fa 	srli	r8,r8,3
 100d5a0:	2444b03a 	or	r2,r4,r17
 100d5a4:	003f4d06 	br	100d2dc <__subdf3+0x424>
 100d5a8:	5aa3c83a 	sub	r17,r11,r10
 100d5ac:	40c9c83a 	sub	r4,r8,r3
 100d5b0:	5c57803a 	cmpltu	r11,r11,r17
 100d5b4:	22c9c83a 	sub	r4,r4,r11
 100d5b8:	04000044 	movi	r16,1
 100d5bc:	003e7306 	br	100cf8c <__subdf3+0xd4>
 100d5c0:	4004977a 	slli	r2,r8,29
 100d5c4:	00c80034 	movhi	r3,8192
 100d5c8:	18ffffc4 	addi	r3,r3,-1
 100d5cc:	20c8703a 	and	r4,r4,r3
 100d5d0:	4010d0fa 	srli	r8,r8,3
 100d5d4:	1104b03a 	or	r2,r2,r4
 100d5d8:	003f4006 	br	100d2dc <__subdf3+0x424>
 100d5dc:	4004977a 	slli	r2,r8,29
 100d5e0:	00c80034 	movhi	r3,8192
 100d5e4:	18ffffc4 	addi	r3,r3,-1
 100d5e8:	20c8703a 	and	r4,r4,r3
 100d5ec:	4010d0fa 	srli	r8,r8,3
 100d5f0:	1104b03a 	or	r2,r2,r4
 100d5f4:	003f1306 	br	100d244 <__subdf3+0x38c>
 100d5f8:	1804977a 	slli	r2,r3,29
 100d5fc:	01080034 	movhi	r4,8192
 100d600:	213fffc4 	addi	r4,r4,-1
 100d604:	310c703a 	and	r6,r6,r4
 100d608:	1810d0fa 	srli	r8,r3,3
 100d60c:	1184b03a 	or	r2,r2,r6
 100d610:	003f3206 	br	100d2dc <__subdf3+0x424>
 100d614:	42d0b03a 	or	r8,r8,r11
 100d618:	4022c03a 	cmpne	r17,r8,zero
 100d61c:	003edf06 	br	100d19c <__subdf3+0x2e4>
 100d620:	2c7ff804 	addi	r17,r5,-32
 100d624:	29000820 	cmpeqi	r4,r5,32
 100d628:	4444d83a 	srl	r2,r8,r17
 100d62c:	2000041e 	bne	r4,zero,100d640 <__subdf3+0x788>
 100d630:	01001004 	movi	r4,64
 100d634:	214bc83a 	sub	r5,r4,r5
 100d638:	4150983a 	sll	r8,r8,r5
 100d63c:	5a16b03a 	or	r11,r11,r8
 100d640:	5822c03a 	cmpne	r17,r11,zero
 100d644:	88a2b03a 	or	r17,r17,r2
 100d648:	003f9506 	br	100d4a0 <__subdf3+0x5e8>
 100d64c:	103fea26 	beq	r2,zero,100d5f8 <__subdf3+0x740>
 100d650:	1a94b03a 	or	r10,r3,r10
 100d654:	400e977a 	slli	r7,r8,29
 100d658:	4010d0fa 	srli	r8,r8,3
 100d65c:	503f111e 	bne	r10,zero,100d2a4 <__subdf3+0x3ec>
 100d660:	00880034 	movhi	r2,8192
 100d664:	10bfffc4 	addi	r2,r2,-1
 100d668:	2084703a 	and	r2,r4,r2
 100d66c:	11c4b03a 	or	r2,r2,r7
 100d670:	003f1a06 	br	100d2dc <__subdf3+0x424>
 100d674:	103f5b26 	beq	r2,zero,100d3e4 <__subdf3+0x52c>
 100d678:	1804977a 	slli	r2,r3,29
 100d67c:	01080034 	movhi	r4,8192
 100d680:	213fffc4 	addi	r4,r4,-1
 100d684:	310c703a 	and	r6,r6,r4
 100d688:	1810d0fa 	srli	r8,r3,3
 100d68c:	1184b03a 	or	r2,r2,r6
 100d690:	4825883a 	mov	r18,r9
 100d694:	003eed06 	br	100d24c <__subdf3+0x394>
 100d698:	1808977a 	slli	r4,r3,29
 100d69c:	00880034 	movhi	r2,8192
 100d6a0:	10bfffc4 	addi	r2,r2,-1
 100d6a4:	3084703a 	and	r2,r6,r2
 100d6a8:	1810d0fa 	srli	r8,r3,3
 100d6ac:	1104b03a 	or	r2,r2,r4
 100d6b0:	003f0a06 	br	100d2dc <__subdf3+0x424>
 100d6b4:	52e3c83a 	sub	r17,r10,r11
 100d6b8:	1a09c83a 	sub	r4,r3,r8
 100d6bc:	5455803a 	cmpltu	r10,r10,r17
 100d6c0:	2289c83a 	sub	r4,r4,r10
 100d6c4:	04000044 	movi	r16,1
 100d6c8:	003e3006 	br	100cf8c <__subdf3+0xd4>
 100d6cc:	4006977a 	slli	r3,r8,29
 100d6d0:	00880034 	movhi	r2,8192
 100d6d4:	10bfffc4 	addi	r2,r2,-1
 100d6d8:	2084703a 	and	r2,r4,r2
 100d6dc:	4010d0fa 	srli	r8,r8,3
 100d6e0:	10c4b03a 	or	r2,r2,r3
 100d6e4:	003efd06 	br	100d2dc <__subdf3+0x424>
 100d6e8:	5aa3c83a 	sub	r17,r11,r10
 100d6ec:	5c45803a 	cmpltu	r2,r11,r17
 100d6f0:	40c9c83a 	sub	r4,r8,r3
 100d6f4:	2089c83a 	sub	r4,r4,r2
 100d6f8:	2080202c 	andhi	r2,r4,128
 100d6fc:	10002f26 	beq	r2,zero,100d7bc <__subdf3+0x904>
 100d700:	52e3c83a 	sub	r17,r10,r11
 100d704:	1a09c83a 	sub	r4,r3,r8
 100d708:	5455803a 	cmpltu	r10,r10,r17
 100d70c:	2289c83a 	sub	r4,r4,r10
 100d710:	4825883a 	mov	r18,r9
 100d714:	003e3b06 	br	100d004 <__subdf3+0x14c>
 100d718:	1808977a 	slli	r4,r3,29
 100d71c:	00880034 	movhi	r2,8192
 100d720:	10bfffc4 	addi	r2,r2,-1
 100d724:	3084703a 	and	r2,r6,r2
 100d728:	1810d0fa 	srli	r8,r3,3
 100d72c:	1104b03a 	or	r2,r2,r4
 100d730:	003ec406 	br	100d244 <__subdf3+0x38c>
 100d734:	1808977a 	slli	r4,r3,29
 100d738:	00880034 	movhi	r2,8192
 100d73c:	10bfffc4 	addi	r2,r2,-1
 100d740:	3084703a 	and	r2,r6,r2
 100d744:	1810d0fa 	srli	r8,r3,3
 100d748:	1104b03a 	or	r2,r2,r4
 100d74c:	003ebf06 	br	100d24c <__subdf3+0x394>
 100d750:	5aa3883a 	add	r17,r11,r10
 100d754:	40c9883a 	add	r4,r8,r3
 100d758:	8ad7803a 	cmpltu	r11,r17,r11
 100d75c:	22c9883a 	add	r4,r4,r11
 100d760:	2080202c 	andhi	r2,r4,128
 100d764:	103eb026 	beq	r2,zero,100d228 <__subdf3+0x370>
 100d768:	00bfe034 	movhi	r2,65408
 100d76c:	10bfffc4 	addi	r2,r2,-1
 100d770:	2088703a 	and	r4,r4,r2
 100d774:	04000044 	movi	r16,1
 100d778:	003eab06 	br	100d228 <__subdf3+0x370>
 100d77c:	28bff804 	addi	r2,r5,-32
 100d780:	29000820 	cmpeqi	r4,r5,32
 100d784:	4084d83a 	srl	r2,r8,r2
 100d788:	2000041e 	bne	r4,zero,100d79c <__subdf3+0x8e4>
 100d78c:	01001004 	movi	r4,64
 100d790:	214bc83a 	sub	r5,r4,r5
 100d794:	4150983a 	sll	r8,r8,r5
 100d798:	5a16b03a 	or	r11,r11,r8
 100d79c:	5822c03a 	cmpne	r17,r11,zero
 100d7a0:	88a2b03a 	or	r17,r17,r2
 100d7a4:	003e7d06 	br	100d19c <__subdf3+0x2e4>
 100d7a8:	5aa3883a 	add	r17,r11,r10
 100d7ac:	40c9883a 	add	r4,r8,r3
 100d7b0:	8a95803a 	cmpltu	r10,r17,r10
 100d7b4:	2289883a 	add	r4,r4,r10
 100d7b8:	003e9806 	br	100d21c <__subdf3+0x364>
 100d7bc:	8904b03a 	or	r2,r17,r4
 100d7c0:	103f0826 	beq	r2,zero,100d3e4 <__subdf3+0x52c>
 100d7c4:	003e9806 	br	100d228 <__subdf3+0x370>
 100d7c8:	02000434 	movhi	r8,16
 100d7cc:	423fffc4 	addi	r8,r8,-1
 100d7d0:	0025883a 	mov	r18,zero
 100d7d4:	00bfffc4 	movi	r2,-1
 100d7d8:	003ec206 	br	100d2e4 <__subdf3+0x42c>
 100d7dc:	0005883a 	mov	r2,zero
 100d7e0:	0141ffc4 	movi	r5,2047
 100d7e4:	0007883a 	mov	r3,zero
 100d7e8:	003e1d06 	br	100d060 <__subdf3+0x1a8>

0100d7ec <__unorddf2>:
 100d7ec:	2806d53a 	srli	r3,r5,20
 100d7f0:	3810d53a 	srli	r8,r7,20
 100d7f4:	02400434 	movhi	r9,16
 100d7f8:	18c1ffcc 	andi	r3,r3,2047
 100d7fc:	4a7fffc4 	addi	r9,r9,-1
 100d800:	18c1ffd8 	cmpnei	r3,r3,2047
 100d804:	2a4a703a 	and	r5,r5,r9
 100d808:	3a4e703a 	and	r7,r7,r9
 100d80c:	4201ffcc 	andi	r8,r8,2047
 100d810:	18000426 	beq	r3,zero,100d824 <__unorddf2+0x38>
 100d814:	4201ffd8 	cmpnei	r8,r8,2047
 100d818:	40000626 	beq	r8,zero,100d834 <__unorddf2+0x48>
 100d81c:	0005883a 	mov	r2,zero
 100d820:	f800283a 	ret
 100d824:	214ab03a 	or	r5,r4,r5
 100d828:	283ffa26 	beq	r5,zero,100d814 <__unorddf2+0x28>
 100d82c:	00800044 	movi	r2,1
 100d830:	f800283a 	ret
 100d834:	398eb03a 	or	r7,r7,r6
 100d838:	3804c03a 	cmpne	r2,r7,zero
 100d83c:	f800283a 	ret

0100d840 <__fixdfsi>:
 100d840:	2806d53a 	srli	r3,r5,20
 100d844:	01800434 	movhi	r6,16
 100d848:	31bfffc4 	addi	r6,r6,-1
 100d84c:	18c1ffcc 	andi	r3,r3,2047
 100d850:	19c0ffd0 	cmplti	r7,r3,1023
 100d854:	2810d7fa 	srli	r8,r5,31
 100d858:	298a703a 	and	r5,r5,r6
 100d85c:	3800061e 	bne	r7,zero,100d878 <__fixdfsi+0x38>
 100d860:	18810790 	cmplti	r2,r3,1054
 100d864:	1000061e 	bne	r2,zero,100d880 <__fixdfsi+0x40>
 100d868:	00a00034 	movhi	r2,32768
 100d86c:	10bfffc4 	addi	r2,r2,-1
 100d870:	4085883a 	add	r2,r8,r2
 100d874:	f800283a 	ret
 100d878:	0005883a 	mov	r2,zero
 100d87c:	f800283a 	ret
 100d880:	01810cc4 	movi	r6,1075
 100d884:	30cdc83a 	sub	r6,r6,r3
 100d888:	30800808 	cmpgei	r2,r6,32
 100d88c:	29400434 	orhi	r5,r5,16
 100d890:	1000071e 	bne	r2,zero,100d8b0 <__fixdfsi+0x70>
 100d894:	18befb44 	addi	r2,r3,-1043
 100d898:	2884983a 	sll	r2,r5,r2
 100d89c:	2188d83a 	srl	r4,r4,r6
 100d8a0:	1104b03a 	or	r2,r2,r4
 100d8a4:	403ff526 	beq	r8,zero,100d87c <__fixdfsi+0x3c>
 100d8a8:	0085c83a 	sub	r2,zero,r2
 100d8ac:	f800283a 	ret
 100d8b0:	008104c4 	movi	r2,1043
 100d8b4:	10c5c83a 	sub	r2,r2,r3
 100d8b8:	2884d83a 	srl	r2,r5,r2
 100d8bc:	003ff906 	br	100d8a4 <__fixdfsi+0x64>

0100d8c0 <__floatsidf>:
 100d8c0:	defffd04 	addi	sp,sp,-12
 100d8c4:	dfc00215 	stw	ra,8(sp)
 100d8c8:	dc400115 	stw	r17,4(sp)
 100d8cc:	dc000015 	stw	r16,0(sp)
 100d8d0:	20001326 	beq	r4,zero,100d920 <__floatsidf+0x60>
 100d8d4:	2022d7fa 	srli	r17,r4,31
 100d8d8:	2021883a 	mov	r16,r4
 100d8dc:	20002516 	blt	r4,zero,100d974 <__floatsidf+0xb4>
 100d8e0:	8009883a 	mov	r4,r16
 100d8e4:	100da0c0 	call	100da0c <__clzsi2>
 100d8e8:	01410784 	movi	r5,1054
 100d8ec:	288bc83a 	sub	r5,r5,r2
 100d8f0:	10c002c8 	cmpgei	r3,r2,11
 100d8f4:	2941ffcc 	andi	r5,r5,2047
 100d8f8:	1800171e 	bne	r3,zero,100d958 <__floatsidf+0x98>
 100d8fc:	00c002c4 	movi	r3,11
 100d900:	1887c83a 	sub	r3,r3,r2
 100d904:	80c6d83a 	srl	r3,r16,r3
 100d908:	01000434 	movhi	r4,16
 100d90c:	10800544 	addi	r2,r2,21
 100d910:	213fffc4 	addi	r4,r4,-1
 100d914:	8084983a 	sll	r2,r16,r2
 100d918:	1906703a 	and	r3,r3,r4
 100d91c:	00000406 	br	100d930 <__floatsidf+0x70>
 100d920:	0023883a 	mov	r17,zero
 100d924:	000b883a 	mov	r5,zero
 100d928:	0007883a 	mov	r3,zero
 100d92c:	0005883a 	mov	r2,zero
 100d930:	280a953a 	slli	r5,r5,20
 100d934:	8c403fcc 	andi	r17,r17,255
 100d938:	882297fa 	slli	r17,r17,31
 100d93c:	28c6b03a 	or	r3,r5,r3
 100d940:	1c46b03a 	or	r3,r3,r17
 100d944:	dfc00217 	ldw	ra,8(sp)
 100d948:	dc400117 	ldw	r17,4(sp)
 100d94c:	dc000017 	ldw	r16,0(sp)
 100d950:	dec00304 	addi	sp,sp,12
 100d954:	f800283a 	ret
 100d958:	10bffd44 	addi	r2,r2,-11
 100d95c:	8086983a 	sll	r3,r16,r2
 100d960:	00800434 	movhi	r2,16
 100d964:	10bfffc4 	addi	r2,r2,-1
 100d968:	1886703a 	and	r3,r3,r2
 100d96c:	0005883a 	mov	r2,zero
 100d970:	003fef06 	br	100d930 <__floatsidf+0x70>
 100d974:	0121c83a 	sub	r16,zero,r4
 100d978:	003fd906 	br	100d8e0 <__floatsidf+0x20>

0100d97c <__floatunsidf>:
 100d97c:	defffe04 	addi	sp,sp,-8
 100d980:	dc000015 	stw	r16,0(sp)
 100d984:	dfc00115 	stw	ra,4(sp)
 100d988:	2021883a 	mov	r16,r4
 100d98c:	20000f26 	beq	r4,zero,100d9cc <__floatunsidf+0x50>
 100d990:	100da0c0 	call	100da0c <__clzsi2>
 100d994:	00c10784 	movi	r3,1054
 100d998:	1887c83a 	sub	r3,r3,r2
 100d99c:	110002c8 	cmpgei	r4,r2,11
 100d9a0:	18c1ffcc 	andi	r3,r3,2047
 100d9a4:	2000121e 	bne	r4,zero,100d9f0 <__floatunsidf+0x74>
 100d9a8:	014002c4 	movi	r5,11
 100d9ac:	288bc83a 	sub	r5,r5,r2
 100d9b0:	814ad83a 	srl	r5,r16,r5
 100d9b4:	01000434 	movhi	r4,16
 100d9b8:	10800544 	addi	r2,r2,21
 100d9bc:	213fffc4 	addi	r4,r4,-1
 100d9c0:	80a0983a 	sll	r16,r16,r2
 100d9c4:	290a703a 	and	r5,r5,r4
 100d9c8:	00000206 	br	100d9d4 <__floatunsidf+0x58>
 100d9cc:	0007883a 	mov	r3,zero
 100d9d0:	000b883a 	mov	r5,zero
 100d9d4:	1806953a 	slli	r3,r3,20
 100d9d8:	8005883a 	mov	r2,r16
 100d9dc:	1946b03a 	or	r3,r3,r5
 100d9e0:	dfc00117 	ldw	ra,4(sp)
 100d9e4:	dc000017 	ldw	r16,0(sp)
 100d9e8:	dec00204 	addi	sp,sp,8
 100d9ec:	f800283a 	ret
 100d9f0:	10bffd44 	addi	r2,r2,-11
 100d9f4:	808a983a 	sll	r5,r16,r2
 100d9f8:	00800434 	movhi	r2,16
 100d9fc:	10bfffc4 	addi	r2,r2,-1
 100da00:	288a703a 	and	r5,r5,r2
 100da04:	0021883a 	mov	r16,zero
 100da08:	003ff206 	br	100d9d4 <__floatunsidf+0x58>

0100da0c <__clzsi2>:
 100da0c:	00bfffd4 	movui	r2,65535
 100da10:	11000436 	bltu	r2,r4,100da24 <__clzsi2+0x18>
 100da14:	20804030 	cmpltui	r2,r4,256
 100da18:	10000e26 	beq	r2,zero,100da54 <__clzsi2+0x48>
 100da1c:	01400804 	movi	r5,32
 100da20:	00000406 	br	100da34 <__clzsi2+0x28>
 100da24:	00804034 	movhi	r2,256
 100da28:	20800736 	bltu	r4,r2,100da48 <__clzsi2+0x3c>
 100da2c:	2008d63a 	srli	r4,r4,24
 100da30:	01400204 	movi	r5,8
 100da34:	00c04074 	movhi	r3,257
 100da38:	20c7883a 	add	r3,r4,r3
 100da3c:	188a8603 	ldbu	r2,10776(r3)
 100da40:	2885c83a 	sub	r2,r5,r2
 100da44:	f800283a 	ret
 100da48:	2008d43a 	srli	r4,r4,16
 100da4c:	01400404 	movi	r5,16
 100da50:	003ff806 	br	100da34 <__clzsi2+0x28>
 100da54:	2008d23a 	srli	r4,r4,8
 100da58:	01400604 	movi	r5,24
 100da5c:	003ff506 	br	100da34 <__clzsi2+0x28>

0100da60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100da60:	defffe04 	addi	sp,sp,-8
 100da64:	dfc00115 	stw	ra,4(sp)
 100da68:	df000015 	stw	fp,0(sp)
 100da6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100da70:	d0a00917 	ldw	r2,-32732(gp)
 100da74:	10000326 	beq	r2,zero,100da84 <alt_get_errno+0x24>
 100da78:	d0a00917 	ldw	r2,-32732(gp)
 100da7c:	103ee83a 	callr	r2
 100da80:	00000106 	br	100da88 <alt_get_errno+0x28>
 100da84:	d0a71b04 	addi	r2,gp,-25492
}
 100da88:	e037883a 	mov	sp,fp
 100da8c:	dfc00117 	ldw	ra,4(sp)
 100da90:	df000017 	ldw	fp,0(sp)
 100da94:	dec00204 	addi	sp,sp,8
 100da98:	f800283a 	ret

0100da9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100da9c:	defffb04 	addi	sp,sp,-20
 100daa0:	dfc00415 	stw	ra,16(sp)
 100daa4:	df000315 	stw	fp,12(sp)
 100daa8:	df000304 	addi	fp,sp,12
 100daac:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100dab0:	e0bffd17 	ldw	r2,-12(fp)
 100dab4:	10000916 	blt	r2,zero,100dadc <close+0x40>
 100dab8:	e0fffd17 	ldw	r3,-12(fp)
 100dabc:	1805883a 	mov	r2,r3
 100dac0:	1085883a 	add	r2,r2,r2
 100dac4:	10c5883a 	add	r2,r2,r3
 100dac8:	100490ba 	slli	r2,r2,2
 100dacc:	00c04074 	movhi	r3,257
 100dad0:	18cd4e04 	addi	r3,r3,13624
 100dad4:	10c5883a 	add	r2,r2,r3
 100dad8:	00000106 	br	100dae0 <close+0x44>
 100dadc:	0005883a 	mov	r2,zero
 100dae0:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 100dae4:	e0bfff17 	ldw	r2,-4(fp)
 100dae8:	10001926 	beq	r2,zero,100db50 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100daec:	e0bfff17 	ldw	r2,-4(fp)
 100daf0:	10800017 	ldw	r2,0(r2)
 100daf4:	10800417 	ldw	r2,16(r2)
 100daf8:	10000626 	beq	r2,zero,100db14 <close+0x78>
 100dafc:	e0bfff17 	ldw	r2,-4(fp)
 100db00:	10800017 	ldw	r2,0(r2)
 100db04:	10800417 	ldw	r2,16(r2)
 100db08:	e13fff17 	ldw	r4,-4(fp)
 100db0c:	103ee83a 	callr	r2
 100db10:	00000106 	br	100db18 <close+0x7c>
 100db14:	0005883a 	mov	r2,zero
 100db18:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100db1c:	e13ffd17 	ldw	r4,-12(fp)
 100db20:	100e3480 	call	100e348 <alt_release_fd>
    if (rval < 0)
 100db24:	e0bffe17 	ldw	r2,-8(fp)
 100db28:	1000070e 	bge	r2,zero,100db48 <close+0xac>
    {
      ALT_ERRNO = -rval;
 100db2c:	100da600 	call	100da60 <alt_get_errno>
 100db30:	1007883a 	mov	r3,r2
 100db34:	e0bffe17 	ldw	r2,-8(fp)
 100db38:	0085c83a 	sub	r2,zero,r2
 100db3c:	18800015 	stw	r2,0(r3)
      return -1;
 100db40:	00bfffc4 	movi	r2,-1
 100db44:	00000706 	br	100db64 <close+0xc8>
    }
    return 0;
 100db48:	0005883a 	mov	r2,zero
 100db4c:	00000506 	br	100db64 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100db50:	100da600 	call	100da60 <alt_get_errno>
 100db54:	1007883a 	mov	r3,r2
 100db58:	00801444 	movi	r2,81
 100db5c:	18800015 	stw	r2,0(r3)
    return -1;
 100db60:	00bfffc4 	movi	r2,-1
  }
}
 100db64:	e037883a 	mov	sp,fp
 100db68:	dfc00117 	ldw	ra,4(sp)
 100db6c:	df000017 	ldw	fp,0(sp)
 100db70:	dec00204 	addi	sp,sp,8
 100db74:	f800283a 	ret

0100db78 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100db78:	defffc04 	addi	sp,sp,-16
 100db7c:	df000315 	stw	fp,12(sp)
 100db80:	df000304 	addi	fp,sp,12
 100db84:	e13fff15 	stw	r4,-4(fp)
 100db88:	e17ffe15 	stw	r5,-8(fp)
 100db8c:	e1bffd15 	stw	r6,-12(fp)
  return len;
 100db90:	e0bffd17 	ldw	r2,-12(fp)
}
 100db94:	e037883a 	mov	sp,fp
 100db98:	df000017 	ldw	fp,0(sp)
 100db9c:	dec00104 	addi	sp,sp,4
 100dba0:	f800283a 	ret

0100dba4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100dba4:	defffd04 	addi	sp,sp,-12
 100dba8:	df000215 	stw	fp,8(sp)
 100dbac:	df000204 	addi	fp,sp,8
 100dbb0:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 100dbb4:	0001883a 	nop
 100dbb8:	e0bffe17 	ldw	r2,-8(fp)
 100dbbc:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 100dbc0:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100dbc4:	10000226 	beq	r2,zero,100dbd0 <_exit+0x2c>
    ALT_SIM_FAIL();
 100dbc8:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
 100dbcc:	00000106 	br	100dbd4 <_exit+0x30>
    ALT_SIM_PASS();
 100dbd0:	002af0b0 	cmpltui	zero,zero,43970
}
 100dbd4:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100dbd8:	003fff06 	br	100dbd8 <_exit+0x34>

0100dbdc <alt_get_errno>:
{
 100dbdc:	defffe04 	addi	sp,sp,-8
 100dbe0:	dfc00115 	stw	ra,4(sp)
 100dbe4:	df000015 	stw	fp,0(sp)
 100dbe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100dbec:	d0a00917 	ldw	r2,-32732(gp)
 100dbf0:	10000326 	beq	r2,zero,100dc00 <alt_get_errno+0x24>
 100dbf4:	d0a00917 	ldw	r2,-32732(gp)
 100dbf8:	103ee83a 	callr	r2
 100dbfc:	00000106 	br	100dc04 <alt_get_errno+0x28>
 100dc00:	d0a71b04 	addi	r2,gp,-25492
}
 100dc04:	e037883a 	mov	sp,fp
 100dc08:	dfc00117 	ldw	ra,4(sp)
 100dc0c:	df000017 	ldw	fp,0(sp)
 100dc10:	dec00204 	addi	sp,sp,8
 100dc14:	f800283a 	ret

0100dc18 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100dc18:	defffb04 	addi	sp,sp,-20
 100dc1c:	dfc00415 	stw	ra,16(sp)
 100dc20:	df000315 	stw	fp,12(sp)
 100dc24:	df000304 	addi	fp,sp,12
 100dc28:	e13ffe15 	stw	r4,-8(fp)
 100dc2c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dc30:	e0bffe17 	ldw	r2,-8(fp)
 100dc34:	10000916 	blt	r2,zero,100dc5c <fstat+0x44>
 100dc38:	e0fffe17 	ldw	r3,-8(fp)
 100dc3c:	1805883a 	mov	r2,r3
 100dc40:	1085883a 	add	r2,r2,r2
 100dc44:	10c5883a 	add	r2,r2,r3
 100dc48:	100490ba 	slli	r2,r2,2
 100dc4c:	00c04074 	movhi	r3,257
 100dc50:	18cd4e04 	addi	r3,r3,13624
 100dc54:	10c5883a 	add	r2,r2,r3
 100dc58:	00000106 	br	100dc60 <fstat+0x48>
 100dc5c:	0005883a 	mov	r2,zero
 100dc60:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 100dc64:	e0bfff17 	ldw	r2,-4(fp)
 100dc68:	10001026 	beq	r2,zero,100dcac <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100dc6c:	e0bfff17 	ldw	r2,-4(fp)
 100dc70:	10800017 	ldw	r2,0(r2)
 100dc74:	10800817 	ldw	r2,32(r2)
 100dc78:	10000726 	beq	r2,zero,100dc98 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 100dc7c:	e0bfff17 	ldw	r2,-4(fp)
 100dc80:	10800017 	ldw	r2,0(r2)
 100dc84:	10800817 	ldw	r2,32(r2)
 100dc88:	e17ffd17 	ldw	r5,-12(fp)
 100dc8c:	e13fff17 	ldw	r4,-4(fp)
 100dc90:	103ee83a 	callr	r2
 100dc94:	00000a06 	br	100dcc0 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100dc98:	e0bffd17 	ldw	r2,-12(fp)
 100dc9c:	00c80004 	movi	r3,8192
 100dca0:	10c00115 	stw	r3,4(r2)
      return 0;
 100dca4:	0005883a 	mov	r2,zero
 100dca8:	00000506 	br	100dcc0 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100dcac:	100dbdc0 	call	100dbdc <alt_get_errno>
 100dcb0:	1007883a 	mov	r3,r2
 100dcb4:	00801444 	movi	r2,81
 100dcb8:	18800015 	stw	r2,0(r3)
    return -1;
 100dcbc:	00bfffc4 	movi	r2,-1
  }
}
 100dcc0:	e037883a 	mov	sp,fp
 100dcc4:	dfc00117 	ldw	ra,4(sp)
 100dcc8:	df000017 	ldw	fp,0(sp)
 100dccc:	dec00204 	addi	sp,sp,8
 100dcd0:	f800283a 	ret

0100dcd4 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 100dcd4:	deffff04 	addi	sp,sp,-4
 100dcd8:	df000015 	stw	fp,0(sp)
 100dcdc:	d839883a 	mov	fp,sp
  return 0;
 100dce0:	0005883a 	mov	r2,zero
}
 100dce4:	e037883a 	mov	sp,fp
 100dce8:	df000017 	ldw	fp,0(sp)
 100dcec:	dec00104 	addi	sp,sp,4
 100dcf0:	f800283a 	ret

0100dcf4 <alt_get_errno>:
{
 100dcf4:	defffe04 	addi	sp,sp,-8
 100dcf8:	dfc00115 	stw	ra,4(sp)
 100dcfc:	df000015 	stw	fp,0(sp)
 100dd00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100dd04:	d0a00917 	ldw	r2,-32732(gp)
 100dd08:	10000326 	beq	r2,zero,100dd18 <alt_get_errno+0x24>
 100dd0c:	d0a00917 	ldw	r2,-32732(gp)
 100dd10:	103ee83a 	callr	r2
 100dd14:	00000106 	br	100dd1c <alt_get_errno+0x28>
 100dd18:	d0a71b04 	addi	r2,gp,-25492
}
 100dd1c:	e037883a 	mov	sp,fp
 100dd20:	dfc00117 	ldw	ra,4(sp)
 100dd24:	df000017 	ldw	fp,0(sp)
 100dd28:	dec00204 	addi	sp,sp,8
 100dd2c:	f800283a 	ret

0100dd30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100dd30:	deffea04 	addi	sp,sp,-88
 100dd34:	dfc01515 	stw	ra,84(sp)
 100dd38:	df001415 	stw	fp,80(sp)
 100dd3c:	df001404 	addi	fp,sp,80
 100dd40:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100dd44:	e0bfec17 	ldw	r2,-80(fp)
 100dd48:	10000916 	blt	r2,zero,100dd70 <isatty+0x40>
 100dd4c:	e0ffec17 	ldw	r3,-80(fp)
 100dd50:	1805883a 	mov	r2,r3
 100dd54:	1085883a 	add	r2,r2,r2
 100dd58:	10c5883a 	add	r2,r2,r3
 100dd5c:	100490ba 	slli	r2,r2,2
 100dd60:	00c04074 	movhi	r3,257
 100dd64:	18cd4e04 	addi	r3,r3,13624
 100dd68:	10c5883a 	add	r2,r2,r3
 100dd6c:	00000106 	br	100dd74 <isatty+0x44>
 100dd70:	0005883a 	mov	r2,zero
 100dd74:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 100dd78:	e0bfff17 	ldw	r2,-4(fp)
 100dd7c:	10000e26 	beq	r2,zero,100ddb8 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100dd80:	e0bfff17 	ldw	r2,-4(fp)
 100dd84:	10800017 	ldw	r2,0(r2)
 100dd88:	10800817 	ldw	r2,32(r2)
 100dd8c:	1000021e 	bne	r2,zero,100dd98 <isatty+0x68>
    {
      return 1;
 100dd90:	00800044 	movi	r2,1
 100dd94:	00000d06 	br	100ddcc <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100dd98:	e0bfed04 	addi	r2,fp,-76
 100dd9c:	100b883a 	mov	r5,r2
 100dda0:	e13fec17 	ldw	r4,-80(fp)
 100dda4:	100dc180 	call	100dc18 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100dda8:	e0bfee17 	ldw	r2,-72(fp)
 100ddac:	10880020 	cmpeqi	r2,r2,8192
 100ddb0:	10803fcc 	andi	r2,r2,255
 100ddb4:	00000506 	br	100ddcc <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100ddb8:	100dcf40 	call	100dcf4 <alt_get_errno>
 100ddbc:	1007883a 	mov	r3,r2
 100ddc0:	00801444 	movi	r2,81
 100ddc4:	18800015 	stw	r2,0(r3)
    return 0;
 100ddc8:	0005883a 	mov	r2,zero
  }
}
 100ddcc:	e037883a 	mov	sp,fp
 100ddd0:	dfc00117 	ldw	ra,4(sp)
 100ddd4:	df000017 	ldw	fp,0(sp)
 100ddd8:	dec00204 	addi	sp,sp,8
 100dddc:	f800283a 	ret

0100dde0 <alt_get_errno>:
{
 100dde0:	defffe04 	addi	sp,sp,-8
 100dde4:	dfc00115 	stw	ra,4(sp)
 100dde8:	df000015 	stw	fp,0(sp)
 100ddec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100ddf0:	d0a00917 	ldw	r2,-32732(gp)
 100ddf4:	10000326 	beq	r2,zero,100de04 <alt_get_errno+0x24>
 100ddf8:	d0a00917 	ldw	r2,-32732(gp)
 100ddfc:	103ee83a 	callr	r2
 100de00:	00000106 	br	100de08 <alt_get_errno+0x28>
 100de04:	d0a71b04 	addi	r2,gp,-25492
}
 100de08:	e037883a 	mov	sp,fp
 100de0c:	dfc00117 	ldw	ra,4(sp)
 100de10:	df000017 	ldw	fp,0(sp)
 100de14:	dec00204 	addi	sp,sp,8
 100de18:	f800283a 	ret

0100de1c <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 100de1c:	defffb04 	addi	sp,sp,-20
 100de20:	dfc00415 	stw	ra,16(sp)
 100de24:	df000315 	stw	fp,12(sp)
 100de28:	df000304 	addi	fp,sp,12
 100de2c:	e13ffe15 	stw	r4,-8(fp)
 100de30:	e17ffd15 	stw	r5,-12(fp)
  int status = 0;
 100de34:	e03fff15 	stw	zero,-4(fp)

  if (pid <= 0)
 100de38:	e0bffe17 	ldw	r2,-8(fp)
 100de3c:	00802e16 	blt	zero,r2,100def8 <kill+0xdc>
 100de40:	e0bffd17 	ldw	r2,-12(fp)
 100de44:	10800828 	cmpgeui	r2,r2,32
 100de48:	1000281e 	bne	r2,zero,100deec <kill+0xd0>
 100de4c:	e0bffd17 	ldw	r2,-12(fp)
 100de50:	100690ba 	slli	r3,r2,2
 100de54:	00804074 	movhi	r2,257
 100de58:	1885883a 	add	r2,r3,r2
 100de5c:	10b79917 	ldw	r2,-8604(r2)
 100de60:	1000683a 	jmp	r2
 100de64:	0100df0c 	andi	r4,zero,892
 100de68:	0100deec 	andhi	r4,zero,891
 100de6c:	0100deec 	andhi	r4,zero,891
 100de70:	0100dee4 	muli	r4,zero,891
 100de74:	0100dee4 	muli	r4,zero,891
 100de78:	0100dee4 	muli	r4,zero,891
 100de7c:	0100dee4 	muli	r4,zero,891
 100de80:	0100deec 	andhi	r4,zero,891
 100de84:	0100dee4 	muli	r4,zero,891
 100de88:	0100dee4 	muli	r4,zero,891
 100de8c:	0100dee4 	muli	r4,zero,891
 100de90:	0100dee4 	muli	r4,zero,891
 100de94:	0100dee4 	muli	r4,zero,891
 100de98:	0100dee4 	muli	r4,zero,891
 100de9c:	0100dee4 	muli	r4,zero,891
 100dea0:	0100dee4 	muli	r4,zero,891
 100dea4:	0100df0c 	andi	r4,zero,892
 100dea8:	0100deec 	andhi	r4,zero,891
 100deac:	0100deec 	andhi	r4,zero,891
 100deb0:	0100deec 	andhi	r4,zero,891
 100deb4:	0100df0c 	andi	r4,zero,892
 100deb8:	0100deec 	andhi	r4,zero,891
 100debc:	0100deec 	andhi	r4,zero,891
 100dec0:	0100dee4 	muli	r4,zero,891
 100dec4:	0100dee4 	muli	r4,zero,891
 100dec8:	0100dee4 	muli	r4,zero,891
 100decc:	0100dee4 	muli	r4,zero,891
 100ded0:	0100dee4 	muli	r4,zero,891
 100ded4:	0100deec 	andhi	r4,zero,891
 100ded8:	0100deec 	andhi	r4,zero,891
 100dedc:	0100dee4 	muli	r4,zero,891
 100dee0:	0100dee4 	muli	r4,zero,891
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 100dee4:	0009883a 	mov	r4,zero
 100dee8:	100dba40 	call	100dba4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 100deec:	00800584 	movi	r2,22
 100def0:	e0bfff15 	stw	r2,-4(fp)
 100def4:	00000606 	br	100df10 <kill+0xf4>
    }
  }

  else if (pid > 0)
 100def8:	e0bffe17 	ldw	r2,-8(fp)
 100defc:	0080040e 	bge	zero,r2,100df10 <kill+0xf4>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 100df00:	008000c4 	movi	r2,3
 100df04:	e0bfff15 	stw	r2,-4(fp)
 100df08:	00000106 	br	100df10 <kill+0xf4>
      break;
 100df0c:	0001883a 	nop
  }

  if (status)
 100df10:	e0bfff17 	ldw	r2,-4(fp)
 100df14:	10000626 	beq	r2,zero,100df30 <kill+0x114>
  {
    ALT_ERRNO = status;
 100df18:	100dde00 	call	100dde0 <alt_get_errno>
 100df1c:	1007883a 	mov	r3,r2
 100df20:	e0bfff17 	ldw	r2,-4(fp)
 100df24:	18800015 	stw	r2,0(r3)
    return -1;
 100df28:	00bfffc4 	movi	r2,-1
 100df2c:	00000106 	br	100df34 <kill+0x118>
  }

  return 0;
 100df30:	0005883a 	mov	r2,zero
}
 100df34:	e037883a 	mov	sp,fp
 100df38:	dfc00117 	ldw	ra,4(sp)
 100df3c:	df000017 	ldw	fp,0(sp)
 100df40:	dec00204 	addi	sp,sp,8
 100df44:	f800283a 	ret

0100df48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100df48:	defffc04 	addi	sp,sp,-16
 100df4c:	df000315 	stw	fp,12(sp)
 100df50:	df000304 	addi	fp,sp,12
 100df54:	e13fff15 	stw	r4,-4(fp)
 100df58:	e17ffe15 	stw	r5,-8(fp)
 100df5c:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 100df60:	e0fffe17 	ldw	r3,-8(fp)
 100df64:	e0bfff17 	ldw	r2,-4(fp)
 100df68:	18800c26 	beq	r3,r2,100df9c <alt_load_section+0x54>
  {
    while( to != end )
 100df6c:	00000806 	br	100df90 <alt_load_section+0x48>
    {
      *to++ = *from++;
 100df70:	e0ffff17 	ldw	r3,-4(fp)
 100df74:	18800104 	addi	r2,r3,4
 100df78:	e0bfff15 	stw	r2,-4(fp)
 100df7c:	e0bffe17 	ldw	r2,-8(fp)
 100df80:	11000104 	addi	r4,r2,4
 100df84:	e13ffe15 	stw	r4,-8(fp)
 100df88:	18c00017 	ldw	r3,0(r3)
 100df8c:	10c00015 	stw	r3,0(r2)
    while( to != end )
 100df90:	e0fffe17 	ldw	r3,-8(fp)
 100df94:	e0bffd17 	ldw	r2,-12(fp)
 100df98:	18bff51e 	bne	r3,r2,100df70 <alt_load_section+0x28>
    }
  }
}
 100df9c:	0001883a 	nop
 100dfa0:	e037883a 	mov	sp,fp
 100dfa4:	df000017 	ldw	fp,0(sp)
 100dfa8:	dec00104 	addi	sp,sp,4
 100dfac:	f800283a 	ret

0100dfb0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100dfb0:	defffe04 	addi	sp,sp,-8
 100dfb4:	dfc00115 	stw	ra,4(sp)
 100dfb8:	df000015 	stw	fp,0(sp)
 100dfbc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100dfc0:	01804074 	movhi	r6,257
 100dfc4:	3191e404 	addi	r6,r6,18320
 100dfc8:	01404074 	movhi	r5,257
 100dfcc:	294ade04 	addi	r5,r5,11128
 100dfd0:	01004074 	movhi	r4,257
 100dfd4:	2111e404 	addi	r4,r4,18320
 100dfd8:	100df480 	call	100df48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100dfdc:	01800034 	movhi	r6,0
 100dfe0:	31806d04 	addi	r6,r6,436
 100dfe4:	01400034 	movhi	r5,0
 100dfe8:	29400804 	addi	r5,r5,32
 100dfec:	01004034 	movhi	r4,256
 100dff0:	21000004 	addi	r4,r4,0
 100dff4:	100df480 	call	100df48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100dff8:	01804074 	movhi	r6,257
 100dffc:	318ade04 	addi	r6,r6,11128
 100e000:	01404074 	movhi	r5,257
 100e004:	29491504 	addi	r5,r5,9300
 100e008:	01004074 	movhi	r4,257
 100e00c:	21091504 	addi	r4,r4,9300
 100e010:	100df480 	call	100df48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100e014:	10114680 	call	1011468 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100e018:	10115fc0 	call	10115fc <alt_icache_flush_all>
}
 100e01c:	0001883a 	nop
 100e020:	e037883a 	mov	sp,fp
 100e024:	dfc00117 	ldw	ra,4(sp)
 100e028:	df000017 	ldw	fp,0(sp)
 100e02c:	dec00204 	addi	sp,sp,8
 100e030:	f800283a 	ret

0100e034 <alt_get_errno>:
{
 100e034:	defffe04 	addi	sp,sp,-8
 100e038:	dfc00115 	stw	ra,4(sp)
 100e03c:	df000015 	stw	fp,0(sp)
 100e040:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e044:	d0a00917 	ldw	r2,-32732(gp)
 100e048:	10000326 	beq	r2,zero,100e058 <alt_get_errno+0x24>
 100e04c:	d0a00917 	ldw	r2,-32732(gp)
 100e050:	103ee83a 	callr	r2
 100e054:	00000106 	br	100e05c <alt_get_errno+0x28>
 100e058:	d0a71b04 	addi	r2,gp,-25492
}
 100e05c:	e037883a 	mov	sp,fp
 100e060:	dfc00117 	ldw	ra,4(sp)
 100e064:	df000017 	ldw	fp,0(sp)
 100e068:	dec00204 	addi	sp,sp,8
 100e06c:	f800283a 	ret

0100e070 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100e070:	defff904 	addi	sp,sp,-28
 100e074:	dfc00615 	stw	ra,24(sp)
 100e078:	df000515 	stw	fp,20(sp)
 100e07c:	df000504 	addi	fp,sp,20
 100e080:	e13ffd15 	stw	r4,-12(fp)
 100e084:	e17ffc15 	stw	r5,-16(fp)
 100e088:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100e08c:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e090:	e0bffd17 	ldw	r2,-12(fp)
 100e094:	10000916 	blt	r2,zero,100e0bc <lseek+0x4c>
 100e098:	e0fffd17 	ldw	r3,-12(fp)
 100e09c:	1805883a 	mov	r2,r3
 100e0a0:	1085883a 	add	r2,r2,r2
 100e0a4:	10c5883a 	add	r2,r2,r3
 100e0a8:	100490ba 	slli	r2,r2,2
 100e0ac:	00c04074 	movhi	r3,257
 100e0b0:	18cd4e04 	addi	r3,r3,13624
 100e0b4:	10c5883a 	add	r2,r2,r3
 100e0b8:	00000106 	br	100e0c0 <lseek+0x50>
 100e0bc:	0005883a 	mov	r2,zero
 100e0c0:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 100e0c4:	e0bffe17 	ldw	r2,-8(fp)
 100e0c8:	10001026 	beq	r2,zero,100e10c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100e0cc:	e0bffe17 	ldw	r2,-8(fp)
 100e0d0:	10800017 	ldw	r2,0(r2)
 100e0d4:	10800717 	ldw	r2,28(r2)
 100e0d8:	10000926 	beq	r2,zero,100e100 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100e0dc:	e0bffe17 	ldw	r2,-8(fp)
 100e0e0:	10800017 	ldw	r2,0(r2)
 100e0e4:	10800717 	ldw	r2,28(r2)
 100e0e8:	e1bffb17 	ldw	r6,-20(fp)
 100e0ec:	e17ffc17 	ldw	r5,-16(fp)
 100e0f0:	e13ffe17 	ldw	r4,-8(fp)
 100e0f4:	103ee83a 	callr	r2
 100e0f8:	e0bfff15 	stw	r2,-4(fp)
 100e0fc:	00000506 	br	100e114 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100e100:	00bfde84 	movi	r2,-134
 100e104:	e0bfff15 	stw	r2,-4(fp)
 100e108:	00000206 	br	100e114 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100e10c:	00bfebc4 	movi	r2,-81
 100e110:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 100e114:	e0bfff17 	ldw	r2,-4(fp)
 100e118:	1000070e 	bge	r2,zero,100e138 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 100e11c:	100e0340 	call	100e034 <alt_get_errno>
 100e120:	1007883a 	mov	r3,r2
 100e124:	e0bfff17 	ldw	r2,-4(fp)
 100e128:	0085c83a 	sub	r2,zero,r2
 100e12c:	18800015 	stw	r2,0(r3)
    rc = -1;
 100e130:	00bfffc4 	movi	r2,-1
 100e134:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 100e138:	e0bfff17 	ldw	r2,-4(fp)
}
 100e13c:	e037883a 	mov	sp,fp
 100e140:	dfc00117 	ldw	ra,4(sp)
 100e144:	df000017 	ldw	fp,0(sp)
 100e148:	dec00204 	addi	sp,sp,8
 100e14c:	f800283a 	ret

0100e150 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100e150:	defffd04 	addi	sp,sp,-12
 100e154:	dfc00215 	stw	ra,8(sp)
 100e158:	df000115 	stw	fp,4(sp)
 100e15c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100e160:	0009883a 	mov	r4,zero
 100e164:	100e7900 	call	100e790 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 100e168:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100e16c:	100e7cc0 	call	100e7cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100e170:	01804074 	movhi	r6,257
 100e174:	318ac904 	addi	r6,r6,11044
 100e178:	01404074 	movhi	r5,257
 100e17c:	294ac904 	addi	r5,r5,11044
 100e180:	01004074 	movhi	r4,257
 100e184:	210ac904 	addi	r4,r4,11044
 100e188:	10119880 	call	1011988 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100e18c:	d0a71d17 	ldw	r2,-25484(gp)
 100e190:	d0e71e17 	ldw	r3,-25480(gp)
 100e194:	d1271f17 	ldw	r4,-25476(gp)
 100e198:	200d883a 	mov	r6,r4
 100e19c:	180b883a 	mov	r5,r3
 100e1a0:	1009883a 	mov	r4,r2
 100e1a4:	10008f80 	call	10008f8 <main>
 100e1a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100e1ac:	01000044 	movi	r4,1
 100e1b0:	100da9c0 	call	100da9c <close>
  exit (result);
 100e1b4:	e13fff17 	ldw	r4,-4(fp)
 100e1b8:	10120bc0 	call	10120bc <exit>

0100e1bc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100e1bc:	defffe04 	addi	sp,sp,-8
 100e1c0:	df000115 	stw	fp,4(sp)
 100e1c4:	df000104 	addi	fp,sp,4
 100e1c8:	e13fff15 	stw	r4,-4(fp)
}
 100e1cc:	0001883a 	nop
 100e1d0:	e037883a 	mov	sp,fp
 100e1d4:	df000017 	ldw	fp,0(sp)
 100e1d8:	dec00104 	addi	sp,sp,4
 100e1dc:	f800283a 	ret

0100e1e0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100e1e0:	defffe04 	addi	sp,sp,-8
 100e1e4:	df000115 	stw	fp,4(sp)
 100e1e8:	df000104 	addi	fp,sp,4
 100e1ec:	e13fff15 	stw	r4,-4(fp)
}
 100e1f0:	0001883a 	nop
 100e1f4:	e037883a 	mov	sp,fp
 100e1f8:	df000017 	ldw	fp,0(sp)
 100e1fc:	dec00104 	addi	sp,sp,4
 100e200:	f800283a 	ret

0100e204 <alt_get_errno>:
{
 100e204:	defffe04 	addi	sp,sp,-8
 100e208:	dfc00115 	stw	ra,4(sp)
 100e20c:	df000015 	stw	fp,0(sp)
 100e210:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e214:	d0a00917 	ldw	r2,-32732(gp)
 100e218:	10000326 	beq	r2,zero,100e228 <alt_get_errno+0x24>
 100e21c:	d0a00917 	ldw	r2,-32732(gp)
 100e220:	103ee83a 	callr	r2
 100e224:	00000106 	br	100e22c <alt_get_errno+0x28>
 100e228:	d0a71b04 	addi	r2,gp,-25492
}
 100e22c:	e037883a 	mov	sp,fp
 100e230:	dfc00117 	ldw	ra,4(sp)
 100e234:	df000017 	ldw	fp,0(sp)
 100e238:	dec00204 	addi	sp,sp,8
 100e23c:	f800283a 	ret

0100e240 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100e240:	defff904 	addi	sp,sp,-28
 100e244:	dfc00615 	stw	ra,24(sp)
 100e248:	df000515 	stw	fp,20(sp)
 100e24c:	df000504 	addi	fp,sp,20
 100e250:	e13ffd15 	stw	r4,-12(fp)
 100e254:	e17ffc15 	stw	r5,-16(fp)
 100e258:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e25c:	e0bffd17 	ldw	r2,-12(fp)
 100e260:	10000916 	blt	r2,zero,100e288 <read+0x48>
 100e264:	e0fffd17 	ldw	r3,-12(fp)
 100e268:	1805883a 	mov	r2,r3
 100e26c:	1085883a 	add	r2,r2,r2
 100e270:	10c5883a 	add	r2,r2,r3
 100e274:	100490ba 	slli	r2,r2,2
 100e278:	00c04074 	movhi	r3,257
 100e27c:	18cd4e04 	addi	r3,r3,13624
 100e280:	10c5883a 	add	r2,r2,r3
 100e284:	00000106 	br	100e28c <read+0x4c>
 100e288:	0005883a 	mov	r2,zero
 100e28c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 100e290:	e0bfff17 	ldw	r2,-4(fp)
 100e294:	10002226 	beq	r2,zero,100e320 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100e298:	e0bfff17 	ldw	r2,-4(fp)
 100e29c:	10800217 	ldw	r2,8(r2)
 100e2a0:	108000cc 	andi	r2,r2,3
 100e2a4:	10800060 	cmpeqi	r2,r2,1
 100e2a8:	1000181e 	bne	r2,zero,100e30c <read+0xcc>
        (fd->dev->read))
 100e2ac:	e0bfff17 	ldw	r2,-4(fp)
 100e2b0:	10800017 	ldw	r2,0(r2)
 100e2b4:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100e2b8:	10001426 	beq	r2,zero,100e30c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100e2bc:	e0bfff17 	ldw	r2,-4(fp)
 100e2c0:	10800017 	ldw	r2,0(r2)
 100e2c4:	10800517 	ldw	r2,20(r2)
 100e2c8:	e0fffb17 	ldw	r3,-20(fp)
 100e2cc:	180d883a 	mov	r6,r3
 100e2d0:	e17ffc17 	ldw	r5,-16(fp)
 100e2d4:	e13fff17 	ldw	r4,-4(fp)
 100e2d8:	103ee83a 	callr	r2
 100e2dc:	e0bffe15 	stw	r2,-8(fp)
 100e2e0:	e0bffe17 	ldw	r2,-8(fp)
 100e2e4:	1000070e 	bge	r2,zero,100e304 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 100e2e8:	100e2040 	call	100e204 <alt_get_errno>
 100e2ec:	1007883a 	mov	r3,r2
 100e2f0:	e0bffe17 	ldw	r2,-8(fp)
 100e2f4:	0085c83a 	sub	r2,zero,r2
 100e2f8:	18800015 	stw	r2,0(r3)
          return -1;
 100e2fc:	00bfffc4 	movi	r2,-1
 100e300:	00000c06 	br	100e334 <read+0xf4>
        }
        return rval;
 100e304:	e0bffe17 	ldw	r2,-8(fp)
 100e308:	00000a06 	br	100e334 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100e30c:	100e2040 	call	100e204 <alt_get_errno>
 100e310:	1007883a 	mov	r3,r2
 100e314:	00800344 	movi	r2,13
 100e318:	18800015 	stw	r2,0(r3)
 100e31c:	00000406 	br	100e330 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100e320:	100e2040 	call	100e204 <alt_get_errno>
 100e324:	1007883a 	mov	r3,r2
 100e328:	00801444 	movi	r2,81
 100e32c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100e330:	00bfffc4 	movi	r2,-1
}
 100e334:	e037883a 	mov	sp,fp
 100e338:	dfc00117 	ldw	ra,4(sp)
 100e33c:	df000017 	ldw	fp,0(sp)
 100e340:	dec00204 	addi	sp,sp,8
 100e344:	f800283a 	ret

0100e348 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100e348:	defffe04 	addi	sp,sp,-8
 100e34c:	df000115 	stw	fp,4(sp)
 100e350:	df000104 	addi	fp,sp,4
 100e354:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100e358:	e0bfff17 	ldw	r2,-4(fp)
 100e35c:	108000d0 	cmplti	r2,r2,3
 100e360:	1000101e 	bne	r2,zero,100e3a4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 100e364:	e0ffff17 	ldw	r3,-4(fp)
 100e368:	1805883a 	mov	r2,r3
 100e36c:	1085883a 	add	r2,r2,r2
 100e370:	10c5883a 	add	r2,r2,r3
 100e374:	100490ba 	slli	r2,r2,2
 100e378:	00c04074 	movhi	r3,257
 100e37c:	10c7883a 	add	r3,r2,r3
 100e380:	180d5015 	stw	zero,13632(r3)
    alt_fd_list[fd].dev      = 0;
 100e384:	e0ffff17 	ldw	r3,-4(fp)
 100e388:	1805883a 	mov	r2,r3
 100e38c:	1085883a 	add	r2,r2,r2
 100e390:	10c5883a 	add	r2,r2,r3
 100e394:	100490ba 	slli	r2,r2,2
 100e398:	00c04074 	movhi	r3,257
 100e39c:	10c7883a 	add	r3,r2,r3
 100e3a0:	180d4e15 	stw	zero,13624(r3)
  }
}
 100e3a4:	0001883a 	nop
 100e3a8:	e037883a 	mov	sp,fp
 100e3ac:	df000017 	ldw	fp,0(sp)
 100e3b0:	dec00104 	addi	sp,sp,4
 100e3b4:	f800283a 	ret

0100e3b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100e3b8:	defff904 	addi	sp,sp,-28
 100e3bc:	df000615 	stw	fp,24(sp)
 100e3c0:	df000604 	addi	fp,sp,24
 100e3c4:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 100e3c8:	0005303a 	rdctl	r2,status
 100e3cc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e3d0:	e0fffd17 	ldw	r3,-12(fp)
 100e3d4:	00bfff84 	movi	r2,-2
 100e3d8:	1884703a 	and	r2,r3,r2
 100e3dc:	1001703a 	wrctl	status,r2
  return context;
 100e3e0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100e3e4:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100e3e8:	d0a00a17 	ldw	r2,-32728(gp)
 100e3ec:	10c000c4 	addi	r3,r2,3
 100e3f0:	00bfff04 	movi	r2,-4
 100e3f4:	1884703a 	and	r2,r3,r2
 100e3f8:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100e3fc:	d0e00a17 	ldw	r3,-32728(gp)
 100e400:	e0bffa17 	ldw	r2,-24(fp)
 100e404:	1887883a 	add	r3,r3,r2
 100e408:	00806034 	movhi	r2,384
 100e40c:	10800004 	addi	r2,r2,0
 100e410:	10c0072e 	bgeu	r2,r3,100e430 <sbrk+0x78>
 100e414:	e0bfff17 	ldw	r2,-4(fp)
 100e418:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 100e41c:	e0bffc17 	ldw	r2,-16(fp)
 100e420:	1001703a 	wrctl	status,r2
}
 100e424:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100e428:	00bfffc4 	movi	r2,-1
 100e42c:	00000c06 	br	100e460 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100e430:	d0a00a17 	ldw	r2,-32728(gp)
 100e434:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 100e438:	d0e00a17 	ldw	r3,-32728(gp)
 100e43c:	e0bffa17 	ldw	r2,-24(fp)
 100e440:	1885883a 	add	r2,r3,r2
 100e444:	d0a00a15 	stw	r2,-32728(gp)
 100e448:	e0bfff17 	ldw	r2,-4(fp)
 100e44c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 100e450:	e0bffb17 	ldw	r2,-20(fp)
 100e454:	1001703a 	wrctl	status,r2
}
 100e458:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100e45c:	e0bffe17 	ldw	r2,-8(fp)
} 
 100e460:	e037883a 	mov	sp,fp
 100e464:	df000017 	ldw	fp,0(sp)
 100e468:	dec00104 	addi	sp,sp,4
 100e46c:	f800283a 	ret

0100e470 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100e470:	defffa04 	addi	sp,sp,-24
 100e474:	df000515 	stw	fp,20(sp)
 100e478:	df000504 	addi	fp,sp,20
 100e47c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 100e480:	0005303a 	rdctl	r2,status
 100e484:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e488:	e0fffc17 	ldw	r3,-16(fp)
 100e48c:	00bfff84 	movi	r2,-2
 100e490:	1884703a 	and	r2,r3,r2
 100e494:	1001703a 	wrctl	status,r2
  return context;
 100e498:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100e49c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 100e4a0:	e0bffb17 	ldw	r2,-20(fp)
 100e4a4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100e4a8:	e0bffd17 	ldw	r2,-12(fp)
 100e4ac:	10800017 	ldw	r2,0(r2)
 100e4b0:	e0fffd17 	ldw	r3,-12(fp)
 100e4b4:	18c00117 	ldw	r3,4(r3)
 100e4b8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 100e4bc:	e0bffd17 	ldw	r2,-12(fp)
 100e4c0:	10800117 	ldw	r2,4(r2)
 100e4c4:	e0fffd17 	ldw	r3,-12(fp)
 100e4c8:	18c00017 	ldw	r3,0(r3)
 100e4cc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100e4d0:	e0bffd17 	ldw	r2,-12(fp)
 100e4d4:	e0fffd17 	ldw	r3,-12(fp)
 100e4d8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 100e4dc:	e0bffd17 	ldw	r2,-12(fp)
 100e4e0:	e0fffd17 	ldw	r3,-12(fp)
 100e4e4:	10c00015 	stw	r3,0(r2)
} 
 100e4e8:	0001883a 	nop
 100e4ec:	e0bfff17 	ldw	r2,-4(fp)
 100e4f0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 100e4f4:	e0bffe17 	ldw	r2,-8(fp)
 100e4f8:	1001703a 	wrctl	status,r2
}
 100e4fc:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
 100e500:	0001883a 	nop
 100e504:	e037883a 	mov	sp,fp
 100e508:	df000017 	ldw	fp,0(sp)
 100e50c:	dec00104 	addi	sp,sp,4
 100e510:	f800283a 	ret

0100e514 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100e514:	defffb04 	addi	sp,sp,-20
 100e518:	dfc00415 	stw	ra,16(sp)
 100e51c:	df000315 	stw	fp,12(sp)
 100e520:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100e524:	d0a00b17 	ldw	r2,-32724(gp)
 100e528:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100e52c:	d0a72117 	ldw	r2,-25468(gp)
 100e530:	10800044 	addi	r2,r2,1
 100e534:	d0a72115 	stw	r2,-25468(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100e538:	00002e06 	br	100e5f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100e53c:	e0bfff17 	ldw	r2,-4(fp)
 100e540:	10800017 	ldw	r2,0(r2)
 100e544:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100e548:	e0bfff17 	ldw	r2,-4(fp)
 100e54c:	10800403 	ldbu	r2,16(r2)
 100e550:	10803fcc 	andi	r2,r2,255
 100e554:	10000426 	beq	r2,zero,100e568 <alt_tick+0x54>
 100e558:	d0a72117 	ldw	r2,-25468(gp)
 100e55c:	1000021e 	bne	r2,zero,100e568 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 100e560:	e0bfff17 	ldw	r2,-4(fp)
 100e564:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100e568:	e0bfff17 	ldw	r2,-4(fp)
 100e56c:	10800217 	ldw	r2,8(r2)
 100e570:	d0e72117 	ldw	r3,-25468(gp)
 100e574:	18801d36 	bltu	r3,r2,100e5ec <alt_tick+0xd8>
 100e578:	e0bfff17 	ldw	r2,-4(fp)
 100e57c:	10800403 	ldbu	r2,16(r2)
 100e580:	10803fcc 	andi	r2,r2,255
 100e584:	1000191e 	bne	r2,zero,100e5ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 100e588:	e0bfff17 	ldw	r2,-4(fp)
 100e58c:	10800317 	ldw	r2,12(r2)
 100e590:	e0ffff17 	ldw	r3,-4(fp)
 100e594:	18c00517 	ldw	r3,20(r3)
 100e598:	1809883a 	mov	r4,r3
 100e59c:	103ee83a 	callr	r2
 100e5a0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100e5a4:	e0bffd17 	ldw	r2,-12(fp)
 100e5a8:	1000031e 	bne	r2,zero,100e5b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 100e5ac:	e13fff17 	ldw	r4,-4(fp)
 100e5b0:	100e4700 	call	100e470 <alt_alarm_stop>
 100e5b4:	00000d06 	br	100e5ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 100e5b8:	e0bfff17 	ldw	r2,-4(fp)
 100e5bc:	10c00217 	ldw	r3,8(r2)
 100e5c0:	e0bffd17 	ldw	r2,-12(fp)
 100e5c4:	1887883a 	add	r3,r3,r2
 100e5c8:	e0bfff17 	ldw	r2,-4(fp)
 100e5cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100e5d0:	e0bfff17 	ldw	r2,-4(fp)
 100e5d4:	10c00217 	ldw	r3,8(r2)
 100e5d8:	d0a72117 	ldw	r2,-25468(gp)
 100e5dc:	1880032e 	bgeu	r3,r2,100e5ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 100e5e0:	e0bfff17 	ldw	r2,-4(fp)
 100e5e4:	00c00044 	movi	r3,1
 100e5e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100e5ec:	e0bffe17 	ldw	r2,-8(fp)
 100e5f0:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 100e5f4:	e0ffff17 	ldw	r3,-4(fp)
 100e5f8:	d0a00b04 	addi	r2,gp,-32724
 100e5fc:	18bfcf1e 	bne	r3,r2,100e53c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 100e600:	0001883a 	nop
}
 100e604:	0001883a 	nop
 100e608:	e037883a 	mov	sp,fp
 100e60c:	dfc00117 	ldw	ra,4(sp)
 100e610:	df000017 	ldw	fp,0(sp)
 100e614:	dec00204 	addi	sp,sp,8
 100e618:	f800283a 	ret

0100e61c <alt_get_errno>:
{
 100e61c:	defffe04 	addi	sp,sp,-8
 100e620:	dfc00115 	stw	ra,4(sp)
 100e624:	df000015 	stw	fp,0(sp)
 100e628:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100e62c:	d0a00917 	ldw	r2,-32732(gp)
 100e630:	10000326 	beq	r2,zero,100e640 <alt_get_errno+0x24>
 100e634:	d0a00917 	ldw	r2,-32732(gp)
 100e638:	103ee83a 	callr	r2
 100e63c:	00000106 	br	100e644 <alt_get_errno+0x28>
 100e640:	d0a71b04 	addi	r2,gp,-25492
}
 100e644:	e037883a 	mov	sp,fp
 100e648:	dfc00117 	ldw	ra,4(sp)
 100e64c:	df000017 	ldw	fp,0(sp)
 100e650:	dec00204 	addi	sp,sp,8
 100e654:	f800283a 	ret

0100e658 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100e658:	defff904 	addi	sp,sp,-28
 100e65c:	dfc00615 	stw	ra,24(sp)
 100e660:	df000515 	stw	fp,20(sp)
 100e664:	df000504 	addi	fp,sp,20
 100e668:	e13ffd15 	stw	r4,-12(fp)
 100e66c:	e17ffc15 	stw	r5,-16(fp)
 100e670:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100e674:	e0bffd17 	ldw	r2,-12(fp)
 100e678:	10000916 	blt	r2,zero,100e6a0 <write+0x48>
 100e67c:	e0fffd17 	ldw	r3,-12(fp)
 100e680:	1805883a 	mov	r2,r3
 100e684:	1085883a 	add	r2,r2,r2
 100e688:	10c5883a 	add	r2,r2,r3
 100e68c:	100490ba 	slli	r2,r2,2
 100e690:	00c04074 	movhi	r3,257
 100e694:	18cd4e04 	addi	r3,r3,13624
 100e698:	10c5883a 	add	r2,r2,r3
 100e69c:	00000106 	br	100e6a4 <write+0x4c>
 100e6a0:	0005883a 	mov	r2,zero
 100e6a4:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 100e6a8:	e0bfff17 	ldw	r2,-4(fp)
 100e6ac:	10002126 	beq	r2,zero,100e734 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100e6b0:	e0bfff17 	ldw	r2,-4(fp)
 100e6b4:	10800217 	ldw	r2,8(r2)
 100e6b8:	108000cc 	andi	r2,r2,3
 100e6bc:	10001826 	beq	r2,zero,100e720 <write+0xc8>
 100e6c0:	e0bfff17 	ldw	r2,-4(fp)
 100e6c4:	10800017 	ldw	r2,0(r2)
 100e6c8:	10800617 	ldw	r2,24(r2)
 100e6cc:	10001426 	beq	r2,zero,100e720 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100e6d0:	e0bfff17 	ldw	r2,-4(fp)
 100e6d4:	10800017 	ldw	r2,0(r2)
 100e6d8:	10800617 	ldw	r2,24(r2)
 100e6dc:	e0fffb17 	ldw	r3,-20(fp)
 100e6e0:	180d883a 	mov	r6,r3
 100e6e4:	e17ffc17 	ldw	r5,-16(fp)
 100e6e8:	e13fff17 	ldw	r4,-4(fp)
 100e6ec:	103ee83a 	callr	r2
 100e6f0:	e0bffe15 	stw	r2,-8(fp)
 100e6f4:	e0bffe17 	ldw	r2,-8(fp)
 100e6f8:	1000070e 	bge	r2,zero,100e718 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 100e6fc:	100e61c0 	call	100e61c <alt_get_errno>
 100e700:	1007883a 	mov	r3,r2
 100e704:	e0bffe17 	ldw	r2,-8(fp)
 100e708:	0085c83a 	sub	r2,zero,r2
 100e70c:	18800015 	stw	r2,0(r3)
        return -1;
 100e710:	00bfffc4 	movi	r2,-1
 100e714:	00000c06 	br	100e748 <write+0xf0>
      }
      return rval;
 100e718:	e0bffe17 	ldw	r2,-8(fp)
 100e71c:	00000a06 	br	100e748 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100e720:	100e61c0 	call	100e61c <alt_get_errno>
 100e724:	1007883a 	mov	r3,r2
 100e728:	00800344 	movi	r2,13
 100e72c:	18800015 	stw	r2,0(r3)
 100e730:	00000406 	br	100e744 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100e734:	100e61c0 	call	100e61c <alt_get_errno>
 100e738:	1007883a 	mov	r3,r2
 100e73c:	00801444 	movi	r2,81
 100e740:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100e744:	00bfffc4 	movi	r2,-1
}
 100e748:	e037883a 	mov	sp,fp
 100e74c:	dfc00117 	ldw	ra,4(sp)
 100e750:	df000017 	ldw	fp,0(sp)
 100e754:	dec00204 	addi	sp,sp,8
 100e758:	f800283a 	ret

0100e75c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100e75c:	defffd04 	addi	sp,sp,-12
 100e760:	dfc00215 	stw	ra,8(sp)
 100e764:	df000115 	stw	fp,4(sp)
 100e768:	df000104 	addi	fp,sp,4
 100e76c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100e770:	d1600604 	addi	r5,gp,-32744
 100e774:	e13fff17 	ldw	r4,-4(fp)
 100e778:	10114c40 	call	10114c4 <alt_dev_llist_insert>
}
 100e77c:	e037883a 	mov	sp,fp
 100e780:	dfc00117 	ldw	ra,4(sp)
 100e784:	df000017 	ldw	fp,0(sp)
 100e788:	dec00204 	addi	sp,sp,8
 100e78c:	f800283a 	ret

0100e790 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100e790:	defffd04 	addi	sp,sp,-12
 100e794:	dfc00215 	stw	ra,8(sp)
 100e798:	df000115 	stw	fp,4(sp)
 100e79c:	df000104 	addi	fp,sp,4
 100e7a0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 100e7a4:	1011ed80 	call	1011ed8 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100e7a8:	00800044 	movi	r2,1
 100e7ac:	1001703a 	wrctl	status,r2
}
 100e7b0:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
 100e7b4:	0001883a 	nop
 100e7b8:	e037883a 	mov	sp,fp
 100e7bc:	dfc00117 	ldw	ra,4(sp)
 100e7c0:	df000017 	ldw	fp,0(sp)
 100e7c4:	dec00204 	addi	sp,sp,8
 100e7c8:	f800283a 	ret

0100e7cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100e7cc:	defffe04 	addi	sp,sp,-8
 100e7d0:	dfc00115 	stw	ra,4(sp)
 100e7d4:	df000015 	stw	fp,0(sp)
 100e7d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100e7dc:	01c0fa04 	movi	r7,1000
 100e7e0:	01800044 	movi	r6,1
 100e7e4:	000b883a 	mov	r5,zero
 100e7e8:	01010034 	movhi	r4,1024
 100e7ec:	21140004 	addi	r4,r4,20480
 100e7f0:	10111580 	call	1011158 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_I2C_INIT ( I2C_0, i2c_0);
 100e7f4:	01004074 	movhi	r4,257
 100e7f8:	210dae04 	addi	r4,r4,14008
 100e7fc:	100ea940 	call	100ea94 <alt_avalon_i2c_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100e800:	000d883a 	mov	r6,zero
 100e804:	000b883a 	mov	r5,zero
 100e808:	01004074 	movhi	r4,257
 100e80c:	210dc604 	addi	r4,r4,14104
 100e810:	10105d00 	call	10105d0 <altera_avalon_jtag_uart_init>
 100e814:	01004074 	movhi	r4,257
 100e818:	210dbc04 	addi	r4,r4,14064
 100e81c:	100e75c0 	call	100e75c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 100e820:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 100e824:	0001883a 	nop
}
 100e828:	0001883a 	nop
 100e82c:	e037883a 	mov	sp,fp
 100e830:	dfc00117 	ldw	ra,4(sp)
 100e834:	df000017 	ldw	fp,0(sp)
 100e838:	dec00204 	addi	sp,sp,8
 100e83c:	f800283a 	ret

0100e840 <optional_irq_callback>:

/* for all functions in this file, see the altera_avalon_i2c.h file for more complete function descriptions. */

/* optional irq callback */
static void optional_irq_callback(void * context)
{
 100e840:	defff904 	addi	sp,sp,-28
 100e844:	dfc00615 	stw	ra,24(sp)
 100e848:	df000515 	stw	fp,20(sp)
 100e84c:	df000504 	addi	fp,sp,20
 100e850:	e13ffb15 	stw	r4,-20(fp)
   int timeout=100000;
 100e854:	008000b4 	movhi	r2,2
 100e858:	10a1a804 	addi	r2,r2,-31072
 100e85c:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 bytes_read;

   ALT_AVALON_I2C_DEV_t *i2c_dev = context;
 100e860:	e0bffb17 	ldw	r2,-20(fp)
 100e864:	e0bffe15 	stw	r2,-8(fp)
   IRQ_DATA_t *irq = i2c_dev->callback_context;
 100e868:	e0bffe17 	ldw	r2,-8(fp)
 100e86c:	10800717 	ldw	r2,28(r2)
 100e870:	e0bffd15 	stw	r2,-12(fp)

   if (irq->irq_busy==2)  /*receive request*/
 100e874:	e0bffd17 	ldw	r2,-12(fp)
 100e878:	10800217 	ldw	r2,8(r2)
 100e87c:	10800098 	cmpnei	r2,r2,2
 100e880:	1000251e 	bne	r2,zero,100e918 <optional_irq_callback+0xd8>
   {
       alt_avalon_i2c_rx_read_available(i2c_dev, irq->buffer, irq->size, &bytes_read);
 100e884:	e0bffd17 	ldw	r2,-12(fp)
 100e888:	10c00017 	ldw	r3,0(r2)
 100e88c:	e0bffd17 	ldw	r2,-12(fp)
 100e890:	10800117 	ldw	r2,4(r2)
 100e894:	e13ffc04 	addi	r4,fp,-16
 100e898:	200f883a 	mov	r7,r4
 100e89c:	100d883a 	mov	r6,r2
 100e8a0:	180b883a 	mov	r5,r3
 100e8a4:	e13ffe17 	ldw	r4,-8(fp)
 100e8a8:	100eff40 	call	100eff4 <alt_avalon_i2c_rx_read_available>
       irq->size-=bytes_read;
 100e8ac:	e0bffd17 	ldw	r2,-12(fp)
 100e8b0:	10c00117 	ldw	r3,4(r2)
 100e8b4:	e0bffc17 	ldw	r2,-16(fp)
 100e8b8:	1887c83a 	sub	r3,r3,r2
 100e8bc:	e0bffd17 	ldw	r2,-12(fp)
 100e8c0:	10c00115 	stw	r3,4(r2)
       irq->buffer+=bytes_read;
 100e8c4:	e0bffd17 	ldw	r2,-12(fp)
 100e8c8:	10c00017 	ldw	r3,0(r2)
 100e8cc:	e0bffc17 	ldw	r2,-16(fp)
 100e8d0:	1887883a 	add	r3,r3,r2
 100e8d4:	e0bffd17 	ldw	r2,-12(fp)
 100e8d8:	10c00015 	stw	r3,0(r2)
       if (irq->size > 0)
 100e8dc:	e0bffd17 	ldw	r2,-12(fp)
 100e8e0:	10800117 	ldw	r2,4(r2)
 100e8e4:	10000c26 	beq	r2,zero,100e918 <optional_irq_callback+0xd8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100e8e8:	01400704 	movi	r5,28
 100e8ec:	e13ffe17 	ldw	r4,-8(fp)
 100e8f0:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
         /* re-enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 100e8f4:	01400084 	movi	r5,2
 100e8f8:	e13ffe17 	ldw	r4,-8(fp)
 100e8fc:	10102600 	call	1010260 <alt_avalon_i2c_int_enable>
 100e900:	00000e06 	br	100e93c <optional_irq_callback+0xfc>
    /*for a write, this code will only be reached after the cmd fifo is*/
    /*empty (sent).  For a read this code will only be reached after all*/
    /*bytes have been received.*/
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
    { 
      if (--timeout == 0)
 100e904:	e0bfff17 	ldw	r2,-4(fp)
 100e908:	10bfffc4 	addi	r2,r2,-1
 100e90c:	e0bfff15 	stw	r2,-4(fp)
 100e910:	e0bfff17 	ldw	r2,-4(fp)
 100e914:	10000426 	beq	r2,zero,100e928 <optional_irq_callback+0xe8>
    while (alt_avalon_i2c_is_busy(i2c_dev)) 
 100e918:	e13ffe17 	ldw	r4,-8(fp)
 100e91c:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 100e920:	103ff81e 	bne	r2,zero,100e904 <optional_irq_callback+0xc4>
 100e924:	00000106 	br	100e92c <optional_irq_callback+0xec>
      {
         break;
 100e928:	0001883a 	nop
      }
    }

    /*disable the ip.  The ip is disabled and enabled for each transaction.*/
    alt_avalon_i2c_disable(i2c_dev);
 100e92c:	e13ffe17 	ldw	r4,-8(fp)
 100e930:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>

    irq->irq_busy=0;
 100e934:	e0bffd17 	ldw	r2,-12(fp)
 100e938:	10000215 	stw	zero,8(r2)
}
 100e93c:	e037883a 	mov	sp,fp
 100e940:	dfc00117 	ldw	ra,4(sp)
 100e944:	df000017 	ldw	fp,0(sp)
 100e948:	dec00204 	addi	sp,sp,8
 100e94c:	f800283a 	ret

0100e950 <alt_avalon_i2c_register_optional_irq_handler>:

void alt_avalon_i2c_register_optional_irq_handler(ALT_AVALON_I2C_DEV_t *i2c_dev,IRQ_DATA_t * irq_data)
{
 100e950:	defffc04 	addi	sp,sp,-16
 100e954:	dfc00315 	stw	ra,12(sp)
 100e958:	df000215 	stw	fp,8(sp)
 100e95c:	df000204 	addi	fp,sp,8
 100e960:	e13fff15 	stw	r4,-4(fp)
 100e964:	e17ffe15 	stw	r5,-8(fp)
   irq_data->irq_busy=0;
 100e968:	e0bffe17 	ldw	r2,-8(fp)
 100e96c:	10000215 	stw	zero,8(r2)
   alt_avalon_i2c_register_callback(i2c_dev,optional_irq_callback,0,irq_data);
 100e970:	e1fffe17 	ldw	r7,-8(fp)
 100e974:	000d883a 	mov	r6,zero
 100e978:	01404074 	movhi	r5,257
 100e97c:	297a1004 	addi	r5,r5,-6080
 100e980:	e13fff17 	ldw	r4,-4(fp)
 100e984:	100ea400 	call	100ea40 <alt_avalon_i2c_register_callback>
}
 100e988:	0001883a 	nop
 100e98c:	e037883a 	mov	sp,fp
 100e990:	dfc00117 	ldw	ra,4(sp)
 100e994:	df000017 	ldw	fp,0(sp)
 100e998:	dec00204 	addi	sp,sp,8
 100e99c:	f800283a 	ret

0100e9a0 <alt_avalon_i2c_irq>:
ALT_LLIST_HEAD(alt_avalon_i2c_list);

/* Interrupt handler for the AVALON_I2C module. */
/* Interrupts are not re-enabled in this handler */
static void alt_avalon_i2c_irq(void *context)
{
 100e9a0:	defff904 	addi	sp,sp,-28
 100e9a4:	dfc00615 	stw	ra,24(sp)
 100e9a8:	df000515 	stw	fp,20(sp)
 100e9ac:	df000504 	addi	fp,sp,20
 100e9b0:	e13ffb15 	stw	r4,-20(fp)
    ALT_AVALON_I2C_DEV_t *dev = (ALT_AVALON_I2C_DEV_t *) context;
 100e9b4:	e0bffb17 	ldw	r2,-20(fp)
 100e9b8:	e0bfff15 	stw	r2,-4(fp)
    alt_irq_context cpu_sr;
     
    /*disable i2c interrupts*/
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 100e9bc:	014007c4 	movi	r5,31
 100e9c0:	e13fff17 	ldw	r4,-4(fp)
 100e9c4:	10101f40 	call	10101f4 <alt_avalon_i2c_int_disable>
    
    /* clear irq status */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100e9c8:	01400704 	movi	r5,28
 100e9cc:	e13fff17 	ldw	r4,-4(fp)
 100e9d0:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
 100e9d4:	e0bfff17 	ldw	r2,-4(fp)
 100e9d8:	10800617 	ldw	r2,24(r2)
 100e9dc:	10001226 	beq	r2,zero,100ea28 <alt_avalon_i2c_irq+0x88>
  NIOS2_READ_STATUS (context);
 100e9e0:	0005303a 	rdctl	r2,status
 100e9e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100e9e8:	e0fffc17 	ldw	r3,-16(fp)
 100e9ec:	00bfff84 	movi	r2,-2
 100e9f0:	1884703a 	and	r2,r3,r2
 100e9f4:	1001703a 	wrctl	status,r2
  return context;
 100e9f8:	e0bffc17 	ldw	r2,-16(fp)
    {
        cpu_sr = alt_irq_disable_all();
 100e9fc:	e0bffe15 	stw	r2,-8(fp)
        dev->callback(dev);
 100ea00:	e0bfff17 	ldw	r2,-4(fp)
 100ea04:	10800617 	ldw	r2,24(r2)
 100ea08:	e13fff17 	ldw	r4,-4(fp)
 100ea0c:	103ee83a 	callr	r2
 100ea10:	e0bffe17 	ldw	r2,-8(fp)
 100ea14:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context);
 100ea18:	e0bffd17 	ldw	r2,-12(fp)
 100ea1c:	1001703a 	wrctl	status,r2
}
 100ea20:	0001883a 	nop
        alt_irq_enable_all(cpu_sr);
    }

    return;
 100ea24:	0001883a 	nop
 100ea28:	0001883a 	nop
}
 100ea2c:	e037883a 	mov	sp,fp
 100ea30:	dfc00117 	ldw	ra,4(sp)
 100ea34:	df000017 	ldw	fp,0(sp)
 100ea38:	dec00204 	addi	sp,sp,8
 100ea3c:	f800283a 	ret

0100ea40 <alt_avalon_i2c_register_callback>:
void alt_avalon_i2c_register_callback(
    ALT_AVALON_I2C_DEV_t *dev,
    alt_avalon_i2c_callback callback,
    alt_u32 control,
    void *context)
{
 100ea40:	defffb04 	addi	sp,sp,-20
 100ea44:	df000415 	stw	fp,16(sp)
 100ea48:	df000404 	addi	fp,sp,16
 100ea4c:	e13fff15 	stw	r4,-4(fp)
 100ea50:	e17ffe15 	stw	r5,-8(fp)
 100ea54:	e1bffd15 	stw	r6,-12(fp)
 100ea58:	e1fffc15 	stw	r7,-16(fp)
    dev->callback         = callback;
 100ea5c:	e0bfff17 	ldw	r2,-4(fp)
 100ea60:	e0fffe17 	ldw	r3,-8(fp)
 100ea64:	10c00615 	stw	r3,24(r2)
    dev->callback_context = context;
 100ea68:	e0bfff17 	ldw	r2,-4(fp)
 100ea6c:	e0fffc17 	ldw	r3,-16(fp)
 100ea70:	10c00715 	stw	r3,28(r2)
    dev->control          = control;
 100ea74:	e0bfff17 	ldw	r2,-4(fp)
 100ea78:	e0fffd17 	ldw	r3,-12(fp)
 100ea7c:	10c00815 	stw	r3,32(r2)

    return ;
 100ea80:	0001883a 	nop
}
 100ea84:	e037883a 	mov	sp,fp
 100ea88:	df000017 	ldw	fp,0(sp)
 100ea8c:	dec00104 	addi	sp,sp,4
 100ea90:	f800283a 	ret

0100ea94 <alt_avalon_i2c_init>:

 /* Initializes the I2C Module. This routine is called
 * from the ALT_AVALON_I2C_INIT macro and is called automatically
 * by alt_sys_init.c */
void alt_avalon_i2c_init (ALT_AVALON_I2C_DEV_t *dev)
{
 100ea94:	defff704 	addi	sp,sp,-36
 100ea98:	dfc00815 	stw	ra,32(sp)
 100ea9c:	df000715 	stw	fp,28(sp)
 100eaa0:	df000704 	addi	fp,sp,28
 100eaa4:	e13ffa15 	stw	r4,-24(fp)
    extern alt_llist alt_avalon_i2c_list;
    ALT_AVALON_I2C_MASTER_CONFIG_t cfg;
    int error;

    /* disable ip */
    alt_avalon_i2c_disable(dev);
 100eaa8:	e13ffa17 	ldw	r4,-24(fp)
 100eaac:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>

    /* Disable interrupts */
    alt_avalon_i2c_int_disable(dev,ALT_AVALON_I2C_ISR_ALLINTS_MSK);
 100eab0:	014007c4 	movi	r5,31
 100eab4:	e13ffa17 	ldw	r4,-24(fp)
 100eab8:	10101f40 	call	10101f4 <alt_avalon_i2c_int_disable>

    /* clear ISR register content */
    alt_avalon_i2c_int_clear(dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100eabc:	01400704 	movi	r5,28
 100eac0:	e13ffa17 	ldw	r4,-24(fp)
 100eac4:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
    
    /* set the cmd fifo threshold */
    alt_avalon_i2c_tfr_cmd_fifo_threshold_set(dev,ALT_AVALON_I2C_TFR_CMD_FIFO_NOT_FULL);
 100eac8:	014000c4 	movi	r5,3
 100eacc:	e13ffa17 	ldw	r4,-24(fp)
 100ead0:	10104080 	call	1010408 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
    
    /* set the tx fifo threshold */
    alt_avalon_i2c_rx_fifo_threshold_set(dev,ALT_AVALON_I2C_RX_DATA_FIFO_FULL);
 100ead4:	014000c4 	movi	r5,3
 100ead8:	e13ffa17 	ldw	r4,-24(fp)
 100eadc:	10103580 	call	1010358 <alt_avalon_i2c_rx_fifo_threshold_set>
    
    /* set the default bus speed */
    cfg.speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;
 100eae0:	e03ffc15 	stw	zero,-16(fp)
    
    /*set the address mode */
    cfg.addr_mode = ALT_AVALON_I2C_ADDR_MODE_7_BIT;
 100eae4:	e03ffb15 	stw	zero,-20(fp)
    
    /* set the bus speed */
    alt_avalon_i2c_master_config_speed_set(dev,&cfg,ALT_AVALON_I2C_SS_MAX_HZ);
 100eae8:	e0bffb04 	addi	r2,fp,-20
 100eaec:	018000b4 	movhi	r6,2
 100eaf0:	31a1a804 	addi	r6,r6,-31072
 100eaf4:	100b883a 	mov	r5,r2
 100eaf8:	e13ffa17 	ldw	r4,-24(fp)
 100eafc:	100eeb40 	call	100eeb4 <alt_avalon_i2c_master_config_speed_set>
    
    /* write the cfg information */
    alt_avalon_i2c_master_config_set(dev,&cfg);
 100eb00:	e0bffb04 	addi	r2,fp,-20
 100eb04:	100b883a 	mov	r5,r2
 100eb08:	e13ffa17 	ldw	r4,-24(fp)
 100eb0c:	100ed540 	call	100ed54 <alt_avalon_i2c_master_config_set>
    
    /* Register this instance of the i2c controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_avalon_i2c_list);
 100eb10:	d1600d04 	addi	r5,gp,-32716
 100eb14:	e13ffa17 	ldw	r4,-24(fp)
 100eb18:	10114c40 	call	10114c4 <alt_dev_llist_insert>
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 100eb1c:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
 100eb20:	e0bfff15 	stw	r2,-4(fp)

    if (!error)
 100eb24:	e0bfff17 	ldw	r2,-4(fp)
 100eb28:	10000c1e 	bne	r2,zero,100eb5c <alt_avalon_i2c_init+0xc8>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(dev->irq_controller_ID, dev->irq_ID, alt_avalon_i2c_irq, dev, 0x0);
 100eb2c:	e0bffa17 	ldw	r2,-24(fp)
 100eb30:	10c00417 	ldw	r3,16(r2)
 100eb34:	e0bffa17 	ldw	r2,-24(fp)
 100eb38:	10800517 	ldw	r2,20(r2)
 100eb3c:	d8000015 	stw	zero,0(sp)
 100eb40:	e1fffa17 	ldw	r7,-24(fp)
 100eb44:	01804074 	movhi	r6,257
 100eb48:	31ba6804 	addi	r6,r6,-5728
 100eb4c:	100b883a 	mov	r5,r2
 100eb50:	1809883a 	mov	r4,r3
 100eb54:	101161c0 	call	101161c <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }

    return;
 100eb58:	00000406 	br	100eb6c <alt_avalon_i2c_init+0xd8>
        alt_printf("failed to create semaphores\n");
 100eb5c:	01004074 	movhi	r4,257
 100eb60:	210ad604 	addi	r4,r4,11096
 100eb64:	1011c7c0 	call	1011c7c <alt_printf>
    return;
 100eb68:	0001883a 	nop

}
 100eb6c:	e037883a 	mov	sp,fp
 100eb70:	dfc00117 	ldw	ra,4(sp)
 100eb74:	df000017 	ldw	fp,0(sp)
 100eb78:	dec00204 	addi	sp,sp,8
 100eb7c:	f800283a 	ret

0100eb80 <alt_avalon_i2c_open>:

/*  Retrieve a pointer to the i2c instance */
ALT_AVALON_I2C_DEV_t* alt_avalon_i2c_open(const char* name)
{
 100eb80:	defffc04 	addi	sp,sp,-16
 100eb84:	dfc00315 	stw	ra,12(sp)
 100eb88:	df000215 	stw	fp,8(sp)
 100eb8c:	df000204 	addi	fp,sp,8
 100eb90:	e13ffe15 	stw	r4,-8(fp)
    ALT_AVALON_I2C_DEV_t* dev = NULL;
 100eb94:	e03fff15 	stw	zero,-4(fp)

    dev = (ALT_AVALON_I2C_DEV_t*) alt_find_dev (name, &alt_avalon_i2c_list);
 100eb98:	d1600d04 	addi	r5,gp,-32716
 100eb9c:	e13ffe17 	ldw	r4,-8(fp)
 100eba0:	101156c0 	call	101156c <alt_find_dev>
 100eba4:	e0bfff15 	stw	r2,-4(fp)

    return dev;
 100eba8:	e0bfff17 	ldw	r2,-4(fp)
}
 100ebac:	e037883a 	mov	sp,fp
 100ebb0:	dfc00117 	ldw	ra,4(sp)
 100ebb4:	df000017 	ldw	fp,0(sp)
 100ebb8:	dec00204 	addi	sp,sp,8
 100ebbc:	f800283a 	ret

0100ebc0 <alt_avalon_i2c_enable>:

/* enable the avalon i2c ip */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_enable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 100ebc0:	defffc04 	addi	sp,sp,-16
 100ebc4:	df000315 	stw	fp,12(sp)
 100ebc8:	df000304 	addi	fp,sp,12
 100ebcc:	e13ffd15 	stw	r4,-12(fp)
   IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 100ebd0:	e0bffd17 	ldw	r2,-12(fp)
 100ebd4:	10800717 	ldw	r2,28(r2)
 100ebd8:	e0bfff15 	stw	r2,-4(fp)
   alt_u32 enable_status;
       
   /*if the ip is already enabled, return a busy status*/
   enable_status = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_EN_MSK) >> ALT_AVALON_I2C_CTRL_EN_OFST;
 100ebdc:	e0bffd17 	ldw	r2,-12(fp)
 100ebe0:	10800317 	ldw	r2,12(r2)
 100ebe4:	10800204 	addi	r2,r2,8
 100ebe8:	10800037 	ldwio	r2,0(r2)
 100ebec:	1080004c 	andi	r2,r2,1
 100ebf0:	e0bffe15 	stw	r2,-8(fp)
   if (enable_status)
 100ebf4:	e0bffe17 	ldw	r2,-8(fp)
 100ebf8:	10000226 	beq	r2,zero,100ec04 <alt_avalon_i2c_enable+0x44>
   {
     return ALT_AVALON_I2C_BUSY;
 100ebfc:	00bffe44 	movi	r2,-7
 100ec00:	00001106 	br	100ec48 <alt_avalon_i2c_enable+0x88>
   }
   
   /*if the optional irq callback is registered ensure irq_busy is 0*/
   if (i2c_dev->callback == optional_irq_callback)
 100ec04:	e0bffd17 	ldw	r2,-12(fp)
 100ec08:	10c00617 	ldw	r3,24(r2)
 100ec0c:	00804074 	movhi	r2,257
 100ec10:	10ba1004 	addi	r2,r2,-6080
 100ec14:	1880021e 	bne	r3,r2,100ec20 <alt_avalon_i2c_enable+0x60>
   {
     irq_data->irq_busy=0;
 100ec18:	e0bfff17 	ldw	r2,-4(fp)
 100ec1c:	10000215 	stw	zero,8(r2)
   }
   
   /* enable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,ALT_AVALON_I2C_CTRL_EN_MSK,ALT_AVALON_I2C_CTRL_EN_MSK);
 100ec20:	e0bffd17 	ldw	r2,-12(fp)
 100ec24:	10800317 	ldw	r2,12(r2)
 100ec28:	10800204 	addi	r2,r2,8
 100ec2c:	e0fffd17 	ldw	r3,-12(fp)
 100ec30:	18c00317 	ldw	r3,12(r3)
 100ec34:	18c00204 	addi	r3,r3,8
 100ec38:	18c00037 	ldwio	r3,0(r3)
 100ec3c:	18c00054 	ori	r3,r3,1
 100ec40:	10c00035 	stwio	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 100ec44:	0005883a 	mov	r2,zero
}
 100ec48:	e037883a 	mov	sp,fp
 100ec4c:	df000017 	ldw	fp,0(sp)
 100ec50:	dec00104 	addi	sp,sp,4
 100ec54:	f800283a 	ret

0100ec58 <alt_avalon_i2c_disable>:

/* disable the avalon i2c ip */
void alt_avalon_i2c_disable(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 100ec58:	defffe04 	addi	sp,sp,-8
 100ec5c:	df000115 	stw	fp,4(sp)
 100ec60:	df000104 	addi	fp,sp,4
 100ec64:	e13fff15 	stw	r4,-4(fp)
   /* disable ip */
   IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,0,ALT_AVALON_I2C_CTRL_EN_MSK);
 100ec68:	e0bfff17 	ldw	r2,-4(fp)
 100ec6c:	10800317 	ldw	r2,12(r2)
 100ec70:	10800204 	addi	r2,r2,8
 100ec74:	e0ffff17 	ldw	r3,-4(fp)
 100ec78:	18c00317 	ldw	r3,12(r3)
 100ec7c:	18c00204 	addi	r3,r3,8
 100ec80:	19000037 	ldwio	r4,0(r3)
 100ec84:	00ffff84 	movi	r3,-2
 100ec88:	20c6703a 	and	r3,r4,r3
 100ec8c:	10c00035 	stwio	r3,0(r2)

}
 100ec90:	0001883a 	nop
 100ec94:	e037883a 	mov	sp,fp
 100ec98:	df000017 	ldw	fp,0(sp)
 100ec9c:	dec00104 	addi	sp,sp,4
 100eca0:	f800283a 	ret

0100eca4 <alt_avalon_i2c_master_config_get>:

/* populate the the master config structure from the register values */
void alt_avalon_i2c_master_config_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 100eca4:	defffd04 	addi	sp,sp,-12
 100eca8:	df000215 	stw	fp,8(sp)
 100ecac:	df000204 	addi	fp,sp,8
 100ecb0:	e13fff15 	stw	r4,-4(fp)
 100ecb4:	e17ffe15 	stw	r5,-8(fp)

    cfg->addr_mode = i2c_dev->address_mode;
 100ecb8:	e0bfff17 	ldw	r2,-4(fp)
 100ecbc:	10c00d17 	ldw	r3,52(r2)
 100ecc0:	e0bffe17 	ldw	r2,-8(fp)
 100ecc4:	10c00015 	stw	r3,0(r2)
    cfg->speed_mode = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK) >> ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST;    
 100ecc8:	e0bfff17 	ldw	r2,-4(fp)
 100eccc:	10800317 	ldw	r2,12(r2)
 100ecd0:	10800204 	addi	r2,r2,8
 100ecd4:	10800037 	ldwio	r2,0(r2)
 100ecd8:	1005d07a 	srai	r2,r2,1
 100ecdc:	1080004c 	andi	r2,r2,1
 100ece0:	1007883a 	mov	r3,r2
 100ece4:	e0bffe17 	ldw	r2,-8(fp)
 100ece8:	10c00115 	stw	r3,4(r2)

    cfg->scl_hcnt = (IORD_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_HIGH_COUNT_PERIOD_OFST;    
 100ecec:	e0bfff17 	ldw	r2,-4(fp)
 100ecf0:	10800317 	ldw	r2,12(r2)
 100ecf4:	10800904 	addi	r2,r2,36
 100ecf8:	10800037 	ldwio	r2,0(r2)
 100ecfc:	1007883a 	mov	r3,r2
 100ed00:	e0bffe17 	ldw	r2,-8(fp)
 100ed04:	10c0020d 	sth	r3,8(r2)
    cfg->scl_lcnt = (IORD_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base) & ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SCL_LOW_COUNT_PERIOD_OFST;    
 100ed08:	e0bfff17 	ldw	r2,-4(fp)
 100ed0c:	10800317 	ldw	r2,12(r2)
 100ed10:	10800804 	addi	r2,r2,32
 100ed14:	10800037 	ldwio	r2,0(r2)
 100ed18:	1007883a 	mov	r3,r2
 100ed1c:	e0bffe17 	ldw	r2,-8(fp)
 100ed20:	10c0028d 	sth	r3,10(r2)
    cfg->sda_cnt = (IORD_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base) & ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_MSK) >> ALT_AVALON_I2C_SDA_HOLD_COUNT_PERIOD_OFST;    
 100ed24:	e0bfff17 	ldw	r2,-4(fp)
 100ed28:	10800317 	ldw	r2,12(r2)
 100ed2c:	10800a04 	addi	r2,r2,40
 100ed30:	10800037 	ldwio	r2,0(r2)
 100ed34:	1007883a 	mov	r3,r2
 100ed38:	e0bffe17 	ldw	r2,-8(fp)
 100ed3c:	10c0030d 	sth	r3,12(r2)
}
 100ed40:	0001883a 	nop
 100ed44:	e037883a 	mov	sp,fp
 100ed48:	df000017 	ldw	fp,0(sp)
 100ed4c:	dec00104 	addi	sp,sp,4
 100ed50:	f800283a 	ret

0100ed54 <alt_avalon_i2c_master_config_set>:

/* set the registers from the master config structure */
void alt_avalon_i2c_master_config_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                          const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg)
{
 100ed54:	defffd04 	addi	sp,sp,-12
 100ed58:	df000215 	stw	fp,8(sp)
 100ed5c:	df000204 	addi	fp,sp,8
 100ed60:	e13fff15 	stw	r4,-4(fp)
 100ed64:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->address_mode   =   cfg->addr_mode;
 100ed68:	e0bffe17 	ldw	r2,-8(fp)
 100ed6c:	10c00017 	ldw	r3,0(r2)
 100ed70:	e0bfff17 	ldw	r2,-4(fp)
 100ed74:	10c00d15 	stw	r3,52(r2)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,(cfg->speed_mode) << ALT_AVALON_I2C_CTRL_BUS_SPEED_OFST,ALT_AVALON_I2C_CTRL_BUS_SPEED_MSK);
 100ed78:	e0bfff17 	ldw	r2,-4(fp)
 100ed7c:	10800317 	ldw	r2,12(r2)
 100ed80:	10c00204 	addi	r3,r2,8
 100ed84:	e0bfff17 	ldw	r2,-4(fp)
 100ed88:	10800317 	ldw	r2,12(r2)
 100ed8c:	10800204 	addi	r2,r2,8
 100ed90:	10800037 	ldwio	r2,0(r2)
 100ed94:	1009883a 	mov	r4,r2
 100ed98:	00bfff44 	movi	r2,-3
 100ed9c:	2088703a 	and	r4,r4,r2
 100eda0:	e0bffe17 	ldw	r2,-8(fp)
 100eda4:	10800117 	ldw	r2,4(r2)
 100eda8:	1085883a 	add	r2,r2,r2
 100edac:	1080008c 	andi	r2,r2,2
 100edb0:	2084b03a 	or	r2,r4,r2
 100edb4:	18800035 	stwio	r2,0(r3)

    IOWR_ALT_AVALON_I2C_SCL_HIGH(i2c_dev->i2c_base,cfg->scl_hcnt);
 100edb8:	e0bfff17 	ldw	r2,-4(fp)
 100edbc:	10800317 	ldw	r2,12(r2)
 100edc0:	10800904 	addi	r2,r2,36
 100edc4:	e0fffe17 	ldw	r3,-8(fp)
 100edc8:	18c0020b 	ldhu	r3,8(r3)
 100edcc:	18ffffcc 	andi	r3,r3,65535
 100edd0:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SCL_LOW(i2c_dev->i2c_base,cfg->scl_lcnt);
 100edd4:	e0bfff17 	ldw	r2,-4(fp)
 100edd8:	10800317 	ldw	r2,12(r2)
 100eddc:	10800804 	addi	r2,r2,32
 100ede0:	e0fffe17 	ldw	r3,-8(fp)
 100ede4:	18c0028b 	ldhu	r3,10(r3)
 100ede8:	18ffffcc 	andi	r3,r3,65535
 100edec:	10c00035 	stwio	r3,0(r2)
    IOWR_ALT_AVALON_I2C_SDA_HOLD(i2c_dev->i2c_base,cfg->sda_cnt);
 100edf0:	e0bfff17 	ldw	r2,-4(fp)
 100edf4:	10800317 	ldw	r2,12(r2)
 100edf8:	10800a04 	addi	r2,r2,40
 100edfc:	e0fffe17 	ldw	r3,-8(fp)
 100ee00:	18c0030b 	ldhu	r3,12(r3)
 100ee04:	18ffffcc 	andi	r3,r3,65535
 100ee08:	10c00035 	stwio	r3,0(r2)
}
 100ee0c:	0001883a 	nop
 100ee10:	e037883a 	mov	sp,fp
 100ee14:	df000017 	ldw	fp,0(sp)
 100ee18:	dec00104 	addi	sp,sp,4
 100ee1c:	f800283a 	ret

0100ee20 <alt_avalon_i2c_master_config_speed_get>:
 * I2C master configuration.
*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                const ALT_AVALON_I2C_MASTER_CONFIG_t* cfg,
                                                alt_u32 * speed_in_hz)
{
 100ee20:	defffb04 	addi	sp,sp,-20
 100ee24:	dfc00415 	stw	ra,16(sp)
 100ee28:	df000315 	stw	fp,12(sp)
 100ee2c:	df000304 	addi	fp,sp,12
 100ee30:	e13fff15 	stw	r4,-4(fp)
 100ee34:	e17ffe15 	stw	r5,-8(fp)
 100ee38:	e1bffd15 	stw	r6,-12(fp)

   if ((cfg->scl_lcnt == 0) || (cfg->scl_hcnt == 0))
 100ee3c:	e0bffe17 	ldw	r2,-8(fp)
 100ee40:	1080028b 	ldhu	r2,10(r2)
 100ee44:	10bfffcc 	andi	r2,r2,65535
 100ee48:	10000426 	beq	r2,zero,100ee5c <alt_avalon_i2c_master_config_speed_get+0x3c>
 100ee4c:	e0bffe17 	ldw	r2,-8(fp)
 100ee50:	1080020b 	ldhu	r2,8(r2)
 100ee54:	10bfffcc 	andi	r2,r2,65535
 100ee58:	1000021e 	bne	r2,zero,100ee64 <alt_avalon_i2c_master_config_speed_get+0x44>
   {
       return ALT_AVALON_I2C_BAD_ARG;
 100ee5c:	00bfff44 	movi	r2,-3
 100ee60:	00000f06 	br	100eea0 <alt_avalon_i2c_master_config_speed_get+0x80>
   }
    
   *speed_in_hz = (i2c_dev->ip_freq_in_hz) / (cfg->scl_lcnt + cfg->scl_hcnt);
 100ee64:	e0bfff17 	ldw	r2,-4(fp)
 100ee68:	11000c17 	ldw	r4,48(r2)
 100ee6c:	e0bffe17 	ldw	r2,-8(fp)
 100ee70:	1080028b 	ldhu	r2,10(r2)
 100ee74:	10ffffcc 	andi	r3,r2,65535
 100ee78:	e0bffe17 	ldw	r2,-8(fp)
 100ee7c:	1080020b 	ldhu	r2,8(r2)
 100ee80:	10bfffcc 	andi	r2,r2,65535
 100ee84:	1885883a 	add	r2,r3,r2
 100ee88:	100b883a 	mov	r5,r2
 100ee8c:	1000d700 	call	1000d70 <__udivsi3>
 100ee90:	1007883a 	mov	r3,r2
 100ee94:	e0bffd17 	ldw	r2,-12(fp)
 100ee98:	10c00015 	stw	r3,0(r2)

   return ALT_AVALON_I2C_SUCCESS;
 100ee9c:	0005883a 	mov	r2,zero
}
 100eea0:	e037883a 	mov	sp,fp
 100eea4:	dfc00117 	ldw	ra,4(sp)
 100eea8:	df000017 	ldw	fp,0(sp)
 100eeac:	dec00204 	addi	sp,sp,8
 100eeb0:	f800283a 	ret

0100eeb4 <alt_avalon_i2c_master_config_speed_set>:
/*This is a utility function that computes parameters for the I2C master
 * configuration that best matches the speed requested. */
 ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_config_speed_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                ALT_AVALON_I2C_MASTER_CONFIG_t * cfg,
                                                alt_u32 speed_in_hz)
{
 100eeb4:	defff904 	addi	sp,sp,-28
 100eeb8:	dfc00615 	stw	ra,24(sp)
 100eebc:	df000515 	stw	fp,20(sp)
 100eec0:	df000504 	addi	fp,sp,20
 100eec4:	e13ffd15 	stw	r4,-12(fp)
 100eec8:	e17ffc15 	stw	r5,-16(fp)
 100eecc:	e1bffb15 	stw	r6,-20(fp)
    alt_u32 scl_lcnt,scl_hcnt;

    /* If speed is not standard or fast return range error */
    if ((speed_in_hz > ALT_AVALON_I2C_FS_MAX_HZ) || (speed_in_hz < ALT_AVALON_I2C_SS_MIN_HZ) || (speed_in_hz == 0))
 100eed0:	e0fffb17 	ldw	r3,-20(fp)
 100eed4:	008001b4 	movhi	r2,6
 100eed8:	1086a004 	addi	r2,r2,6784
 100eedc:	10c00436 	bltu	r2,r3,100eef0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 100eee0:	e0bffb17 	ldw	r2,-20(fp)
 100eee4:	10000226 	beq	r2,zero,100eef0 <alt_avalon_i2c_master_config_speed_set+0x3c>
 100eee8:	e0bffb17 	ldw	r2,-20(fp)
 100eeec:	1000021e 	bne	r2,zero,100eef8 <alt_avalon_i2c_master_config_speed_set+0x44>
    {
        return ALT_AVALON_I2C_RANGE;
 100eef0:	00bfff04 	movi	r2,-4
 100eef4:	00002906 	br	100ef9c <alt_avalon_i2c_master_config_speed_set+0xe8>
    }

     /* <lcount> = <internal clock> / 2 * <speed, Hz> */
    scl_lcnt = (i2c_dev->ip_freq_in_hz) / (speed_in_hz << 1);
 100eef8:	e0bffd17 	ldw	r2,-12(fp)
 100eefc:	10c00c17 	ldw	r3,48(r2)
 100ef00:	e0bffb17 	ldw	r2,-20(fp)
 100ef04:	1085883a 	add	r2,r2,r2
 100ef08:	100b883a 	mov	r5,r2
 100ef0c:	1809883a 	mov	r4,r3
 100ef10:	1000d700 	call	1000d70 <__udivsi3>
 100ef14:	e0bfff15 	stw	r2,-4(fp)

    /* adjust h/l by predetermined amount */
    scl_hcnt = scl_lcnt + ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 100ef18:	e0bfff17 	ldw	r2,-4(fp)
 100ef1c:	10800f04 	addi	r2,r2,60
 100ef20:	e0bffe15 	stw	r2,-8(fp)
    scl_lcnt = scl_lcnt - ALT_AVALON_I2C_DIFF_LCNT_HCNT;
 100ef24:	e0bfff17 	ldw	r2,-4(fp)
 100ef28:	10bff104 	addi	r2,r2,-60
 100ef2c:	e0bfff15 	stw	r2,-4(fp)

    if (speed_in_hz > ALT_AVALON_I2C_FS_MIN_HZ)
 100ef30:	e0fffb17 	ldw	r3,-20(fp)
 100ef34:	008000b4 	movhi	r2,2
 100ef38:	10a1a804 	addi	r2,r2,-31072
 100ef3c:	10c0042e 	bgeu	r2,r3,100ef50 <alt_avalon_i2c_master_config_speed_set+0x9c>
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_FAST;
 100ef40:	e0bffc17 	ldw	r2,-16(fp)
 100ef44:	00c00044 	movi	r3,1
 100ef48:	10c00115 	stw	r3,4(r2)
 100ef4c:	00000206 	br	100ef58 <alt_avalon_i2c_master_config_speed_set+0xa4>
    }
    else 
    {
       cfg->speed_mode = ALT_AVALON_I2C_SPEED_STANDARD;    
 100ef50:	e0bffc17 	ldw	r2,-16(fp)
 100ef54:	10000115 	stw	zero,4(r2)
    }

    cfg->scl_lcnt = scl_lcnt;
 100ef58:	e0bfff17 	ldw	r2,-4(fp)
 100ef5c:	1007883a 	mov	r3,r2
 100ef60:	e0bffc17 	ldw	r2,-16(fp)
 100ef64:	10c0028d 	sth	r3,10(r2)
    cfg->scl_hcnt = scl_hcnt;
 100ef68:	e0bffe17 	ldw	r2,-8(fp)
 100ef6c:	1007883a 	mov	r3,r2
 100ef70:	e0bffc17 	ldw	r2,-16(fp)
 100ef74:	10c0020d 	sth	r3,8(r2)
    cfg->sda_cnt  = scl_lcnt - (scl_lcnt / 2);
 100ef78:	e0bfff17 	ldw	r2,-4(fp)
 100ef7c:	1007883a 	mov	r3,r2
 100ef80:	e0bfff17 	ldw	r2,-4(fp)
 100ef84:	1004d07a 	srli	r2,r2,1
 100ef88:	1885c83a 	sub	r2,r3,r2
 100ef8c:	1007883a 	mov	r3,r2
 100ef90:	e0bffc17 	ldw	r2,-16(fp)
 100ef94:	10c0030d 	sth	r3,12(r2)

    return ALT_AVALON_I2C_SUCCESS;
 100ef98:	0005883a 	mov	r2,zero

}
 100ef9c:	e037883a 	mov	sp,fp
 100efa0:	dfc00117 	ldw	ra,4(sp)
 100efa4:	df000017 	ldw	fp,0(sp)
 100efa8:	dec00204 	addi	sp,sp,8
 100efac:	f800283a 	ret

0100efb0 <alt_avalon_i2c_is_busy>:

/*Returns ALT_AVALON_I2C_TRUE if the I2C controller is busy. The I2C controller is busy if
 * not in the IDLE state */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_is_busy(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 100efb0:	defffe04 	addi	sp,sp,-8
 100efb4:	df000115 	stw	fp,4(sp)
 100efb8:	df000104 	addi	fp,sp,4
 100efbc:	e13fff15 	stw	r4,-4(fp)

    if (IORD_ALT_AVALON_I2C_STATUS(i2c_dev->i2c_base) & ALT_AVALON_I2C_STATUS_CORE_STATUS_MSK)
 100efc0:	e0bfff17 	ldw	r2,-4(fp)
 100efc4:	10800317 	ldw	r2,12(r2)
 100efc8:	10800504 	addi	r2,r2,20
 100efcc:	10800037 	ldwio	r2,0(r2)
 100efd0:	1080004c 	andi	r2,r2,1
 100efd4:	10000226 	beq	r2,zero,100efe0 <alt_avalon_i2c_is_busy+0x30>
    {
       return ALT_AVALON_I2C_TRUE;
 100efd8:	00800044 	movi	r2,1
 100efdc:	00000106 	br	100efe4 <alt_avalon_i2c_is_busy+0x34>
    }

    return ALT_AVALON_I2C_FALSE;
 100efe0:	0005883a 	mov	r2,zero
}
 100efe4:	e037883a 	mov	sp,fp
 100efe8:	df000017 	ldw	fp,0(sp)
 100efec:	dec00104 	addi	sp,sp,4
 100eff0:	f800283a 	ret

0100eff4 <alt_avalon_i2c_rx_read_available>:

/*Read all available bytes from the receive FIFO up to max_bytes_to_read.  If max_bytes_to_read = 0 then read all available */
void alt_avalon_i2c_rx_read_available(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *buffer, alt_u32 max_bytes_to_read, alt_u32 *bytes_read)
{
 100eff4:	defffb04 	addi	sp,sp,-20
 100eff8:	df000415 	stw	fp,16(sp)
 100effc:	df000404 	addi	fp,sp,16
 100f000:	e13fff15 	stw	r4,-4(fp)
 100f004:	e17ffe15 	stw	r5,-8(fp)
 100f008:	e1bffd15 	stw	r6,-12(fp)
 100f00c:	e1fffc15 	stw	r7,-16(fp)
    *bytes_read = 0;
 100f010:	e0bffc17 	ldw	r2,-16(fp)
 100f014:	10000015 	stw	zero,0(r2)
    
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 100f018:	00001506 	br	100f070 <alt_avalon_i2c_rx_read_available+0x7c>
    {
       buffer[*bytes_read] = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 100f01c:	e0bfff17 	ldw	r2,-4(fp)
 100f020:	10800317 	ldw	r2,12(r2)
 100f024:	10800104 	addi	r2,r2,4
 100f028:	11000037 	ldwio	r4,0(r2)
 100f02c:	e0bffc17 	ldw	r2,-16(fp)
 100f030:	10800017 	ldw	r2,0(r2)
 100f034:	e0fffe17 	ldw	r3,-8(fp)
 100f038:	1885883a 	add	r2,r3,r2
 100f03c:	2007883a 	mov	r3,r4
 100f040:	10c00005 	stb	r3,0(r2)
       *bytes_read+=1; 
 100f044:	e0bffc17 	ldw	r2,-16(fp)
 100f048:	10800017 	ldw	r2,0(r2)
 100f04c:	10c00044 	addi	r3,r2,1
 100f050:	e0bffc17 	ldw	r2,-16(fp)
 100f054:	10c00015 	stw	r3,0(r2)
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 100f058:	e0bffc17 	ldw	r2,-16(fp)
 100f05c:	10800017 	ldw	r2,0(r2)
 100f060:	e0fffd17 	ldw	r3,-12(fp)
 100f064:	1880021e 	bne	r3,r2,100f070 <alt_avalon_i2c_rx_read_available+0x7c>
 100f068:	e0bffd17 	ldw	r2,-12(fp)
 100f06c:	1000061e 	bne	r2,zero,100f088 <alt_avalon_i2c_rx_read_available+0x94>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base))
 100f070:	e0bfff17 	ldw	r2,-4(fp)
 100f074:	10800317 	ldw	r2,12(r2)
 100f078:	10800704 	addi	r2,r2,28
 100f07c:	10800037 	ldwio	r2,0(r2)
 100f080:	103fe61e 	bne	r2,zero,100f01c <alt_avalon_i2c_rx_read_available+0x28>
    }
}
 100f084:	00000106 	br	100f08c <alt_avalon_i2c_rx_read_available+0x98>
       if ((*bytes_read == max_bytes_to_read) && (max_bytes_to_read != 0)) break;       
 100f088:	0001883a 	nop
}
 100f08c:	0001883a 	nop
 100f090:	e037883a 	mov	sp,fp
 100f094:	df000017 	ldw	fp,0(sp)
 100f098:	dec00104 	addi	sp,sp,4
 100f09c:	f800283a 	ret

0100f0a0 <alt_avalon_i2c_rx_read>:

/*when a byte is available, reads a single data byte from the receive FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_rx_read(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u8 *val)
{
 100f0a0:	defffa04 	addi	sp,sp,-24
 100f0a4:	dfc00515 	stw	ra,20(sp)
 100f0a8:	df000415 	stw	fp,16(sp)
 100f0ac:	df000404 	addi	fp,sp,16
 100f0b0:	e13ffd15 	stw	r4,-12(fp)
 100f0b4:	e17ffc15 	stw	r5,-16(fp)
    alt_u32 status = ALT_AVALON_I2C_SUCCESS;
 100f0b8:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout = 100000;
 100f0bc:	008000b4 	movhi	r2,2
 100f0c0:	10a1a804 	addi	r2,r2,-31072
 100f0c4:	e0bffe15 	stw	r2,-8(fp)


    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 100f0c8:	00000d06 	br	100f100 <alt_avalon_i2c_rx_read+0x60>
    {
      if (timeout<10) alt_busy_sleep(10000);
 100f0cc:	e0bffe17 	ldw	r2,-8(fp)
 100f0d0:	108002a8 	cmpgeui	r2,r2,10
 100f0d4:	1000021e 	bne	r2,zero,100f0e0 <alt_avalon_i2c_rx_read+0x40>
 100f0d8:	0109c404 	movi	r4,10000
 100f0dc:	10113100 	call	1011310 <alt_busy_sleep>
      if (--timeout == 0)
 100f0e0:	e0bffe17 	ldw	r2,-8(fp)
 100f0e4:	10bfffc4 	addi	r2,r2,-1
 100f0e8:	e0bffe15 	stw	r2,-8(fp)
 100f0ec:	e0bffe17 	ldw	r2,-8(fp)
 100f0f0:	1000031e 	bne	r2,zero,100f100 <alt_avalon_i2c_rx_read+0x60>
      {
        status = ALT_AVALON_I2C_TIMEOUT;
 100f0f4:	00bfff84 	movi	r2,-2
 100f0f8:	e0bfff15 	stw	r2,-4(fp)
        break;
 100f0fc:	00000506 	br	100f114 <alt_avalon_i2c_rx_read+0x74>
    while (IORD_ALT_AVALON_I2C_RX_DATA_FIFO_LVL(i2c_dev->i2c_base) == 0)
 100f100:	e0bffd17 	ldw	r2,-12(fp)
 100f104:	10800317 	ldw	r2,12(r2)
 100f108:	10800704 	addi	r2,r2,28
 100f10c:	10800037 	ldwio	r2,0(r2)
 100f110:	103fee26 	beq	r2,zero,100f0cc <alt_avalon_i2c_rx_read+0x2c>
      }
    }

    *val = (alt_u8)IORD_ALT_AVALON_I2C_RX_DATA(i2c_dev->i2c_base);
 100f114:	e0bffd17 	ldw	r2,-12(fp)
 100f118:	10800317 	ldw	r2,12(r2)
 100f11c:	10800104 	addi	r2,r2,4
 100f120:	10800037 	ldwio	r2,0(r2)
 100f124:	1007883a 	mov	r3,r2
 100f128:	e0bffc17 	ldw	r2,-16(fp)
 100f12c:	10c00005 	stb	r3,0(r2)
        
    return status;
 100f130:	e0bfff17 	ldw	r2,-4(fp)
}
 100f134:	e037883a 	mov	sp,fp
 100f138:	dfc00117 	ldw	ra,4(sp)
 100f13c:	df000017 	ldw	fp,0(sp)
 100f140:	dec00204 	addi	sp,sp,8
 100f144:	f800283a 	ret

0100f148 <alt_avalon_i2c_cmd_write>:
/* When space is available, writes the Transfer Command FIFO. */
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_cmd_write(ALT_AVALON_I2C_DEV_t *i2c_dev, 
                                                      alt_u8 val,
                                                      alt_u8 issue_restart,
                                                      alt_u8 issue_stop)
{
 100f148:	defff804 	addi	sp,sp,-32
 100f14c:	dfc00715 	stw	ra,28(sp)
 100f150:	df000615 	stw	fp,24(sp)
 100f154:	df000604 	addi	fp,sp,24
 100f158:	e13ffd15 	stw	r4,-12(fp)
 100f15c:	2805883a 	mov	r2,r5
 100f160:	3009883a 	mov	r4,r6
 100f164:	3807883a 	mov	r3,r7
 100f168:	e0bffc05 	stb	r2,-16(fp)
 100f16c:	2005883a 	mov	r2,r4
 100f170:	e0bffb05 	stb	r2,-20(fp)
 100f174:	1805883a 	mov	r2,r3
 100f178:	e0bffa05 	stb	r2,-24(fp)
    alt_u32 timeout = 10000;
 100f17c:	0089c404 	movi	r2,10000
 100f180:	e0bfff15 	stw	r2,-4(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100f184:	e03ffe15 	stw	zero,-8(fp)


    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 100f188:	00000c06 	br	100f1bc <alt_avalon_i2c_cmd_write+0x74>
    {
      if (timeout<10) alt_busy_sleep(10000);    
 100f18c:	e0bfff17 	ldw	r2,-4(fp)
 100f190:	108002a8 	cmpgeui	r2,r2,10
 100f194:	1000021e 	bne	r2,zero,100f1a0 <alt_avalon_i2c_cmd_write+0x58>
 100f198:	0109c404 	movi	r4,10000
 100f19c:	10113100 	call	1011310 <alt_busy_sleep>
      if (--timeout == 0)
 100f1a0:	e0bfff17 	ldw	r2,-4(fp)
 100f1a4:	10bfffc4 	addi	r2,r2,-1
 100f1a8:	e0bfff15 	stw	r2,-4(fp)
 100f1ac:	e0bfff17 	ldw	r2,-4(fp)
 100f1b0:	1000021e 	bne	r2,zero,100f1bc <alt_avalon_i2c_cmd_write+0x74>
      {
        return ALT_AVALON_I2C_TIMEOUT;
 100f1b4:	00bfff84 	movi	r2,-2
 100f1b8:	00001906 	br	100f220 <alt_avalon_i2c_cmd_write+0xd8>
    while ((IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_TX_READY_MSK)==0) 
 100f1bc:	e0bffd17 	ldw	r2,-12(fp)
 100f1c0:	10800317 	ldw	r2,12(r2)
 100f1c4:	10800404 	addi	r2,r2,16
 100f1c8:	10800037 	ldwio	r2,0(r2)
 100f1cc:	1080004c 	andi	r2,r2,1
 100f1d0:	103fee26 	beq	r2,zero,100f18c <alt_avalon_i2c_cmd_write+0x44>
      }
    }

    IOWR_ALT_AVALON_I2C_TFR_CMD(i2c_dev->i2c_base,val |
 100f1d4:	e0bffd17 	ldw	r2,-12(fp)
 100f1d8:	10800317 	ldw	r2,12(r2)
 100f1dc:	e13ffc03 	ldbu	r4,-16(fp)
 100f1e0:	e0fffb03 	ldbu	r3,-20(fp)
 100f1e4:	1806927a 	slli	r3,r3,9
 100f1e8:	20c8b03a 	or	r4,r4,r3
 100f1ec:	e0fffa03 	ldbu	r3,-24(fp)
 100f1f0:	1806923a 	slli	r3,r3,8
 100f1f4:	20c6b03a 	or	r3,r4,r3
 100f1f8:	10c00035 	stwio	r3,0(r2)
                                     (issue_restart << ALT_AVALON_I2C_TFR_CMD_STA_OFST) |
                                     (issue_stop << ALT_AVALON_I2C_TFR_CMD_STO_OFST));


    /*check for nack error*/
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 100f1fc:	e0bffe04 	addi	r2,fp,-8
 100f200:	100b883a 	mov	r5,r2
 100f204:	e13ffd17 	ldw	r4,-12(fp)
 100f208:	100f3900 	call	100f390 <alt_avalon_i2c_check_nack>
    
    /*check for arb lost*/
    alt_avalon_i2c_check_arblost(i2c_dev,&status);
 100f20c:	e0bffe04 	addi	r2,fp,-8
 100f210:	100b883a 	mov	r5,r2
 100f214:	e13ffd17 	ldw	r4,-12(fp)
 100f218:	100f3dc0 	call	100f3dc <alt_avalon_i2c_check_arblost>
    
    return status;
 100f21c:	e0bffe17 	ldw	r2,-8(fp)
}
 100f220:	e037883a 	mov	sp,fp
 100f224:	dfc00117 	ldw	ra,4(sp)
 100f228:	df000017 	ldw	fp,0(sp)
 100f22c:	dec00204 	addi	sp,sp,8
 100f230:	f800283a 	ret

0100f234 <alt_avalon_i2c_send_address>:

/*send 7 or 10 bit i2c address to cmd fifo*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_send_address(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                                       const alt_u32 rw_bit,
                                                       const alt_u8 issue_restart)
{
 100f234:	defffa04 	addi	sp,sp,-24
 100f238:	dfc00515 	stw	ra,20(sp)
 100f23c:	df000415 	stw	fp,16(sp)
 100f240:	df000404 	addi	fp,sp,16
 100f244:	e13ffe15 	stw	r4,-8(fp)
 100f248:	e17ffd15 	stw	r5,-12(fp)
 100f24c:	3005883a 	mov	r2,r6
 100f250:	e0bffc05 	stb	r2,-16(fp)
    alt_u32 status;
        
    if (i2c_dev->address_mode == ALT_AVALON_I2C_ADDR_MODE_10_BIT)
 100f254:	e0bffe17 	ldw	r2,-8(fp)
 100f258:	10800d17 	ldw	r2,52(r2)
 100f25c:	10800058 	cmpnei	r2,r2,1
 100f260:	10001c1e 	bne	r2,zero,100f2d4 <alt_avalon_i2c_send_address+0xa0>
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(((i2c_dev->master_target_address | TARGET_ADDR_MASK_10BIT) >> 7) & 0xfe) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 100f264:	e0bffe17 	ldw	r2,-8(fp)
 100f268:	10800917 	ldw	r2,36(r2)
 100f26c:	1004d1fa 	srli	r2,r2,7
 100f270:	1080038c 	andi	r2,r2,14
 100f274:	1007883a 	mov	r3,r2
 100f278:	e0bffd17 	ldw	r2,-12(fp)
 100f27c:	1884b03a 	or	r2,r3,r2
 100f280:	1007883a 	mov	r3,r2
 100f284:	00bffc04 	movi	r2,-16
 100f288:	1884b03a 	or	r2,r3,r2
 100f28c:	10803fcc 	andi	r2,r2,255
 100f290:	e0fffc03 	ldbu	r3,-16(fp)
 100f294:	000f883a 	mov	r7,zero
 100f298:	180d883a 	mov	r6,r3
 100f29c:	100b883a 	mov	r5,r2
 100f2a0:	e13ffe17 	ldw	r4,-8(fp)
 100f2a4:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100f2a8:	e0bfff15 	stw	r2,-4(fp)
       status = alt_avalon_i2c_cmd_write(i2c_dev,i2c_dev->master_target_address & 0xff,ALT_AVALON_I2C_NO_RESTART,ALT_AVALON_I2C_NO_STOP);      
 100f2ac:	e0bffe17 	ldw	r2,-8(fp)
 100f2b0:	10800917 	ldw	r2,36(r2)
 100f2b4:	10803fcc 	andi	r2,r2,255
 100f2b8:	000f883a 	mov	r7,zero
 100f2bc:	000d883a 	mov	r6,zero
 100f2c0:	100b883a 	mov	r5,r2
 100f2c4:	e13ffe17 	ldw	r4,-8(fp)
 100f2c8:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100f2cc:	e0bfff15 	stw	r2,-4(fp)
 100f2d0:	00000e06 	br	100f30c <alt_avalon_i2c_send_address+0xd8>
    }
    else
    {
       status = alt_avalon_i2c_cmd_write(i2c_dev,(i2c_dev->master_target_address << 1) | rw_bit,issue_restart,ALT_AVALON_I2C_NO_STOP);
 100f2d4:	e0bffe17 	ldw	r2,-8(fp)
 100f2d8:	10800917 	ldw	r2,36(r2)
 100f2dc:	1085883a 	add	r2,r2,r2
 100f2e0:	1007883a 	mov	r3,r2
 100f2e4:	e0bffd17 	ldw	r2,-12(fp)
 100f2e8:	1884b03a 	or	r2,r3,r2
 100f2ec:	10803fcc 	andi	r2,r2,255
 100f2f0:	e0fffc03 	ldbu	r3,-16(fp)
 100f2f4:	000f883a 	mov	r7,zero
 100f2f8:	180d883a 	mov	r6,r3
 100f2fc:	100b883a 	mov	r5,r2
 100f300:	e13ffe17 	ldw	r4,-8(fp)
 100f304:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100f308:	e0bfff15 	stw	r2,-4(fp)
    }
    
    return status;
 100f30c:	e0bfff17 	ldw	r2,-4(fp)
}
 100f310:	e037883a 	mov	sp,fp
 100f314:	dfc00117 	ldw	ra,4(sp)
 100f318:	df000017 	ldw	fp,0(sp)
 100f31c:	dec00204 	addi	sp,sp,8
 100f320:	f800283a 	ret

0100f324 <alt_avalon_i2c_master_target_get>:

/* This function returns the current target address. */
void alt_avalon_i2c_master_target_get(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 * target_addr)
{
 100f324:	defffd04 	addi	sp,sp,-12
 100f328:	df000215 	stw	fp,8(sp)
 100f32c:	df000204 	addi	fp,sp,8
 100f330:	e13fff15 	stw	r4,-4(fp)
 100f334:	e17ffe15 	stw	r5,-8(fp)
    *target_addr=i2c_dev->master_target_address;
 100f338:	e0bfff17 	ldw	r2,-4(fp)
 100f33c:	10c00917 	ldw	r3,36(r2)
 100f340:	e0bffe17 	ldw	r2,-8(fp)
 100f344:	10c00015 	stw	r3,0(r2)
}
 100f348:	0001883a 	nop
 100f34c:	e037883a 	mov	sp,fp
 100f350:	df000017 	ldw	fp,0(sp)
 100f354:	dec00104 	addi	sp,sp,4
 100f358:	f800283a 	ret

0100f35c <alt_avalon_i2c_master_target_set>:

/* This function updates the target address for any upcoming I2C bus IO. */
void alt_avalon_i2c_master_target_set(ALT_AVALON_I2C_DEV_t * i2c_dev, alt_u32 target_addr)
{
 100f35c:	defffd04 	addi	sp,sp,-12
 100f360:	df000215 	stw	fp,8(sp)
 100f364:	df000204 	addi	fp,sp,8
 100f368:	e13fff15 	stw	r4,-4(fp)
 100f36c:	e17ffe15 	stw	r5,-8(fp)
    i2c_dev->master_target_address=target_addr;
 100f370:	e0bfff17 	ldw	r2,-4(fp)
 100f374:	e0fffe17 	ldw	r3,-8(fp)
 100f378:	10c00915 	stw	r3,36(r2)
}
 100f37c:	0001883a 	nop
 100f380:	e037883a 	mov	sp,fp
 100f384:	df000017 	ldw	fp,0(sp)
 100f388:	dec00104 	addi	sp,sp,4
 100f38c:	f800283a 	ret

0100f390 <alt_avalon_i2c_check_nack>:

/*if nack detected, status is set to ALT_AVALON_I2C_NACK_ERR*/
void alt_avalon_i2c_check_nack(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{    
 100f390:	defffd04 	addi	sp,sp,-12
 100f394:	df000215 	stw	fp,8(sp)
 100f398:	df000204 	addi	fp,sp,8
 100f39c:	e13fff15 	stw	r4,-4(fp)
 100f3a0:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_NACK_DET_MSK)
 100f3a4:	e0bfff17 	ldw	r2,-4(fp)
 100f3a8:	10800317 	ldw	r2,12(r2)
 100f3ac:	10800404 	addi	r2,r2,16
 100f3b0:	10800037 	ldwio	r2,0(r2)
 100f3b4:	1080010c 	andi	r2,r2,4
 100f3b8:	10000326 	beq	r2,zero,100f3c8 <alt_avalon_i2c_check_nack+0x38>
    {
      *status=ALT_AVALON_I2C_NACK_ERR;
 100f3bc:	e0bffe17 	ldw	r2,-8(fp)
 100f3c0:	00fffec4 	movi	r3,-5
 100f3c4:	10c00015 	stw	r3,0(r2)
    }
}
 100f3c8:	0001883a 	nop
 100f3cc:	e037883a 	mov	sp,fp
 100f3d0:	df000017 	ldw	fp,0(sp)
 100f3d4:	dec00104 	addi	sp,sp,4
 100f3d8:	f800283a 	ret

0100f3dc <alt_avalon_i2c_check_arblost>:

/*if arb lost is detected, status is set to ALT_AVALON_I2C_ARB_LOST_ERR*/
void alt_avalon_i2c_check_arblost(ALT_AVALON_I2C_DEV_t *i2c_dev,ALT_AVALON_I2C_STATUS_CODE * status)
{      
 100f3dc:	defffd04 	addi	sp,sp,-12
 100f3e0:	df000215 	stw	fp,8(sp)
 100f3e4:	df000204 	addi	fp,sp,8
 100f3e8:	e13fff15 	stw	r4,-4(fp)
 100f3ec:	e17ffe15 	stw	r5,-8(fp)
    if (IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ARBLOST_DET_MSK)
 100f3f0:	e0bfff17 	ldw	r2,-4(fp)
 100f3f4:	10800317 	ldw	r2,12(r2)
 100f3f8:	10800404 	addi	r2,r2,16
 100f3fc:	10800037 	ldwio	r2,0(r2)
 100f400:	1080020c 	andi	r2,r2,8
 100f404:	10000326 	beq	r2,zero,100f414 <alt_avalon_i2c_check_arblost+0x38>
    {
      *status=ALT_AVALON_I2C_ARB_LOST_ERR;
 100f408:	e0bffe17 	ldw	r2,-8(fp)
 100f40c:	00fffe84 	movi	r3,-6
 100f410:	10c00015 	stw	r3,0(r2)
    }
}
 100f414:	0001883a 	nop
 100f418:	e037883a 	mov	sp,fp
 100f41c:	df000017 	ldw	fp,0(sp)
 100f420:	dec00104 	addi	sp,sp,4
 100f424:	f800283a 	ret

0100f428 <alt_avalon_i2c_interrupt_transaction_status>:

ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_interrupt_transaction_status(ALT_AVALON_I2C_DEV_t *i2c_dev)
{
 100f428:	defff804 	addi	sp,sp,-32
 100f42c:	dfc00715 	stw	ra,28(sp)
 100f430:	df000615 	stw	fp,24(sp)
 100f434:	df000604 	addi	fp,sp,24
 100f438:	e13ffa15 	stw	r4,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100f43c:	e03ffd15 	stw	zero,-12(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;
 100f440:	e0bffa17 	ldw	r2,-24(fp)
 100f444:	10800717 	ldw	r2,28(r2)
 100f448:	e0bffe15 	stw	r2,-8(fp)
    alt_u32 timeout=10000 * irq_data->size + 10000;
 100f44c:	e0bffe17 	ldw	r2,-8(fp)
 100f450:	10800117 	ldw	r2,4(r2)
 100f454:	10800044 	addi	r2,r2,1
 100f458:	0149c404 	movi	r5,10000
 100f45c:	1009883a 	mov	r4,r2
 100f460:	1000e300 	call	1000e30 <__mulsi3>
 100f464:	e0bfff15 	stw	r2,-4(fp)
    alt_u32 saveints,temp_bytes_read;
    
    /* save current enabled interrupts */
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&saveints);
 100f468:	e0bffc04 	addi	r2,fp,-16
 100f46c:	100b883a 	mov	r5,r2
 100f470:	e13ffa17 	ldw	r4,-24(fp)
 100f474:	10102c80 	call	10102c8 <alt_avalon_i2c_enabled_ints_get>
    
    /* disable the enabled interrupts */
    alt_avalon_i2c_int_disable(i2c_dev,saveints);
 100f478:	e0bffc17 	ldw	r2,-16(fp)
 100f47c:	100b883a 	mov	r5,r2
 100f480:	e13ffa17 	ldw	r4,-24(fp)
 100f484:	10101f40 	call	10101f4 <alt_avalon_i2c_int_disable>
    
    alt_avalon_i2c_check_nack(i2c_dev,&status);
 100f488:	e0bffd04 	addi	r2,fp,-12
 100f48c:	100b883a 	mov	r5,r2
 100f490:	e13ffa17 	ldw	r4,-24(fp)
 100f494:	100f3900 	call	100f390 <alt_avalon_i2c_check_nack>

    if (status!=ALT_AVALON_I2C_SUCCESS)
 100f498:	e0bffd17 	ldw	r2,-12(fp)
 100f49c:	10002226 	beq	r2,zero,100f528 <alt_avalon_i2c_interrupt_transaction_status+0x100>
    {
      if (irq_data->irq_busy)
 100f4a0:	e0bffe17 	ldw	r2,-8(fp)
 100f4a4:	10800217 	ldw	r2,8(r2)
 100f4a8:	10001d26 	beq	r2,zero,100f520 <alt_avalon_i2c_interrupt_transaction_status+0xf8>
      {
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100f4ac:	00000d06 	br	100f4e4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
        {
              if (timeout<10) alt_busy_sleep(10000);
 100f4b0:	e0bfff17 	ldw	r2,-4(fp)
 100f4b4:	108002a8 	cmpgeui	r2,r2,10
 100f4b8:	1000021e 	bne	r2,zero,100f4c4 <alt_avalon_i2c_interrupt_transaction_status+0x9c>
 100f4bc:	0109c404 	movi	r4,10000
 100f4c0:	10113100 	call	1011310 <alt_busy_sleep>
              if (--timeout == 0)
 100f4c4:	e0bfff17 	ldw	r2,-4(fp)
 100f4c8:	10bfffc4 	addi	r2,r2,-1
 100f4cc:	e0bfff15 	stw	r2,-4(fp)
 100f4d0:	e0bfff17 	ldw	r2,-4(fp)
 100f4d4:	1000031e 	bne	r2,zero,100f4e4 <alt_avalon_i2c_interrupt_transaction_status+0xbc>
              {
                 status = ALT_AVALON_I2C_TIMEOUT;
 100f4d8:	00bfff84 	movi	r2,-2
 100f4dc:	e0bffd15 	stw	r2,-12(fp)
                 break;
 100f4e0:	00000306 	br	100f4f0 <alt_avalon_i2c_interrupt_transaction_status+0xc8>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100f4e4:	e13ffa17 	ldw	r4,-24(fp)
 100f4e8:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 100f4ec:	103ff01e 	bne	r2,zero,100f4b0 <alt_avalon_i2c_interrupt_transaction_status+0x88>
              }
        }
          
        /*clear any rx entries */
        alt_avalon_i2c_rx_read_available(i2c_dev, irq_data->buffer,0,&temp_bytes_read);
 100f4f0:	e0bffe17 	ldw	r2,-8(fp)
 100f4f4:	10800017 	ldw	r2,0(r2)
 100f4f8:	e0fffb04 	addi	r3,fp,-20
 100f4fc:	180f883a 	mov	r7,r3
 100f500:	000d883a 	mov	r6,zero
 100f504:	100b883a 	mov	r5,r2
 100f508:	e13ffa17 	ldw	r4,-24(fp)
 100f50c:	100eff40 	call	100eff4 <alt_avalon_i2c_rx_read_available>
       
        /*disable the ip.  The ip is disabled and enabled for each transaction. */
        alt_avalon_i2c_disable(i2c_dev);
 100f510:	e13ffa17 	ldw	r4,-24(fp)
 100f514:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>
          
        /*abort the transaction */
        irq_data->irq_busy=0;
 100f518:	e0bffe17 	ldw	r2,-8(fp)
 100f51c:	10000215 	stw	zero,8(r2)
      }
      
      /*return nack error so transaction can be retried*/
      return status;
 100f520:	e0bffd17 	ldw	r2,-12(fp)
 100f524:	00000a06 	br	100f550 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    if (irq_data->irq_busy)
 100f528:	e0bffe17 	ldw	r2,-8(fp)
 100f52c:	10800217 	ldw	r2,8(r2)
 100f530:	10000626 	beq	r2,zero,100f54c <alt_avalon_i2c_interrupt_transaction_status+0x124>
    {
        /*re-enable the interrupts*/
        alt_avalon_i2c_int_enable(i2c_dev,saveints);
 100f534:	e0bffc17 	ldw	r2,-16(fp)
 100f538:	100b883a 	mov	r5,r2
 100f53c:	e13ffa17 	ldw	r4,-24(fp)
 100f540:	10102600 	call	1010260 <alt_avalon_i2c_int_enable>
        
        /*return transaction still busy*/
        return ALT_AVALON_I2C_BUSY;
 100f544:	00bffe44 	movi	r2,-7
 100f548:	00000106 	br	100f550 <alt_avalon_i2c_interrupt_transaction_status+0x128>
    }
    
    /*return transaction completed status, ok to do another transaction*/
    return ALT_AVALON_I2C_SUCCESS;
 100f54c:	0005883a 	mov	r2,zero
}
 100f550:	e037883a 	mov	sp,fp
 100f554:	dfc00117 	ldw	ra,4(sp)
 100f558:	df000017 	ldw	fp,0(sp)
 100f55c:	dec00204 	addi	sp,sp,8
 100f560:	f800283a 	ret

0100f564 <alt_avalon_i2c_master_tx>:
/*transmit function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_tx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       const alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 100f564:	defff704 	addi	sp,sp,-36
 100f568:	dfc00815 	stw	ra,32(sp)
 100f56c:	df000715 	stw	fp,28(sp)
 100f570:	df000704 	addi	fp,sp,28
 100f574:	e13ffd15 	stw	r4,-12(fp)
 100f578:	e17ffc15 	stw	r5,-16(fp)
 100f57c:	e1bffb15 	stw	r6,-20(fp)
 100f580:	3805883a 	mov	r2,r7
 100f584:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 100f588:	0089c404 	movi	r2,10000
 100f58c:	e0bffe15 	stw	r2,-8(fp)
    
    while (retry--)
 100f590:	00002206 	br	100f61c <alt_avalon_i2c_master_tx+0xb8>
    {
      if (retry<10) alt_busy_sleep(10000);
 100f594:	e0bffe17 	ldw	r2,-8(fp)
 100f598:	108002a8 	cmpgeui	r2,r2,10
 100f59c:	1000021e 	bne	r2,zero,100f5a8 <alt_avalon_i2c_master_tx+0x44>
 100f5a0:	0109c404 	movi	r4,10000
 100f5a4:	10113100 	call	1011310 <alt_busy_sleep>
      if (use_interrupts)
 100f5a8:	e0bffa03 	ldbu	r2,-24(fp)
 100f5ac:	10000926 	beq	r2,zero,100f5d4 <alt_avalon_i2c_master_tx+0x70>
      {
         status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP); 
 100f5b0:	00800044 	movi	r2,1
 100f5b4:	d8800015 	stw	r2,0(sp)
 100f5b8:	000f883a 	mov	r7,zero
 100f5bc:	e1bffb17 	ldw	r6,-20(fp)
 100f5c0:	e17ffc17 	ldw	r5,-16(fp)
 100f5c4:	e13ffd17 	ldw	r4,-12(fp)
 100f5c8:	100fb100 	call	100fb10 <alt_avalon_i2c_master_transmit_using_interrupts>
 100f5cc:	e0bfff15 	stw	r2,-4(fp)
 100f5d0:	00000806 	br	100f5f4 <alt_avalon_i2c_master_tx+0x90>
      }
      else
      {
         status = alt_avalon_i2c_master_transmit(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);
 100f5d4:	00800044 	movi	r2,1
 100f5d8:	d8800015 	stw	r2,0(sp)
 100f5dc:	000f883a 	mov	r7,zero
 100f5e0:	e1bffb17 	ldw	r6,-20(fp)
 100f5e4:	e17ffc17 	ldw	r5,-16(fp)
 100f5e8:	e13ffd17 	ldw	r4,-12(fp)
 100f5ec:	100f9500 	call	100f950 <alt_avalon_i2c_master_transmit>
 100f5f0:	e0bfff15 	stw	r2,-4(fp)
      }
      if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f5f4:	e0bfff17 	ldw	r2,-4(fp)
 100f5f8:	10bffea0 	cmpeqi	r2,r2,-6
 100f5fc:	1000061e 	bne	r2,zero,100f618 <alt_avalon_i2c_master_tx+0xb4>
 100f600:	e0bfff17 	ldw	r2,-4(fp)
 100f604:	10bffee0 	cmpeqi	r2,r2,-5
 100f608:	1000031e 	bne	r2,zero,100f618 <alt_avalon_i2c_master_tx+0xb4>
 100f60c:	e0bfff17 	ldw	r2,-4(fp)
 100f610:	10bffe58 	cmpnei	r2,r2,-7
 100f614:	1000061e 	bne	r2,zero,100f630 <alt_avalon_i2c_master_tx+0xcc>
 100f618:	0001883a 	nop
    while (retry--)
 100f61c:	e0bffe17 	ldw	r2,-8(fp)
 100f620:	10ffffc4 	addi	r3,r2,-1
 100f624:	e0fffe15 	stw	r3,-8(fp)
 100f628:	103fda1e 	bne	r2,zero,100f594 <alt_avalon_i2c_master_tx+0x30>
 100f62c:	00000106 	br	100f634 <alt_avalon_i2c_master_tx+0xd0>
      break;
 100f630:	0001883a 	nop
    }

    return status;
 100f634:	e0bfff17 	ldw	r2,-4(fp)
}        
 100f638:	e037883a 	mov	sp,fp
 100f63c:	dfc00117 	ldw	ra,4(sp)
 100f640:	df000017 	ldw	fp,0(sp)
 100f644:	dec00204 	addi	sp,sp,8
 100f648:	f800283a 	ret

0100f64c <alt_avalon_i2c_master_rx>:
/*receive function with retry and optionally interrupts*/
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_rx(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 use_interrupts)
{
 100f64c:	defff704 	addi	sp,sp,-36
 100f650:	dfc00815 	stw	ra,32(sp)
 100f654:	df000715 	stw	fp,28(sp)
 100f658:	df000704 	addi	fp,sp,28
 100f65c:	e13ffd15 	stw	r4,-12(fp)
 100f660:	e17ffc15 	stw	r5,-16(fp)
 100f664:	e1bffb15 	stw	r6,-20(fp)
 100f668:	3805883a 	mov	r2,r7
 100f66c:	e0bffa05 	stb	r2,-24(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 100f670:	0089c404 	movi	r2,10000
 100f674:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts) 
 100f678:	e0bffa03 	ldbu	r2,-24(fp)
 100f67c:	10003426 	beq	r2,zero,100f750 <alt_avalon_i2c_master_rx+0x104>
    {
      while (retry--) 
 100f680:	00001706 	br	100f6e0 <alt_avalon_i2c_master_rx+0x94>
      {
        if (retry<10) alt_busy_sleep(10000);      
 100f684:	e0bffe17 	ldw	r2,-8(fp)
 100f688:	108002a8 	cmpgeui	r2,r2,10
 100f68c:	1000021e 	bne	r2,zero,100f698 <alt_avalon_i2c_master_rx+0x4c>
 100f690:	0109c404 	movi	r4,10000
 100f694:	10113100 	call	1011310 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 100f698:	00800044 	movi	r2,1
 100f69c:	d8800015 	stw	r2,0(sp)
 100f6a0:	000f883a 	mov	r7,zero
 100f6a4:	e1bffb17 	ldw	r6,-20(fp)
 100f6a8:	e17ffc17 	ldw	r5,-16(fp)
 100f6ac:	e13ffd17 	ldw	r4,-12(fp)
 100f6b0:	100ff2c0 	call	100ff2c <alt_avalon_i2c_master_receive_using_interrupts>
 100f6b4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f6b8:	e0bfff17 	ldw	r2,-4(fp)
 100f6bc:	10bffea0 	cmpeqi	r2,r2,-6
 100f6c0:	1000061e 	bne	r2,zero,100f6dc <alt_avalon_i2c_master_rx+0x90>
 100f6c4:	e0bfff17 	ldw	r2,-4(fp)
 100f6c8:	10bffee0 	cmpeqi	r2,r2,-5
 100f6cc:	1000031e 	bne	r2,zero,100f6dc <alt_avalon_i2c_master_rx+0x90>
 100f6d0:	e0bfff17 	ldw	r2,-4(fp)
 100f6d4:	10bffe58 	cmpnei	r2,r2,-7
 100f6d8:	1000221e 	bne	r2,zero,100f764 <alt_avalon_i2c_master_rx+0x118>
 100f6dc:	0001883a 	nop
      while (retry--) 
 100f6e0:	e0bffe17 	ldw	r2,-8(fp)
 100f6e4:	10ffffc4 	addi	r3,r2,-1
 100f6e8:	e0fffe15 	stw	r3,-8(fp)
 100f6ec:	103fe51e 	bne	r2,zero,100f684 <alt_avalon_i2c_master_rx+0x38>
 100f6f0:	00001f06 	br	100f770 <alt_avalon_i2c_master_rx+0x124>
    }
    else
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 100f6f4:	e0bffe17 	ldw	r2,-8(fp)
 100f6f8:	108002a8 	cmpgeui	r2,r2,10
 100f6fc:	1000021e 	bne	r2,zero,100f708 <alt_avalon_i2c_master_rx+0xbc>
 100f700:	0109c404 	movi	r4,10000
 100f704:	10113100 	call	1011310 <alt_busy_sleep>
        status = alt_avalon_i2c_master_receive(i2c_dev, buffer, size, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_STOP);     
 100f708:	00800044 	movi	r2,1
 100f70c:	d8800015 	stw	r2,0(sp)
 100f710:	000f883a 	mov	r7,zero
 100f714:	e1bffb17 	ldw	r6,-20(fp)
 100f718:	e17ffc17 	ldw	r5,-16(fp)
 100f71c:	e13ffd17 	ldw	r4,-12(fp)
 100f720:	100fd1c0 	call	100fd1c <alt_avalon_i2c_master_receive>
 100f724:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f728:	e0bfff17 	ldw	r2,-4(fp)
 100f72c:	10bffea0 	cmpeqi	r2,r2,-6
 100f730:	1000061e 	bne	r2,zero,100f74c <alt_avalon_i2c_master_rx+0x100>
 100f734:	e0bfff17 	ldw	r2,-4(fp)
 100f738:	10bffee0 	cmpeqi	r2,r2,-5
 100f73c:	1000031e 	bne	r2,zero,100f74c <alt_avalon_i2c_master_rx+0x100>
 100f740:	e0bfff17 	ldw	r2,-4(fp)
 100f744:	10bffe58 	cmpnei	r2,r2,-7
 100f748:	1000081e 	bne	r2,zero,100f76c <alt_avalon_i2c_master_rx+0x120>
 100f74c:	0001883a 	nop
      while (retry--) 
 100f750:	e0bffe17 	ldw	r2,-8(fp)
 100f754:	10ffffc4 	addi	r3,r2,-1
 100f758:	e0fffe15 	stw	r3,-8(fp)
 100f75c:	103fe51e 	bne	r2,zero,100f6f4 <alt_avalon_i2c_master_rx+0xa8>
 100f760:	00000306 	br	100f770 <alt_avalon_i2c_master_rx+0x124>
        break;
 100f764:	0001883a 	nop
 100f768:	00000106 	br	100f770 <alt_avalon_i2c_master_rx+0x124>
        break;
 100f76c:	0001883a 	nop
      }
    }
    
    return status;
 100f770:	e0bfff17 	ldw	r2,-4(fp)
}        
 100f774:	e037883a 	mov	sp,fp
 100f778:	dfc00117 	ldw	ra,4(sp)
 100f77c:	df000017 	ldw	fp,0(sp)
 100f780:	dec00204 	addi	sp,sp,8
 100f784:	f800283a 	ret

0100f788 <alt_avalon_i2c_master_tx_rx>:
                                       const alt_u8 * txbuffer,
                                       const alt_u32 txsize,
                                       alt_u8 * rxbuffer,
                                       const alt_u32 rxsize,
                                       const alt_u8 use_interrupts)                                       
{
 100f788:	defff604 	addi	sp,sp,-40
 100f78c:	dfc00915 	stw	ra,36(sp)
 100f790:	df000815 	stw	fp,32(sp)
 100f794:	df000804 	addi	fp,sp,32
 100f798:	e13ffd15 	stw	r4,-12(fp)
 100f79c:	e17ffc15 	stw	r5,-16(fp)
 100f7a0:	e1bffb15 	stw	r6,-20(fp)
 100f7a4:	e1fffa15 	stw	r7,-24(fp)
 100f7a8:	e0800317 	ldw	r2,12(fp)
 100f7ac:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status;
    alt_u32 retry=10000;  
 100f7b0:	0089c404 	movi	r2,10000
 100f7b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (use_interrupts)
 100f7b8:	e0bff903 	ldbu	r2,-28(fp)
 100f7bc:	10005626 	beq	r2,zero,100f918 <alt_avalon_i2c_master_tx_rx+0x190>
    {
      while (retry--) 
 100f7c0:	00002806 	br	100f864 <alt_avalon_i2c_master_tx_rx+0xdc>
      {
        if (retry<10) alt_busy_sleep(10000);      
 100f7c4:	e0bffe17 	ldw	r2,-8(fp)
 100f7c8:	108002a8 	cmpgeui	r2,r2,10
 100f7cc:	1000021e 	bne	r2,zero,100f7d8 <alt_avalon_i2c_master_tx_rx+0x50>
 100f7d0:	0109c404 	movi	r4,10000
 100f7d4:	10113100 	call	1011310 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit_using_interrupts(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 100f7d8:	d8000015 	stw	zero,0(sp)
 100f7dc:	000f883a 	mov	r7,zero
 100f7e0:	e1bffb17 	ldw	r6,-20(fp)
 100f7e4:	e17ffc17 	ldw	r5,-16(fp)
 100f7e8:	e13ffd17 	ldw	r4,-12(fp)
 100f7ec:	100fb100 	call	100fb10 <alt_avalon_i2c_master_transmit_using_interrupts>
 100f7f0:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f7f4:	e0bfff17 	ldw	r2,-4(fp)
 100f7f8:	10bffea0 	cmpeqi	r2,r2,-6
 100f7fc:	1000191e 	bne	r2,zero,100f864 <alt_avalon_i2c_master_tx_rx+0xdc>
 100f800:	e0bfff17 	ldw	r2,-4(fp)
 100f804:	10bffee0 	cmpeqi	r2,r2,-5
 100f808:	1000161e 	bne	r2,zero,100f864 <alt_avalon_i2c_master_tx_rx+0xdc>
 100f80c:	e0bfff17 	ldw	r2,-4(fp)
 100f810:	10bffe58 	cmpnei	r2,r2,-7
 100f814:	1000011e 	bne	r2,zero,100f81c <alt_avalon_i2c_master_tx_rx+0x94>
 100f818:	00001206 	br	100f864 <alt_avalon_i2c_master_tx_rx+0xdc>
  
        status = alt_avalon_i2c_master_receive_using_interrupts(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 100f81c:	00800044 	movi	r2,1
 100f820:	d8800015 	stw	r2,0(sp)
 100f824:	01c00044 	movi	r7,1
 100f828:	e1800217 	ldw	r6,8(fp)
 100f82c:	e17ffa17 	ldw	r5,-24(fp)
 100f830:	e13ffd17 	ldw	r4,-12(fp)
 100f834:	100ff2c0 	call	100ff2c <alt_avalon_i2c_master_receive_using_interrupts>
 100f838:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f83c:	e0bfff17 	ldw	r2,-4(fp)
 100f840:	10bffea0 	cmpeqi	r2,r2,-6
 100f844:	1000061e 	bne	r2,zero,100f860 <alt_avalon_i2c_master_tx_rx+0xd8>
 100f848:	e0bfff17 	ldw	r2,-4(fp)
 100f84c:	10bffee0 	cmpeqi	r2,r2,-5
 100f850:	1000031e 	bne	r2,zero,100f860 <alt_avalon_i2c_master_tx_rx+0xd8>
 100f854:	e0bfff17 	ldw	r2,-4(fp)
 100f858:	10bffe58 	cmpnei	r2,r2,-7
 100f85c:	1000331e 	bne	r2,zero,100f92c <alt_avalon_i2c_master_tx_rx+0x1a4>
 100f860:	0001883a 	nop
      while (retry--) 
 100f864:	e0bffe17 	ldw	r2,-8(fp)
 100f868:	10ffffc4 	addi	r3,r2,-1
 100f86c:	e0fffe15 	stw	r3,-8(fp)
 100f870:	103fd41e 	bne	r2,zero,100f7c4 <alt_avalon_i2c_master_tx_rx+0x3c>
 100f874:	00003006 	br	100f938 <alt_avalon_i2c_master_tx_rx+0x1b0>
    }
    else 
    {
      while (retry--) 
      {
        if (retry<10) alt_busy_sleep(10000);      
 100f878:	e0bffe17 	ldw	r2,-8(fp)
 100f87c:	108002a8 	cmpgeui	r2,r2,10
 100f880:	1000021e 	bne	r2,zero,100f88c <alt_avalon_i2c_master_tx_rx+0x104>
 100f884:	0109c404 	movi	r4,10000
 100f888:	10113100 	call	1011310 <alt_busy_sleep>
        status = alt_avalon_i2c_master_transmit(i2c_dev, txbuffer, txsize, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);     
 100f88c:	d8000015 	stw	zero,0(sp)
 100f890:	000f883a 	mov	r7,zero
 100f894:	e1bffb17 	ldw	r6,-20(fp)
 100f898:	e17ffc17 	ldw	r5,-16(fp)
 100f89c:	e13ffd17 	ldw	r4,-12(fp)
 100f8a0:	100f9500 	call	100f950 <alt_avalon_i2c_master_transmit>
 100f8a4:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f8a8:	e0bfff17 	ldw	r2,-4(fp)
 100f8ac:	10bffea0 	cmpeqi	r2,r2,-6
 100f8b0:	1000191e 	bne	r2,zero,100f918 <alt_avalon_i2c_master_tx_rx+0x190>
 100f8b4:	e0bfff17 	ldw	r2,-4(fp)
 100f8b8:	10bffee0 	cmpeqi	r2,r2,-5
 100f8bc:	1000161e 	bne	r2,zero,100f918 <alt_avalon_i2c_master_tx_rx+0x190>
 100f8c0:	e0bfff17 	ldw	r2,-4(fp)
 100f8c4:	10bffe58 	cmpnei	r2,r2,-7
 100f8c8:	1000011e 	bne	r2,zero,100f8d0 <alt_avalon_i2c_master_tx_rx+0x148>
 100f8cc:	00001206 	br	100f918 <alt_avalon_i2c_master_tx_rx+0x190>

        status = alt_avalon_i2c_master_receive(i2c_dev, rxbuffer, rxsize, ALT_AVALON_I2C_RESTART, ALT_AVALON_I2C_STOP);     
 100f8d0:	00800044 	movi	r2,1
 100f8d4:	d8800015 	stw	r2,0(sp)
 100f8d8:	01c00044 	movi	r7,1
 100f8dc:	e1800217 	ldw	r6,8(fp)
 100f8e0:	e17ffa17 	ldw	r5,-24(fp)
 100f8e4:	e13ffd17 	ldw	r4,-12(fp)
 100f8e8:	100fd1c0 	call	100fd1c <alt_avalon_i2c_master_receive>
 100f8ec:	e0bfff15 	stw	r2,-4(fp)
        if ((status==ALT_AVALON_I2C_ARB_LOST_ERR) || (status==ALT_AVALON_I2C_NACK_ERR) || (status==ALT_AVALON_I2C_BUSY)) continue;
 100f8f0:	e0bfff17 	ldw	r2,-4(fp)
 100f8f4:	10bffea0 	cmpeqi	r2,r2,-6
 100f8f8:	1000061e 	bne	r2,zero,100f914 <alt_avalon_i2c_master_tx_rx+0x18c>
 100f8fc:	e0bfff17 	ldw	r2,-4(fp)
 100f900:	10bffee0 	cmpeqi	r2,r2,-5
 100f904:	1000031e 	bne	r2,zero,100f914 <alt_avalon_i2c_master_tx_rx+0x18c>
 100f908:	e0bfff17 	ldw	r2,-4(fp)
 100f90c:	10bffe58 	cmpnei	r2,r2,-7
 100f910:	1000081e 	bne	r2,zero,100f934 <alt_avalon_i2c_master_tx_rx+0x1ac>
 100f914:	0001883a 	nop
      while (retry--) 
 100f918:	e0bffe17 	ldw	r2,-8(fp)
 100f91c:	10ffffc4 	addi	r3,r2,-1
 100f920:	e0fffe15 	stw	r3,-8(fp)
 100f924:	103fd41e 	bne	r2,zero,100f878 <alt_avalon_i2c_master_tx_rx+0xf0>
 100f928:	00000306 	br	100f938 <alt_avalon_i2c_master_tx_rx+0x1b0>
        break;
 100f92c:	0001883a 	nop
 100f930:	00000106 	br	100f938 <alt_avalon_i2c_master_tx_rx+0x1b0>
  
        break;
 100f934:	0001883a 	nop
      }
    }
    
    return status;
 100f938:	e0bfff17 	ldw	r2,-4(fp)
}                                       
 100f93c:	e037883a 	mov	sp,fp
 100f940:	dfc00117 	ldw	ra,4(sp)
 100f944:	df000017 	ldw	fp,0(sp)
 100f948:	dec00204 	addi	sp,sp,8
 100f94c:	f800283a 	ret

0100f950 <alt_avalon_i2c_master_transmit>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 100f950:	defff704 	addi	sp,sp,-36
 100f954:	dfc00815 	stw	ra,32(sp)
 100f958:	df000715 	stw	fp,28(sp)
 100f95c:	df000704 	addi	fp,sp,28
 100f960:	e13ffd15 	stw	r4,-12(fp)
 100f964:	e17ffc15 	stw	r5,-16(fp)
 100f968:	e1bffb15 	stw	r6,-20(fp)
 100f96c:	3807883a 	mov	r3,r7
 100f970:	e0800217 	ldw	r2,8(fp)
 100f974:	e0fffa05 	stb	r3,-24(fp)
 100f978:	e0bff905 	stb	r2,-28(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100f97c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 timeout=size * 10000;
 100f980:	0149c404 	movi	r5,10000
 100f984:	e13ffb17 	ldw	r4,-20(fp)
 100f988:	1000e300 	call	1000e30 <__mulsi3>
 100f98c:	e0bfff15 	stw	r2,-4(fp)
    
    if (size==0)
 100f990:	e0bffb17 	ldw	r2,-20(fp)
 100f994:	1000021e 	bne	r2,zero,100f9a0 <alt_avalon_i2c_master_transmit+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 100f998:	0005883a 	mov	r2,zero
 100f99c:	00005706 	br	100fafc <alt_avalon_i2c_master_transmit+0x1ac>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 100f9a0:	e0bffa03 	ldbu	r2,-24(fp)
 100f9a4:	10000a1e 	bne	r2,zero,100f9d0 <alt_avalon_i2c_master_transmit+0x80>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 100f9a8:	e13ffd17 	ldw	r4,-12(fp)
 100f9ac:	100ebc00 	call	100ebc0 <alt_avalon_i2c_enable>
 100f9b0:	e0bffe15 	stw	r2,-8(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 100f9b4:	e0bffe17 	ldw	r2,-8(fp)
 100f9b8:	10000226 	beq	r2,zero,100f9c4 <alt_avalon_i2c_master_transmit+0x74>
      {
        return status;
 100f9bc:	e0bffe17 	ldw	r2,-8(fp)
 100f9c0:	00004e06 	br	100fafc <alt_avalon_i2c_master_transmit+0x1ac>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100f9c4:	01400704 	movi	r5,28
 100f9c8:	e13ffd17 	ldw	r4,-12(fp)
 100f9cc:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 100f9d0:	e0bffa03 	ldbu	r2,-24(fp)
 100f9d4:	100d883a 	mov	r6,r2
 100f9d8:	000b883a 	mov	r5,zero
 100f9dc:	e13ffd17 	ldw	r4,-12(fp)
 100f9e0:	100f2340 	call	100f234 <alt_avalon_i2c_send_address>
 100f9e4:	e0bffe15 	stw	r2,-8(fp)
      
    if (status == ALT_AVALON_I2C_SUCCESS)
 100f9e8:	e0bffe17 	ldw	r2,-8(fp)
 100f9ec:	1000271e 	bne	r2,zero,100fa8c <alt_avalon_i2c_master_transmit+0x13c>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 100f9f0:	00000f06 	br	100fa30 <alt_avalon_i2c_master_transmit+0xe0>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 100f9f4:	e0bffc17 	ldw	r2,-16(fp)
 100f9f8:	10800003 	ldbu	r2,0(r2)
 100f9fc:	10803fcc 	andi	r2,r2,255
 100fa00:	000f883a 	mov	r7,zero
 100fa04:	000d883a 	mov	r6,zero
 100fa08:	100b883a 	mov	r5,r2
 100fa0c:	e13ffd17 	ldw	r4,-12(fp)
 100fa10:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fa14:	e0bffe15 	stw	r2,-8(fp)
            
            ++buffer;
 100fa18:	e0bffc17 	ldw	r2,-16(fp)
 100fa1c:	10800044 	addi	r2,r2,1
 100fa20:	e0bffc15 	stw	r2,-16(fp)
            --size;
 100fa24:	e0bffb17 	ldw	r2,-20(fp)
 100fa28:	10bfffc4 	addi	r2,r2,-1
 100fa2c:	e0bffb15 	stw	r2,-20(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 100fa30:	e0bffb17 	ldw	r2,-20(fp)
 100fa34:	108000b0 	cmpltui	r2,r2,2
 100fa38:	1000021e 	bne	r2,zero,100fa44 <alt_avalon_i2c_master_transmit+0xf4>
 100fa3c:	e0bffe17 	ldw	r2,-8(fp)
 100fa40:	103fec26 	beq	r2,zero,100f9f4 <alt_avalon_i2c_master_transmit+0xa4>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 100fa44:	e0bffe17 	ldw	r2,-8(fp)
 100fa48:	1000101e 	bne	r2,zero,100fa8c <alt_avalon_i2c_master_transmit+0x13c>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 100fa4c:	e0bffc17 	ldw	r2,-16(fp)
 100fa50:	10800003 	ldbu	r2,0(r2)
 100fa54:	10803fcc 	andi	r2,r2,255
 100fa58:	e0fff903 	ldbu	r3,-28(fp)
 100fa5c:	180f883a 	mov	r7,r3
 100fa60:	000d883a 	mov	r6,zero
 100fa64:	100b883a 	mov	r5,r2
 100fa68:	e13ffd17 	ldw	r4,-12(fp)
 100fa6c:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fa70:	e0bffe15 	stw	r2,-8(fp)

            ++buffer;
 100fa74:	e0bffc17 	ldw	r2,-16(fp)
 100fa78:	10800044 	addi	r2,r2,1
 100fa7c:	e0bffc15 	stw	r2,-16(fp)
            --size;
 100fa80:	e0bffb17 	ldw	r2,-20(fp)
 100fa84:	10bfffc4 	addi	r2,r2,-1
 100fa88:	e0bffb15 	stw	r2,-20(fp)
        }
    }
    
    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 100fa8c:	e0bff903 	ldbu	r2,-28(fp)
 100fa90:	1000101e 	bne	r2,zero,100fad4 <alt_avalon_i2c_master_transmit+0x184>
 100fa94:	e0bffe17 	ldw	r2,-8(fp)
 100fa98:	10001726 	beq	r2,zero,100faf8 <alt_avalon_i2c_master_transmit+0x1a8>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 100fa9c:	00000d06 	br	100fad4 <alt_avalon_i2c_master_transmit+0x184>
        {
            if (timeout<10) alt_busy_sleep(10000);
 100faa0:	e0bfff17 	ldw	r2,-4(fp)
 100faa4:	108002a8 	cmpgeui	r2,r2,10
 100faa8:	1000021e 	bne	r2,zero,100fab4 <alt_avalon_i2c_master_transmit+0x164>
 100faac:	0109c404 	movi	r4,10000
 100fab0:	10113100 	call	1011310 <alt_busy_sleep>
            if (--timeout == 0)
 100fab4:	e0bfff17 	ldw	r2,-4(fp)
 100fab8:	10bfffc4 	addi	r2,r2,-1
 100fabc:	e0bfff15 	stw	r2,-4(fp)
 100fac0:	e0bfff17 	ldw	r2,-4(fp)
 100fac4:	1000031e 	bne	r2,zero,100fad4 <alt_avalon_i2c_master_transmit+0x184>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 100fac8:	00bfff84 	movi	r2,-2
 100facc:	e0bffe15 	stw	r2,-8(fp)
               break;
 100fad0:	00000306 	br	100fae0 <alt_avalon_i2c_master_transmit+0x190>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100fad4:	e13ffd17 	ldw	r4,-12(fp)
 100fad8:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 100fadc:	103ff01e 	bne	r2,zero,100faa0 <alt_avalon_i2c_master_transmit+0x150>
            }
        }
     
        /*check for a nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);
 100fae0:	e0bffe04 	addi	r2,fp,-8
 100fae4:	100b883a 	mov	r5,r2
 100fae8:	e13ffd17 	ldw	r4,-12(fp)
 100faec:	100f3900 	call	100f390 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 100faf0:	e13ffd17 	ldw	r4,-12(fp)
 100faf4:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>
    }


    return status;
 100faf8:	e0bffe17 	ldw	r2,-8(fp)
}
 100fafc:	e037883a 	mov	sp,fp
 100fb00:	dfc00117 	ldw	ra,4(sp)
 100fb04:	df000017 	ldw	fp,0(sp)
 100fb08:	dec00204 	addi	sp,sp,8
 100fb0c:	f800283a 	ret

0100fb10 <alt_avalon_i2c_master_transmit_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_transmit_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                        const alt_u8 * buffer,
                                        alt_u32 size,
                                        const alt_u8 issue_restart,
                                        const alt_u8 issue_stop)
{
 100fb10:	defff604 	addi	sp,sp,-40
 100fb14:	dfc00915 	stw	ra,36(sp)
 100fb18:	df000815 	stw	fp,32(sp)
 100fb1c:	df000804 	addi	fp,sp,32
 100fb20:	e13ffc15 	stw	r4,-16(fp)
 100fb24:	e17ffb15 	stw	r5,-20(fp)
 100fb28:	e1bffa15 	stw	r6,-24(fp)
 100fb2c:	3807883a 	mov	r3,r7
 100fb30:	e0800217 	ldw	r2,8(fp)
 100fb34:	e0fff905 	stb	r3,-28(fp)
 100fb38:	e0bff805 	stb	r2,-32(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100fb3c:	e03fff15 	stw	zero,-4(fp)
    alt_u32 timeout=size*10000;
 100fb40:	0149c404 	movi	r5,10000
 100fb44:	e13ffa17 	ldw	r4,-24(fp)
 100fb48:	1000e300 	call	1000e30 <__mulsi3>
 100fb4c:	e0bffe15 	stw	r2,-8(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 100fb50:	e0bffc17 	ldw	r2,-16(fp)
 100fb54:	10800717 	ldw	r2,28(r2)
 100fb58:	e0bffd15 	stw	r2,-12(fp)
    
    if (size==0)
 100fb5c:	e0bffa17 	ldw	r2,-24(fp)
 100fb60:	1000021e 	bne	r2,zero,100fb6c <alt_avalon_i2c_master_transmit_using_interrupts+0x5c>
    {
      return ALT_AVALON_I2C_SUCCESS;
 100fb64:	0005883a 	mov	r2,zero
 100fb68:	00006706 	br	100fd08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*IS the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 100fb6c:	e0bffc17 	ldw	r2,-16(fp)
 100fb70:	10c00617 	ldw	r3,24(r2)
 100fb74:	00804074 	movhi	r2,257
 100fb78:	10ba1004 	addi	r2,r2,-6080
 100fb7c:	18800226 	beq	r3,r2,100fb88 <alt_avalon_i2c_master_transmit_using_interrupts+0x78>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 100fb80:	00bfff44 	movi	r2,-3
 100fb84:	00006006 	br	100fd08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 100fb88:	e0bff903 	ldbu	r2,-28(fp)
 100fb8c:	10000a1e 	bne	r2,zero,100fbb8 <alt_avalon_i2c_master_transmit_using_interrupts+0xa8>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 100fb90:	e13ffc17 	ldw	r4,-16(fp)
 100fb94:	100ebc00 	call	100ebc0 <alt_avalon_i2c_enable>
 100fb98:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 100fb9c:	e0bfff17 	ldw	r2,-4(fp)
 100fba0:	10000226 	beq	r2,zero,100fbac <alt_avalon_i2c_master_transmit_using_interrupts+0x9c>
      {
        return status;
 100fba4:	e0bfff17 	ldw	r2,-4(fp)
 100fba8:	00005706 	br	100fd08 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f8>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100fbac:	01400704 	movi	r5,28
 100fbb0:	e13ffc17 	ldw	r4,-16(fp)
 100fbb4:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_WRITE,issue_restart);
 100fbb8:	e0bff903 	ldbu	r2,-28(fp)
 100fbbc:	100d883a 	mov	r6,r2
 100fbc0:	000b883a 	mov	r5,zero
 100fbc4:	e13ffc17 	ldw	r4,-16(fp)
 100fbc8:	100f2340 	call	100f234 <alt_avalon_i2c_send_address>
 100fbcc:	e0bfff15 	stw	r2,-4(fp)
        
    if (status == ALT_AVALON_I2C_SUCCESS)
 100fbd0:	e0bfff17 	ldw	r2,-4(fp)
 100fbd4:	1000271e 	bne	r2,zero,100fc74 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
    {
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 100fbd8:	00000f06 	br	100fc18 <alt_avalon_i2c_master_transmit_using_interrupts+0x108>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 100fbdc:	e0bffb17 	ldw	r2,-20(fp)
 100fbe0:	10800003 	ldbu	r2,0(r2)
 100fbe4:	10803fcc 	andi	r2,r2,255
 100fbe8:	000f883a 	mov	r7,zero
 100fbec:	000d883a 	mov	r6,zero
 100fbf0:	100b883a 	mov	r5,r2
 100fbf4:	e13ffc17 	ldw	r4,-16(fp)
 100fbf8:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fbfc:	e0bfff15 	stw	r2,-4(fp)
            
            ++buffer;
 100fc00:	e0bffb17 	ldw	r2,-20(fp)
 100fc04:	10800044 	addi	r2,r2,1
 100fc08:	e0bffb15 	stw	r2,-20(fp)
            --size;
 100fc0c:	e0bffa17 	ldw	r2,-24(fp)
 100fc10:	10bfffc4 	addi	r2,r2,-1
 100fc14:	e0bffa15 	stw	r2,-24(fp)
        while ((size > 1) && (status == ALT_AVALON_I2C_SUCCESS))
 100fc18:	e0bffa17 	ldw	r2,-24(fp)
 100fc1c:	108000b0 	cmpltui	r2,r2,2
 100fc20:	1000021e 	bne	r2,zero,100fc2c <alt_avalon_i2c_master_transmit_using_interrupts+0x11c>
 100fc24:	e0bfff17 	ldw	r2,-4(fp)
 100fc28:	103fec26 	beq	r2,zero,100fbdc <alt_avalon_i2c_master_transmit_using_interrupts+0xcc>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 100fc2c:	e0bfff17 	ldw	r2,-4(fp)
 100fc30:	1000101e 	bne	r2,zero,100fc74 <alt_avalon_i2c_master_transmit_using_interrupts+0x164>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, *buffer, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 100fc34:	e0bffb17 	ldw	r2,-20(fp)
 100fc38:	10800003 	ldbu	r2,0(r2)
 100fc3c:	10803fcc 	andi	r2,r2,255
 100fc40:	e0fff803 	ldbu	r3,-32(fp)
 100fc44:	180f883a 	mov	r7,r3
 100fc48:	000d883a 	mov	r6,zero
 100fc4c:	100b883a 	mov	r5,r2
 100fc50:	e13ffc17 	ldw	r4,-16(fp)
 100fc54:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fc58:	e0bfff15 	stw	r2,-4(fp)

            ++buffer;
 100fc5c:	e0bffb17 	ldw	r2,-20(fp)
 100fc60:	10800044 	addi	r2,r2,1
 100fc64:	e0bffb15 	stw	r2,-20(fp)
            --size;
 100fc68:	e0bffa17 	ldw	r2,-24(fp)
 100fc6c:	10bfffc4 	addi	r2,r2,-1
 100fc70:	e0bffa15 	stw	r2,-24(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 100fc74:	e0bfff17 	ldw	r2,-4(fp)
 100fc78:	10001426 	beq	r2,zero,100fccc <alt_avalon_i2c_master_transmit_using_interrupts+0x1bc>
    {

        while (alt_avalon_i2c_is_busy(i2c_dev))
 100fc7c:	00000d06 	br	100fcb4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
        {
            if (timeout<10) alt_busy_sleep(10000);        
 100fc80:	e0bffe17 	ldw	r2,-8(fp)
 100fc84:	108002a8 	cmpgeui	r2,r2,10
 100fc88:	1000021e 	bne	r2,zero,100fc94 <alt_avalon_i2c_master_transmit_using_interrupts+0x184>
 100fc8c:	0109c404 	movi	r4,10000
 100fc90:	10113100 	call	1011310 <alt_busy_sleep>
            if (--timeout == 0)
 100fc94:	e0bffe17 	ldw	r2,-8(fp)
 100fc98:	10bfffc4 	addi	r2,r2,-1
 100fc9c:	e0bffe15 	stw	r2,-8(fp)
 100fca0:	e0bffe17 	ldw	r2,-8(fp)
 100fca4:	1000031e 	bne	r2,zero,100fcb4 <alt_avalon_i2c_master_transmit_using_interrupts+0x1a4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 100fca8:	00bfff84 	movi	r2,-2
 100fcac:	e0bfff15 	stw	r2,-4(fp)
               break;
 100fcb0:	00000306 	br	100fcc0 <alt_avalon_i2c_master_transmit_using_interrupts+0x1b0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100fcb4:	e13ffc17 	ldw	r4,-16(fp)
 100fcb8:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 100fcbc:	103ff01e 	bne	r2,zero,100fc80 <alt_avalon_i2c_master_transmit_using_interrupts+0x170>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 100fcc0:	e13ffc17 	ldw	r4,-16(fp)
 100fcc4:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>
 100fcc8:	00000e06 	br	100fd04 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
    }
    else
    {
       if (issue_stop)
 100fccc:	e0bff803 	ldbu	r2,-32(fp)
 100fcd0:	10000c26 	beq	r2,zero,100fd04 <alt_avalon_i2c_master_transmit_using_interrupts+0x1f4>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100fcd4:	01400704 	movi	r5,28
 100fcd8:	e13ffc17 	ldw	r4,-16(fp)
 100fcdc:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_tfr_cmd_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_TFR_CMD_FIFO_EMPTY);
 100fce0:	000b883a 	mov	r5,zero
 100fce4:	e13ffc17 	ldw	r4,-16(fp)
 100fce8:	10104080 	call	1010408 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>
         /* set the interrupt transaction busy bit */
         irq_data->irq_busy=1;
 100fcec:	e0bffd17 	ldw	r2,-12(fp)
 100fcf0:	00c00044 	movi	r3,1
 100fcf4:	10c00215 	stw	r3,8(r2)
         /* enable the TX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_TX_READY_EN_MSK);
 100fcf8:	01400044 	movi	r5,1
 100fcfc:	e13ffc17 	ldw	r4,-16(fp)
 100fd00:	10102600 	call	1010260 <alt_avalon_i2c_int_enable>
       }
    }
    
    return status;
 100fd04:	e0bfff17 	ldw	r2,-4(fp)
}
 100fd08:	e037883a 	mov	sp,fp
 100fd0c:	dfc00117 	ldw	ra,4(sp)
 100fd10:	df000017 	ldw	fp,0(sp)
 100fd14:	dec00204 	addi	sp,sp,8
 100fd18:	f800283a 	ret

0100fd1c <alt_avalon_i2c_master_receive>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 100fd1c:	defff404 	addi	sp,sp,-48
 100fd20:	dfc00b15 	stw	ra,44(sp)
 100fd24:	df000a15 	stw	fp,40(sp)
 100fd28:	df000a04 	addi	fp,sp,40
 100fd2c:	e13ffa15 	stw	r4,-24(fp)
 100fd30:	e17ff915 	stw	r5,-28(fp)
 100fd34:	e1bff815 	stw	r6,-32(fp)
 100fd38:	3807883a 	mov	r3,r7
 100fd3c:	e0800217 	ldw	r2,8(fp)
 100fd40:	e0fff705 	stb	r3,-36(fp)
 100fd44:	e0bff605 	stb	r2,-40(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100fd48:	e03ffc15 	stw	zero,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_read=0;
 100fd4c:	e03ffe15 	stw	zero,-8(fp)
    alt_u32 bytes_written=0;
 100fd50:	e03ffd15 	stw	zero,-12(fp)
    alt_u32 temp_bytes_read;
    
    if (size==0)
 100fd54:	e0bff817 	ldw	r2,-32(fp)
 100fd58:	1000021e 	bne	r2,zero,100fd64 <alt_avalon_i2c_master_receive+0x48>
    {
      return ALT_AVALON_I2C_SUCCESS;
 100fd5c:	0005883a 	mov	r2,zero
 100fd60:	00006d06 	br	100ff18 <alt_avalon_i2c_master_receive+0x1fc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 100fd64:	e0bff703 	ldbu	r2,-36(fp)
 100fd68:	10000a1e 	bne	r2,zero,100fd94 <alt_avalon_i2c_master_receive+0x78>
    {
       /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 100fd6c:	e13ffa17 	ldw	r4,-24(fp)
 100fd70:	100ebc00 	call	100ebc0 <alt_avalon_i2c_enable>
 100fd74:	e0bffc15 	stw	r2,-16(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 100fd78:	e0bffc17 	ldw	r2,-16(fp)
 100fd7c:	10000226 	beq	r2,zero,100fd88 <alt_avalon_i2c_master_receive+0x6c>
      {
        return status;
 100fd80:	e0bffc17 	ldw	r2,-16(fp)
 100fd84:	00006406 	br	100ff18 <alt_avalon_i2c_master_receive+0x1fc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100fd88:	01400704 	movi	r5,28
 100fd8c:	e13ffa17 	ldw	r4,-24(fp)
 100fd90:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 100fd94:	e0bff703 	ldbu	r2,-36(fp)
 100fd98:	100d883a 	mov	r6,r2
 100fd9c:	01400044 	movi	r5,1
 100fda0:	e13ffa17 	ldw	r4,-24(fp)
 100fda4:	100f2340 	call	100f234 <alt_avalon_i2c_send_address>
 100fda8:	e0bffc15 	stw	r2,-16(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 100fdac:	e0bffc17 	ldw	r2,-16(fp)
 100fdb0:	1000341e 	bne	r2,zero,100fe84 <alt_avalon_i2c_master_receive+0x168>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 100fdb4:	00001906 	br	100fe1c <alt_avalon_i2c_master_receive+0x100>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 100fdb8:	000f883a 	mov	r7,zero
 100fdbc:	000d883a 	mov	r6,zero
 100fdc0:	000b883a 	mov	r5,zero
 100fdc4:	e13ffa17 	ldw	r4,-24(fp)
 100fdc8:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fdcc:	e0bffc15 	stw	r2,-16(fp)
            bytes_written++;
 100fdd0:	e0bffd17 	ldw	r2,-12(fp)
 100fdd4:	10800044 	addi	r2,r2,1
 100fdd8:	e0bffd15 	stw	r2,-12(fp)
            if (status == ALT_AVALON_I2C_SUCCESS)
 100fddc:	e0bffc17 	ldw	r2,-16(fp)
 100fde0:	10000e1e 	bne	r2,zero,100fe1c <alt_avalon_i2c_master_receive+0x100>
            {
               alt_avalon_i2c_rx_read_available(i2c_dev, buffer,0,&temp_bytes_read);
 100fde4:	e0bffb04 	addi	r2,fp,-20
 100fde8:	100f883a 	mov	r7,r2
 100fdec:	000d883a 	mov	r6,zero
 100fdf0:	e17ff917 	ldw	r5,-28(fp)
 100fdf4:	e13ffa17 	ldw	r4,-24(fp)
 100fdf8:	100eff40 	call	100eff4 <alt_avalon_i2c_rx_read_available>
               buffer+=temp_bytes_read;
 100fdfc:	e0bffb17 	ldw	r2,-20(fp)
 100fe00:	e0fff917 	ldw	r3,-28(fp)
 100fe04:	1885883a 	add	r2,r3,r2
 100fe08:	e0bff915 	stw	r2,-28(fp)
               bytes_read+=temp_bytes_read;
 100fe0c:	e0bffb17 	ldw	r2,-20(fp)
 100fe10:	e0fffe17 	ldw	r3,-8(fp)
 100fe14:	1885883a 	add	r2,r3,r2
 100fe18:	e0bffe15 	stw	r2,-8(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 100fe1c:	e0bff817 	ldw	r2,-32(fp)
 100fe20:	10bfffc4 	addi	r2,r2,-1
 100fe24:	e0fffd17 	ldw	r3,-12(fp)
 100fe28:	1880022e 	bgeu	r3,r2,100fe34 <alt_avalon_i2c_master_receive+0x118>
 100fe2c:	e0bffc17 	ldw	r2,-16(fp)
 100fe30:	103fe126 	beq	r2,zero,100fdb8 <alt_avalon_i2c_master_receive+0x9c>
            }
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 100fe34:	e0bffc17 	ldw	r2,-16(fp)
 100fe38:	1000121e 	bne	r2,zero,100fe84 <alt_avalon_i2c_master_receive+0x168>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 100fe3c:	e0bff603 	ldbu	r2,-40(fp)
 100fe40:	100f883a 	mov	r7,r2
 100fe44:	000d883a 	mov	r6,zero
 100fe48:	000b883a 	mov	r5,zero
 100fe4c:	e13ffa17 	ldw	r4,-24(fp)
 100fe50:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 100fe54:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 100fe58:	00000a06 	br	100fe84 <alt_avalon_i2c_master_receive+0x168>
    {
        status=alt_avalon_i2c_rx_read(i2c_dev, buffer);
 100fe5c:	e17ff917 	ldw	r5,-28(fp)
 100fe60:	e13ffa17 	ldw	r4,-24(fp)
 100fe64:	100f0a00 	call	100f0a0 <alt_avalon_i2c_rx_read>
 100fe68:	e0bffc15 	stw	r2,-16(fp)
        buffer++;
 100fe6c:	e0bff917 	ldw	r2,-28(fp)
 100fe70:	10800044 	addi	r2,r2,1
 100fe74:	e0bff915 	stw	r2,-28(fp)
        bytes_read++;
 100fe78:	e0bffe17 	ldw	r2,-8(fp)
 100fe7c:	10800044 	addi	r2,r2,1
 100fe80:	e0bffe15 	stw	r2,-8(fp)
    while ((bytes_read < size) && (status==ALT_AVALON_I2C_SUCCESS)) 
 100fe84:	e0fffe17 	ldw	r3,-8(fp)
 100fe88:	e0bff817 	ldw	r2,-32(fp)
 100fe8c:	1880022e 	bgeu	r3,r2,100fe98 <alt_avalon_i2c_master_receive+0x17c>
 100fe90:	e0bffc17 	ldw	r2,-16(fp)
 100fe94:	103ff126 	beq	r2,zero,100fe5c <alt_avalon_i2c_master_receive+0x140>
    }

    /*if end of transaction, wait until the ip is idle then disable the ip*/
    if ((issue_stop) || (status != ALT_AVALON_I2C_SUCCESS)) 
 100fe98:	e0bff603 	ldbu	r2,-40(fp)
 100fe9c:	1000021e 	bne	r2,zero,100fea8 <alt_avalon_i2c_master_receive+0x18c>
 100fea0:	e0bffc17 	ldw	r2,-16(fp)
 100fea4:	10001b26 	beq	r2,zero,100ff14 <alt_avalon_i2c_master_receive+0x1f8>
    {
        timeout=10000 * size;
 100fea8:	0149c404 	movi	r5,10000
 100feac:	e13ff817 	ldw	r4,-32(fp)
 100feb0:	1000e300 	call	1000e30 <__mulsi3>
 100feb4:	e0bfff15 	stw	r2,-4(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100feb8:	00000d06 	br	100fef0 <alt_avalon_i2c_master_receive+0x1d4>
        {
            if (timeout<10) alt_busy_sleep(10000);
 100febc:	e0bfff17 	ldw	r2,-4(fp)
 100fec0:	108002a8 	cmpgeui	r2,r2,10
 100fec4:	1000021e 	bne	r2,zero,100fed0 <alt_avalon_i2c_master_receive+0x1b4>
 100fec8:	0109c404 	movi	r4,10000
 100fecc:	10113100 	call	1011310 <alt_busy_sleep>
            if (--timeout == 0)
 100fed0:	e0bfff17 	ldw	r2,-4(fp)
 100fed4:	10bfffc4 	addi	r2,r2,-1
 100fed8:	e0bfff15 	stw	r2,-4(fp)
 100fedc:	e0bfff17 	ldw	r2,-4(fp)
 100fee0:	1000031e 	bne	r2,zero,100fef0 <alt_avalon_i2c_master_receive+0x1d4>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 100fee4:	00bfff84 	movi	r2,-2
 100fee8:	e0bffc15 	stw	r2,-16(fp)
               break;
 100feec:	00000306 	br	100fefc <alt_avalon_i2c_master_receive+0x1e0>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 100fef0:	e13ffa17 	ldw	r4,-24(fp)
 100fef4:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 100fef8:	103ff01e 	bne	r2,zero,100febc <alt_avalon_i2c_master_receive+0x1a0>
            }
        }

        /*check for nack error*/
        alt_avalon_i2c_check_nack(i2c_dev,&status);    
 100fefc:	e0bffc04 	addi	r2,fp,-16
 100ff00:	100b883a 	mov	r5,r2
 100ff04:	e13ffa17 	ldw	r4,-24(fp)
 100ff08:	100f3900 	call	100f390 <alt_avalon_i2c_check_nack>
        
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 100ff0c:	e13ffa17 	ldw	r4,-24(fp)
 100ff10:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>
    }

    return status;
 100ff14:	e0bffc17 	ldw	r2,-16(fp)
}
 100ff18:	e037883a 	mov	sp,fp
 100ff1c:	dfc00117 	ldw	ra,4(sp)
 100ff20:	df000017 	ldw	fp,0(sp)
 100ff24:	dec00204 	addi	sp,sp,8
 100ff28:	f800283a 	ret

0100ff2c <alt_avalon_i2c_master_receive_using_interrupts>:
ALT_AVALON_I2C_STATUS_CODE alt_avalon_i2c_master_receive_using_interrupts(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u8 * buffer,
                                       const alt_u32 size,
                                       const alt_u8 issue_restart,
                                       const alt_u8 issue_stop)
{
 100ff2c:	defff504 	addi	sp,sp,-44
 100ff30:	dfc00a15 	stw	ra,40(sp)
 100ff34:	df000915 	stw	fp,36(sp)
 100ff38:	df000904 	addi	fp,sp,36
 100ff3c:	e13ffb15 	stw	r4,-20(fp)
 100ff40:	e17ffa15 	stw	r5,-24(fp)
 100ff44:	e1bff915 	stw	r6,-28(fp)
 100ff48:	3807883a 	mov	r3,r7
 100ff4c:	e0800217 	ldw	r2,8(fp)
 100ff50:	e0fff805 	stb	r3,-32(fp)
 100ff54:	e0bff705 	stb	r2,-36(fp)
    ALT_AVALON_I2C_STATUS_CODE status = ALT_AVALON_I2C_SUCCESS;
 100ff58:	e03fff15 	stw	zero,-4(fp)
    IRQ_DATA_t *irq_data = i2c_dev->callback_context;    
 100ff5c:	e0bffb17 	ldw	r2,-20(fp)
 100ff60:	10800717 	ldw	r2,28(r2)
 100ff64:	e0bffc15 	stw	r2,-16(fp)
    alt_u32 timeout;
    alt_u32 bytes_written=0;
 100ff68:	e03ffd15 	stw	zero,-12(fp)
    
    if (size==0)
 100ff6c:	e0bff917 	ldw	r2,-28(fp)
 100ff70:	1000021e 	bne	r2,zero,100ff7c <alt_avalon_i2c_master_receive_using_interrupts+0x50>
    {
      return ALT_AVALON_I2C_SUCCESS;
 100ff74:	0005883a 	mov	r2,zero
 100ff78:	00006306 	br	1010108 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*Is the optional interrupt handler registered??*/
    if (i2c_dev->callback != optional_irq_callback)
 100ff7c:	e0bffb17 	ldw	r2,-20(fp)
 100ff80:	10c00617 	ldw	r3,24(r2)
 100ff84:	00804074 	movhi	r2,257
 100ff88:	10ba1004 	addi	r2,r2,-6080
 100ff8c:	18800226 	beq	r3,r2,100ff98 <alt_avalon_i2c_master_receive_using_interrupts+0x6c>
    {
       return ALT_AVALON_I2C_BAD_ARG;    
 100ff90:	00bfff44 	movi	r2,-3
 100ff94:	00005c06 	br	1010108 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
    }
    
    /*if a new transaction, enable ip and clear int status*/
    if (!issue_restart) 
 100ff98:	e0bff803 	ldbu	r2,-32(fp)
 100ff9c:	10000a1e 	bne	r2,zero,100ffc8 <alt_avalon_i2c_master_receive_using_interrupts+0x9c>
    {
      /*enable the ip.  The ip is disabled and enabled for each transaction.*/
      status = alt_avalon_i2c_enable(i2c_dev);
 100ffa0:	e13ffb17 	ldw	r4,-20(fp)
 100ffa4:	100ebc00 	call	100ebc0 <alt_avalon_i2c_enable>
 100ffa8:	e0bfff15 	stw	r2,-4(fp)
      if (status != ALT_AVALON_I2C_SUCCESS)
 100ffac:	e0bfff17 	ldw	r2,-4(fp)
 100ffb0:	10000226 	beq	r2,zero,100ffbc <alt_avalon_i2c_master_receive_using_interrupts+0x90>
      {
        return status;
 100ffb4:	e0bfff17 	ldw	r2,-4(fp)
 100ffb8:	00005306 	br	1010108 <alt_avalon_i2c_master_receive_using_interrupts+0x1dc>
      }

      /*Clear the ISR reg*/
      alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 100ffbc:	01400704 	movi	r5,28
 100ffc0:	e13ffb17 	ldw	r4,-20(fp)
 100ffc4:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
      
    }

    /*Start Write, transmit address. */
    status = alt_avalon_i2c_send_address(i2c_dev,ALT_AVALON_I2C_READ,issue_restart);
 100ffc8:	e0bff803 	ldbu	r2,-32(fp)
 100ffcc:	100d883a 	mov	r6,r2
 100ffd0:	01400044 	movi	r5,1
 100ffd4:	e13ffb17 	ldw	r4,-20(fp)
 100ffd8:	100f2340 	call	100f234 <alt_avalon_i2c_send_address>
 100ffdc:	e0bfff15 	stw	r2,-4(fp)

    if (status == ALT_AVALON_I2C_SUCCESS)
 100ffe0:	e0bfff17 	ldw	r2,-4(fp)
 100ffe4:	1000191e 	bne	r2,zero,101004c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
    {
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 100ffe8:	00000906 	br	1010010 <alt_avalon_i2c_master_receive_using_interrupts+0xe4>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, ALT_AVALON_I2C_NO_STOP);
 100ffec:	000f883a 	mov	r7,zero
 100fff0:	000d883a 	mov	r6,zero
 100fff4:	000b883a 	mov	r5,zero
 100fff8:	e13ffb17 	ldw	r4,-20(fp)
 100fffc:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 1010000:	e0bfff15 	stw	r2,-4(fp)
            bytes_written++;
 1010004:	e0bffd17 	ldw	r2,-12(fp)
 1010008:	10800044 	addi	r2,r2,1
 101000c:	e0bffd15 	stw	r2,-12(fp)
        while ((bytes_written < (size-1)) && (status == ALT_AVALON_I2C_SUCCESS))
 1010010:	e0bff917 	ldw	r2,-28(fp)
 1010014:	10bfffc4 	addi	r2,r2,-1
 1010018:	e0fffd17 	ldw	r3,-12(fp)
 101001c:	1880022e 	bgeu	r3,r2,1010028 <alt_avalon_i2c_master_receive_using_interrupts+0xfc>
 1010020:	e0bfff17 	ldw	r2,-4(fp)
 1010024:	103ff126 	beq	r2,zero,100ffec <alt_avalon_i2c_master_receive_using_interrupts+0xc0>
        }

        /* Last byte */
        if (status == ALT_AVALON_I2C_SUCCESS)
 1010028:	e0bfff17 	ldw	r2,-4(fp)
 101002c:	1000071e 	bne	r2,zero,101004c <alt_avalon_i2c_master_receive_using_interrupts+0x120>
        {
            status = alt_avalon_i2c_cmd_write(i2c_dev, 0, ALT_AVALON_I2C_NO_RESTART, issue_stop);
 1010030:	e0bff703 	ldbu	r2,-36(fp)
 1010034:	100f883a 	mov	r7,r2
 1010038:	000d883a 	mov	r6,zero
 101003c:	000b883a 	mov	r5,zero
 1010040:	e13ffb17 	ldw	r4,-20(fp)
 1010044:	100f1480 	call	100f148 <alt_avalon_i2c_cmd_write>
 1010048:	e0bfff15 	stw	r2,-4(fp)
        }
    }
    
    /*if error, wait until the ip is idle then disable the ip*/
    if (status != ALT_AVALON_I2C_SUCCESS) 
 101004c:	e0bfff17 	ldw	r2,-4(fp)
 1010050:	10001826 	beq	r2,zero,10100b4 <alt_avalon_i2c_master_receive_using_interrupts+0x188>
    {
        timeout=10000 * size;
 1010054:	0149c404 	movi	r5,10000
 1010058:	e13ff917 	ldw	r4,-28(fp)
 101005c:	1000e300 	call	1000e30 <__mulsi3>
 1010060:	e0bffe15 	stw	r2,-8(fp)
        while (alt_avalon_i2c_is_busy(i2c_dev))
 1010064:	00000d06 	br	101009c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
        {
            if (timeout<10) alt_busy_sleep(10000);
 1010068:	e0bffe17 	ldw	r2,-8(fp)
 101006c:	108002a8 	cmpgeui	r2,r2,10
 1010070:	1000021e 	bne	r2,zero,101007c <alt_avalon_i2c_master_receive_using_interrupts+0x150>
 1010074:	0109c404 	movi	r4,10000
 1010078:	10113100 	call	1011310 <alt_busy_sleep>
            if (--timeout == 0)
 101007c:	e0bffe17 	ldw	r2,-8(fp)
 1010080:	10bfffc4 	addi	r2,r2,-1
 1010084:	e0bffe15 	stw	r2,-8(fp)
 1010088:	e0bffe17 	ldw	r2,-8(fp)
 101008c:	1000031e 	bne	r2,zero,101009c <alt_avalon_i2c_master_receive_using_interrupts+0x170>
            {
               status = ALT_AVALON_I2C_TIMEOUT;
 1010090:	00bfff84 	movi	r2,-2
 1010094:	e0bfff15 	stw	r2,-4(fp)
               break;
 1010098:	00000306 	br	10100a8 <alt_avalon_i2c_master_receive_using_interrupts+0x17c>
        while (alt_avalon_i2c_is_busy(i2c_dev))
 101009c:	e13ffb17 	ldw	r4,-20(fp)
 10100a0:	100efb00 	call	100efb0 <alt_avalon_i2c_is_busy>
 10100a4:	103ff01e 	bne	r2,zero,1010068 <alt_avalon_i2c_master_receive_using_interrupts+0x13c>
            }
        }
     
        /*disable the ip.  The ip is disabled and enabled for each transaction.*/
        alt_avalon_i2c_disable(i2c_dev);
 10100a8:	e13ffb17 	ldw	r4,-20(fp)
 10100ac:	100ec580 	call	100ec58 <alt_avalon_i2c_disable>
 10100b0:	00001406 	br	1010104 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
    }
    else
    {
       if (issue_stop)
 10100b4:	e0bff703 	ldbu	r2,-36(fp)
 10100b8:	10001226 	beq	r2,zero,1010104 <alt_avalon_i2c_master_receive_using_interrupts+0x1d8>
       {
         /* clear ISR register content */
         alt_avalon_i2c_int_clear(i2c_dev,ALT_AVALON_I2C_ISR_ALL_CLEARABLE_INTS_MSK);
 10100bc:	01400704 	movi	r5,28
 10100c0:	e13ffb17 	ldw	r4,-20(fp)
 10100c4:	10101b80 	call	10101b8 <alt_avalon_i2c_int_clear>
         /* set the cmd fifo threshold */
         alt_avalon_i2c_rx_fifo_threshold_set(i2c_dev,ALT_AVALON_I2C_RX_DATA_FIFO_1_ENTRY);
 10100c8:	000b883a 	mov	r5,zero
 10100cc:	e13ffb17 	ldw	r4,-20(fp)
 10100d0:	10103580 	call	1010358 <alt_avalon_i2c_rx_fifo_threshold_set>
         /* set the interrupt transaction busy bit  2 = receive */
         irq_data->irq_busy=2;
 10100d4:	e0bffc17 	ldw	r2,-16(fp)
 10100d8:	00c00084 	movi	r3,2
 10100dc:	10c00215 	stw	r3,8(r2)
         
         irq_data->buffer = buffer;
 10100e0:	e0bffc17 	ldw	r2,-16(fp)
 10100e4:	e0fffa17 	ldw	r3,-24(fp)
 10100e8:	10c00015 	stw	r3,0(r2)
         irq_data->size = size;
 10100ec:	e0bffc17 	ldw	r2,-16(fp)
 10100f0:	e0fff917 	ldw	r3,-28(fp)
 10100f4:	10c00115 	stw	r3,4(r2)
         
         /* enable the RX_READY interrupt */
         alt_avalon_i2c_int_enable(i2c_dev,ALT_AVALON_I2C_ISER_RX_READY_EN_MSK);
 10100f8:	01400084 	movi	r5,2
 10100fc:	e13ffb17 	ldw	r4,-20(fp)
 1010100:	10102600 	call	1010260 <alt_avalon_i2c_int_enable>
       }
    }

    return status;
 1010104:	e0bfff17 	ldw	r2,-4(fp)
}
 1010108:	e037883a 	mov	sp,fp
 101010c:	dfc00117 	ldw	ra,4(sp)
 1010110:	df000017 	ldw	fp,0(sp)
 1010114:	dec00204 	addi	sp,sp,8
 1010118:	f800283a 	ret

0101011c <alt_avalon_i2c_int_status_get>:

/* Returns the current I2C controller interrupt status conditions. */
void alt_avalon_i2c_int_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                       alt_u32 *status)
{
 101011c:	defffd04 	addi	sp,sp,-12
 1010120:	df000215 	stw	fp,8(sp)
 1010124:	df000204 	addi	fp,sp,8
 1010128:	e13fff15 	stw	r4,-4(fp)
 101012c:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base) & IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base);
 1010130:	e0bfff17 	ldw	r2,-4(fp)
 1010134:	10800317 	ldw	r2,12(r2)
 1010138:	10800404 	addi	r2,r2,16
 101013c:	10c00037 	ldwio	r3,0(r2)
 1010140:	e0bfff17 	ldw	r2,-4(fp)
 1010144:	10800317 	ldw	r2,12(r2)
 1010148:	10800304 	addi	r2,r2,12
 101014c:	10800037 	ldwio	r2,0(r2)
 1010150:	1884703a 	and	r2,r3,r2
 1010154:	1007883a 	mov	r3,r2
 1010158:	e0bffe17 	ldw	r2,-8(fp)
 101015c:	10c00015 	stw	r3,0(r2)
}
 1010160:	0001883a 	nop
 1010164:	e037883a 	mov	sp,fp
 1010168:	df000017 	ldw	fp,0(sp)
 101016c:	dec00104 	addi	sp,sp,4
 1010170:	f800283a 	ret

01010174 <alt_avalon_i2c_int_raw_status_get>:

/*Returns the I2C controller raw interrupt status conditions irrespective of
 * the interrupt status condition enablement state. */
void alt_avalon_i2c_int_raw_status_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                           alt_u32 *status)
{
 1010174:	defffd04 	addi	sp,sp,-12
 1010178:	df000215 	stw	fp,8(sp)
 101017c:	df000204 	addi	fp,sp,8
 1010180:	e13fff15 	stw	r4,-4(fp)
 1010184:	e17ffe15 	stw	r5,-8(fp)
    *status = IORD_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base);
 1010188:	e0bfff17 	ldw	r2,-4(fp)
 101018c:	10800317 	ldw	r2,12(r2)
 1010190:	10800404 	addi	r2,r2,16
 1010194:	10800037 	ldwio	r2,0(r2)
 1010198:	1007883a 	mov	r3,r2
 101019c:	e0bffe17 	ldw	r2,-8(fp)
 10101a0:	10c00015 	stw	r3,0(r2)
}
 10101a4:	0001883a 	nop
 10101a8:	e037883a 	mov	sp,fp
 10101ac:	df000017 	ldw	fp,0(sp)
 10101b0:	dec00104 	addi	sp,sp,4
 10101b4:	f800283a 	ret

010101b8 <alt_avalon_i2c_int_clear>:

/*Clears the specified I2C controller interrupt status conditions identified
 * in the mask. */
void alt_avalon_i2c_int_clear(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 10101b8:	defffd04 	addi	sp,sp,-12
 10101bc:	df000215 	stw	fp,8(sp)
 10101c0:	df000204 	addi	fp,sp,8
 10101c4:	e13fff15 	stw	r4,-4(fp)
 10101c8:	e17ffe15 	stw	r5,-8(fp)
    IOWR_ALT_AVALON_I2C_ISR(i2c_dev->i2c_base,mask);
 10101cc:	e0bfff17 	ldw	r2,-4(fp)
 10101d0:	10800317 	ldw	r2,12(r2)
 10101d4:	10800404 	addi	r2,r2,16
 10101d8:	e0fffe17 	ldw	r3,-8(fp)
 10101dc:	10c00035 	stwio	r3,0(r2)
}
 10101e0:	0001883a 	nop
 10101e4:	e037883a 	mov	sp,fp
 10101e8:	df000017 	ldw	fp,0(sp)
 10101ec:	dec00104 	addi	sp,sp,4
 10101f0:	f800283a 	ret

010101f4 <alt_avalon_i2c_int_disable>:

/*Disable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_disable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 10101f4:	defffb04 	addi	sp,sp,-20
 10101f8:	dfc00415 	stw	ra,16(sp)
 10101fc:	df000315 	stw	fp,12(sp)
 1010200:	df000304 	addi	fp,sp,12
 1010204:	e13ffe15 	stw	r4,-8(fp)
 1010208:	e17ffd15 	stw	r5,-12(fp)
   alt_u32 enabled_ints;
    
   alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 101020c:	e0bfff04 	addi	r2,fp,-4
 1010210:	100b883a 	mov	r5,r2
 1010214:	e13ffe17 	ldw	r4,-8(fp)
 1010218:	10102c80 	call	10102c8 <alt_avalon_i2c_enabled_ints_get>
   enabled_ints &=  (~mask);
 101021c:	e0bffd17 	ldw	r2,-12(fp)
 1010220:	0086303a 	nor	r3,zero,r2
 1010224:	e0bfff17 	ldw	r2,-4(fp)
 1010228:	1884703a 	and	r2,r3,r2
 101022c:	e0bfff15 	stw	r2,-4(fp)
   IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 1010230:	e0bffe17 	ldw	r2,-8(fp)
 1010234:	10800317 	ldw	r2,12(r2)
 1010238:	10800304 	addi	r2,r2,12
 101023c:	e0ffff17 	ldw	r3,-4(fp)
 1010240:	18c007cc 	andi	r3,r3,31
 1010244:	10c00035 	stwio	r3,0(r2)
}
 1010248:	0001883a 	nop
 101024c:	e037883a 	mov	sp,fp
 1010250:	dfc00117 	ldw	ra,4(sp)
 1010254:	df000017 	ldw	fp,0(sp)
 1010258:	dec00204 	addi	sp,sp,8
 101025c:	f800283a 	ret

01010260 <alt_avalon_i2c_int_enable>:

/*Enable the specified I2C controller interrupt status conditions identified in
 * the mask. */
void alt_avalon_i2c_int_enable(ALT_AVALON_I2C_DEV_t *i2c_dev, const alt_u32 mask)
{
 1010260:	defffb04 	addi	sp,sp,-20
 1010264:	dfc00415 	stw	ra,16(sp)
 1010268:	df000315 	stw	fp,12(sp)
 101026c:	df000304 	addi	fp,sp,12
 1010270:	e13ffe15 	stw	r4,-8(fp)
 1010274:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 enabled_ints;
    
    alt_avalon_i2c_enabled_ints_get(i2c_dev,&enabled_ints);
 1010278:	e0bfff04 	addi	r2,fp,-4
 101027c:	100b883a 	mov	r5,r2
 1010280:	e13ffe17 	ldw	r4,-8(fp)
 1010284:	10102c80 	call	10102c8 <alt_avalon_i2c_enabled_ints_get>
    enabled_ints |= mask;
 1010288:	e0ffff17 	ldw	r3,-4(fp)
 101028c:	e0bffd17 	ldw	r2,-12(fp)
 1010290:	1884b03a 	or	r2,r3,r2
 1010294:	e0bfff15 	stw	r2,-4(fp)
    IOWR_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base,ALT_AVALON_I2C_ISR_ALLINTS_MSK & enabled_ints);
 1010298:	e0bffe17 	ldw	r2,-8(fp)
 101029c:	10800317 	ldw	r2,12(r2)
 10102a0:	10800304 	addi	r2,r2,12
 10102a4:	e0ffff17 	ldw	r3,-4(fp)
 10102a8:	18c007cc 	andi	r3,r3,31
 10102ac:	10c00035 	stwio	r3,0(r2)
}
 10102b0:	0001883a 	nop
 10102b4:	e037883a 	mov	sp,fp
 10102b8:	dfc00117 	ldw	ra,4(sp)
 10102bc:	df000017 	ldw	fp,0(sp)
 10102c0:	dec00204 	addi	sp,sp,8
 10102c4:	f800283a 	ret

010102c8 <alt_avalon_i2c_enabled_ints_get>:

/*gets the enabled i2c interrupts. */
void alt_avalon_i2c_enabled_ints_get(ALT_AVALON_I2C_DEV_t *i2c_dev, alt_u32 * enabled_ints)
{
 10102c8:	defffd04 	addi	sp,sp,-12
 10102cc:	df000215 	stw	fp,8(sp)
 10102d0:	df000204 	addi	fp,sp,8
 10102d4:	e13fff15 	stw	r4,-4(fp)
 10102d8:	e17ffe15 	stw	r5,-8(fp)
    *enabled_ints=IORD_ALT_AVALON_I2C_ISER(i2c_dev->i2c_base) & ALT_AVALON_I2C_ISR_ALLINTS_MSK;
 10102dc:	e0bfff17 	ldw	r2,-4(fp)
 10102e0:	10800317 	ldw	r2,12(r2)
 10102e4:	10800304 	addi	r2,r2,12
 10102e8:	10800037 	ldwio	r2,0(r2)
 10102ec:	10c007cc 	andi	r3,r2,31
 10102f0:	e0bffe17 	ldw	r2,-8(fp)
 10102f4:	10c00015 	stw	r3,0(r2)
}
 10102f8:	0001883a 	nop
 10102fc:	e037883a 	mov	sp,fp
 1010300:	df000017 	ldw	fp,0(sp)
 1010304:	dec00104 	addi	sp,sp,4
 1010308:	f800283a 	ret

0101030c <alt_avalon_i2c_rx_fifo_threshold_get>:

/*Gets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t *threshold)
{
 101030c:	defffd04 	addi	sp,sp,-12
 1010310:	df000215 	stw	fp,8(sp)
 1010314:	df000204 	addi	fp,sp,8
 1010318:	e13fff15 	stw	r4,-4(fp)
 101031c:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK) >>  ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST;
 1010320:	e0bfff17 	ldw	r2,-4(fp)
 1010324:	10800317 	ldw	r2,12(r2)
 1010328:	10800204 	addi	r2,r2,8
 101032c:	10800037 	ldwio	r2,0(r2)
 1010330:	1005d13a 	srai	r2,r2,4
 1010334:	108000cc 	andi	r2,r2,3
 1010338:	1007883a 	mov	r3,r2
 101033c:	e0bffe17 	ldw	r2,-8(fp)
 1010340:	10c00015 	stw	r3,0(r2)
}
 1010344:	0001883a 	nop
 1010348:	e037883a 	mov	sp,fp
 101034c:	df000017 	ldw	fp,0(sp)
 1010350:	dec00104 	addi	sp,sp,4
 1010354:	f800283a 	ret

01010358 <alt_avalon_i2c_rx_fifo_threshold_set>:

/*sets the current receive FIFO threshold level value. */
void alt_avalon_i2c_rx_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_RX_DATA_FIFO_THRESHOLD_t threshold)
{
 1010358:	defffd04 	addi	sp,sp,-12
 101035c:	df000215 	stw	fp,8(sp)
 1010360:	df000204 	addi	fp,sp,8
 1010364:	e13fff15 	stw	r4,-4(fp)
 1010368:	e17ffe15 	stw	r5,-8(fp)
    IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_RX_DATA_FIFO_THD_MSK);
 101036c:	e0bfff17 	ldw	r2,-4(fp)
 1010370:	10800317 	ldw	r2,12(r2)
 1010374:	10800204 	addi	r2,r2,8
 1010378:	e0ffff17 	ldw	r3,-4(fp)
 101037c:	18c00317 	ldw	r3,12(r3)
 1010380:	18c00204 	addi	r3,r3,8
 1010384:	18c00037 	ldwio	r3,0(r3)
 1010388:	1809883a 	mov	r4,r3
 101038c:	00fff3c4 	movi	r3,-49
 1010390:	20c8703a 	and	r4,r4,r3
 1010394:	e0fffe17 	ldw	r3,-8(fp)
 1010398:	1806913a 	slli	r3,r3,4
 101039c:	18c00c0c 	andi	r3,r3,48
 10103a0:	20c6b03a 	or	r3,r4,r3
 10103a4:	10c00035 	stwio	r3,0(r2)
}
 10103a8:	0001883a 	nop
 10103ac:	e037883a 	mov	sp,fp
 10103b0:	df000017 	ldw	fp,0(sp)
 10103b4:	dec00104 	addi	sp,sp,4
 10103b8:	f800283a 	ret

010103bc <alt_avalon_i2c_tfr_cmd_fifo_threshold_get>:

/*Gets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_get(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t *threshold)
{
 10103bc:	defffd04 	addi	sp,sp,-12
 10103c0:	df000215 	stw	fp,8(sp)
 10103c4:	df000204 	addi	fp,sp,8
 10103c8:	e13fff15 	stw	r4,-4(fp)
 10103cc:	e17ffe15 	stw	r5,-8(fp)
    *threshold = (IORD_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base) & ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK) >> ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST;
 10103d0:	e0bfff17 	ldw	r2,-4(fp)
 10103d4:	10800317 	ldw	r2,12(r2)
 10103d8:	10800204 	addi	r2,r2,8
 10103dc:	10800037 	ldwio	r2,0(r2)
 10103e0:	1005d0ba 	srai	r2,r2,2
 10103e4:	108000cc 	andi	r2,r2,3
 10103e8:	1007883a 	mov	r3,r2
 10103ec:	e0bffe17 	ldw	r2,-8(fp)
 10103f0:	10c00015 	stw	r3,0(r2)
}
 10103f4:	0001883a 	nop
 10103f8:	e037883a 	mov	sp,fp
 10103fc:	df000017 	ldw	fp,0(sp)
 1010400:	dec00104 	addi	sp,sp,4
 1010404:	f800283a 	ret

01010408 <alt_avalon_i2c_tfr_cmd_fifo_threshold_set>:

/*Sets the current Transfer Command FIFO threshold level value.*/
void alt_avalon_i2c_tfr_cmd_fifo_threshold_set(ALT_AVALON_I2C_DEV_t *i2c_dev,
                                              const ALT_AVALON_I2C_TFR_CMD_FIFO_THRESHOLD_t threshold)
{
 1010408:	defffd04 	addi	sp,sp,-12
 101040c:	df000215 	stw	fp,8(sp)
 1010410:	df000204 	addi	fp,sp,8
 1010414:	e13fff15 	stw	r4,-4(fp)
 1010418:	e17ffe15 	stw	r5,-8(fp)
  IORMW_ALT_AVALON_I2C_CTRL(i2c_dev->i2c_base,threshold << ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_OFST,ALT_AVALON_I2C_CTRL_TFR_CMD_FIFO_THD_MSK);
 101041c:	e0bfff17 	ldw	r2,-4(fp)
 1010420:	10800317 	ldw	r2,12(r2)
 1010424:	10800204 	addi	r2,r2,8
 1010428:	e0ffff17 	ldw	r3,-4(fp)
 101042c:	18c00317 	ldw	r3,12(r3)
 1010430:	18c00204 	addi	r3,r3,8
 1010434:	18c00037 	ldwio	r3,0(r3)
 1010438:	1809883a 	mov	r4,r3
 101043c:	00fffcc4 	movi	r3,-13
 1010440:	20c8703a 	and	r4,r4,r3
 1010444:	e0fffe17 	ldw	r3,-8(fp)
 1010448:	180690ba 	slli	r3,r3,2
 101044c:	18c0030c 	andi	r3,r3,12
 1010450:	20c6b03a 	or	r3,r4,r3
 1010454:	10c00035 	stwio	r3,0(r2)
}
 1010458:	0001883a 	nop
 101045c:	e037883a 	mov	sp,fp
 1010460:	df000017 	ldw	fp,0(sp)
 1010464:	dec00104 	addi	sp,sp,4
 1010468:	f800283a 	ret

0101046c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 101046c:	defffa04 	addi	sp,sp,-24
 1010470:	dfc00515 	stw	ra,20(sp)
 1010474:	df000415 	stw	fp,16(sp)
 1010478:	df000404 	addi	fp,sp,16
 101047c:	e13ffe15 	stw	r4,-8(fp)
 1010480:	e17ffd15 	stw	r5,-12(fp)
 1010484:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1010488:	e0bffe17 	ldw	r2,-8(fp)
 101048c:	10800017 	ldw	r2,0(r2)
 1010490:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1010494:	e0bfff17 	ldw	r2,-4(fp)
 1010498:	10c00a04 	addi	r3,r2,40
 101049c:	e0bffe17 	ldw	r2,-8(fp)
 10104a0:	10800217 	ldw	r2,8(r2)
 10104a4:	100f883a 	mov	r7,r2
 10104a8:	e1bffc17 	ldw	r6,-16(fp)
 10104ac:	e17ffd17 	ldw	r5,-12(fp)
 10104b0:	1809883a 	mov	r4,r3
 10104b4:	1010a980 	call	1010a98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10104b8:	e037883a 	mov	sp,fp
 10104bc:	dfc00117 	ldw	ra,4(sp)
 10104c0:	df000017 	ldw	fp,0(sp)
 10104c4:	dec00204 	addi	sp,sp,8
 10104c8:	f800283a 	ret

010104cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10104cc:	defffa04 	addi	sp,sp,-24
 10104d0:	dfc00515 	stw	ra,20(sp)
 10104d4:	df000415 	stw	fp,16(sp)
 10104d8:	df000404 	addi	fp,sp,16
 10104dc:	e13ffe15 	stw	r4,-8(fp)
 10104e0:	e17ffd15 	stw	r5,-12(fp)
 10104e4:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10104e8:	e0bffe17 	ldw	r2,-8(fp)
 10104ec:	10800017 	ldw	r2,0(r2)
 10104f0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 10104f4:	e0bfff17 	ldw	r2,-4(fp)
 10104f8:	10c00a04 	addi	r3,r2,40
 10104fc:	e0bffe17 	ldw	r2,-8(fp)
 1010500:	10800217 	ldw	r2,8(r2)
 1010504:	100f883a 	mov	r7,r2
 1010508:	e1bffc17 	ldw	r6,-16(fp)
 101050c:	e17ffd17 	ldw	r5,-12(fp)
 1010510:	1809883a 	mov	r4,r3
 1010514:	1010cb80 	call	1010cb8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1010518:	e037883a 	mov	sp,fp
 101051c:	dfc00117 	ldw	ra,4(sp)
 1010520:	df000017 	ldw	fp,0(sp)
 1010524:	dec00204 	addi	sp,sp,8
 1010528:	f800283a 	ret

0101052c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 101052c:	defffc04 	addi	sp,sp,-16
 1010530:	dfc00315 	stw	ra,12(sp)
 1010534:	df000215 	stw	fp,8(sp)
 1010538:	df000204 	addi	fp,sp,8
 101053c:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1010540:	e0bffe17 	ldw	r2,-8(fp)
 1010544:	10800017 	ldw	r2,0(r2)
 1010548:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 101054c:	e0bfff17 	ldw	r2,-4(fp)
 1010550:	10c00a04 	addi	r3,r2,40
 1010554:	e0bffe17 	ldw	r2,-8(fp)
 1010558:	10800217 	ldw	r2,8(r2)
 101055c:	100b883a 	mov	r5,r2
 1010560:	1809883a 	mov	r4,r3
 1010564:	101093c0 	call	101093c <altera_avalon_jtag_uart_close>
}
 1010568:	e037883a 	mov	sp,fp
 101056c:	dfc00117 	ldw	ra,4(sp)
 1010570:	df000017 	ldw	fp,0(sp)
 1010574:	dec00204 	addi	sp,sp,8
 1010578:	f800283a 	ret

0101057c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 101057c:	defffa04 	addi	sp,sp,-24
 1010580:	dfc00515 	stw	ra,20(sp)
 1010584:	df000415 	stw	fp,16(sp)
 1010588:	df000404 	addi	fp,sp,16
 101058c:	e13ffe15 	stw	r4,-8(fp)
 1010590:	e17ffd15 	stw	r5,-12(fp)
 1010594:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1010598:	e0bffe17 	ldw	r2,-8(fp)
 101059c:	10800017 	ldw	r2,0(r2)
 10105a0:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10105a4:	e0bfff17 	ldw	r2,-4(fp)
 10105a8:	10800a04 	addi	r2,r2,40
 10105ac:	e1bffc17 	ldw	r6,-16(fp)
 10105b0:	e17ffd17 	ldw	r5,-12(fp)
 10105b4:	1009883a 	mov	r4,r2
 10105b8:	10109a40 	call	10109a4 <altera_avalon_jtag_uart_ioctl>
}
 10105bc:	e037883a 	mov	sp,fp
 10105c0:	dfc00117 	ldw	ra,4(sp)
 10105c4:	df000017 	ldw	fp,0(sp)
 10105c8:	dec00204 	addi	sp,sp,8
 10105cc:	f800283a 	ret

010105d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10105d0:	defffa04 	addi	sp,sp,-24
 10105d4:	dfc00515 	stw	ra,20(sp)
 10105d8:	df000415 	stw	fp,16(sp)
 10105dc:	df000404 	addi	fp,sp,16
 10105e0:	e13fff15 	stw	r4,-4(fp)
 10105e4:	e17ffe15 	stw	r5,-8(fp)
 10105e8:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10105ec:	e0bfff17 	ldw	r2,-4(fp)
 10105f0:	00c00044 	movi	r3,1
 10105f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 10105f8:	e0bfff17 	ldw	r2,-4(fp)
 10105fc:	10800017 	ldw	r2,0(r2)
 1010600:	10800104 	addi	r2,r2,4
 1010604:	1007883a 	mov	r3,r2
 1010608:	e0bfff17 	ldw	r2,-4(fp)
 101060c:	10800817 	ldw	r2,32(r2)
 1010610:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 1010614:	e0bffe17 	ldw	r2,-8(fp)
 1010618:	e0fffd17 	ldw	r3,-12(fp)
 101061c:	d8000015 	stw	zero,0(sp)
 1010620:	e1ffff17 	ldw	r7,-4(fp)
 1010624:	01804074 	movhi	r6,257
 1010628:	3181a404 	addi	r6,r6,1680
 101062c:	180b883a 	mov	r5,r3
 1010630:	1009883a 	mov	r4,r2
 1010634:	101161c0 	call	101161c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1010638:	e0bfff17 	ldw	r2,-4(fp)
 101063c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1010640:	e0bfff17 	ldw	r2,-4(fp)
 1010644:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1010648:	d0e72017 	ldw	r3,-25472(gp)
 101064c:	e1ffff17 	ldw	r7,-4(fp)
 1010650:	01804074 	movhi	r6,257
 1010654:	31822704 	addi	r6,r6,2204
 1010658:	180b883a 	mov	r5,r3
 101065c:	1009883a 	mov	r4,r2
 1010660:	10111dc0 	call	10111dc <alt_alarm_start>
 1010664:	1000040e 	bge	r2,zero,1010678 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1010668:	e0ffff17 	ldw	r3,-4(fp)
 101066c:	00a00034 	movhi	r2,32768
 1010670:	10bfffc4 	addi	r2,r2,-1
 1010674:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1010678:	0001883a 	nop
 101067c:	e037883a 	mov	sp,fp
 1010680:	dfc00117 	ldw	ra,4(sp)
 1010684:	df000017 	ldw	fp,0(sp)
 1010688:	dec00204 	addi	sp,sp,8
 101068c:	f800283a 	ret

01010690 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1010690:	defff804 	addi	sp,sp,-32
 1010694:	df000715 	stw	fp,28(sp)
 1010698:	df000704 	addi	fp,sp,28
 101069c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10106a0:	e0bff917 	ldw	r2,-28(fp)
 10106a4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 10106a8:	e0bffd17 	ldw	r2,-12(fp)
 10106ac:	10800017 	ldw	r2,0(r2)
 10106b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10106b4:	e0bffc17 	ldw	r2,-16(fp)
 10106b8:	10800104 	addi	r2,r2,4
 10106bc:	10800037 	ldwio	r2,0(r2)
 10106c0:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10106c4:	e0bffb17 	ldw	r2,-20(fp)
 10106c8:	1080c00c 	andi	r2,r2,768
 10106cc:	10006d26 	beq	r2,zero,1010884 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10106d0:	e0bffb17 	ldw	r2,-20(fp)
 10106d4:	1080400c 	andi	r2,r2,256
 10106d8:	10003526 	beq	r2,zero,10107b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10106dc:	00800074 	movhi	r2,1
 10106e0:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10106e4:	e0bffd17 	ldw	r2,-12(fp)
 10106e8:	10800a17 	ldw	r2,40(r2)
 10106ec:	10800044 	addi	r2,r2,1
 10106f0:	1081ffcc 	andi	r2,r2,2047
 10106f4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 10106f8:	e0bffd17 	ldw	r2,-12(fp)
 10106fc:	10800b17 	ldw	r2,44(r2)
 1010700:	e0fffa17 	ldw	r3,-24(fp)
 1010704:	18801526 	beq	r3,r2,101075c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1010708:	e0bffc17 	ldw	r2,-16(fp)
 101070c:	10800037 	ldwio	r2,0(r2)
 1010710:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1010714:	e0bfff17 	ldw	r2,-4(fp)
 1010718:	10a0000c 	andi	r2,r2,32768
 101071c:	10001126 	beq	r2,zero,1010764 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1010720:	e0bffd17 	ldw	r2,-12(fp)
 1010724:	10800a17 	ldw	r2,40(r2)
 1010728:	e0ffff17 	ldw	r3,-4(fp)
 101072c:	1809883a 	mov	r4,r3
 1010730:	e0fffd17 	ldw	r3,-12(fp)
 1010734:	1885883a 	add	r2,r3,r2
 1010738:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 101073c:	e0bffd17 	ldw	r2,-12(fp)
 1010740:	10800a17 	ldw	r2,40(r2)
 1010744:	10800044 	addi	r2,r2,1
 1010748:	10c1ffcc 	andi	r3,r2,2047
 101074c:	e0bffd17 	ldw	r2,-12(fp)
 1010750:	10c00a15 	stw	r3,40(r2)
 1010754:	0001883a 	nop
      {
 1010758:	003fe206 	br	10106e4 <altera_avalon_jtag_uart_irq+0x54>
          break;
 101075c:	0001883a 	nop
 1010760:	00000106 	br	1010768 <altera_avalon_jtag_uart_irq+0xd8>
          break;
 1010764:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1010768:	e0bfff17 	ldw	r2,-4(fp)
 101076c:	10bfffec 	andhi	r2,r2,65535
 1010770:	10000f26 	beq	r2,zero,10107b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1010774:	e0bffd17 	ldw	r2,-12(fp)
 1010778:	10c00817 	ldw	r3,32(r2)
 101077c:	00bfff84 	movi	r2,-2
 1010780:	1886703a 	and	r3,r3,r2
 1010784:	e0bffd17 	ldw	r2,-12(fp)
 1010788:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 101078c:	e0bffc17 	ldw	r2,-16(fp)
 1010790:	10800104 	addi	r2,r2,4
 1010794:	1007883a 	mov	r3,r2
 1010798:	e0bffd17 	ldw	r2,-12(fp)
 101079c:	10800817 	ldw	r2,32(r2)
 10107a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10107a4:	e0bffc17 	ldw	r2,-16(fp)
 10107a8:	10800104 	addi	r2,r2,4
 10107ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10107b0:	e0bffb17 	ldw	r2,-20(fp)
 10107b4:	1080800c 	andi	r2,r2,512
 10107b8:	103fbe26 	beq	r2,zero,10106b4 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10107bc:	e0bffb17 	ldw	r2,-20(fp)
 10107c0:	1004d43a 	srli	r2,r2,16
 10107c4:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10107c8:	00001406 	br	101081c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10107cc:	e0bffc17 	ldw	r2,-16(fp)
 10107d0:	e0fffd17 	ldw	r3,-12(fp)
 10107d4:	18c00d17 	ldw	r3,52(r3)
 10107d8:	e13ffd17 	ldw	r4,-12(fp)
 10107dc:	20c7883a 	add	r3,r4,r3
 10107e0:	18c20e03 	ldbu	r3,2104(r3)
 10107e4:	18c03fcc 	andi	r3,r3,255
 10107e8:	18c0201c 	xori	r3,r3,128
 10107ec:	18ffe004 	addi	r3,r3,-128
 10107f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10107f4:	e0bffd17 	ldw	r2,-12(fp)
 10107f8:	10800d17 	ldw	r2,52(r2)
 10107fc:	10800044 	addi	r2,r2,1
 1010800:	10c1ffcc 	andi	r3,r2,2047
 1010804:	e0bffd17 	ldw	r2,-12(fp)
 1010808:	10c00d15 	stw	r3,52(r2)
 101080c:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1010810:	e0bffe17 	ldw	r2,-8(fp)
 1010814:	10bfffc4 	addi	r2,r2,-1
 1010818:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 101081c:	e0bffe17 	ldw	r2,-8(fp)
 1010820:	10000526 	beq	r2,zero,1010838 <altera_avalon_jtag_uart_irq+0x1a8>
 1010824:	e0bffd17 	ldw	r2,-12(fp)
 1010828:	10c00d17 	ldw	r3,52(r2)
 101082c:	e0bffd17 	ldw	r2,-12(fp)
 1010830:	10800c17 	ldw	r2,48(r2)
 1010834:	18bfe51e 	bne	r3,r2,10107cc <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
 1010838:	e0bffe17 	ldw	r2,-8(fp)
 101083c:	103f9d26 	beq	r2,zero,10106b4 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1010840:	e0bffd17 	ldw	r2,-12(fp)
 1010844:	10c00817 	ldw	r3,32(r2)
 1010848:	00bfff44 	movi	r2,-3
 101084c:	1886703a 	and	r3,r3,r2
 1010850:	e0bffd17 	ldw	r2,-12(fp)
 1010854:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010858:	e0bffd17 	ldw	r2,-12(fp)
 101085c:	10800017 	ldw	r2,0(r2)
 1010860:	10800104 	addi	r2,r2,4
 1010864:	1007883a 	mov	r3,r2
 1010868:	e0bffd17 	ldw	r2,-12(fp)
 101086c:	10800817 	ldw	r2,32(r2)
 1010870:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1010874:	e0bffc17 	ldw	r2,-16(fp)
 1010878:	10800104 	addi	r2,r2,4
 101087c:	10800037 	ldwio	r2,0(r2)
  {
 1010880:	003f8c06 	br	10106b4 <altera_avalon_jtag_uart_irq+0x24>
      break;
 1010884:	0001883a 	nop
      }
    }
  }
}
 1010888:	0001883a 	nop
 101088c:	e037883a 	mov	sp,fp
 1010890:	df000017 	ldw	fp,0(sp)
 1010894:	dec00104 	addi	sp,sp,4
 1010898:	f800283a 	ret

0101089c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 101089c:	defffc04 	addi	sp,sp,-16
 10108a0:	df000315 	stw	fp,12(sp)
 10108a4:	df000304 	addi	fp,sp,12
 10108a8:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 10108ac:	e0bffd17 	ldw	r2,-12(fp)
 10108b0:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 10108b4:	e0bfff17 	ldw	r2,-4(fp)
 10108b8:	10800017 	ldw	r2,0(r2)
 10108bc:	10800104 	addi	r2,r2,4
 10108c0:	10800037 	ldwio	r2,0(r2)
 10108c4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 10108c8:	e0bffe17 	ldw	r2,-8(fp)
 10108cc:	1081000c 	andi	r2,r2,1024
 10108d0:	10000b26 	beq	r2,zero,1010900 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 10108d4:	e0bfff17 	ldw	r2,-4(fp)
 10108d8:	10800017 	ldw	r2,0(r2)
 10108dc:	10800104 	addi	r2,r2,4
 10108e0:	1007883a 	mov	r3,r2
 10108e4:	e0bfff17 	ldw	r2,-4(fp)
 10108e8:	10800817 	ldw	r2,32(r2)
 10108ec:	10810014 	ori	r2,r2,1024
 10108f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 10108f4:	e0bfff17 	ldw	r2,-4(fp)
 10108f8:	10000915 	stw	zero,36(r2)
 10108fc:	00000a06 	br	1010928 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1010900:	e0bfff17 	ldw	r2,-4(fp)
 1010904:	10c00917 	ldw	r3,36(r2)
 1010908:	00a00034 	movhi	r2,32768
 101090c:	10bfff04 	addi	r2,r2,-4
 1010910:	10c00536 	bltu	r2,r3,1010928 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1010914:	e0bfff17 	ldw	r2,-4(fp)
 1010918:	10800917 	ldw	r2,36(r2)
 101091c:	10c00044 	addi	r3,r2,1
 1010920:	e0bfff17 	ldw	r2,-4(fp)
 1010924:	10c00915 	stw	r3,36(r2)
 1010928:	d0a72017 	ldw	r2,-25472(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 101092c:	e037883a 	mov	sp,fp
 1010930:	df000017 	ldw	fp,0(sp)
 1010934:	dec00104 	addi	sp,sp,4
 1010938:	f800283a 	ret

0101093c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 101093c:	defffd04 	addi	sp,sp,-12
 1010940:	df000215 	stw	fp,8(sp)
 1010944:	df000204 	addi	fp,sp,8
 1010948:	e13fff15 	stw	r4,-4(fp)
 101094c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1010950:	00000506 	br	1010968 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1010954:	e0bffe17 	ldw	r2,-8(fp)
 1010958:	1090000c 	andi	r2,r2,16384
 101095c:	10000226 	beq	r2,zero,1010968 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1010960:	00bffd44 	movi	r2,-11
 1010964:	00000b06 	br	1010994 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1010968:	e0bfff17 	ldw	r2,-4(fp)
 101096c:	10c00d17 	ldw	r3,52(r2)
 1010970:	e0bfff17 	ldw	r2,-4(fp)
 1010974:	10800c17 	ldw	r2,48(r2)
 1010978:	18800526 	beq	r3,r2,1010990 <altera_avalon_jtag_uart_close+0x54>
 101097c:	e0bfff17 	ldw	r2,-4(fp)
 1010980:	10c00917 	ldw	r3,36(r2)
 1010984:	e0bfff17 	ldw	r2,-4(fp)
 1010988:	10800117 	ldw	r2,4(r2)
 101098c:	18bff136 	bltu	r3,r2,1010954 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 1010990:	0005883a 	mov	r2,zero
}
 1010994:	e037883a 	mov	sp,fp
 1010998:	df000017 	ldw	fp,0(sp)
 101099c:	dec00104 	addi	sp,sp,4
 10109a0:	f800283a 	ret

010109a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 10109a4:	defffa04 	addi	sp,sp,-24
 10109a8:	df000515 	stw	fp,20(sp)
 10109ac:	df000504 	addi	fp,sp,20
 10109b0:	e13ffd15 	stw	r4,-12(fp)
 10109b4:	e17ffc15 	stw	r5,-16(fp)
 10109b8:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 10109bc:	00bff9c4 	movi	r2,-25
 10109c0:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 10109c4:	e0bffc17 	ldw	r2,-16(fp)
 10109c8:	109a8060 	cmpeqi	r2,r2,27137
 10109cc:	1000041e 	bne	r2,zero,10109e0 <altera_avalon_jtag_uart_ioctl+0x3c>
 10109d0:	e0bffc17 	ldw	r2,-16(fp)
 10109d4:	109a80a0 	cmpeqi	r2,r2,27138
 10109d8:	1000181e 	bne	r2,zero,1010a3c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 10109dc:	00002906 	br	1010a84 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 10109e0:	e0bffd17 	ldw	r2,-12(fp)
 10109e4:	10c00117 	ldw	r3,4(r2)
 10109e8:	00a00034 	movhi	r2,32768
 10109ec:	10bfffc4 	addi	r2,r2,-1
 10109f0:	18802126 	beq	r3,r2,1010a78 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 10109f4:	e0bffb17 	ldw	r2,-20(fp)
 10109f8:	10800017 	ldw	r2,0(r2)
 10109fc:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1010a00:	e0bffe17 	ldw	r2,-8(fp)
 1010a04:	10800090 	cmplti	r2,r2,2
 1010a08:	1000061e 	bne	r2,zero,1010a24 <altera_avalon_jtag_uart_ioctl+0x80>
 1010a0c:	e0fffe17 	ldw	r3,-8(fp)
 1010a10:	00a00034 	movhi	r2,32768
 1010a14:	10bfffc4 	addi	r2,r2,-1
 1010a18:	18800226 	beq	r3,r2,1010a24 <altera_avalon_jtag_uart_ioctl+0x80>
 1010a1c:	e0bffe17 	ldw	r2,-8(fp)
 1010a20:	00000206 	br	1010a2c <altera_avalon_jtag_uart_ioctl+0x88>
 1010a24:	00a00034 	movhi	r2,32768
 1010a28:	10bfff84 	addi	r2,r2,-2
 1010a2c:	e0fffd17 	ldw	r3,-12(fp)
 1010a30:	18800115 	stw	r2,4(r3)
      rc = 0;
 1010a34:	e03fff15 	stw	zero,-4(fp)
    break;
 1010a38:	00000f06 	br	1010a78 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 1010a3c:	e0bffd17 	ldw	r2,-12(fp)
 1010a40:	10c00117 	ldw	r3,4(r2)
 1010a44:	00a00034 	movhi	r2,32768
 1010a48:	10bfffc4 	addi	r2,r2,-1
 1010a4c:	18800c26 	beq	r3,r2,1010a80 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1010a50:	e0bffd17 	ldw	r2,-12(fp)
 1010a54:	10c00917 	ldw	r3,36(r2)
 1010a58:	e0bffd17 	ldw	r2,-12(fp)
 1010a5c:	10800117 	ldw	r2,4(r2)
 1010a60:	1885803a 	cmpltu	r2,r3,r2
 1010a64:	10c03fcc 	andi	r3,r2,255
 1010a68:	e0bffb17 	ldw	r2,-20(fp)
 1010a6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1010a70:	e03fff15 	stw	zero,-4(fp)
    break;
 1010a74:	00000206 	br	1010a80 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 1010a78:	0001883a 	nop
 1010a7c:	00000106 	br	1010a84 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 1010a80:	0001883a 	nop
  }

  return rc;
 1010a84:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a88:	e037883a 	mov	sp,fp
 1010a8c:	df000017 	ldw	fp,0(sp)
 1010a90:	dec00104 	addi	sp,sp,4
 1010a94:	f800283a 	ret

01010a98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1010a98:	defff304 	addi	sp,sp,-52
 1010a9c:	dfc00c15 	stw	ra,48(sp)
 1010aa0:	df000b15 	stw	fp,44(sp)
 1010aa4:	df000b04 	addi	fp,sp,44
 1010aa8:	e13ff815 	stw	r4,-32(fp)
 1010aac:	e17ff715 	stw	r5,-36(fp)
 1010ab0:	e1bff615 	stw	r6,-40(fp)
 1010ab4:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 1010ab8:	e0bff717 	ldw	r2,-36(fp)
 1010abc:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1010ac0:	00004706 	br	1010be0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1010ac4:	e0bff817 	ldw	r2,-32(fp)
 1010ac8:	10800a17 	ldw	r2,40(r2)
 1010acc:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 1010ad0:	e0bff817 	ldw	r2,-32(fp)
 1010ad4:	10800b17 	ldw	r2,44(r2)
 1010ad8:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 1010adc:	e0fffd17 	ldw	r3,-12(fp)
 1010ae0:	e0bffc17 	ldw	r2,-16(fp)
 1010ae4:	18800536 	bltu	r3,r2,1010afc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1010ae8:	e0fffd17 	ldw	r3,-12(fp)
 1010aec:	e0bffc17 	ldw	r2,-16(fp)
 1010af0:	1885c83a 	sub	r2,r3,r2
 1010af4:	e0bffe15 	stw	r2,-8(fp)
 1010af8:	00000406 	br	1010b0c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1010afc:	00c20004 	movi	r3,2048
 1010b00:	e0bffc17 	ldw	r2,-16(fp)
 1010b04:	1885c83a 	sub	r2,r3,r2
 1010b08:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 1010b0c:	e0bffe17 	ldw	r2,-8(fp)
 1010b10:	10001e26 	beq	r2,zero,1010b8c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1010b14:	e0fff617 	ldw	r3,-40(fp)
 1010b18:	e0bffe17 	ldw	r2,-8(fp)
 1010b1c:	1880022e 	bgeu	r3,r2,1010b28 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1010b20:	e0bff617 	ldw	r2,-40(fp)
 1010b24:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1010b28:	e0bff817 	ldw	r2,-32(fp)
 1010b2c:	10c00e04 	addi	r3,r2,56
 1010b30:	e0bffc17 	ldw	r2,-16(fp)
 1010b34:	1885883a 	add	r2,r3,r2
 1010b38:	e1bffe17 	ldw	r6,-8(fp)
 1010b3c:	100b883a 	mov	r5,r2
 1010b40:	e13fff17 	ldw	r4,-4(fp)
 1010b44:	100679c0 	call	100679c <memcpy>
      ptr   += n;
 1010b48:	e0ffff17 	ldw	r3,-4(fp)
 1010b4c:	e0bffe17 	ldw	r2,-8(fp)
 1010b50:	1885883a 	add	r2,r3,r2
 1010b54:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 1010b58:	e0fff617 	ldw	r3,-40(fp)
 1010b5c:	e0bffe17 	ldw	r2,-8(fp)
 1010b60:	1885c83a 	sub	r2,r3,r2
 1010b64:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010b68:	e0fffc17 	ldw	r3,-16(fp)
 1010b6c:	e0bffe17 	ldw	r2,-8(fp)
 1010b70:	1885883a 	add	r2,r3,r2
 1010b74:	10c1ffcc 	andi	r3,r2,2047
 1010b78:	e0bff817 	ldw	r2,-32(fp)
 1010b7c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1010b80:	e0bff617 	ldw	r2,-40(fp)
 1010b84:	00bfcf16 	blt	zero,r2,1010ac4 <altera_avalon_jtag_uart_read+0x2c>
 1010b88:	00000106 	br	1010b90 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 1010b8c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 1010b90:	e0ffff17 	ldw	r3,-4(fp)
 1010b94:	e0bff717 	ldw	r2,-36(fp)
 1010b98:	1880141e 	bne	r3,r2,1010bec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1010b9c:	e0bff517 	ldw	r2,-44(fp)
 1010ba0:	1090000c 	andi	r2,r2,16384
 1010ba4:	1000131e 	bne	r2,zero,1010bf4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1010ba8:	0001883a 	nop
 1010bac:	e0bff817 	ldw	r2,-32(fp)
 1010bb0:	10800a17 	ldw	r2,40(r2)
 1010bb4:	e0fffd17 	ldw	r3,-12(fp)
 1010bb8:	1880051e 	bne	r3,r2,1010bd0 <altera_avalon_jtag_uart_read+0x138>
 1010bbc:	e0bff817 	ldw	r2,-32(fp)
 1010bc0:	10c00917 	ldw	r3,36(r2)
 1010bc4:	e0bff817 	ldw	r2,-32(fp)
 1010bc8:	10800117 	ldw	r2,4(r2)
 1010bcc:	18bff736 	bltu	r3,r2,1010bac <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1010bd0:	e0bff817 	ldw	r2,-32(fp)
 1010bd4:	10800a17 	ldw	r2,40(r2)
 1010bd8:	e0fffd17 	ldw	r3,-12(fp)
 1010bdc:	18800726 	beq	r3,r2,1010bfc <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 1010be0:	e0bff617 	ldw	r2,-40(fp)
 1010be4:	00bfb716 	blt	zero,r2,1010ac4 <altera_avalon_jtag_uart_read+0x2c>
 1010be8:	00000506 	br	1010c00 <altera_avalon_jtag_uart_read+0x168>
      break;
 1010bec:	0001883a 	nop
 1010bf0:	00000306 	br	1010c00 <altera_avalon_jtag_uart_read+0x168>
      break;
 1010bf4:	0001883a 	nop
 1010bf8:	00000106 	br	1010c00 <altera_avalon_jtag_uart_read+0x168>
      break;
 1010bfc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1010c00:	e0ffff17 	ldw	r3,-4(fp)
 1010c04:	e0bff717 	ldw	r2,-36(fp)
 1010c08:	18801926 	beq	r3,r2,1010c70 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
 1010c0c:	0005303a 	rdctl	r2,status
 1010c10:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c14:	e0fff917 	ldw	r3,-28(fp)
 1010c18:	00bfff84 	movi	r2,-2
 1010c1c:	1884703a 	and	r2,r3,r2
 1010c20:	1001703a 	wrctl	status,r2
  return context;
 1010c24:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1010c28:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1010c2c:	e0bff817 	ldw	r2,-32(fp)
 1010c30:	10800817 	ldw	r2,32(r2)
 1010c34:	10c00054 	ori	r3,r2,1
 1010c38:	e0bff817 	ldw	r2,-32(fp)
 1010c3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010c40:	e0bff817 	ldw	r2,-32(fp)
 1010c44:	10800017 	ldw	r2,0(r2)
 1010c48:	10800104 	addi	r2,r2,4
 1010c4c:	1007883a 	mov	r3,r2
 1010c50:	e0bff817 	ldw	r2,-32(fp)
 1010c54:	10800817 	ldw	r2,32(r2)
 1010c58:	18800035 	stwio	r2,0(r3)
 1010c5c:	e0bffb17 	ldw	r2,-20(fp)
 1010c60:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 1010c64:	e0bffa17 	ldw	r2,-24(fp)
 1010c68:	1001703a 	wrctl	status,r2
}
 1010c6c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1010c70:	e0ffff17 	ldw	r3,-4(fp)
 1010c74:	e0bff717 	ldw	r2,-36(fp)
 1010c78:	18800426 	beq	r3,r2,1010c8c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
 1010c7c:	e0ffff17 	ldw	r3,-4(fp)
 1010c80:	e0bff717 	ldw	r2,-36(fp)
 1010c84:	1885c83a 	sub	r2,r3,r2
 1010c88:	00000606 	br	1010ca4 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 1010c8c:	e0bff517 	ldw	r2,-44(fp)
 1010c90:	1090000c 	andi	r2,r2,16384
 1010c94:	10000226 	beq	r2,zero,1010ca0 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
 1010c98:	00bffd44 	movi	r2,-11
 1010c9c:	00000106 	br	1010ca4 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1010ca0:	00bffec4 	movi	r2,-5
}
 1010ca4:	e037883a 	mov	sp,fp
 1010ca8:	dfc00117 	ldw	ra,4(sp)
 1010cac:	df000017 	ldw	fp,0(sp)
 1010cb0:	dec00204 	addi	sp,sp,8
 1010cb4:	f800283a 	ret

01010cb8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1010cb8:	defff304 	addi	sp,sp,-52
 1010cbc:	dfc00c15 	stw	ra,48(sp)
 1010cc0:	df000b15 	stw	fp,44(sp)
 1010cc4:	df000b04 	addi	fp,sp,44
 1010cc8:	e13ff815 	stw	r4,-32(fp)
 1010ccc:	e17ff715 	stw	r5,-36(fp)
 1010cd0:	e1bff615 	stw	r6,-40(fp)
 1010cd4:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1010cd8:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1010cdc:	e0bff717 	ldw	r2,-36(fp)
 1010ce0:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1010ce4:	00003706 	br	1010dc4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1010ce8:	e0bff817 	ldw	r2,-32(fp)
 1010cec:	10800c17 	ldw	r2,48(r2)
 1010cf0:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 1010cf4:	e0bff817 	ldw	r2,-32(fp)
 1010cf8:	10800d17 	ldw	r2,52(r2)
 1010cfc:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 1010d00:	e0fffc17 	ldw	r3,-16(fp)
 1010d04:	e0bfff17 	ldw	r2,-4(fp)
 1010d08:	1880062e 	bgeu	r3,r2,1010d24 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1010d0c:	e0ffff17 	ldw	r3,-4(fp)
 1010d10:	e0bffc17 	ldw	r2,-16(fp)
 1010d14:	1885c83a 	sub	r2,r3,r2
 1010d18:	10bfffc4 	addi	r2,r2,-1
 1010d1c:	e0bffe15 	stw	r2,-8(fp)
 1010d20:	00000b06 	br	1010d50 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1010d24:	e0bfff17 	ldw	r2,-4(fp)
 1010d28:	10000526 	beq	r2,zero,1010d40 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1010d2c:	00c20004 	movi	r3,2048
 1010d30:	e0bffc17 	ldw	r2,-16(fp)
 1010d34:	1885c83a 	sub	r2,r3,r2
 1010d38:	e0bffe15 	stw	r2,-8(fp)
 1010d3c:	00000406 	br	1010d50 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1010d40:	00c1ffc4 	movi	r3,2047
 1010d44:	e0bffc17 	ldw	r2,-16(fp)
 1010d48:	1885c83a 	sub	r2,r3,r2
 1010d4c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 1010d50:	e0bffe17 	ldw	r2,-8(fp)
 1010d54:	10001e26 	beq	r2,zero,1010dd0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1010d58:	e0fff617 	ldw	r3,-40(fp)
 1010d5c:	e0bffe17 	ldw	r2,-8(fp)
 1010d60:	1880022e 	bgeu	r3,r2,1010d6c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1010d64:	e0bff617 	ldw	r2,-40(fp)
 1010d68:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1010d6c:	e0bff817 	ldw	r2,-32(fp)
 1010d70:	10c20e04 	addi	r3,r2,2104
 1010d74:	e0bffc17 	ldw	r2,-16(fp)
 1010d78:	1885883a 	add	r2,r3,r2
 1010d7c:	e1bffe17 	ldw	r6,-8(fp)
 1010d80:	e17ff717 	ldw	r5,-36(fp)
 1010d84:	1009883a 	mov	r4,r2
 1010d88:	100679c0 	call	100679c <memcpy>
      ptr   += n;
 1010d8c:	e0fff717 	ldw	r3,-36(fp)
 1010d90:	e0bffe17 	ldw	r2,-8(fp)
 1010d94:	1885883a 	add	r2,r3,r2
 1010d98:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 1010d9c:	e0fff617 	ldw	r3,-40(fp)
 1010da0:	e0bffe17 	ldw	r2,-8(fp)
 1010da4:	1885c83a 	sub	r2,r3,r2
 1010da8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1010dac:	e0fffc17 	ldw	r3,-16(fp)
 1010db0:	e0bffe17 	ldw	r2,-8(fp)
 1010db4:	1885883a 	add	r2,r3,r2
 1010db8:	10c1ffcc 	andi	r3,r2,2047
 1010dbc:	e0bff817 	ldw	r2,-32(fp)
 1010dc0:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 1010dc4:	e0bff617 	ldw	r2,-40(fp)
 1010dc8:	00bfc716 	blt	zero,r2,1010ce8 <altera_avalon_jtag_uart_write+0x30>
 1010dcc:	00000106 	br	1010dd4 <altera_avalon_jtag_uart_write+0x11c>
        break;
 1010dd0:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 1010dd4:	0005303a 	rdctl	r2,status
 1010dd8:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010ddc:	e0fff917 	ldw	r3,-28(fp)
 1010de0:	00bfff84 	movi	r2,-2
 1010de4:	1884703a 	and	r2,r3,r2
 1010de8:	1001703a 	wrctl	status,r2
  return context;
 1010dec:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1010df0:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1010df4:	e0bff817 	ldw	r2,-32(fp)
 1010df8:	10800817 	ldw	r2,32(r2)
 1010dfc:	10c00094 	ori	r3,r2,2
 1010e00:	e0bff817 	ldw	r2,-32(fp)
 1010e04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1010e08:	e0bff817 	ldw	r2,-32(fp)
 1010e0c:	10800017 	ldw	r2,0(r2)
 1010e10:	10800104 	addi	r2,r2,4
 1010e14:	1007883a 	mov	r3,r2
 1010e18:	e0bff817 	ldw	r2,-32(fp)
 1010e1c:	10800817 	ldw	r2,32(r2)
 1010e20:	18800035 	stwio	r2,0(r3)
 1010e24:	e0bffb17 	ldw	r2,-20(fp)
 1010e28:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 1010e2c:	e0bffa17 	ldw	r2,-24(fp)
 1010e30:	1001703a 	wrctl	status,r2
}
 1010e34:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1010e38:	e0bff617 	ldw	r2,-40(fp)
 1010e3c:	0080100e 	bge	zero,r2,1010e80 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 1010e40:	e0bff517 	ldw	r2,-44(fp)
 1010e44:	1090000c 	andi	r2,r2,16384
 1010e48:	1000101e 	bne	r2,zero,1010e8c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1010e4c:	0001883a 	nop
 1010e50:	e0bff817 	ldw	r2,-32(fp)
 1010e54:	10800d17 	ldw	r2,52(r2)
 1010e58:	e0ffff17 	ldw	r3,-4(fp)
 1010e5c:	1880051e 	bne	r3,r2,1010e74 <altera_avalon_jtag_uart_write+0x1bc>
 1010e60:	e0bff817 	ldw	r2,-32(fp)
 1010e64:	10c00917 	ldw	r3,36(r2)
 1010e68:	e0bff817 	ldw	r2,-32(fp)
 1010e6c:	10800117 	ldw	r2,4(r2)
 1010e70:	18bff736 	bltu	r3,r2,1010e50 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1010e74:	e0bff817 	ldw	r2,-32(fp)
 1010e78:	10800917 	ldw	r2,36(r2)
 1010e7c:	1000051e 	bne	r2,zero,1010e94 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
 1010e80:	e0bff617 	ldw	r2,-40(fp)
 1010e84:	00bfcf16 	blt	zero,r2,1010dc4 <altera_avalon_jtag_uart_write+0x10c>
 1010e88:	00000306 	br	1010e98 <altera_avalon_jtag_uart_write+0x1e0>
        break;
 1010e8c:	0001883a 	nop
 1010e90:	00000106 	br	1010e98 <altera_avalon_jtag_uart_write+0x1e0>
         break;
 1010e94:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 1010e98:	e0fff717 	ldw	r3,-36(fp)
 1010e9c:	e0bffd17 	ldw	r2,-12(fp)
 1010ea0:	18800426 	beq	r3,r2,1010eb4 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
 1010ea4:	e0fff717 	ldw	r3,-36(fp)
 1010ea8:	e0bffd17 	ldw	r2,-12(fp)
 1010eac:	1885c83a 	sub	r2,r3,r2
 1010eb0:	00000606 	br	1010ecc <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
 1010eb4:	e0bff517 	ldw	r2,-44(fp)
 1010eb8:	1090000c 	andi	r2,r2,16384
 1010ebc:	10000226 	beq	r2,zero,1010ec8 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
 1010ec0:	00bffd44 	movi	r2,-11
 1010ec4:	00000106 	br	1010ecc <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1010ec8:	00bffec4 	movi	r2,-5
}
 1010ecc:	e037883a 	mov	sp,fp
 1010ed0:	dfc00117 	ldw	ra,4(sp)
 1010ed4:	df000017 	ldw	fp,0(sp)
 1010ed8:	dec00204 	addi	sp,sp,8
 1010edc:	f800283a 	ret

01010ee0 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 1010ee0:	defff404 	addi	sp,sp,-48
 1010ee4:	df000b15 	stw	fp,44(sp)
 1010ee8:	df000b04 	addi	fp,sp,44
 1010eec:	e13ff815 	stw	r4,-32(fp)
 1010ef0:	e17ff715 	stw	r5,-36(fp)
 1010ef4:	e1bff615 	stw	r6,-40(fp)
 1010ef8:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
 1010efc:	e0fff517 	ldw	r3,-44(fp)
 1010f00:	e0bff617 	ldw	r2,-40(fp)
 1010f04:	1885883a 	add	r2,r3,r2
 1010f08:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
 1010f0c:	e0c00217 	ldw	r3,8(fp)
 1010f10:	e0800117 	ldw	r2,4(fp)
 1010f14:	1885883a 	add	r2,r3,r2
 1010f18:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
 1010f1c:	e0800117 	ldw	r2,4(fp)
 1010f20:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
 1010f24:	e0bff617 	ldw	r2,-40(fp)
 1010f28:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 1010f2c:	00800044 	movi	r2,1
 1010f30:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 1010f34:	e0bff817 	ldw	r2,-32(fp)
 1010f38:	10800504 	addi	r2,r2,20
 1010f3c:	1009883a 	mov	r4,r2
 1010f40:	00c00044 	movi	r3,1
 1010f44:	e0bff717 	ldw	r2,-36(fp)
 1010f48:	1884983a 	sll	r2,r3,r2
 1010f4c:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 1010f50:	e0800317 	ldw	r2,12(fp)
 1010f54:	1080008c 	andi	r2,r2,2
 1010f58:	1000051e 	bne	r2,zero,1010f70 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 1010f5c:	e0bff817 	ldw	r2,-32(fp)
 1010f60:	10800304 	addi	r2,r2,12
 1010f64:	1007883a 	mov	r3,r2
 1010f68:	00810004 	movi	r2,1024
 1010f6c:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 1010f70:	e0bff817 	ldw	r2,-32(fp)
 1010f74:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 1010f78:	e0bff817 	ldw	r2,-32(fp)
 1010f7c:	10800204 	addi	r2,r2,8
 1010f80:	10800037 	ldwio	r2,0(r2)
 1010f84:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 1010f88:	e0bffa17 	ldw	r2,-24(fp)
 1010f8c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 1010f90:	10000226 	beq	r2,zero,1010f9c <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 1010f94:	e0bffd17 	ldw	r2,-12(fp)
 1010f98:	1000031e 	bne	r2,zero,1010fa8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 1010f9c:	e0bffa17 	ldw	r2,-24(fp)
 1010fa0:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 1010fa4:	103ff426 	beq	r2,zero,1010f78 <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 1010fa8:	e0bffa17 	ldw	r2,-24(fp)
 1010fac:	1080100c 	andi	r2,r2,64
 1010fb0:	10001e26 	beq	r2,zero,101102c <alt_avalon_spi_command+0x14c>
 1010fb4:	e0bffd17 	ldw	r2,-12(fp)
 1010fb8:	00801c0e 	bge	zero,r2,101102c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 1010fbc:	e0bffd17 	ldw	r2,-12(fp)
 1010fc0:	10bfffc4 	addi	r2,r2,-1
 1010fc4:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
 1010fc8:	e0fff517 	ldw	r3,-44(fp)
 1010fcc:	e0bffc17 	ldw	r2,-16(fp)
 1010fd0:	18800a2e 	bgeu	r3,r2,1010ffc <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 1010fd4:	e0bff817 	ldw	r2,-32(fp)
 1010fd8:	10800104 	addi	r2,r2,4
 1010fdc:	1009883a 	mov	r4,r2
 1010fe0:	e0bff517 	ldw	r2,-44(fp)
 1010fe4:	10c00044 	addi	r3,r2,1
 1010fe8:	e0fff515 	stw	r3,-44(fp)
 1010fec:	10800003 	ldbu	r2,0(r2)
 1010ff0:	10803fcc 	andi	r2,r2,255
 1010ff4:	20800035 	stwio	r2,0(r4)
 1010ff8:	00000c06 	br	101102c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 1010ffc:	e0bfff17 	ldw	r2,-4(fp)
 1011000:	10000826 	beq	r2,zero,1011024 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 1011004:	e0bfff17 	ldw	r2,-4(fp)
 1011008:	10bfffc4 	addi	r2,r2,-1
 101100c:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 1011010:	e0bff817 	ldw	r2,-32(fp)
 1011014:	10800104 	addi	r2,r2,4
 1011018:	0007883a 	mov	r3,zero
 101101c:	10c00035 	stwio	r3,0(r2)
 1011020:	00000206 	br	101102c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 1011024:	00bf0004 	movi	r2,-1024
 1011028:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 101102c:	e0bffa17 	ldw	r2,-24(fp)
 1011030:	1080200c 	andi	r2,r2,128
 1011034:	103fd026 	beq	r2,zero,1010f78 <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 1011038:	e0bff817 	ldw	r2,-32(fp)
 101103c:	10800037 	ldwio	r2,0(r2)
 1011040:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
 1011044:	e0bffe17 	ldw	r2,-8(fp)
 1011048:	10000426 	beq	r2,zero,101105c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 101104c:	e0bffe17 	ldw	r2,-8(fp)
 1011050:	10bfffc4 	addi	r2,r2,-1
 1011054:	e0bffe15 	stw	r2,-8(fp)
 1011058:	00000506 	br	1011070 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 101105c:	e0800217 	ldw	r2,8(fp)
 1011060:	10c00044 	addi	r3,r2,1
 1011064:	e0c00215 	stw	r3,8(fp)
 1011068:	e0fff917 	ldw	r3,-28(fp)
 101106c:	10c00005 	stb	r3,0(r2)
      credits++;
 1011070:	e0bffd17 	ldw	r2,-12(fp)
 1011074:	10800044 	addi	r2,r2,1
 1011078:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
 101107c:	e0bffe17 	ldw	r2,-8(fp)
 1011080:	103fbd1e 	bne	r2,zero,1010f78 <alt_avalon_spi_command+0x98>
 1011084:	e0c00217 	ldw	r3,8(fp)
 1011088:	e0bffb17 	ldw	r2,-20(fp)
 101108c:	18bfba1e 	bne	r3,r2,1010f78 <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 1011090:	e0bff817 	ldw	r2,-32(fp)
 1011094:	10800204 	addi	r2,r2,8
 1011098:	10800037 	ldwio	r2,0(r2)
 101109c:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 10110a0:	e0bffa17 	ldw	r2,-24(fp)
 10110a4:	1080080c 	andi	r2,r2,32
 10110a8:	103ff926 	beq	r2,zero,1011090 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 10110ac:	e0800317 	ldw	r2,12(fp)
 10110b0:	1080004c 	andi	r2,r2,1
 10110b4:	1000041e 	bne	r2,zero,10110c8 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 10110b8:	e0bff817 	ldw	r2,-32(fp)
 10110bc:	10800304 	addi	r2,r2,12
 10110c0:	0007883a 	mov	r3,zero
 10110c4:	10c00035 	stwio	r3,0(r2)

  return read_length;
 10110c8:	e0800117 	ldw	r2,4(fp)
}
 10110cc:	e037883a 	mov	sp,fp
 10110d0:	df000017 	ldw	fp,0(sp)
 10110d4:	dec00104 	addi	sp,sp,4
 10110d8:	f800283a 	ret

010110dc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10110dc:	defffa04 	addi	sp,sp,-24
 10110e0:	dfc00515 	stw	ra,20(sp)
 10110e4:	df000415 	stw	fp,16(sp)
 10110e8:	df000404 	addi	fp,sp,16
 10110ec:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10110f0:	0007883a 	mov	r3,zero
 10110f4:	e0bffc17 	ldw	r2,-16(fp)
 10110f8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10110fc:	e0bffc17 	ldw	r2,-16(fp)
 1011100:	10800104 	addi	r2,r2,4
 1011104:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 1011108:	0005303a 	rdctl	r2,status
 101110c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011110:	e0fffd17 	ldw	r3,-12(fp)
 1011114:	00bfff84 	movi	r2,-2
 1011118:	1884703a 	and	r2,r3,r2
 101111c:	1001703a 	wrctl	status,r2
  return context;
 1011120:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1011124:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 1011128:	100e5140 	call	100e514 <alt_tick>
 101112c:	e0bfff17 	ldw	r2,-4(fp)
 1011130:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 1011134:	e0bffe17 	ldw	r2,-8(fp)
 1011138:	1001703a 	wrctl	status,r2
}
 101113c:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
 1011140:	0001883a 	nop
 1011144:	e037883a 	mov	sp,fp
 1011148:	dfc00117 	ldw	ra,4(sp)
 101114c:	df000017 	ldw	fp,0(sp)
 1011150:	dec00204 	addi	sp,sp,8
 1011154:	f800283a 	ret

01011158 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 1011158:	defff804 	addi	sp,sp,-32
 101115c:	dfc00715 	stw	ra,28(sp)
 1011160:	df000615 	stw	fp,24(sp)
 1011164:	df000604 	addi	fp,sp,24
 1011168:	e13ffe15 	stw	r4,-8(fp)
 101116c:	e17ffd15 	stw	r5,-12(fp)
 1011170:	e1bffc15 	stw	r6,-16(fp)
 1011174:	e1fffb15 	stw	r7,-20(fp)
 1011178:	e0bffb17 	ldw	r2,-20(fp)
 101117c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1011180:	d0a72017 	ldw	r2,-25472(gp)
 1011184:	1000031e 	bne	r2,zero,1011194 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
 1011188:	e0bfff17 	ldw	r2,-4(fp)
 101118c:	d0a72015 	stw	r2,-25472(gp)
    return 0;
 1011190:	00000106 	br	1011198 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
 1011194:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1011198:	e0bffe17 	ldw	r2,-8(fp)
 101119c:	10800104 	addi	r2,r2,4
 10111a0:	00c001c4 	movi	r3,7
 10111a4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 10111a8:	d8000015 	stw	zero,0(sp)
 10111ac:	e1fffe17 	ldw	r7,-8(fp)
 10111b0:	01804074 	movhi	r6,257
 10111b4:	31843704 	addi	r6,r6,4316
 10111b8:	e17ffc17 	ldw	r5,-16(fp)
 10111bc:	e13ffd17 	ldw	r4,-12(fp)
 10111c0:	101161c0 	call	101161c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 10111c4:	0001883a 	nop
 10111c8:	e037883a 	mov	sp,fp
 10111cc:	dfc00117 	ldw	ra,4(sp)
 10111d0:	df000017 	ldw	fp,0(sp)
 10111d4:	dec00204 	addi	sp,sp,8
 10111d8:	f800283a 	ret

010111dc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10111dc:	defff504 	addi	sp,sp,-44
 10111e0:	df000a15 	stw	fp,40(sp)
 10111e4:	df000a04 	addi	fp,sp,40
 10111e8:	e13ff915 	stw	r4,-28(fp)
 10111ec:	e17ff815 	stw	r5,-32(fp)
 10111f0:	e1bff715 	stw	r6,-36(fp)
 10111f4:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10111f8:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 10111fc:	d0a72017 	ldw	r2,-25472(gp)
  
  if (alt_ticks_per_second ())
 1011200:	10003e26 	beq	r2,zero,10112fc <alt_alarm_start+0x120>
  {
    if (alarm)
 1011204:	e0bff917 	ldw	r2,-28(fp)
 1011208:	10003a26 	beq	r2,zero,10112f4 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
 101120c:	e0bff917 	ldw	r2,-28(fp)
 1011210:	e0fff717 	ldw	r3,-36(fp)
 1011214:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1011218:	e0bff917 	ldw	r2,-28(fp)
 101121c:	e0fff617 	ldw	r3,-40(fp)
 1011220:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 1011224:	0005303a 	rdctl	r2,status
 1011228:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 101122c:	e0fffd17 	ldw	r3,-12(fp)
 1011230:	00bfff84 	movi	r2,-2
 1011234:	1884703a 	and	r2,r3,r2
 1011238:	1001703a 	wrctl	status,r2
  return context;
 101123c:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 1011240:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1011244:	d0a72117 	ldw	r2,-25468(gp)
      
      current_nticks = alt_nticks();
 1011248:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 101124c:	e0fff817 	ldw	r3,-32(fp)
 1011250:	e0bfff17 	ldw	r2,-4(fp)
 1011254:	1885883a 	add	r2,r3,r2
 1011258:	10c00044 	addi	r3,r2,1
 101125c:	e0bff917 	ldw	r2,-28(fp)
 1011260:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1011264:	e0bff917 	ldw	r2,-28(fp)
 1011268:	10c00217 	ldw	r3,8(r2)
 101126c:	e0bfff17 	ldw	r2,-4(fp)
 1011270:	1880042e 	bgeu	r3,r2,1011284 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1011274:	e0bff917 	ldw	r2,-28(fp)
 1011278:	00c00044 	movi	r3,1
 101127c:	10c00405 	stb	r3,16(r2)
 1011280:	00000206 	br	101128c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1011284:	e0bff917 	ldw	r2,-28(fp)
 1011288:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101128c:	e0bff917 	ldw	r2,-28(fp)
 1011290:	d0e00b04 	addi	r3,gp,-32724
 1011294:	e0fffb15 	stw	r3,-20(fp)
 1011298:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 101129c:	e0bffa17 	ldw	r2,-24(fp)
 10112a0:	e0fffb17 	ldw	r3,-20(fp)
 10112a4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10112a8:	e0bffb17 	ldw	r2,-20(fp)
 10112ac:	10c00017 	ldw	r3,0(r2)
 10112b0:	e0bffa17 	ldw	r2,-24(fp)
 10112b4:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 10112b8:	e0bffb17 	ldw	r2,-20(fp)
 10112bc:	10800017 	ldw	r2,0(r2)
 10112c0:	e0fffa17 	ldw	r3,-24(fp)
 10112c4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10112c8:	e0bffb17 	ldw	r2,-20(fp)
 10112cc:	e0fffa17 	ldw	r3,-24(fp)
 10112d0:	10c00015 	stw	r3,0(r2)
}
 10112d4:	0001883a 	nop
 10112d8:	e0bffe17 	ldw	r2,-8(fp)
 10112dc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 10112e0:	e0bffc17 	ldw	r2,-16(fp)
 10112e4:	1001703a 	wrctl	status,r2
}
 10112e8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
 10112ec:	0005883a 	mov	r2,zero
 10112f0:	00000306 	br	1011300 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
 10112f4:	00bffa84 	movi	r2,-22
 10112f8:	00000106 	br	1011300 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
 10112fc:	00bfde84 	movi	r2,-134
  }
}
 1011300:	e037883a 	mov	sp,fp
 1011304:	df000017 	ldw	fp,0(sp)
 1011308:	dec00104 	addi	sp,sp,4
 101130c:	f800283a 	ret

01011310 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1011310:	defffa04 	addi	sp,sp,-24
 1011314:	dfc00515 	stw	ra,20(sp)
 1011318:	df000415 	stw	fp,16(sp)
 101131c:	df000404 	addi	fp,sp,16
 1011320:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 1011324:	00800244 	movi	r2,9
 1011328:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 101132c:	014003f4 	movhi	r5,15
 1011330:	29509004 	addi	r5,r5,16960
 1011334:	e13ffe17 	ldw	r4,-8(fp)
 1011338:	1000e300 	call	1000e30 <__mulsi3>
 101133c:	100b883a 	mov	r5,r2
 1011340:	0100b734 	movhi	r4,732
 1011344:	211b0004 	addi	r4,r4,27648
 1011348:	1000d700 	call	1000d70 <__udivsi3>
  big_loops = us / (INT_MAX/
 101134c:	100b883a 	mov	r5,r2
 1011350:	01200034 	movhi	r4,32768
 1011354:	213fffc4 	addi	r4,r4,-1
 1011358:	1000d700 	call	1000d70 <__udivsi3>
 101135c:	100b883a 	mov	r5,r2
 1011360:	e13ffc17 	ldw	r4,-16(fp)
 1011364:	1000d700 	call	1000d70 <__udivsi3>
 1011368:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 101136c:	e0bffd17 	ldw	r2,-12(fp)
 1011370:	10002a26 	beq	r2,zero,101141c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 1011374:	e03fff15 	stw	zero,-4(fp)
 1011378:	00001706 	br	10113d8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 101137c:	00a00034 	movhi	r2,32768
 1011380:	10bfffc4 	addi	r2,r2,-1
 1011384:	10bfffc4 	addi	r2,r2,-1
 1011388:	103ffe1e 	bne	r2,zero,1011384 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 101138c:	014003f4 	movhi	r5,15
 1011390:	29509004 	addi	r5,r5,16960
 1011394:	e13ffe17 	ldw	r4,-8(fp)
 1011398:	1000e300 	call	1000e30 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 101139c:	100b883a 	mov	r5,r2
 10113a0:	0100b734 	movhi	r4,732
 10113a4:	211b0004 	addi	r4,r4,27648
 10113a8:	1000d700 	call	1000d70 <__udivsi3>
 10113ac:	100b883a 	mov	r5,r2
 10113b0:	01200034 	movhi	r4,32768
 10113b4:	213fffc4 	addi	r4,r4,-1
 10113b8:	1000d700 	call	1000d70 <__udivsi3>
 10113bc:	1007883a 	mov	r3,r2
 10113c0:	e0bffc17 	ldw	r2,-16(fp)
 10113c4:	10c5c83a 	sub	r2,r2,r3
 10113c8:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 10113cc:	e0bfff17 	ldw	r2,-4(fp)
 10113d0:	10800044 	addi	r2,r2,1
 10113d4:	e0bfff15 	stw	r2,-4(fp)
 10113d8:	e0ffff17 	ldw	r3,-4(fp)
 10113dc:	e0bffd17 	ldw	r2,-12(fp)
 10113e0:	18bfe616 	blt	r3,r2,101137c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10113e4:	014003f4 	movhi	r5,15
 10113e8:	29509004 	addi	r5,r5,16960
 10113ec:	e13ffe17 	ldw	r4,-8(fp)
 10113f0:	1000e300 	call	1000e30 <__mulsi3>
 10113f4:	100b883a 	mov	r5,r2
 10113f8:	0100b734 	movhi	r4,732
 10113fc:	211b0004 	addi	r4,r4,27648
 1011400:	1000d700 	call	1000d70 <__udivsi3>
 1011404:	e17ffc17 	ldw	r5,-16(fp)
 1011408:	1009883a 	mov	r4,r2
 101140c:	1000e300 	call	1000e30 <__mulsi3>
    __asm__ volatile (
 1011410:	10bfffc4 	addi	r2,r2,-1
 1011414:	103ffe1e 	bne	r2,zero,1011410 <alt_busy_sleep+0x100>
 1011418:	00000d06 	br	1011450 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 101141c:	014003f4 	movhi	r5,15
 1011420:	29509004 	addi	r5,r5,16960
 1011424:	e13ffe17 	ldw	r4,-8(fp)
 1011428:	1000e300 	call	1000e30 <__mulsi3>
 101142c:	100b883a 	mov	r5,r2
 1011430:	0100b734 	movhi	r4,732
 1011434:	211b0004 	addi	r4,r4,27648
 1011438:	1000d700 	call	1000d70 <__udivsi3>
 101143c:	e17ffc17 	ldw	r5,-16(fp)
 1011440:	1009883a 	mov	r4,r2
 1011444:	1000e300 	call	1000e30 <__mulsi3>
    __asm__ volatile (
 1011448:	10bfffc4 	addi	r2,r2,-1
 101144c:	00bffe16 	blt	zero,r2,1011448 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1011450:	0005883a 	mov	r2,zero
}
 1011454:	e037883a 	mov	sp,fp
 1011458:	dfc00117 	ldw	ra,4(sp)
 101145c:	df000017 	ldw	fp,0(sp)
 1011460:	dec00204 	addi	sp,sp,8
 1011464:	f800283a 	ret

01011468 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1011468:	deffff04 	addi	sp,sp,-4
 101146c:	df000015 	stw	fp,0(sp)
 1011470:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1011474:	0001883a 	nop
 1011478:	e037883a 	mov	sp,fp
 101147c:	df000017 	ldw	fp,0(sp)
 1011480:	dec00104 	addi	sp,sp,4
 1011484:	f800283a 	ret

01011488 <alt_get_errno>:
{
 1011488:	defffe04 	addi	sp,sp,-8
 101148c:	dfc00115 	stw	ra,4(sp)
 1011490:	df000015 	stw	fp,0(sp)
 1011494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1011498:	d0a00917 	ldw	r2,-32732(gp)
 101149c:	10000326 	beq	r2,zero,10114ac <alt_get_errno+0x24>
 10114a0:	d0a00917 	ldw	r2,-32732(gp)
 10114a4:	103ee83a 	callr	r2
 10114a8:	00000106 	br	10114b0 <alt_get_errno+0x28>
 10114ac:	d0a71b04 	addi	r2,gp,-25492
}
 10114b0:	e037883a 	mov	sp,fp
 10114b4:	dfc00117 	ldw	ra,4(sp)
 10114b8:	df000017 	ldw	fp,0(sp)
 10114bc:	dec00204 	addi	sp,sp,8
 10114c0:	f800283a 	ret

010114c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10114c4:	defffa04 	addi	sp,sp,-24
 10114c8:	dfc00515 	stw	ra,20(sp)
 10114cc:	df000415 	stw	fp,16(sp)
 10114d0:	df000404 	addi	fp,sp,16
 10114d4:	e13ffd15 	stw	r4,-12(fp)
 10114d8:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 10114dc:	e0bffd17 	ldw	r2,-12(fp)
 10114e0:	10000326 	beq	r2,zero,10114f0 <alt_dev_llist_insert+0x2c>
 10114e4:	e0bffd17 	ldw	r2,-12(fp)
 10114e8:	10800217 	ldw	r2,8(r2)
 10114ec:	1000061e 	bne	r2,zero,1011508 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 10114f0:	10114880 	call	1011488 <alt_get_errno>
 10114f4:	1007883a 	mov	r3,r2
 10114f8:	00800584 	movi	r2,22
 10114fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1011500:	00bffa84 	movi	r2,-22
 1011504:	00001406 	br	1011558 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1011508:	e0bffd17 	ldw	r2,-12(fp)
 101150c:	e0fffc17 	ldw	r3,-16(fp)
 1011510:	e0ffff15 	stw	r3,-4(fp)
 1011514:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 1011518:	e0bffe17 	ldw	r2,-8(fp)
 101151c:	e0ffff17 	ldw	r3,-4(fp)
 1011520:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1011524:	e0bfff17 	ldw	r2,-4(fp)
 1011528:	10c00017 	ldw	r3,0(r2)
 101152c:	e0bffe17 	ldw	r2,-8(fp)
 1011530:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 1011534:	e0bfff17 	ldw	r2,-4(fp)
 1011538:	10800017 	ldw	r2,0(r2)
 101153c:	e0fffe17 	ldw	r3,-8(fp)
 1011540:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1011544:	e0bfff17 	ldw	r2,-4(fp)
 1011548:	e0fffe17 	ldw	r3,-8(fp)
 101154c:	10c00015 	stw	r3,0(r2)
}
 1011550:	0001883a 	nop

  return 0;  
 1011554:	0005883a 	mov	r2,zero
}
 1011558:	e037883a 	mov	sp,fp
 101155c:	dfc00117 	ldw	ra,4(sp)
 1011560:	df000017 	ldw	fp,0(sp)
 1011564:	dec00204 	addi	sp,sp,8
 1011568:	f800283a 	ret

0101156c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 101156c:	defffa04 	addi	sp,sp,-24
 1011570:	dfc00515 	stw	ra,20(sp)
 1011574:	df000415 	stw	fp,16(sp)
 1011578:	df000404 	addi	fp,sp,16
 101157c:	e13ffd15 	stw	r4,-12(fp)
 1011580:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1011584:	e0bffc17 	ldw	r2,-16(fp)
 1011588:	10800017 	ldw	r2,0(r2)
 101158c:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1011590:	e13ffd17 	ldw	r4,-12(fp)
 1011594:	1000f9c0 	call	1000f9c <strlen>
 1011598:	10800044 	addi	r2,r2,1
 101159c:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10115a0:	00000d06 	br	10115d8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 10115a4:	e0bfff17 	ldw	r2,-4(fp)
 10115a8:	10800217 	ldw	r2,8(r2)
 10115ac:	e0fffe17 	ldw	r3,-8(fp)
 10115b0:	180d883a 	mov	r6,r3
 10115b4:	e17ffd17 	ldw	r5,-12(fp)
 10115b8:	1009883a 	mov	r4,r2
 10115bc:	10120f00 	call	10120f0 <memcmp>
 10115c0:	1000021e 	bne	r2,zero,10115cc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 10115c4:	e0bfff17 	ldw	r2,-4(fp)
 10115c8:	00000706 	br	10115e8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 10115cc:	e0bfff17 	ldw	r2,-4(fp)
 10115d0:	10800017 	ldw	r2,0(r2)
 10115d4:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 10115d8:	e0ffff17 	ldw	r3,-4(fp)
 10115dc:	e0bffc17 	ldw	r2,-16(fp)
 10115e0:	18bff01e 	bne	r3,r2,10115a4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 10115e4:	0005883a 	mov	r2,zero
}
 10115e8:	e037883a 	mov	sp,fp
 10115ec:	dfc00117 	ldw	ra,4(sp)
 10115f0:	df000017 	ldw	fp,0(sp)
 10115f4:	dec00204 	addi	sp,sp,8
 10115f8:	f800283a 	ret

010115fc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 10115fc:	deffff04 	addi	sp,sp,-4
 1011600:	df000015 	stw	fp,0(sp)
 1011604:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1011608:	0001883a 	nop
 101160c:	e037883a 	mov	sp,fp
 1011610:	df000017 	ldw	fp,0(sp)
 1011614:	dec00104 	addi	sp,sp,4
 1011618:	f800283a 	ret

0101161c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 101161c:	defff904 	addi	sp,sp,-28
 1011620:	dfc00615 	stw	ra,24(sp)
 1011624:	df000515 	stw	fp,20(sp)
 1011628:	df000504 	addi	fp,sp,20
 101162c:	e13fff15 	stw	r4,-4(fp)
 1011630:	e17ffe15 	stw	r5,-8(fp)
 1011634:	e1bffd15 	stw	r6,-12(fp)
 1011638:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 101163c:	e0800217 	ldw	r2,8(fp)
 1011640:	d8800015 	stw	r2,0(sp)
 1011644:	e1fffc17 	ldw	r7,-16(fp)
 1011648:	e1bffd17 	ldw	r6,-12(fp)
 101164c:	e17ffe17 	ldw	r5,-8(fp)
 1011650:	e13fff17 	ldw	r4,-4(fp)
 1011654:	10117cc0 	call	10117cc <alt_iic_isr_register>
}  
 1011658:	e037883a 	mov	sp,fp
 101165c:	dfc00117 	ldw	ra,4(sp)
 1011660:	df000017 	ldw	fp,0(sp)
 1011664:	dec00204 	addi	sp,sp,8
 1011668:	f800283a 	ret

0101166c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 101166c:	defff904 	addi	sp,sp,-28
 1011670:	df000615 	stw	fp,24(sp)
 1011674:	df000604 	addi	fp,sp,24
 1011678:	e13ffb15 	stw	r4,-20(fp)
 101167c:	e17ffa15 	stw	r5,-24(fp)
 1011680:	e0bffa17 	ldw	r2,-24(fp)
 1011684:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 1011688:	0005303a 	rdctl	r2,status
 101168c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011690:	e0fffe17 	ldw	r3,-8(fp)
 1011694:	00bfff84 	movi	r2,-2
 1011698:	1884703a 	and	r2,r3,r2
 101169c:	1001703a 	wrctl	status,r2
  return context;
 10116a0:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10116a4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 10116a8:	00c00044 	movi	r3,1
 10116ac:	e0bfff17 	ldw	r2,-4(fp)
 10116b0:	1884983a 	sll	r2,r3,r2
 10116b4:	1007883a 	mov	r3,r2
 10116b8:	d0a72217 	ldw	r2,-25464(gp)
 10116bc:	1884b03a 	or	r2,r3,r2
 10116c0:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10116c4:	d0a72217 	ldw	r2,-25464(gp)
 10116c8:	100170fa 	wrctl	ienable,r2
 10116cc:	e0bffd17 	ldw	r2,-12(fp)
 10116d0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 10116d4:	e0bffc17 	ldw	r2,-16(fp)
 10116d8:	1001703a 	wrctl	status,r2
}
 10116dc:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
 10116e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 10116e4:	e037883a 	mov	sp,fp
 10116e8:	df000017 	ldw	fp,0(sp)
 10116ec:	dec00104 	addi	sp,sp,4
 10116f0:	f800283a 	ret

010116f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 10116f4:	defff904 	addi	sp,sp,-28
 10116f8:	df000615 	stw	fp,24(sp)
 10116fc:	df000604 	addi	fp,sp,24
 1011700:	e13ffb15 	stw	r4,-20(fp)
 1011704:	e17ffa15 	stw	r5,-24(fp)
 1011708:	e0bffa17 	ldw	r2,-24(fp)
 101170c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 1011710:	0005303a 	rdctl	r2,status
 1011714:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011718:	e0fffe17 	ldw	r3,-8(fp)
 101171c:	00bfff84 	movi	r2,-2
 1011720:	1884703a 	and	r2,r3,r2
 1011724:	1001703a 	wrctl	status,r2
  return context;
 1011728:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 101172c:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 1011730:	00c00044 	movi	r3,1
 1011734:	e0bfff17 	ldw	r2,-4(fp)
 1011738:	1884983a 	sll	r2,r3,r2
 101173c:	0084303a 	nor	r2,zero,r2
 1011740:	1007883a 	mov	r3,r2
 1011744:	d0a72217 	ldw	r2,-25464(gp)
 1011748:	1884703a 	and	r2,r3,r2
 101174c:	d0a72215 	stw	r2,-25464(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1011750:	d0a72217 	ldw	r2,-25464(gp)
 1011754:	100170fa 	wrctl	ienable,r2
 1011758:	e0bffd17 	ldw	r2,-12(fp)
 101175c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 1011760:	e0bffc17 	ldw	r2,-16(fp)
 1011764:	1001703a 	wrctl	status,r2
}
 1011768:	0001883a 	nop
  return 0;
 101176c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 1011770:	e037883a 	mov	sp,fp
 1011774:	df000017 	ldw	fp,0(sp)
 1011778:	dec00104 	addi	sp,sp,4
 101177c:	f800283a 	ret

01011780 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 1011780:	defffc04 	addi	sp,sp,-16
 1011784:	df000315 	stw	fp,12(sp)
 1011788:	df000304 	addi	fp,sp,12
 101178c:	e13ffe15 	stw	r4,-8(fp)
 1011790:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1011794:	000530fa 	rdctl	r2,ienable
 1011798:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 101179c:	00c00044 	movi	r3,1
 10117a0:	e0bffd17 	ldw	r2,-12(fp)
 10117a4:	1884983a 	sll	r2,r3,r2
 10117a8:	1007883a 	mov	r3,r2
 10117ac:	e0bfff17 	ldw	r2,-4(fp)
 10117b0:	1884703a 	and	r2,r3,r2
 10117b4:	1004c03a 	cmpne	r2,r2,zero
 10117b8:	10803fcc 	andi	r2,r2,255
}
 10117bc:	e037883a 	mov	sp,fp
 10117c0:	df000017 	ldw	fp,0(sp)
 10117c4:	dec00104 	addi	sp,sp,4
 10117c8:	f800283a 	ret

010117cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 10117cc:	defff504 	addi	sp,sp,-44
 10117d0:	dfc00a15 	stw	ra,40(sp)
 10117d4:	df000915 	stw	fp,36(sp)
 10117d8:	df000904 	addi	fp,sp,36
 10117dc:	e13ffa15 	stw	r4,-24(fp)
 10117e0:	e17ff915 	stw	r5,-28(fp)
 10117e4:	e1bff815 	stw	r6,-32(fp)
 10117e8:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 10117ec:	00bffa84 	movi	r2,-22
 10117f0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 10117f4:	e0bff917 	ldw	r2,-28(fp)
 10117f8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 10117fc:	e0bffe17 	ldw	r2,-8(fp)
 1011800:	10800808 	cmpgei	r2,r2,32
 1011804:	1000251e 	bne	r2,zero,101189c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
 1011808:	0005303a 	rdctl	r2,status
 101180c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011810:	e0fffc17 	ldw	r3,-16(fp)
 1011814:	00bfff84 	movi	r2,-2
 1011818:	1884703a 	and	r2,r3,r2
 101181c:	1001703a 	wrctl	status,r2
  return context;
 1011820:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1011824:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 1011828:	e0bffe17 	ldw	r2,-8(fp)
 101182c:	100890fa 	slli	r4,r2,3
 1011830:	e0fff817 	ldw	r3,-32(fp)
 1011834:	00804074 	movhi	r2,257
 1011838:	2085883a 	add	r2,r4,r2
 101183c:	10d90115 	stw	r3,25604(r2)
    alt_irq[id].context = isr_context;
 1011840:	e0bffe17 	ldw	r2,-8(fp)
 1011844:	100890fa 	slli	r4,r2,3
 1011848:	e0fff717 	ldw	r3,-36(fp)
 101184c:	00804074 	movhi	r2,257
 1011850:	2085883a 	add	r2,r4,r2
 1011854:	10d90215 	stw	r3,25608(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 1011858:	e0bff817 	ldw	r2,-32(fp)
 101185c:	10000526 	beq	r2,zero,1011874 <alt_iic_isr_register+0xa8>
 1011860:	e0bffe17 	ldw	r2,-8(fp)
 1011864:	100b883a 	mov	r5,r2
 1011868:	e13ffa17 	ldw	r4,-24(fp)
 101186c:	101166c0 	call	101166c <alt_ic_irq_enable>
 1011870:	00000406 	br	1011884 <alt_iic_isr_register+0xb8>
 1011874:	e0bffe17 	ldw	r2,-8(fp)
 1011878:	100b883a 	mov	r5,r2
 101187c:	e13ffa17 	ldw	r4,-24(fp)
 1011880:	10116f40 	call	10116f4 <alt_ic_irq_disable>
 1011884:	e0bfff15 	stw	r2,-4(fp)
 1011888:	e0bffd17 	ldw	r2,-12(fp)
 101188c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 1011890:	e0bffb17 	ldw	r2,-20(fp)
 1011894:	1001703a 	wrctl	status,r2
}
 1011898:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
 101189c:	e0bfff17 	ldw	r2,-4(fp)
}
 10118a0:	e037883a 	mov	sp,fp
 10118a4:	dfc00117 	ldw	ra,4(sp)
 10118a8:	df000017 	ldw	fp,0(sp)
 10118ac:	dec00204 	addi	sp,sp,8
 10118b0:	f800283a 	ret

010118b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10118b4:	defff904 	addi	sp,sp,-28
 10118b8:	dfc00615 	stw	ra,24(sp)
 10118bc:	df000515 	stw	fp,20(sp)
 10118c0:	df000504 	addi	fp,sp,20
 10118c4:	e13ffe15 	stw	r4,-8(fp)
 10118c8:	e17ffd15 	stw	r5,-12(fp)
 10118cc:	e1bffc15 	stw	r6,-16(fp)
 10118d0:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 10118d4:	e1bffb17 	ldw	r6,-20(fp)
 10118d8:	e17ffc17 	ldw	r5,-16(fp)
 10118dc:	e13ffd17 	ldw	r4,-12(fp)
 10118e0:	1011b1c0 	call	1011b1c <open>
 10118e4:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 10118e8:	e0bfff17 	ldw	r2,-4(fp)
 10118ec:	10002016 	blt	r2,zero,1011970 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 10118f0:	e0ffff17 	ldw	r3,-4(fp)
 10118f4:	1805883a 	mov	r2,r3
 10118f8:	1085883a 	add	r2,r2,r2
 10118fc:	10c5883a 	add	r2,r2,r3
 1011900:	100490ba 	slli	r2,r2,2
 1011904:	00c04074 	movhi	r3,257
 1011908:	10c7883a 	add	r3,r2,r3
 101190c:	18cd4e17 	ldw	r3,13624(r3)
 1011910:	e0bffe17 	ldw	r2,-8(fp)
 1011914:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1011918:	e0ffff17 	ldw	r3,-4(fp)
 101191c:	1805883a 	mov	r2,r3
 1011920:	1085883a 	add	r2,r2,r2
 1011924:	10c5883a 	add	r2,r2,r3
 1011928:	100490ba 	slli	r2,r2,2
 101192c:	00c04074 	movhi	r3,257
 1011930:	10c7883a 	add	r3,r2,r3
 1011934:	18cd4f17 	ldw	r3,13628(r3)
 1011938:	e0bffe17 	ldw	r2,-8(fp)
 101193c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1011940:	e0ffff17 	ldw	r3,-4(fp)
 1011944:	1805883a 	mov	r2,r3
 1011948:	1085883a 	add	r2,r2,r2
 101194c:	10c5883a 	add	r2,r2,r3
 1011950:	100490ba 	slli	r2,r2,2
 1011954:	00c04074 	movhi	r3,257
 1011958:	10c7883a 	add	r3,r2,r3
 101195c:	18cd5017 	ldw	r3,13632(r3)
 1011960:	e0bffe17 	ldw	r2,-8(fp)
 1011964:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1011968:	e13fff17 	ldw	r4,-4(fp)
 101196c:	100e3480 	call	100e348 <alt_release_fd>
  }
} 
 1011970:	0001883a 	nop
 1011974:	e037883a 	mov	sp,fp
 1011978:	dfc00117 	ldw	ra,4(sp)
 101197c:	df000017 	ldw	fp,0(sp)
 1011980:	dec00204 	addi	sp,sp,8
 1011984:	f800283a 	ret

01011988 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1011988:	defffb04 	addi	sp,sp,-20
 101198c:	dfc00415 	stw	ra,16(sp)
 1011990:	df000315 	stw	fp,12(sp)
 1011994:	df000304 	addi	fp,sp,12
 1011998:	e13fff15 	stw	r4,-4(fp)
 101199c:	e17ffe15 	stw	r5,-8(fp)
 10119a0:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10119a4:	01c07fc4 	movi	r7,511
 10119a8:	01800044 	movi	r6,1
 10119ac:	e17fff17 	ldw	r5,-4(fp)
 10119b0:	01004074 	movhi	r4,257
 10119b4:	210d5104 	addi	r4,r4,13636
 10119b8:	10118b40 	call	10118b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10119bc:	01c07fc4 	movi	r7,511
 10119c0:	000d883a 	mov	r6,zero
 10119c4:	e17ffe17 	ldw	r5,-8(fp)
 10119c8:	01004074 	movhi	r4,257
 10119cc:	210d4e04 	addi	r4,r4,13624
 10119d0:	10118b40 	call	10118b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10119d4:	01c07fc4 	movi	r7,511
 10119d8:	01800044 	movi	r6,1
 10119dc:	e17ffd17 	ldw	r5,-12(fp)
 10119e0:	01004074 	movhi	r4,257
 10119e4:	210d5404 	addi	r4,r4,13648
 10119e8:	10118b40 	call	10118b4 <alt_open_fd>
}  
 10119ec:	0001883a 	nop
 10119f0:	e037883a 	mov	sp,fp
 10119f4:	dfc00117 	ldw	ra,4(sp)
 10119f8:	df000017 	ldw	fp,0(sp)
 10119fc:	dec00204 	addi	sp,sp,8
 1011a00:	f800283a 	ret

01011a04 <alt_get_errno>:
{
 1011a04:	defffe04 	addi	sp,sp,-8
 1011a08:	dfc00115 	stw	ra,4(sp)
 1011a0c:	df000015 	stw	fp,0(sp)
 1011a10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1011a14:	d0a00917 	ldw	r2,-32732(gp)
 1011a18:	10000326 	beq	r2,zero,1011a28 <alt_get_errno+0x24>
 1011a1c:	d0a00917 	ldw	r2,-32732(gp)
 1011a20:	103ee83a 	callr	r2
 1011a24:	00000106 	br	1011a2c <alt_get_errno+0x28>
 1011a28:	d0a71b04 	addi	r2,gp,-25492
}
 1011a2c:	e037883a 	mov	sp,fp
 1011a30:	dfc00117 	ldw	ra,4(sp)
 1011a34:	df000017 	ldw	fp,0(sp)
 1011a38:	dec00204 	addi	sp,sp,8
 1011a3c:	f800283a 	ret

01011a40 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1011a40:	defffd04 	addi	sp,sp,-12
 1011a44:	df000215 	stw	fp,8(sp)
 1011a48:	df000204 	addi	fp,sp,8
 1011a4c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1011a50:	e0bffe17 	ldw	r2,-8(fp)
 1011a54:	10800217 	ldw	r2,8(r2)
 1011a58:	10d00034 	orhi	r3,r2,16384
 1011a5c:	e0bffe17 	ldw	r2,-8(fp)
 1011a60:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1011a64:	e03fff15 	stw	zero,-4(fp)
 1011a68:	00002306 	br	1011af8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1011a6c:	e0ffff17 	ldw	r3,-4(fp)
 1011a70:	1805883a 	mov	r2,r3
 1011a74:	1085883a 	add	r2,r2,r2
 1011a78:	10c5883a 	add	r2,r2,r3
 1011a7c:	100490ba 	slli	r2,r2,2
 1011a80:	00c04074 	movhi	r3,257
 1011a84:	10c7883a 	add	r3,r2,r3
 1011a88:	18cd4e17 	ldw	r3,13624(r3)
 1011a8c:	e0bffe17 	ldw	r2,-8(fp)
 1011a90:	10800017 	ldw	r2,0(r2)
 1011a94:	1880151e 	bne	r3,r2,1011aec <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1011a98:	e0ffff17 	ldw	r3,-4(fp)
 1011a9c:	1805883a 	mov	r2,r3
 1011aa0:	1085883a 	add	r2,r2,r2
 1011aa4:	10c5883a 	add	r2,r2,r3
 1011aa8:	100490ba 	slli	r2,r2,2
 1011aac:	00c04074 	movhi	r3,257
 1011ab0:	10c7883a 	add	r3,r2,r3
 1011ab4:	188d5017 	ldw	r2,13632(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 1011ab8:	10000c0e 	bge	r2,zero,1011aec <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 1011abc:	e0ffff17 	ldw	r3,-4(fp)
 1011ac0:	1805883a 	mov	r2,r3
 1011ac4:	1085883a 	add	r2,r2,r2
 1011ac8:	10c5883a 	add	r2,r2,r3
 1011acc:	100490ba 	slli	r2,r2,2
 1011ad0:	00c04074 	movhi	r3,257
 1011ad4:	18cd4e04 	addi	r3,r3,13624
 1011ad8:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1011adc:	e0fffe17 	ldw	r3,-8(fp)
 1011ae0:	18800226 	beq	r3,r2,1011aec <alt_file_locked+0xac>
    {
      return -EACCES;
 1011ae4:	00bffcc4 	movi	r2,-13
 1011ae8:	00000806 	br	1011b0c <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 1011aec:	e0bfff17 	ldw	r2,-4(fp)
 1011af0:	10800044 	addi	r2,r2,1
 1011af4:	e0bfff15 	stw	r2,-4(fp)
 1011af8:	d0a00817 	ldw	r2,-32736(gp)
 1011afc:	1007883a 	mov	r3,r2
 1011b00:	e0bfff17 	ldw	r2,-4(fp)
 1011b04:	18bfd92e 	bgeu	r3,r2,1011a6c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1011b08:	0005883a 	mov	r2,zero
}
 1011b0c:	e037883a 	mov	sp,fp
 1011b10:	df000017 	ldw	fp,0(sp)
 1011b14:	dec00104 	addi	sp,sp,4
 1011b18:	f800283a 	ret

01011b1c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1011b1c:	defff604 	addi	sp,sp,-40
 1011b20:	dfc00915 	stw	ra,36(sp)
 1011b24:	df000815 	stw	fp,32(sp)
 1011b28:	df000804 	addi	fp,sp,32
 1011b2c:	e13ffa15 	stw	r4,-24(fp)
 1011b30:	e17ff915 	stw	r5,-28(fp)
 1011b34:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1011b38:	00bfffc4 	movi	r2,-1
 1011b3c:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 1011b40:	00bffb44 	movi	r2,-19
 1011b44:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 1011b48:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1011b4c:	d1600604 	addi	r5,gp,-32744
 1011b50:	e13ffa17 	ldw	r4,-24(fp)
 1011b54:	101156c0 	call	101156c <alt_find_dev>
 1011b58:	e0bfff15 	stw	r2,-4(fp)
 1011b5c:	e0bfff17 	ldw	r2,-4(fp)
 1011b60:	1000051e 	bne	r2,zero,1011b78 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1011b64:	e13ffa17 	ldw	r4,-24(fp)
 1011b68:	1011efc0 	call	1011efc <alt_find_file>
 1011b6c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 1011b70:	00800044 	movi	r2,1
 1011b74:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1011b78:	e0bfff17 	ldw	r2,-4(fp)
 1011b7c:	10002c26 	beq	r2,zero,1011c30 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1011b80:	e13fff17 	ldw	r4,-4(fp)
 1011b84:	10120040 	call	1012004 <alt_get_fd>
 1011b88:	e0bffe15 	stw	r2,-8(fp)
 1011b8c:	e0bffe17 	ldw	r2,-8(fp)
 1011b90:	1000030e 	bge	r2,zero,1011ba0 <open+0x84>
    {
      status = index;
 1011b94:	e0bffe17 	ldw	r2,-8(fp)
 1011b98:	e0bffd15 	stw	r2,-12(fp)
 1011b9c:	00002606 	br	1011c38 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1011ba0:	e0fffe17 	ldw	r3,-8(fp)
 1011ba4:	1805883a 	mov	r2,r3
 1011ba8:	1085883a 	add	r2,r2,r2
 1011bac:	10c5883a 	add	r2,r2,r3
 1011bb0:	100490ba 	slli	r2,r2,2
 1011bb4:	00c04074 	movhi	r3,257
 1011bb8:	18cd4e04 	addi	r3,r3,13624
 1011bbc:	10c5883a 	add	r2,r2,r3
 1011bc0:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1011bc4:	e0fff917 	ldw	r3,-28(fp)
 1011bc8:	00900034 	movhi	r2,16384
 1011bcc:	10bfffc4 	addi	r2,r2,-1
 1011bd0:	1886703a 	and	r3,r3,r2
 1011bd4:	e0bffb17 	ldw	r2,-20(fp)
 1011bd8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1011bdc:	e0bffc17 	ldw	r2,-16(fp)
 1011be0:	1000051e 	bne	r2,zero,1011bf8 <open+0xdc>
 1011be4:	e13ffb17 	ldw	r4,-20(fp)
 1011be8:	1011a400 	call	1011a40 <alt_file_locked>
 1011bec:	e0bffd15 	stw	r2,-12(fp)
 1011bf0:	e0bffd17 	ldw	r2,-12(fp)
 1011bf4:	10001016 	blt	r2,zero,1011c38 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1011bf8:	e0bfff17 	ldw	r2,-4(fp)
 1011bfc:	10800317 	ldw	r2,12(r2)
 1011c00:	10000826 	beq	r2,zero,1011c24 <open+0x108>
 1011c04:	e0bfff17 	ldw	r2,-4(fp)
 1011c08:	10800317 	ldw	r2,12(r2)
 1011c0c:	e1fff817 	ldw	r7,-32(fp)
 1011c10:	e1bff917 	ldw	r6,-28(fp)
 1011c14:	e17ffa17 	ldw	r5,-24(fp)
 1011c18:	e13ffb17 	ldw	r4,-20(fp)
 1011c1c:	103ee83a 	callr	r2
 1011c20:	00000106 	br	1011c28 <open+0x10c>
 1011c24:	0005883a 	mov	r2,zero
 1011c28:	e0bffd15 	stw	r2,-12(fp)
 1011c2c:	00000206 	br	1011c38 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1011c30:	00bffb44 	movi	r2,-19
 1011c34:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1011c38:	e0bffd17 	ldw	r2,-12(fp)
 1011c3c:	1000090e 	bge	r2,zero,1011c64 <open+0x148>
  {
    alt_release_fd (index);  
 1011c40:	e13ffe17 	ldw	r4,-8(fp)
 1011c44:	100e3480 	call	100e348 <alt_release_fd>
    ALT_ERRNO = -status;
 1011c48:	1011a040 	call	1011a04 <alt_get_errno>
 1011c4c:	1007883a 	mov	r3,r2
 1011c50:	e0bffd17 	ldw	r2,-12(fp)
 1011c54:	0085c83a 	sub	r2,zero,r2
 1011c58:	18800015 	stw	r2,0(r3)
    return -1;
 1011c5c:	00bfffc4 	movi	r2,-1
 1011c60:	00000106 	br	1011c68 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 1011c64:	e0bffe17 	ldw	r2,-8(fp)
}
 1011c68:	e037883a 	mov	sp,fp
 1011c6c:	dfc00117 	ldw	ra,4(sp)
 1011c70:	df000017 	ldw	fp,0(sp)
 1011c74:	dec00204 	addi	sp,sp,8
 1011c78:	f800283a 	ret

01011c7c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 1011c7c:	defff204 	addi	sp,sp,-56
 1011c80:	dfc00a15 	stw	ra,40(sp)
 1011c84:	df000915 	stw	fp,36(sp)
 1011c88:	df000904 	addi	fp,sp,36
 1011c8c:	e13ff715 	stw	r4,-36(fp)
 1011c90:	e1400215 	stw	r5,8(fp)
 1011c94:	e1800315 	stw	r6,12(fp)
 1011c98:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 1011c9c:	e0800204 	addi	r2,fp,8
 1011ca0:	e0bff815 	stw	r2,-32(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 1011ca4:	e0bff717 	ldw	r2,-36(fp)
 1011ca8:	e0bfff15 	stw	r2,-4(fp)
    while ((c = *w++) != 0)
 1011cac:	00006f06 	br	1011e6c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 1011cb0:	e0bffec7 	ldb	r2,-5(fp)
 1011cb4:	10800960 	cmpeqi	r2,r2,37
 1011cb8:	1000041e 	bne	r2,zero,1011ccc <alt_printf+0x50>
        {
            alt_putchar(c);
 1011cbc:	e0bffec7 	ldb	r2,-5(fp)
 1011cc0:	1009883a 	mov	r4,r2
 1011cc4:	1011ea80 	call	1011ea8 <alt_putchar>
 1011cc8:	00006806 	br	1011e6c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 1011ccc:	e0bfff17 	ldw	r2,-4(fp)
 1011cd0:	10c00044 	addi	r3,r2,1
 1011cd4:	e0ffff15 	stw	r3,-4(fp)
 1011cd8:	10800003 	ldbu	r2,0(r2)
 1011cdc:	e0bffec5 	stb	r2,-5(fp)
 1011ce0:	e0bffec7 	ldb	r2,-5(fp)
 1011ce4:	10006926 	beq	r2,zero,1011e8c <alt_printf+0x210>
            {
                if (c == '%')
 1011ce8:	e0bffec7 	ldb	r2,-5(fp)
 1011cec:	10800958 	cmpnei	r2,r2,37
 1011cf0:	1000041e 	bne	r2,zero,1011d04 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 1011cf4:	e0bffec7 	ldb	r2,-5(fp)
 1011cf8:	1009883a 	mov	r4,r2
 1011cfc:	1011ea80 	call	1011ea8 <alt_putchar>
 1011d00:	00005a06 	br	1011e6c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 1011d04:	e0bffec7 	ldb	r2,-5(fp)
 1011d08:	108018d8 	cmpnei	r2,r2,99
 1011d0c:	1000081e 	bne	r2,zero,1011d30 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 1011d10:	e0bff817 	ldw	r2,-32(fp)
 1011d14:	10c00104 	addi	r3,r2,4
 1011d18:	e0fff815 	stw	r3,-32(fp)
 1011d1c:	10800017 	ldw	r2,0(r2)
 1011d20:	e0bff915 	stw	r2,-28(fp)
                    alt_putchar(v);
 1011d24:	e13ff917 	ldw	r4,-28(fp)
 1011d28:	1011ea80 	call	1011ea8 <alt_putchar>
 1011d2c:	00004f06 	br	1011e6c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 1011d30:	e0bffec7 	ldb	r2,-5(fp)
 1011d34:	10801e18 	cmpnei	r2,r2,120
 1011d38:	1000341e 	bne	r2,zero,1011e0c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 1011d3c:	e0bff817 	ldw	r2,-32(fp)
 1011d40:	10c00104 	addi	r3,r2,4
 1011d44:	e0fff815 	stw	r3,-32(fp)
 1011d48:	10800017 	ldw	r2,0(r2)
 1011d4c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 1011d50:	e0bffb17 	ldw	r2,-20(fp)
 1011d54:	1000031e 	bne	r2,zero,1011d64 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 1011d58:	01000c04 	movi	r4,48
 1011d5c:	1011ea80 	call	1011ea8 <alt_putchar>
                        continue;
 1011d60:	00004206 	br	1011e6c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 1011d64:	00800704 	movi	r2,28
 1011d68:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 1011d6c:	00000306 	br	1011d7c <alt_printf+0x100>
                        digit_shift -= 4;
 1011d70:	e0bffd17 	ldw	r2,-12(fp)
 1011d74:	10bfff04 	addi	r2,r2,-4
 1011d78:	e0bffd15 	stw	r2,-12(fp)
                    while (!(v & (0xF << digit_shift)))
 1011d7c:	00c003c4 	movi	r3,15
 1011d80:	e0bffd17 	ldw	r2,-12(fp)
 1011d84:	1884983a 	sll	r2,r3,r2
 1011d88:	1007883a 	mov	r3,r2
 1011d8c:	e0bffb17 	ldw	r2,-20(fp)
 1011d90:	1884703a 	and	r2,r3,r2
 1011d94:	103ff626 	beq	r2,zero,1011d70 <alt_printf+0xf4>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 1011d98:	00001906 	br	1011e00 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 1011d9c:	00c003c4 	movi	r3,15
 1011da0:	e0bffd17 	ldw	r2,-12(fp)
 1011da4:	1884983a 	sll	r2,r3,r2
 1011da8:	1007883a 	mov	r3,r2
 1011dac:	e0bffb17 	ldw	r2,-20(fp)
 1011db0:	1886703a 	and	r3,r3,r2
 1011db4:	e0bffd17 	ldw	r2,-12(fp)
 1011db8:	1884d83a 	srl	r2,r3,r2
 1011dbc:	e0bffa15 	stw	r2,-24(fp)
                        if (digit <= 9)
 1011dc0:	e0bffa17 	ldw	r2,-24(fp)
 1011dc4:	108002a8 	cmpgeui	r2,r2,10
 1011dc8:	1000041e 	bne	r2,zero,1011ddc <alt_printf+0x160>
                            c = '0' + digit;
 1011dcc:	e0bffa17 	ldw	r2,-24(fp)
 1011dd0:	10800c04 	addi	r2,r2,48
 1011dd4:	e0bffec5 	stb	r2,-5(fp)
 1011dd8:	00000306 	br	1011de8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 1011ddc:	e0bffa17 	ldw	r2,-24(fp)
 1011de0:	108015c4 	addi	r2,r2,87
 1011de4:	e0bffec5 	stb	r2,-5(fp)
                        alt_putchar(c);
 1011de8:	e0bffec7 	ldb	r2,-5(fp)
 1011dec:	1009883a 	mov	r4,r2
 1011df0:	1011ea80 	call	1011ea8 <alt_putchar>
                    for (; digit_shift >= 0; digit_shift -= 4)
 1011df4:	e0bffd17 	ldw	r2,-12(fp)
 1011df8:	10bfff04 	addi	r2,r2,-4
 1011dfc:	e0bffd15 	stw	r2,-12(fp)
 1011e00:	e0bffd17 	ldw	r2,-12(fp)
 1011e04:	103fe50e 	bge	r2,zero,1011d9c <alt_printf+0x120>
 1011e08:	00001806 	br	1011e6c <alt_printf+0x1f0>
                    }
                }
                else if (c == 's')
 1011e0c:	e0bffec7 	ldb	r2,-5(fp)
 1011e10:	10801cd8 	cmpnei	r2,r2,115
 1011e14:	1000151e 	bne	r2,zero,1011e6c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 1011e18:	e0bff817 	ldw	r2,-32(fp)
 1011e1c:	10c00104 	addi	r3,r2,4
 1011e20:	e0fff815 	stw	r3,-32(fp)
 1011e24:	10800017 	ldw	r2,0(r2)
 1011e28:	e0bffc15 	stw	r2,-16(fp)

                    while(*s)
 1011e2c:	00000906 	br	1011e54 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 1011e30:	e0bffc17 	ldw	r2,-16(fp)
 1011e34:	10c00044 	addi	r3,r2,1
 1011e38:	e0fffc15 	stw	r3,-16(fp)
 1011e3c:	10800003 	ldbu	r2,0(r2)
 1011e40:	10803fcc 	andi	r2,r2,255
 1011e44:	1080201c 	xori	r2,r2,128
 1011e48:	10bfe004 	addi	r2,r2,-128
 1011e4c:	1009883a 	mov	r4,r2
 1011e50:	1011ea80 	call	1011ea8 <alt_putchar>
                    while(*s)
 1011e54:	e0bffc17 	ldw	r2,-16(fp)
 1011e58:	10800003 	ldbu	r2,0(r2)
 1011e5c:	10803fcc 	andi	r2,r2,255
 1011e60:	1080201c 	xori	r2,r2,128
 1011e64:	10bfe004 	addi	r2,r2,-128
 1011e68:	103ff11e 	bne	r2,zero,1011e30 <alt_printf+0x1b4>
    while ((c = *w++) != 0)
 1011e6c:	e0bfff17 	ldw	r2,-4(fp)
 1011e70:	10c00044 	addi	r3,r2,1
 1011e74:	e0ffff15 	stw	r3,-4(fp)
 1011e78:	10800003 	ldbu	r2,0(r2)
 1011e7c:	e0bffec5 	stb	r2,-5(fp)
 1011e80:	e0bffec7 	ldb	r2,-5(fp)
 1011e84:	103f8a1e 	bne	r2,zero,1011cb0 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 1011e88:	00000106 	br	1011e90 <alt_printf+0x214>
                break;
 1011e8c:	0001883a 	nop
}
 1011e90:	0001883a 	nop
 1011e94:	e037883a 	mov	sp,fp
 1011e98:	dfc00117 	ldw	ra,4(sp)
 1011e9c:	df000017 	ldw	fp,0(sp)
 1011ea0:	dec00504 	addi	sp,sp,20
 1011ea4:	f800283a 	ret

01011ea8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 1011ea8:	defffd04 	addi	sp,sp,-12
 1011eac:	dfc00215 	stw	ra,8(sp)
 1011eb0:	df000115 	stw	fp,4(sp)
 1011eb4:	df000104 	addi	fp,sp,4
 1011eb8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 1011ebc:	e13fff17 	ldw	r4,-4(fp)
 1011ec0:	10121700 	call	1012170 <putchar>
#endif
#endif
}
 1011ec4:	e037883a 	mov	sp,fp
 1011ec8:	dfc00117 	ldw	ra,4(sp)
 1011ecc:	df000017 	ldw	fp,0(sp)
 1011ed0:	dec00204 	addi	sp,sp,8
 1011ed4:	f800283a 	ret

01011ed8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1011ed8:	deffff04 	addi	sp,sp,-4
 1011edc:	df000015 	stw	fp,0(sp)
 1011ee0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1011ee4:	000170fa 	wrctl	ienable,zero
}
 1011ee8:	0001883a 	nop
 1011eec:	e037883a 	mov	sp,fp
 1011ef0:	df000017 	ldw	fp,0(sp)
 1011ef4:	dec00104 	addi	sp,sp,4
 1011ef8:	f800283a 	ret

01011efc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1011efc:	defffb04 	addi	sp,sp,-20
 1011f00:	dfc00415 	stw	ra,16(sp)
 1011f04:	df000315 	stw	fp,12(sp)
 1011f08:	df000304 	addi	fp,sp,12
 1011f0c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011f10:	d0a00417 	ldw	r2,-32752(gp)
 1011f14:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011f18:	00003106 	br	1011fe0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1011f1c:	e0bfff17 	ldw	r2,-4(fp)
 1011f20:	10800217 	ldw	r2,8(r2)
 1011f24:	1009883a 	mov	r4,r2
 1011f28:	1000f9c0 	call	1000f9c <strlen>
 1011f2c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1011f30:	e0bfff17 	ldw	r2,-4(fp)
 1011f34:	10c00217 	ldw	r3,8(r2)
 1011f38:	e0bffe17 	ldw	r2,-8(fp)
 1011f3c:	10bfffc4 	addi	r2,r2,-1
 1011f40:	1885883a 	add	r2,r3,r2
 1011f44:	10800003 	ldbu	r2,0(r2)
 1011f48:	10803fcc 	andi	r2,r2,255
 1011f4c:	1080201c 	xori	r2,r2,128
 1011f50:	10bfe004 	addi	r2,r2,-128
 1011f54:	10800bd8 	cmpnei	r2,r2,47
 1011f58:	1000031e 	bne	r2,zero,1011f68 <alt_find_file+0x6c>
    {
      len -= 1;
 1011f5c:	e0bffe17 	ldw	r2,-8(fp)
 1011f60:	10bfffc4 	addi	r2,r2,-1
 1011f64:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011f68:	e0bffe17 	ldw	r2,-8(fp)
 1011f6c:	e0fffd17 	ldw	r3,-12(fp)
 1011f70:	1885883a 	add	r2,r3,r2
 1011f74:	10800003 	ldbu	r2,0(r2)
 1011f78:	10803fcc 	andi	r2,r2,255
 1011f7c:	1080201c 	xori	r2,r2,128
 1011f80:	10bfe004 	addi	r2,r2,-128
 1011f84:	10800be0 	cmpeqi	r2,r2,47
 1011f88:	1000081e 	bne	r2,zero,1011fac <alt_find_file+0xb0>
 1011f8c:	e0bffe17 	ldw	r2,-8(fp)
 1011f90:	e0fffd17 	ldw	r3,-12(fp)
 1011f94:	1885883a 	add	r2,r3,r2
 1011f98:	10800003 	ldbu	r2,0(r2)
 1011f9c:	10803fcc 	andi	r2,r2,255
 1011fa0:	1080201c 	xori	r2,r2,128
 1011fa4:	10bfe004 	addi	r2,r2,-128
 1011fa8:	10000a1e 	bne	r2,zero,1011fd4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1011fac:	e0bfff17 	ldw	r2,-4(fp)
 1011fb0:	10800217 	ldw	r2,8(r2)
 1011fb4:	e0fffe17 	ldw	r3,-8(fp)
 1011fb8:	180d883a 	mov	r6,r3
 1011fbc:	e17ffd17 	ldw	r5,-12(fp)
 1011fc0:	1009883a 	mov	r4,r2
 1011fc4:	10120f00 	call	10120f0 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011fc8:	1000021e 	bne	r2,zero,1011fd4 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 1011fcc:	e0bfff17 	ldw	r2,-4(fp)
 1011fd0:	00000706 	br	1011ff0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1011fd4:	e0bfff17 	ldw	r2,-4(fp)
 1011fd8:	10800017 	ldw	r2,0(r2)
 1011fdc:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 1011fe0:	e0ffff17 	ldw	r3,-4(fp)
 1011fe4:	d0a00404 	addi	r2,gp,-32752
 1011fe8:	18bfcc1e 	bne	r3,r2,1011f1c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 1011fec:	0005883a 	mov	r2,zero
}
 1011ff0:	e037883a 	mov	sp,fp
 1011ff4:	dfc00117 	ldw	ra,4(sp)
 1011ff8:	df000017 	ldw	fp,0(sp)
 1011ffc:	dec00204 	addi	sp,sp,8
 1012000:	f800283a 	ret

01012004 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1012004:	defffc04 	addi	sp,sp,-16
 1012008:	df000315 	stw	fp,12(sp)
 101200c:	df000304 	addi	fp,sp,12
 1012010:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 1012014:	00bffa04 	movi	r2,-24
 1012018:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 101201c:	e03fff15 	stw	zero,-4(fp)
 1012020:	00001d06 	br	1012098 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 1012024:	e0ffff17 	ldw	r3,-4(fp)
 1012028:	1805883a 	mov	r2,r3
 101202c:	1085883a 	add	r2,r2,r2
 1012030:	10c5883a 	add	r2,r2,r3
 1012034:	100490ba 	slli	r2,r2,2
 1012038:	00c04074 	movhi	r3,257
 101203c:	10c7883a 	add	r3,r2,r3
 1012040:	188d4e17 	ldw	r2,13624(r3)
 1012044:	1000111e 	bne	r2,zero,101208c <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 1012048:	e0ffff17 	ldw	r3,-4(fp)
 101204c:	1805883a 	mov	r2,r3
 1012050:	1085883a 	add	r2,r2,r2
 1012054:	10c5883a 	add	r2,r2,r3
 1012058:	100490ba 	slli	r2,r2,2
 101205c:	e13ffd17 	ldw	r4,-12(fp)
 1012060:	00c04074 	movhi	r3,257
 1012064:	10c7883a 	add	r3,r2,r3
 1012068:	190d4e15 	stw	r4,13624(r3)
      if (i > alt_max_fd)
 101206c:	d0e00817 	ldw	r3,-32736(gp)
 1012070:	e0bfff17 	ldw	r2,-4(fp)
 1012074:	1880020e 	bge	r3,r2,1012080 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 1012078:	e0bfff17 	ldw	r2,-4(fp)
 101207c:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 1012080:	e0bfff17 	ldw	r2,-4(fp)
 1012084:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1012088:	00000706 	br	10120a8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 101208c:	e0bfff17 	ldw	r2,-4(fp)
 1012090:	10800044 	addi	r2,r2,1
 1012094:	e0bfff15 	stw	r2,-4(fp)
 1012098:	e0bfff17 	ldw	r2,-4(fp)
 101209c:	10800810 	cmplti	r2,r2,32
 10120a0:	103fe01e 	bne	r2,zero,1012024 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 10120a4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10120a8:	e0bffe17 	ldw	r2,-8(fp)
}
 10120ac:	e037883a 	mov	sp,fp
 10120b0:	df000017 	ldw	fp,0(sp)
 10120b4:	dec00104 	addi	sp,sp,4
 10120b8:	f800283a 	ret

010120bc <exit>:
 10120bc:	defffe04 	addi	sp,sp,-8
 10120c0:	000b883a 	mov	r5,zero
 10120c4:	dc000015 	stw	r16,0(sp)
 10120c8:	dfc00115 	stw	ra,4(sp)
 10120cc:	2021883a 	mov	r16,r4
 10120d0:	10121880 	call	1012188 <__call_exitprocs>
 10120d4:	00804074 	movhi	r2,257
 10120d8:	1111d417 	ldw	r4,18256(r2)
 10120dc:	20800f17 	ldw	r2,60(r4)
 10120e0:	10000126 	beq	r2,zero,10120e8 <exit+0x2c>
 10120e4:	103ee83a 	callr	r2
 10120e8:	8009883a 	mov	r4,r16
 10120ec:	100dba40 	call	100dba4 <_exit>

010120f0 <memcmp>:
 10120f0:	30800130 	cmpltui	r2,r6,4
 10120f4:	10000b1e 	bne	r2,zero,1012124 <memcmp+0x34>
 10120f8:	2144b03a 	or	r2,r4,r5
 10120fc:	108000cc 	andi	r2,r2,3
 1012100:	1000171e 	bne	r2,zero,1012160 <memcmp+0x70>
 1012104:	20c00017 	ldw	r3,0(r4)
 1012108:	28800017 	ldw	r2,0(r5)
 101210c:	1880141e 	bne	r3,r2,1012160 <memcmp+0x70>
 1012110:	31bfff04 	addi	r6,r6,-4
 1012114:	30800128 	cmpgeui	r2,r6,4
 1012118:	21000104 	addi	r4,r4,4
 101211c:	29400104 	addi	r5,r5,4
 1012120:	103ff81e 	bne	r2,zero,1012104 <memcmp+0x14>
 1012124:	30bfffc4 	addi	r2,r6,-1
 1012128:	30000b26 	beq	r6,zero,1012158 <memcmp+0x68>
 101212c:	11800044 	addi	r6,r2,1
 1012130:	298d883a 	add	r6,r5,r6
 1012134:	00000106 	br	101213c <memcmp+0x4c>
 1012138:	29800726 	beq	r5,r6,1012158 <memcmp+0x68>
 101213c:	20800003 	ldbu	r2,0(r4)
 1012140:	28c00003 	ldbu	r3,0(r5)
 1012144:	21000044 	addi	r4,r4,1
 1012148:	29400044 	addi	r5,r5,1
 101214c:	10fffa26 	beq	r2,r3,1012138 <memcmp+0x48>
 1012150:	10c5c83a 	sub	r2,r2,r3
 1012154:	f800283a 	ret
 1012158:	0005883a 	mov	r2,zero
 101215c:	f800283a 	ret
 1012160:	30bfffc4 	addi	r2,r6,-1
 1012164:	003ff106 	br	101212c <memcmp+0x3c>

01012168 <_putchar_r>:
 1012168:	21800217 	ldw	r6,8(r4)
 101216c:	10122a81 	jmpi	10122a8 <_putc_r>

01012170 <putchar>:
 1012170:	00804074 	movhi	r2,257
 1012174:	1091d517 	ldw	r2,18260(r2)
 1012178:	200b883a 	mov	r5,r4
 101217c:	11800217 	ldw	r6,8(r2)
 1012180:	1009883a 	mov	r4,r2
 1012184:	10122a81 	jmpi	10122a8 <_putc_r>

01012188 <__call_exitprocs>:
 1012188:	defff704 	addi	sp,sp,-36
 101218c:	00804074 	movhi	r2,257
 1012190:	dcc00315 	stw	r19,12(sp)
 1012194:	14d1d417 	ldw	r19,18256(r2)
 1012198:	dc800215 	stw	r18,8(sp)
 101219c:	dfc00815 	stw	ra,32(sp)
 10121a0:	9c805217 	ldw	r18,328(r19)
 10121a4:	ddc00715 	stw	r23,28(sp)
 10121a8:	dd800615 	stw	r22,24(sp)
 10121ac:	dd400515 	stw	r21,20(sp)
 10121b0:	dd000415 	stw	r20,16(sp)
 10121b4:	dc400115 	stw	r17,4(sp)
 10121b8:	dc000015 	stw	r16,0(sp)
 10121bc:	90001026 	beq	r18,zero,1012200 <__call_exitprocs+0x78>
 10121c0:	202b883a 	mov	r21,r4
 10121c4:	282d883a 	mov	r22,r5
 10121c8:	05000044 	movi	r20,1
 10121cc:	94000117 	ldw	r16,4(r18)
 10121d0:	847fffc4 	addi	r17,r16,-1
 10121d4:	88000a16 	blt	r17,zero,1012200 <__call_exitprocs+0x78>
 10121d8:	84000044 	addi	r16,r16,1
 10121dc:	802090ba 	slli	r16,r16,2
 10121e0:	9421883a 	add	r16,r18,r16
 10121e4:	b0001126 	beq	r22,zero,101222c <__call_exitprocs+0xa4>
 10121e8:	80804017 	ldw	r2,256(r16)
 10121ec:	15800f26 	beq	r2,r22,101222c <__call_exitprocs+0xa4>
 10121f0:	8c7fffc4 	addi	r17,r17,-1
 10121f4:	88bfffd8 	cmpnei	r2,r17,-1
 10121f8:	843fff04 	addi	r16,r16,-4
 10121fc:	103ff91e 	bne	r2,zero,10121e4 <__call_exitprocs+0x5c>
 1012200:	dfc00817 	ldw	ra,32(sp)
 1012204:	ddc00717 	ldw	r23,28(sp)
 1012208:	dd800617 	ldw	r22,24(sp)
 101220c:	dd400517 	ldw	r21,20(sp)
 1012210:	dd000417 	ldw	r20,16(sp)
 1012214:	dcc00317 	ldw	r19,12(sp)
 1012218:	dc800217 	ldw	r18,8(sp)
 101221c:	dc400117 	ldw	r17,4(sp)
 1012220:	dc000017 	ldw	r16,0(sp)
 1012224:	dec00904 	addi	sp,sp,36
 1012228:	f800283a 	ret
 101222c:	90800117 	ldw	r2,4(r18)
 1012230:	81800017 	ldw	r6,0(r16)
 1012234:	10bfffc4 	addi	r2,r2,-1
 1012238:	14401726 	beq	r2,r17,1012298 <__call_exitprocs+0x110>
 101223c:	80000015 	stw	zero,0(r16)
 1012240:	303feb26 	beq	r6,zero,10121f0 <__call_exitprocs+0x68>
 1012244:	a446983a 	sll	r3,r20,r17
 1012248:	90806217 	ldw	r2,392(r18)
 101224c:	95c00117 	ldw	r23,4(r18)
 1012250:	1884703a 	and	r2,r3,r2
 1012254:	1000081e 	bne	r2,zero,1012278 <__call_exitprocs+0xf0>
 1012258:	303ee83a 	callr	r6
 101225c:	90c00117 	ldw	r3,4(r18)
 1012260:	98805217 	ldw	r2,328(r19)
 1012264:	1dc0011e 	bne	r3,r23,101226c <__call_exitprocs+0xe4>
 1012268:	90bfe126 	beq	r18,r2,10121f0 <__call_exitprocs+0x68>
 101226c:	103fe426 	beq	r2,zero,1012200 <__call_exitprocs+0x78>
 1012270:	1025883a 	mov	r18,r2
 1012274:	003fd506 	br	10121cc <__call_exitprocs+0x44>
 1012278:	90806317 	ldw	r2,396(r18)
 101227c:	81002017 	ldw	r4,128(r16)
 1012280:	1886703a 	and	r3,r3,r2
 1012284:	1800061e 	bne	r3,zero,10122a0 <__call_exitprocs+0x118>
 1012288:	200b883a 	mov	r5,r4
 101228c:	a809883a 	mov	r4,r21
 1012290:	303ee83a 	callr	r6
 1012294:	003ff106 	br	101225c <__call_exitprocs+0xd4>
 1012298:	94400115 	stw	r17,4(r18)
 101229c:	003fe806 	br	1012240 <__call_exitprocs+0xb8>
 10122a0:	303ee83a 	callr	r6
 10122a4:	003fed06 	br	101225c <__call_exitprocs+0xd4>

010122a8 <_putc_r>:
 10122a8:	defffc04 	addi	sp,sp,-16
 10122ac:	dc400215 	stw	r17,8(sp)
 10122b0:	dfc00315 	stw	ra,12(sp)
 10122b4:	2023883a 	mov	r17,r4
 10122b8:	20000226 	beq	r4,zero,10122c4 <_putc_r+0x1c>
 10122bc:	20800e17 	ldw	r2,56(r4)
 10122c0:	10000e26 	beq	r2,zero,10122fc <_putc_r+0x54>
 10122c4:	30800217 	ldw	r2,8(r6)
 10122c8:	10bfffc4 	addi	r2,r2,-1
 10122cc:	30800215 	stw	r2,8(r6)
 10122d0:	10001316 	blt	r2,zero,1012320 <_putc_r+0x78>
 10122d4:	30800017 	ldw	r2,0(r6)
 10122d8:	11400005 	stb	r5,0(r2)
 10122dc:	30800017 	ldw	r2,0(r6)
 10122e0:	10c00044 	addi	r3,r2,1
 10122e4:	30c00015 	stw	r3,0(r6)
 10122e8:	10800003 	ldbu	r2,0(r2)
 10122ec:	dfc00317 	ldw	ra,12(sp)
 10122f0:	dc400217 	ldw	r17,8(sp)
 10122f4:	dec00404 	addi	sp,sp,16
 10122f8:	f800283a 	ret
 10122fc:	d9800115 	stw	r6,4(sp)
 1012300:	d9400015 	stw	r5,0(sp)
 1012304:	10052840 	call	1005284 <__sinit>
 1012308:	d9800117 	ldw	r6,4(sp)
 101230c:	d9400017 	ldw	r5,0(sp)
 1012310:	30800217 	ldw	r2,8(r6)
 1012314:	10bfffc4 	addi	r2,r2,-1
 1012318:	30800215 	stw	r2,8(r6)
 101231c:	103fed0e 	bge	r2,zero,10122d4 <_putc_r+0x2c>
 1012320:	30c00617 	ldw	r3,24(r6)
 1012324:	10c00e16 	blt	r2,r3,1012360 <_putc_r+0xb8>
 1012328:	30800017 	ldw	r2,0(r6)
 101232c:	11400005 	stb	r5,0(r2)
 1012330:	30c00017 	ldw	r3,0(r6)
 1012334:	18800003 	ldbu	r2,0(r3)
 1012338:	108002a0 	cmpeqi	r2,r2,10
 101233c:	1000071e 	bne	r2,zero,101235c <_putc_r+0xb4>
 1012340:	18800044 	addi	r2,r3,1
 1012344:	30800015 	stw	r2,0(r6)
 1012348:	18800003 	ldbu	r2,0(r3)
 101234c:	dfc00317 	ldw	ra,12(sp)
 1012350:	dc400217 	ldw	r17,8(sp)
 1012354:	dec00404 	addi	sp,sp,16
 1012358:	f800283a 	ret
 101235c:	01400284 	movi	r5,10
 1012360:	8809883a 	mov	r4,r17
 1012364:	dfc00317 	ldw	ra,12(sp)
 1012368:	dc400217 	ldw	r17,8(sp)
 101236c:	dec00404 	addi	sp,sp,16
 1012370:	100a0641 	jmpi	100a064 <__swbuf_r>

01012374 <putc>:
 1012374:	defffc04 	addi	sp,sp,-16
 1012378:	00804074 	movhi	r2,257
 101237c:	dc800215 	stw	r18,8(sp)
 1012380:	1491d517 	ldw	r18,18260(r2)
 1012384:	dc400115 	stw	r17,4(sp)
 1012388:	dfc00315 	stw	ra,12(sp)
 101238c:	2023883a 	mov	r17,r4
 1012390:	90000226 	beq	r18,zero,101239c <putc+0x28>
 1012394:	90800e17 	ldw	r2,56(r18)
 1012398:	10000f26 	beq	r2,zero,10123d8 <putc+0x64>
 101239c:	28800217 	ldw	r2,8(r5)
 10123a0:	10bfffc4 	addi	r2,r2,-1
 10123a4:	28800215 	stw	r2,8(r5)
 10123a8:	10001316 	blt	r2,zero,10123f8 <putc+0x84>
 10123ac:	28800017 	ldw	r2,0(r5)
 10123b0:	14400005 	stb	r17,0(r2)
 10123b4:	28800017 	ldw	r2,0(r5)
 10123b8:	10c00044 	addi	r3,r2,1
 10123bc:	28c00015 	stw	r3,0(r5)
 10123c0:	10800003 	ldbu	r2,0(r2)
 10123c4:	dfc00317 	ldw	ra,12(sp)
 10123c8:	dc800217 	ldw	r18,8(sp)
 10123cc:	dc400117 	ldw	r17,4(sp)
 10123d0:	dec00404 	addi	sp,sp,16
 10123d4:	f800283a 	ret
 10123d8:	9009883a 	mov	r4,r18
 10123dc:	d9400015 	stw	r5,0(sp)
 10123e0:	10052840 	call	1005284 <__sinit>
 10123e4:	d9400017 	ldw	r5,0(sp)
 10123e8:	28800217 	ldw	r2,8(r5)
 10123ec:	10bfffc4 	addi	r2,r2,-1
 10123f0:	28800215 	stw	r2,8(r5)
 10123f4:	103fed0e 	bge	r2,zero,10123ac <putc+0x38>
 10123f8:	28c00617 	ldw	r3,24(r5)
 10123fc:	10c00a16 	blt	r2,r3,1012428 <putc+0xb4>
 1012400:	28800017 	ldw	r2,0(r5)
 1012404:	14400005 	stb	r17,0(r2)
 1012408:	28c00017 	ldw	r3,0(r5)
 101240c:	18800003 	ldbu	r2,0(r3)
 1012410:	108002a0 	cmpeqi	r2,r2,10
 1012414:	10000c1e 	bne	r2,zero,1012448 <putc+0xd4>
 1012418:	18800044 	addi	r2,r3,1
 101241c:	28800015 	stw	r2,0(r5)
 1012420:	18800003 	ldbu	r2,0(r3)
 1012424:	003fe706 	br	10123c4 <putc+0x50>
 1012428:	280d883a 	mov	r6,r5
 101242c:	880b883a 	mov	r5,r17
 1012430:	9009883a 	mov	r4,r18
 1012434:	dfc00317 	ldw	ra,12(sp)
 1012438:	dc800217 	ldw	r18,8(sp)
 101243c:	dc400117 	ldw	r17,4(sp)
 1012440:	dec00404 	addi	sp,sp,16
 1012444:	100a0641 	jmpi	100a064 <__swbuf_r>
 1012448:	280d883a 	mov	r6,r5
 101244c:	01400284 	movi	r5,10
 1012450:	003ff706 	br	1012430 <putc+0xbc>
